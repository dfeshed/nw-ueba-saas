<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:hdp="http://www.springframework.org/schema/hadoop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/hadoop http://www.springframework.org/schema/hadoop/spring-hadoop.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">



	<bean id="placeholderConfig" class="fortscale.utils.spring.SpringPropertiesUtil">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="locations">
            <list>
                <value>classpath:META-INF/application-config.properties</value>
                <value>classpath:META-INF/entities-overriding.properties</value>
                <value>classpath:META-INF/messages.properties</value>
            </list>
        </property>
		<property name="order"
			value="#{T(org.springframework.core.Ordered).HIGHEST_PRECEDENCE}" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="localOverride" value="true" />
	</bean>


	<bean id="impalaWriterFactory" class="fortscale.services.impl.ImpalaWriterFactoryImpl" />

	<!-- group by tags service cache that uses memory based implementation -->
	<bean id="groupByTagsCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${computer.service.cache.max.items:0}" />
		<constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
	</bean>

	<!-- computer service cache that uses memory based implementation are injected here -->
	<bean id="computerServiceCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${computer.service.cache.max.items:10000}" />
		<constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:0}" />
		<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
	</bean>

	<!-- sensitiveMachine service cache that uses memory based implementation are injected here -->
	<bean id="sensitiveMachineCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${sensitive.machine.service.cache.max.items:10000}" />
		<constructor-arg name="timeToExpire" value="${sensitive.machine.service.cache.timeToExpireSec:0}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

	<!-- username service cache that uses memory based implementation are injected here -->
	<bean id="usernameToUserIdCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
		<constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

    <!-- username service cache that uses memory based implementation are injected here -->
    <bean id="sAMAccountNameToUsernameCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.util.ArrayList"/>
    </bean>

	<bean id="sAMAccountNamethatBlackList" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${samaccountname.service.blacklist.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${samaccountname.service.blacklist.timeToExpireSec:21600}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

	<!-- user service cache (only tags) that uses memory based implementation and send updates to kafka topics are injected here -->
	<bean id="userTagsCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
		<constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

	<bean id="adGroupsCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${adgroups.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${adgroups.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>

	<bean id="alertPrettifierService" class="fortscale.services.impl.AlertPrettifierServiceImpl" scope="singleton" />

	<bean id="computerService" class="fortscale.services.impl.ComputerServiceImpl" scope="singleton" />

	<bean id="ActiveDirectoryGroupsHelper" class="fortscale.services.impl.ActiveDirectoryGroupsHelper" scope="singleton" />

	<bean id="sensitiveMachineService" class="fortscale.services.computer.SensitiveMachineServiceImpl" scope="singleton" />

	<bean id="usernameService" class="fortscale.services.impl.UsernameService" scope="singleton" />

	<!--<bean id="userService" class="fortscale.services.impl.UserServiceImpl" scope="singleton"/>-->

	<bean id="samAccountNameService" class="fortscale.services.impl.SamAccountNameService" scope="singleton"/>

	<bean id="eventsFilter" class="fortscale.utils.FilteringPropertiesConfigurationHandler" scope="singleton">
		<constructor-arg name="mapFiltering" value="${evidence.events.filtering.map}" />
	</bean>

</beans>
