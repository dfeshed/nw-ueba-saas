{"version":3,"sources":["IAnalyst.js","IDataBucket.js","IAnalystDetailsResponse.js","INavItem.js","IActiveDirectoryConnector.js","ITagDefinition.js","ILogRepositoryConnector.js","filters.module.js","system-setup-loader-app.module.js","system-setup-app.module.js","values.module.js","layouts.module.js","components.module.js","services.module.js","fs-partial-strong.js","base_url.constant.js","log-repository-types.constant.js","routes.js","navigation-items.config.js","http-interceptors.config.js","assert.factory.js","auth-utils.js","navigation-utils.provider.js","distinguishedNameUtils.service.js","toastr.service.js","system-setup-navigation.component.js","navigation-item.component.js","system-setup-form-buttons.component.js","system-setup-form-header.component.js","system-setup-loader.component.js","system-setup-active-directory-connector.component.js","system-setup-active-directory-step-viewer.component.js","system-setup-tag-rule.component.js","system-setup-tags-rules-popup.component.js","system-setup-tag-search.js","system-setup-log-repository-connector.component.js","system-setup.controller.js","active-directory-setup.controller.js","setup-summary.controller.js","tags-setup.controller.js","log-repository-setup.controller.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;ACDA;AACA;ACDA;AACA;ACDA;AACA;ACDA;AACA;ACDA;AACA;ACDA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvjnvnxcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChefile":"system-setup-main.3.0.0.js","sourcesContent":["\n","\n","\n","\n","\n","\n","\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.filters', []);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupAppLoader;\n    (function (SystemSetupAppLoader) {\n        angular.module('Fortscale.SystemSetupAppLoader', [\n            'Fortscale.SystemSetupApp.config.values',\n            'Fortscale.SystemSetupApp.shared.services.authUtils'\n        ])\n            .run([\n            '$window',\n            '$location',\n            'authUtils',\n            '$log',\n            function ($window, $location, authUtils, $log) {\n                authUtils.getCurrentUser()\n                    .then(function (analyst) {\n                    // Bootstrap system-setup-app\n                    angular.bootstrap(document, ['Fortscale.SystemSetupApp']);\n                })\n                    .catch(function (err) {\n                    if (err.status === 401) {\n                        $window.location.href = \"signin.html?absRedirect=\" + encodeURIComponent($location.absUrl());\n                    }\n                    else {\n                        $log.error(err);\n                    }\n                });\n            }\n        ]);\n    })(SystemSetupAppLoader = Fortscale.SystemSetupAppLoader || (Fortscale.SystemSetupAppLoader = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        angular.module('Fortscale.SystemSetupApp', [\n            'Fortscale.SystemSetupApp.config.values',\n            'ngAnimate',\n            'ui.router',\n            'fsTemplates',\n            'Fortscale.shared.services.assert',\n            'Fortscale.shared.filters',\n            'Fortscale.SystemSetupApp.shared.services',\n            'Fortscale.SystemSetupApp.layouts',\n            'Fortscale.SystemSetupApp.shared.components'\n        ])\n            .run([\n            '$rootScope',\n            function ($rootScope) {\n                // Hide splash screen\n                $rootScope.hideLoader = true;\n                $rootScope.showMainView = true;\n            }\n        ]);\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var values;\n            (function (values) {\n                angular.module('Fortscale.SystemSetupApp.config.values', []);\n            })(values = shared.values || (shared.values = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            angular.module('Fortscale.SystemSetupApp.layouts', []);\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                angular.module('Fortscale.SystemSetupApp.shared.components', []);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var services;\n            (function (services) {\n                angular.module('Fortscale.SystemSetupApp.shared.services', [\n                    'Fortscale.SystemSetupApp.shared.services.authUtils',\n                    'Fortscale.SystemSetupApp.shared.services.navigationUtils',\n                    'Fortscale.SystemSetupApp.shared.services.distinguishedNameUtils',\n                    'Fortscale.shared.services.toastrService'\n                ]);\n            })(services = shared.services || (shared.services = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    /**\n     * Returns a filter\n     *\n     * @returns {function(any): number}\n     */\n    function fsPartialStrong($sce) {\n        /**\n         * This filter get text, and part of substring of this text,\n         * it returns html which emphasis the the sub text (if such given).\n         * Pay attention that angular process html only if you use it has ng-html-bind and not {{}}\n         *\n         *  prefixOnly - IF TRUE - mark only textToMakeStronger which is in the begining of the text\n         *  condition-optional. If false, return the original value\n         *\n         */\n        return function (val, textToMakeStronger, prefixOnly, allowBoldCondition) {\n            if (allowBoldCondition === false) {\n                return val;\n            }\n            //If no val or no textToMakeStronger return the value.\n            if (!textToMakeStronger || !val) {\n                return val;\n            }\n            var fullTextLower = val.toLowerCase();\n            var strongTextLower = textToMakeStronger.toLowerCase();\n            var startIndex = -1;\n            if (prefixOnly) {\n                startIndex = fullTextLower.startsWith(strongTextLower) ? 0 : -1;\n            }\n            else {\n                //Extract the start and end indexes of the part which should be emphasis\n                startIndex = fullTextLower.indexOf(strongTextLower);\n            }\n            if (startIndex === -1) {\n                return val;\n            }\n            var endIndex = startIndex + strongTextLower.length;\n            //Rebuild the string with the strong part\n            var beforeStrongPart = val.substr(0, startIndex);\n            var strongPart = val.substr(startIndex, strongTextLower.length);\n            var afterStrongPart = val.substring(endIndex);\n            var newHTMLUntrusted = beforeStrongPart + \"<span style='color: #024d89;font-weight: 700;'>\" + strongPart + \"</span>\" + afterStrongPart;\n            return $sce.trustAsHtml(newHTMLUntrusted);\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsPartialStrong', ['$sce', fsPartialStrong]);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var values;\n            (function (values) {\n                angular.module('Fortscale.SystemSetupApp.config.values')\n                    .constant('BASE_URL', '/fortscale-webapp/api')\n                    .constant('BASE_WEBSOCKET_URL', '/fortscale-webapp');\n            })(values = shared.values || (shared.values = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var values;\n            (function (values) {\n                angular.module('Fortscale.SystemSetupApp.config.values')\n                    .constant('LOG_REPOSITORY_TYPES', [\n                    {\n                        value: 'SPLUNK',\n                        name: 'Splunk'\n                    },\n                    {\n                        value: 'QRADAR',\n                        name: 'IBM QRadar'\n                    }\n                ]);\n            })(values = shared.values || (shared.values = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var config;\n        (function (config) {\n            angular.module('Fortscale.SystemSetupApp')\n                .config([\n                '$stateProvider',\n                '$urlRouterProvider',\n                function ($stateProvider, $urlRouterProvider) {\n                    //Configuration for UI-Router\n                    $urlRouterProvider.otherwise('/active-directory-setup');\n                    $stateProvider\n                        .state('systemSetup', {\n                        abstract: true,\n                        templateUrl: 'system-setup-app/layouts/system-setup/system-setup.view.html',\n                        controller: 'systemSetupController',\n                        controllerAs: 'systemSetupCtrl',\n                    })\n                        .state('systemSetup.activeDirectorySetup', {\n                        url: '/active-directory-setup',\n                        templateUrl: 'system-setup-app/layouts/active-directory-setup/active-directory-setup.view.html',\n                        controller: 'activeDirectorySetupController',\n                        controllerAs: 'activeDirectoryCtrl',\n                    })\n                        .state('systemSetup.logRepositorySetup', {\n                        url: '/log-repository-setup',\n                        templateUrl: 'system-setup-app/layouts/log-repository-setup/log-repository-setup.view.html',\n                        controller: 'logRepositorySetupController',\n                        controllerAs: 'logRepositoryCtrl',\n                    })\n                        .state('systemSetup.tagsSetup', {\n                        url: '/tags-setup',\n                        templateUrl: 'system-setup-app/layouts/tags-setup/tags-setup.view.html',\n                        controller: 'tagsSetupController',\n                        controllerAs: 'tagsCtrl',\n                    })\n                        .state('systemSetup.setupSummary', {\n                        url: '/setup-summary',\n                        templateUrl: 'system-setup-app/layouts/setup-summary/setup-summary.view.html',\n                        controller: 'setupSummaryController',\n                        controllerAs: 'setupSummaryCtrl',\n                    });\n                }]);\n        })(config = SystemSetupApp.config || (SystemSetupApp.config = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var config;\n        (function (config) {\n            angular.module('Fortscale.SystemSetupApp')\n                .config([\n                'navigationUtilsProvider',\n                function (navigationUtilsProvider) {\n                    navigationUtilsProvider\n                        .registerNavItem({\n                        state: 'systemSetup.activeDirectorySetup',\n                        nextState: 'systemSetup.logRepositorySetup',\n                        position: 0,\n                        title: 'Active Directory'\n                    })\n                        .registerNavItem({\n                        state: 'systemSetup.logRepositorySetup',\n                        nextState: 'systemSetup.tagsSetup',\n                        position: 1,\n                        title: 'Log Repository'\n                    })\n                        .registerNavItem({\n                        state: 'systemSetup.tagsSetup',\n                        nextState: 'systemSetup.setupSummary',\n                        position: 2,\n                        title: '<span>Tags</span>'\n                    });\n                }]);\n        })(config = SystemSetupApp.config || (SystemSetupApp.config = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var config;\n        (function (config) {\n            angular.module('Fortscale.SystemSetupApp')\n                .factory('httpAuthInterceptor', [\n                '$q', '$window', '$location',\n                function ($q, $window, $location) {\n                    return {\n                        responseError: function (rejection) {\n                            if (rejection.status === 401) {\n                                $window.location.href = \"signin.html?absRedirect=\" + encodeURIComponent($location.absUrl());\n                            }\n                            return $q.reject(rejection);\n                        }\n                    };\n                }\n            ])\n                .config([\n                '$httpProvider',\n                function (httpProvider) {\n                    httpProvider.interceptors.push('httpAuthInterceptor');\n                }\n            ]);\n        })(config = SystemSetupApp.config || (SystemSetupApp.config = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function assertFactory() {\n        /**\n         *\n         * @param {boolean | *} condition\n         * @param {string=} message\n         * @param {function=} ErrorType The object should be\n         */\n        function assert(condition, message, ErrorType) {\n            // Create an early return when condition is fulfilled to prevent execution of futile code.\n            if (condition) {\n                return;\n            }\n            // Set defaults\n            message = message || '';\n            var error;\n            // Verify error type is valid. If it's not, then Error type should be error\n            if (typeof ErrorType === 'function') {\n                // Create new error from Error type\n                error = new ErrorType(message);\n            }\n            // If ErrorType is not a function or (newly populated) error is not an instance of Error\n            // Then error should be new Error\n            if (!(error instanceof Error)) {\n                error = new Error(message);\n            }\n            throw error;\n        }\n        /**\n         * Validates that a variable is string and not an empty string\n         *\n         * @param {string} str\n         * @param {string} strName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         * @param {boolean=} canBeEmpty Defaults to false\n         */\n        assert.isString = function (str, strName, errMsg, isOptional, canBeEmpty) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            canBeEmpty = !!canBeEmpty;\n            if (!(str === undefined && isOptional)) {\n                assert(!_.isUndefined(str), errMsg + strName + ' must be provided.', ReferenceError);\n                assert(_.isString(str), errMsg + strName + ' must be a string.', TypeError);\n                assert(str !== '' || canBeEmpty, errMsg + strName + ' must not be an empty string.', RangeError);\n            }\n        };\n        /**\n         * Validates that a variable is string and not an empty string\n         *\n         * @param {number} num\n         * @param {string} numName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isNumber = function (num, numName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(num === undefined && isOptional)) {\n                assert(!_.isUndefined(num), errMsg + numName + ' must be provided.', ReferenceError);\n                assert(_.isNumber(num), errMsg + numName + ' must be a number.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is an array\n         *\n         * @param {string} arr\n         * @param {string} arrName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isArray = function (arr, arrName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(arr === undefined && isOptional)) {\n                assert(!_.isUndefined(arr), errMsg + arrName + ' must be provided.', ReferenceError);\n                assert(_.isArray(arr), errMsg + arrName + ' must be an array.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is a function\n         *\n         * @param {string} fn\n         * @param {string} fnName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isFunction = function (fn, fnName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(fn === undefined && isOptional)) {\n                assert(!_.isUndefined(fn), errMsg + fnName + ' must be provided.', ReferenceError);\n                assert(_.isFunction(fn), errMsg + fnName + ' must be a function.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is a function\n         *\n         * @param {string} obj\n         * @param {string} objName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isObject = function (obj, objName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(obj === undefined && isOptional)) {\n                assert(!_.isUndefined(obj), errMsg + objName + ' must be provided.', ReferenceError);\n                assert(_.isObject(obj), errMsg + objName + ' must be an object.', TypeError);\n            }\n        };\n        return assert;\n    }\n    angular.module('Fortscale.shared.services.assert', [])\n        .factory('assert', assertFactory)\n        .constant('assertConstant', assertFactory());\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var services;\n            (function (services) {\n                var authUtils;\n                (function (authUtils) {\n                    var AuthUtilsService = (function () {\n                        function AuthUtilsService($http, BASE_URL) {\n                            this.$http = $http;\n                            this.BASE_URL = BASE_URL;\n                        }\n                        AuthUtilsService.prototype.getCurrentUser = function () {\n                            return this.$http.get(this.BASE_URL + \"/analyst/me/details\", { cache: true })\n                                .then(function (res) {\n                                return res.data.data[0];\n                            });\n                        };\n                        AuthUtilsService.$inject = ['$http', 'BASE_URL'];\n                        return AuthUtilsService;\n                    }());\n                    angular.module('Fortscale.SystemSetupApp.shared.services.authUtils', [])\n                        .service('authUtils', AuthUtilsService);\n                })(authUtils = services.authUtils || (services.authUtils = {}));\n            })(services = shared.services || (shared.services = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var services;\n            (function (services) {\n                var navigationUtils;\n                (function (navigationUtils) {\n                    /**\n                     * NavigationUtilsService class\n                     */\n                    var NavigationUtilsService = (function () {\n                        function NavigationUtilsService(_navItems, assert) {\n                            this._navItems = _navItems;\n                            this.assert = assert;\n                            this._ERR_MSG = 'NavigationUtilsService:';\n                        }\n                        /**\n                         * Return the index of a nav item by state name.\n                         * @param state\n                         * @returns {number}\n                         */\n                        NavigationUtilsService.prototype.getIndexByStateName = function (state) {\n                            // Validate arguments\n                            this.assert.isString(state, 'state', this._ERR_MSG + \" getCurrentIndex: \");\n                            // Get sorted nav items\n                            var navItems = this.getNavItems();\n                            // Find index of current nav item (and validate that a nav item was found)\n                            return _.findIndex(navItems, { state: state });\n                        };\n                        /**\n                         * Return nav items length\n                         * @returns {number}\n                         */\n                        NavigationUtilsService.prototype.getNumberOfItems = function () {\n                            return this._navItems.length;\n                        };\n                        /**\n                         * Returns (cloned) navItems list ordered by position (ascending).\n                         * @returns {INavItem[]}\n                         */\n                        NavigationUtilsService.prototype.getNavItems = function () {\n                            var navItem = _.cloneDeep(this._navItems);\n                            return _.orderBy(navItem, ['position'], ['asc']);\n                        };\n                        /**\n                         * Returns nav item by state\n                         * @param state\n                         * @returns {T}\n                         */\n                        NavigationUtilsService.prototype.getNavItemByState = function (state) {\n                            return _.cloneDeep(_.find(this._navItems, { state: state }));\n                        };\n                        /**\n                         *\n                         * Returns the next state name from the nav item that has the desired state\n                         * @param {string} state\n                         * @returns {string}\n                         */\n                        NavigationUtilsService.prototype.getNextState = function (state) {\n                            // validation\n                            this.assert.isString(state, 'state', this._ERR_MSG + \" getNextState: \");\n                            var navItem = _.find(this._navItems, { state: state });\n                            if (!navItem) {\n                                return null;\n                            }\n                            return navItem.nextState;\n                        };\n                        /**\n                         * Returns true if the next state is positioned after the current state.\n                         *\n                         * @param {string} currentState\n                         * @param {string} nextState\n                         * @returns {boolean}\n                         */\n                        NavigationUtilsService.prototype.isNavigationForward = function (currentState, nextState) {\n                            // Validate arguments\n                            this.assert.isString(currentState, 'currentState', this._ERR_MSG + \" isNavigationForward: \");\n                            this.assert.isString(nextState, 'nextState', this._ERR_MSG + \" isNavigationForward: \");\n                            // Get sorted nav items\n                            var navItems = this.getNavItems();\n                            // Find index of current nav item (and validate that a nav item was found)\n                            var currentNavIndex = _.findIndex(navItems, { state: currentState });\n                            this.assert(currentNavIndex !== -1, this._ERR_MSG + \" isNavigationForward: currentState argument - does not correlate to any navigation item.\", RangeError);\n                            // Find index of next nav item (and validate that a nav item was found)\n                            var nextNavIndex = _.findIndex(navItems, { state: nextState });\n                            this.assert(nextNavIndex !== -1, this._ERR_MSG + \" isNavigationForward: nextState argument - does not correlate to any navigation item.\", RangeError);\n                            // Return if next nav item is after the the current nav item\n                            return (nextNavIndex > currentNavIndex);\n                        };\n                        return NavigationUtilsService;\n                    }());\n                    /**\n                     * NavigationUtilsProvider class\n                     */\n                    var NavigationUtilsProvider = (function () {\n                        function NavigationUtilsProvider(assert) {\n                            var _this = this;\n                            this.assert = assert;\n                            this._ERR_MSG = 'NavigationUtilsProvider:';\n                            this.$get = [\n                                'assert',\n                                function (assert) {\n                                    return new NavigationUtilsService(_this._navItems, assert);\n                                }\n                            ];\n                            this._navItems = [];\n                        }\n                        /**\n                         * Validate a navItemConfig\n                         * @param {INavItem} navItemConfig\n                         * @private\n                         */\n                        NavigationUtilsProvider.prototype._validateNavItemConfig = function (navItemConfig) {\n                            this.assert.isObject(navItemConfig, 'navItemConfig', this._ERR_MSG + \" \");\n                            this.assert.isString(navItemConfig.state, 'navItemConfig.state', this._ERR_MSG + \" \");\n                            this.assert(!(_.find(this._navItems, { state: navItemConfig.state })), this._ERR_MSG + \" Trying to add a navigation item with a state that has already been registered. state property must be unique.\", RangeError);\n                            this.assert.isString(navItemConfig.nextState, 'navItemConfig.nextState', this._ERR_MSG + \" \", true);\n                            this.assert.isNumber(navItemConfig.position, 'navItemConfig.position', this._ERR_MSG + \" \", true);\n                            this.assert.isString(navItemConfig.title, 'navItemConfig.title', this._ERR_MSG + \" \");\n                        };\n                        /**\n                         * Registers a new navigation item\n                         * @param navItemConfig\n                         * @returns {Fortscale.SystemSetupApp.shared.services.navigationUtils.NavigationUtilsProvider}\n                         */\n                        NavigationUtilsProvider.prototype.registerNavItem = function (navItemConfig) {\n                            this._validateNavItemConfig(navItemConfig);\n                            var localNavItem = _.cloneDeep(navItemConfig);\n                            // Automatically set position if one was not provided\n                            if (_.isUndefined(localNavItem.position)) {\n                                // The next position should be the highest current position plus one.\n                                var maxNavItem = _.maxBy(this._navItems, 'position');\n                                localNavItem.position = maxNavItem ? maxNavItem.position + 1 : 0;\n                            }\n                            // Set null as a default nextState\n                            if (_.isUndefined(localNavItem.nextState)) {\n                                localNavItem.nextState = null;\n                            }\n                            this._navItems.push(localNavItem);\n                            return this;\n                        };\n                        NavigationUtilsProvider.$inject = ['assertConstant'];\n                        return NavigationUtilsProvider;\n                    }());\n                    angular.module('Fortscale.SystemSetupApp.shared.services.navigationUtils', [])\n                        .provider('navigationUtils', NavigationUtilsProvider);\n                })(navigationUtils = services.navigationUtils || (services.navigationUtils = {}));\n            })(services = shared.services || (shared.services = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var services;\n            (function (services) {\n                var distinguishedNameUtils;\n                (function (distinguishedNameUtils) {\n                    var DistinguishedNameUtilsService = (function () {\n                        function DistinguishedNameUtilsService() {\n                            this._DN_DELIMITER = ';';\n                        }\n                        /**\n                         * Takes a string of delimited (with ';') dnStrings, splits them, trims them, and returns a list of dn strings.\n                         * @param dnDelimited\n                         * @returns {string|LoDashExplicitWrapper<string>[]|boolean[]}\n                         * @private\n                         */\n                        DistinguishedNameUtilsService.prototype._getTrimmedDnStringsList = function (dnDelimited) {\n                            // get a list of trimmed dn strings.\n                            // return _.map(dnDelimited.split(this._DN_DELIMITER), dnStr => dnStr.trim());\n                            var dns = _.map(dnDelimited.split(this._DN_DELIMITER), function (dnStr) { return dnStr.trim(); });\n                            return _.map(dns, function (dn) {\n                                var nodes = dn.split(',');\n                                return _.map(nodes, function (node) { return node.trim(); }).join(',');\n                            });\n                        };\n                        /**\n                         * Validates a distinguished-name\n                         * @param dnStr\n                         * @returns {boolean}\n                         */\n                        DistinguishedNameUtilsService.prototype.validateDistinguishedName = function (dnStr) {\n                            // Cross my fingers - this might work :)\n                            // Its supposed to be one of the dn prefixes, then a '=', then things that are not a comma, and repeat\n                            var nodesTest = /^(,?((cn|l|st|o|ou|c|street|dc|uid)=)[^,]+)+$/i;\n                            return nodesTest.test(dnStr) && /^[^,]/.test(dnStr);\n                        };\n                        /**\n                         * Validates Distinguished Name Organization\n                         * @param dnStr\n                         * @returns {boolean}\n                         */\n                        DistinguishedNameUtilsService.prototype.validateOrganization = function (dnStr) {\n                            // Check that it starts with ou=\n                            var primaryTest = /^ou=/i;\n                            if (!primaryTest.test(dnStr)) {\n                                return false;\n                            }\n                            // validate that it is a valid distinguished name\n                            return this.validateDistinguishedName(dnStr);\n                        };\n                        /**\n                         * Validates Distinguished Name Common Name\n                         * @param dnStr\n                         * @returns {boolean}\n                         */\n                        DistinguishedNameUtilsService.prototype.validateCommonName = function (dnStr) {\n                            // Check that it starts with ou=\n                            var primaryTest = /^cn=/i;\n                            if (!primaryTest.test(dnStr)) {\n                                return false;\n                            }\n                            // validate that it is a valid distinguished name\n                            return this.validateDistinguishedName(dnStr);\n                        };\n                        /**\n                         * Validates a ';' delimited list of Distinguished Names Organization\n                         * @param dnDelimited\n                         * @returns {boolean}\n                         */\n                        DistinguishedNameUtilsService.prototype.validateOrganizations = function (dnDelimited) {\n                            var _this = this;\n                            // get a list of trimmed dn strings.\n                            var dnStrs = this._getTrimmedDnStringsList(dnDelimited);\n                            // Check that every dn string validates\n                            return _.every(dnStrs, function (dnStr) { return _this.validateOrganization(dnStr); });\n                        };\n                        /**\n                         * Validates a ';' delimited list of Distinguished Names Common Names\n                         * @param dnDelimited\n                         * @returns {boolean}\n                         */\n                        DistinguishedNameUtilsService.prototype.validateCommonNames = function (dnDelimited) {\n                            var _this = this;\n                            // get a list of trimmed dn strings.\n                            var dnStrs = this._getTrimmedDnStringsList(dnDelimited);\n                            // Check that every dn string validates\n                            return _.every(dnStrs, function (dnStr) { return _this.validateCommonName(dnStr); });\n                        };\n                        /**\n                         * Trims all dns and dn nodes and return a string\n                         * @param dnDelimited\n                         * @returns {string[]|boolean[]}\n                         */\n                        DistinguishedNameUtilsService.prototype.trimDistinguishedNames = function (dnDelimited) {\n                            return this._getTrimmedDnStringsList(dnDelimited).join(this._DN_DELIMITER);\n                        };\n                        return DistinguishedNameUtilsService;\n                    }());\n                    angular.module('Fortscale.SystemSetupApp.shared.services.distinguishedNameUtils', [])\n                        .service('distinguishedNameUtils', DistinguishedNameUtilsService);\n                })(distinguishedNameUtils = services.distinguishedNameUtils || (services.distinguishedNameUtils = {}));\n            })(services = shared.services || (shared.services = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * This is an angular-typescript wrapper on top of toastr library.\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var toastrService;\n            (function (toastrService) {\n                'use strict';\n                var ToastrService = (function () {\n                    function ToastrService() {\n                        // Set timeOut and extendedTimeOut to 0 to make it sticky\n                        toastr.options = _.merge({}, toastr.options, {\n                            toastClass: 'fs-toast',\n                            showMethod: 'fadeIn',\n                            hideMethod: 'fadeOut',\n                            hideDuration: 500,\n                            positionClass: 'toast-top-center',\n                            closeButton: true,\n                            timeOut: 3000,\n                            iconClasses: {\n                                error: 'toast-error',\n                                info: 'toast-info',\n                                success: 'toast-success',\n                                warning: 'toast-warning'\n                            }\n                        });\n                    }\n                    Object.defineProperty(ToastrService.prototype, \"options\", {\n                        get: function () {\n                            return toastr.options;\n                        },\n                        set: function (options) {\n                            toastr.options = options;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(ToastrService.prototype, \"version\", {\n                        get: function () {\n                            return toastr.version;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    ToastrService.prototype.subscribe = function (callback) {\n                        toastr.subscribe(callback);\n                    };\n                    ToastrService.prototype.clear = function ($toastElement, clearOptions) {\n                        toastr.clear($toastElement, clearOptions);\n                    };\n                    ToastrService.prototype.remove = function ($toastElement) {\n                        toastr.remove($toastElement);\n                    };\n                    ToastrService.prototype.getContainer = function (options, create) {\n                        return toastr.getContainer(options, create);\n                    };\n                    ToastrService.prototype.error = function (message, title, optionsOverride) {\n                        return toastr.error(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.info = function (message, title, optionsOverride) {\n                        return toastr.info(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.success = function (message, title, optionsOverride) {\n                        return toastr.success(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.warning = function (message, title, optionsOverride) {\n                        return toastr.warning(message, title, optionsOverride);\n                    };\n                    ToastrService.$inject = [];\n                    return ToastrService;\n                }());\n                angular.module('Fortscale.shared.services.toastrService', [])\n                    .service('toastrService', ToastrService);\n            })(toastrService = services.toastrService || (services.toastrService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n/**\n *\n * These are the options default values:\n *\n{\n    tapToDismiss: true,\n        toastClass: 'toast',\n    containerId: 'toast-container',\n    debug: false,\n\n    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n    showDuration: 300,\n    showEasing: 'swing', //swing and linear are built into jQuery\n    onShown: undefined,\n    hideMethod: 'fadeOut',\n    hideDuration: 1000,\n    hideEasing: 'swing',\n    onHidden: undefined,\n    closeMethod: false,\n    closeDuration: false,\n    closeEasing: false,\n\n    extendedTimeOut: 1000,\n    iconClasses: {\n    error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning'\n},\n    iconClass: 'toast-info',\n        positionClass: 'toast-top-right',\n    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    escapeHtml: false,\n    target: 'body',\n    closeHtml: '<button type=\"button\">&times;</button>',\n    newestOnTop: true,\n    preventDuplicates: false,\n    progressBar: false\n}\n **/\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupNavigationController = (function () {\n                    function SystemSetupNavigationController($scope, $element, $window, navigationUtils) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$window = $window;\n                        this.navigationUtils = navigationUtils;\n                        this._NAVIGATION_CONTAINER_SELECTOR = '.navigation-container';\n                        this._CSS_VAR_ROW_DIM_NAME = '--row-dim';\n                        this.staticNavItem = {\n                            state: 'systemSetup.setupSummary',\n                            nextState: null,\n                            title: 'Setup Summary',\n                            fontAwesome: 'fa-list-ul',\n                            position: null\n                        };\n                    }\n                    /**\n                     * Sets the dim of the css variable to be used for the size of the icon.\n                     * @private\n                     */\n                    SystemSetupNavigationController.prototype._setDims = function () {\n                        var _this = this;\n                        var navigationContainerEl = this.$element.find(this._NAVIGATION_CONTAINER_SELECTOR);\n                        this.$scope.$applyAsync(function () {\n                            var height = navigationContainerEl.height() / 8;\n                            height = height > 100 ? 100 : height;\n                            navigationContainerEl[0].style.setProperty(_this._CSS_VAR_ROW_DIM_NAME, height + \"px\");\n                            navigationContainerEl[0].style.opacity = '1';\n                        });\n                    };\n                    /**\n                     * Makes sure the css variable is updated if the window is resized.\n                     * @private\n                     */\n                    SystemSetupNavigationController.prototype._initResizeWatch = function () {\n                        var ctrl = this;\n                        var resizeHandler = function () {\n                            ctrl._setDims();\n                        };\n                        // Add listener\n                        ctrl.$window.addEventListener('resize', resizeHandler, false);\n                        // Cleanup listener\n                        ctrl.$scope.$on('$destroy', function () {\n                            ctrl.$window.removeEventListener('resize', resizeHandler, false);\n                        });\n                    };\n                    SystemSetupNavigationController.prototype._getNavItems = function () {\n                        this.navItems = this.navigationUtils.getNavItems();\n                    };\n                    SystemSetupNavigationController.prototype.transitionHandler = function ($event, navItem) {\n                        $event.preventDefault();\n                        this.onTransition({ navItem: navItem });\n                    };\n                    SystemSetupNavigationController.prototype.$onInit = function () {\n                        this._setDims();\n                        this._initResizeWatch();\n                        this._getNavItems();\n                    };\n                    SystemSetupNavigationController.$inject = ['$scope', '$element', '$window', 'navigationUtils'];\n                    return SystemSetupNavigationController;\n                }());\n                var systemSetupNavigationComponent = {\n                    controller: SystemSetupNavigationController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-navigation/system-setup-navigation.component.html',\n                    bindings: {\n                        onTransition: '&'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupNavigation', systemSetupNavigationComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var NavigationItemController = (function () {\n                    function NavigationItemController($scope, $element, $window, $sce, $timeout) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$window = $window;\n                        this.$sce = $sce;\n                        this.$timeout = $timeout;\n                    }\n                    /**\n                     * When _navItem is provided, it is cloned, stored, and unwatched.\n                     * @private\n                     */\n                    NavigationItemController.prototype._initNavItemWatch = function () {\n                        var _this = this;\n                        var unWatchFn = this.$scope.$watch(function () { return _this._navItem; }, function (navItem) {\n                            if (navItem) {\n                                // Clone, store, and unwatch\n                                _this.navItem = _.cloneDeep(navItem);\n                                _this.title = _this.$sce.trustAsHtml(_this.navItem.title);\n                                unWatchFn();\n                            }\n                        });\n                    };\n                    NavigationItemController.prototype.setHover = function (state) {\n                        if (state) {\n                            this.$element.addClass('hovered');\n                        }\n                        else {\n                            this.$element.removeClass('hovered');\n                        }\n                    };\n                    NavigationItemController.prototype._setElementIn = function () {\n                        var _this = this;\n                        this._navItemDelay = (this._navItemDelay || 200) + '';\n                        this.$timeout(function () {\n                            _this.$element.addClass('nav-item-enter');\n                        }, parseInt(this._navItemDelay, 10));\n                    };\n                    NavigationItemController.prototype.$onInit = function () {\n                        this._initNavItemWatch();\n                        this._setElementIn();\n                    };\n                    NavigationItemController.$inject = ['$scope', '$element', '$window', '$sce', '$timeout'];\n                    return NavigationItemController;\n                }());\n                var navigationItemComponent = {\n                    controller: NavigationItemController,\n                    templateUrl: 'system-setup-app/shared/components/navigation-item/navigation-item.component.html',\n                    bindings: {\n                        _navItem: '<navItem',\n                        _navItemDelay: '@navItemDelay',\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('navigationItem', navigationItemComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupFormButtonsController = (function () {\n                    function SystemSetupFormButtonsController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    SystemSetupFormButtonsController.$inject = ['$scope', '$element'];\n                    return SystemSetupFormButtonsController;\n                }());\n                var systemSetupFormButtonsComponent = {\n                    controller: SystemSetupFormButtonsController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-form-buttons/system-setup-form-buttons.component.html',\n                    bindings: {\n                        onSave: '&',\n                        onSaveAndContinue: '&',\n                        disableButtons: '<'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupFormButtons', systemSetupFormButtonsComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupFormHeaderController = (function () {\n                    function SystemSetupFormHeaderController($scope, $element, $sce, $state, navigationUtils) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$sce = $sce;\n                        this.$state = $state;\n                        this.navigationUtils = navigationUtils;\n                    }\n                    SystemSetupFormHeaderController.prototype.$onInit = function () {\n                        if (this._description) {\n                            this.description = this.$sce.trustAsHtml(this._description);\n                        }\n                        this.currentStepIndex = this.navigationUtils.getIndexByStateName(this.$state.current.name) + 1;\n                        this.numberOfNavItems = this.navigationUtils.getNumberOfItems();\n                    };\n                    SystemSetupFormHeaderController.$inject = ['$scope', '$element', '$sce', '$state', 'navigationUtils'];\n                    return SystemSetupFormHeaderController;\n                }());\n                var systemSetupFormHeaderComponent = {\n                    controller: SystemSetupFormHeaderController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-form-header/system-setup-form-header.component.html',\n                    bindings: {\n                        _description: '@description'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupFormHeader', systemSetupFormHeaderComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupLoaderController = (function () {\n                    function SystemSetupLoaderController() {\n                    }\n                    SystemSetupLoaderController.$inject = [];\n                    return SystemSetupLoaderController;\n                }());\n                var systemSetupLoaderComponent = {\n                    controller: SystemSetupLoaderController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-loader/system-setup-loader.component.html',\n                    bindings: {\n                        showLoader: '<'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupLoader', systemSetupLoaderComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupActiveDirectoryConnectorController = (function () {\n                    function SystemSetupActiveDirectoryConnectorController($scope, $element, $http, BASE_URL) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this._DCS_MODEL_NAME = 'models_dcs';\n                        this._DCS_SINGLE_INPUT_MODEL_NAME = 'dcsSingleInput';\n                        this.showPassword = false;\n                        this.connectionTestResults = null;\n                    }\n                    /**\n                     * Toggles 'Show Password'\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.toggleShowPassword = function () {\n                        this.showPassword = !this.showPassword;\n                    };\n                    /**\n                     * Adds a connection string to dcs list\n                     *\n                     * @param {INgModelController} dcsModel\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.addConnectionString = function (dcsModel) {\n                        if (this.dcsSingleInput === '' || this.dcsSingleInput === null || this.dcsSingleInput === undefined) {\n                            return;\n                        }\n                        dcsModel.$viewValue.push(this.dcsSingleInput);\n                        dcsModel.$setViewValue(_.cloneDeep(dcsModel.$viewValue));\n                        dcsModel.$setDirty();\n                        dcsModel.$setTouched();\n                        this.dcsSingleInput = '';\n                    };\n                    /**\n                     * Removes connection string from dcs list\n                     *\n                     * @param {INgModelController} dcsModel\n                     * @param {string} connectionString\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.removeConnectionString = function (dcsModel, connectionString) {\n                        var dcsList = _.filter(dcsModel.$viewValue, function (cs) { return cs !== connectionString; });\n                        dcsModel.$setViewValue(dcsList);\n                        dcsModel.$setDirty();\n                        dcsModel.$setTouched();\n                    };\n                    /**\n                     * Resets the connector to its initial state\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.resetConnector = function () {\n                        this.connector = _.cloneDeep(this._connector);\n                        _.each(this.formCtrl, function (formCtrlProp, propName) {\n                            if (/^models_/.test(propName)) {\n                                formCtrlProp.$setPristine();\n                                formCtrlProp.$setUntouched();\n                            }\n                        });\n                        this.formCtrl.$setPristine();\n                        this.formCtrl.$setUntouched();\n                        this._setConnectionValidity();\n                    };\n                    SystemSetupActiveDirectoryConnectorController.prototype.isRemoveAllowed = function () {\n                        return this.numberOfConnectors > 1;\n                    };\n                    /**\n                     * Removes the current connector\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.removeConnector = function () {\n                        if (this.isRemoveAllowed()) {\n                            this.formCtrl.$setDirty();\n                            this.connector['removed'] = true;\n                            this.onRemoveConnector();\n                        }\n                    };\n                    /**\n                     * Tests the connector. Sends params to the server and processes the response. If test fails, the form is invalid.\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.testConnector = function ($event) {\n                        var _this = this;\n                        if ($event.currentTarget.attributes['disabled'] && $event.currentTarget.attributes['disabled'].value === 'disabled') {\n                            return;\n                        }\n                        // Starts loader\n                        this.setLoadingState({ state: true });\n                        // Get connector value\n                        var value = this.getValue();\n                        // Sets encrypted_password param and remove from connector object\n                        var params = {};\n                        if (value.encryptedPassword) {\n                            delete value.encryptedPassword;\n                            params.encrypted_password = true;\n                        }\n                        else {\n                            params.encrypted_password = false;\n                        }\n                        // Perform test and populate connectionTestResults\n                        this.$http.post(this.BASE_URL + '/active_directory/test', value, {\n                            params: params, transformResponse: function (message) { return message; }\n                        })\n                            .then(function (res) {\n                            if (typeof res.data === 'string') {\n                                res.data = JSON.parse(res.data);\n                            }\n                            if (res.data.authenticationTestResult.result) {\n                                _this.connectionTestResults = {\n                                    status: 'success',\n                                    message: 'Connection test successful.'\n                                };\n                            }\n                            else {\n                                _this.connectionTestResults = {\n                                    status: 'error',\n                                    message: res.data.authenticationTestResult.reason\n                                };\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.connectionTestResults = {\n                                status: 'error',\n                                message: err.data\n                            };\n                        })\n                            .finally(function () {\n                            // Sets form validity (via connectionTest ngModel)\n                            _this._setConnectionValidity();\n                            // Turn off loader\n                            _this.setLoadingState({ state: false });\n                        });\n                    };\n                    /**\n                     * Returns the value of the corrent connector\n                     * @returns {IActiveDirectoryConnector}\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype.getValue = function () {\n                        var connector = _.cloneDeep(this.connector);\n                        // Raise flag encryptedPassword when password has not changed. If new-password and old-password are\n                        // the same it would mean that the password was received from the server and therefor is encrypted\n                        // (or its empty in which case the field would be invalid)\n                        if (this.connector.domainPassword === this._connector.domainPassword) {\n                            connector.encryptedPassword = true;\n                        }\n                        return connector;\n                    };\n                    /**\n                     * Initiates connector watch. Once received connector is cloned and placed on 'connector'.\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._initConnectorWatch = function () {\n                        var _this = this;\n                        var unwatch = this.$scope.$watch(function () { return _this._connector; }, function (connector) {\n                            if (connector) {\n                                _this.connector = _.cloneDeep(connector);\n                                unwatch();\n                                _this.$scope.$applyAsync(function () {\n                                    // Find the form controller\n                                    _this._setFormCtrl();\n                                    // Remove unwanted controller\n                                    _this._removeDcsSingleInputFromForm();\n                                    // Add validation to\n                                    _this._addDcsModelValidation();\n                                    _this._AddConnectionTestValidation();\n                                    // Register the 'getValue' function\n                                    _this.registerConnector({ getValueFn: _this.getValue.bind(_this) });\n                                });\n                            }\n                        });\n                    };\n                    /**\n                     * Finds the form controller and places it on the instance\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._setFormCtrl = function () {\n                        this.formCtrl = this.$element.find('[ng-form]').controller('form');\n                    };\n                    /**\n                     * This ngModel is used internally and therefor should not be registered in the form\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._removeDcsSingleInputFromForm = function () {\n                        this.formCtrl.$removeControl(this.formCtrl[this._DCS_SINGLE_INPUT_MODEL_NAME]);\n                    };\n                    /**\n                     * Adds DCS validation (must be a list and have length)\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._addDcsModelValidation = function () {\n                        var _this = this;\n                        var dcsNgModel = (this.formCtrl[this._DCS_MODEL_NAME]);\n                        dcsNgModel.$validators['required'] = function (modelValue, viewValue) {\n                            return _this._isDcsModelRequiredValid(viewValue);\n                        };\n                        dcsNgModel.$setValidity('required', this._isDcsModelRequiredValid(dcsNgModel.$viewValue));\n                    };\n                    SystemSetupActiveDirectoryConnectorController.prototype._isDcsModelRequiredValid = function (viewValue) {\n                        return !!(viewValue && viewValue.length);\n                        ;\n                    };\n                    /**\n                     * Checks id the form is valid with relations to the test.\n                     * Heuristics: If original connector and form connector are equal the its valid. If connectionTestResults is success then its valid.\n                     * @returns {boolean}\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._isFormTestedValid = function () {\n                        var formConnectionTested = !!(this.connectionTestResults && this.connectionTestResults.status === 'success');\n                        return this.connectorsEqual || formConnectionTested;\n                    };\n                    /**\n                     * Sets connection validity to the connectionTest ngModel (which will affect form validity)\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._setConnectionValidity = function () {\n                        var connectionTestNgModel = (this.formCtrl['connectionTest']);\n                        connectionTestNgModel.$setValidity('connectionTest', this._isFormTestedValid());\n                    };\n                    SystemSetupActiveDirectoryConnectorController.prototype._setConnectorsAreEqual = function () {\n                        this.connectorsEqual = _.isEqual(this.connector, this._connector);\n                    };\n                    /**\n                     * Adds watcher on connector parameters. When changed, _setConnectionValidity is invoked.\n                     * @private\n                     */\n                    SystemSetupActiveDirectoryConnectorController.prototype._AddConnectionTestValidation = function () {\n                        var _this = this;\n                        this.$scope.$watchGroup([\n                            function () { return _this.connector.dcs; },\n                            function () { return _this.connector.domainBaseSearch; },\n                            function () { return _this.connector.domainPassword; },\n                            function () { return _this.connector.domainUser; },\n                        ], function (newVal, oldVal) {\n                            if (newVal !== oldVal) {\n                                // Remove last test result if change has occurred\n                                if (_this.connectionTestResults) {\n                                    _this.connectionTestResults = null;\n                                }\n                            }\n                            _this._setConnectorsAreEqual();\n                            _this._setConnectionValidity();\n                        });\n                    };\n                    SystemSetupActiveDirectoryConnectorController.prototype.$onInit = function () {\n                        this._initConnectorWatch();\n                    };\n                    SystemSetupActiveDirectoryConnectorController.$inject = ['$scope', '$element', '$http', 'BASE_URL'];\n                    return SystemSetupActiveDirectoryConnectorController;\n                }());\n                var systemSetupActiveDirectoryConnectorComponent = {\n                    controller: SystemSetupActiveDirectoryConnectorController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-active-directory-connector/system-setup-active-directory-connector.component.html',\n                    bindings: {\n                        _connector: '<connector',\n                        connectorIndex: '<',\n                        numberOfConnectors: '<',\n                        onRemoveConnector: '&',\n                        registerConnector: '&',\n                        setLoadingState: '&'\n                    },\n                    require: {\n                        parentFormCtrl: '^form'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupActiveDirectoryConnector', systemSetupActiveDirectoryConnectorComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupActiveDirectoryStepViewerController = (function () {\n                    function SystemSetupActiveDirectoryStepViewerController($scope, $element, $http, $timeout) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.$timeout = $timeout;\n                    }\n                    SystemSetupActiveDirectoryStepViewerController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.fetchCompleted = false;\n                        this.etlCompleted = false;\n                        this.$scope.$watch(function () { return _this.stepData.etlCompletedPercentage; }, function () {\n                            _this.etlCompleted = _this.stepData.etlCompletedPercentage > 0;\n                            console.log(\"New count: \" + _this.stepData.objectsCount);\n                        });\n                        this.$scope.$watch(function () { return _this.stepData.fetchCompletedPercentage; }, function () {\n                            _this.fetchCompleted = _this.stepData.fetchCompletedPercentage > 0;\n                        });\n                    };\n                    SystemSetupActiveDirectoryStepViewerController.prototype.isFetchInProgress = function () {\n                        return this.stepData.isRunning && this.stepData.fetchCompletedPercentage < 100;\n                    };\n                    SystemSetupActiveDirectoryStepViewerController.prototype.isETLInProgress = function () {\n                        return this.stepData.isRunning && this.stepData.fetchCompletedPercentage == 100 && this.stepData.etlCompletedPercentage < 100;\n                    };\n                    /**\n                     * Formats an int representing number of seconds into a time string, hh:mm:ss\n                     * @param diffSeconds\n                     */\n                    SystemSetupActiveDirectoryStepViewerController.prototype.prettyElapsedTime = function () {\n                        if (_.isNil(this.elapsedTimeSeconds)) {\n                            return \"00:00:00\";\n                        }\n                        else {\n                            var duration = moment.duration(Number(this.elapsedTimeSeconds * 1000));\n                            var days = duration.days();\n                            //should never happened in our product - all our sessions are defined as less\n                            // than 24 hours\n                            if (days && days > 0) {\n                                return days + \"d\";\n                            }\n                            else {\n                                var hours = duration.hours(), minutes = duration.minutes(), seconds = duration.seconds();\n                                if (hours || minutes || seconds) {\n                                    return this.padLeft(hours, 2, \"0\") + \":\" +\n                                        this.padLeft(minutes, 2, \"0\") + \":\" +\n                                        this.padLeft(seconds, 2, \"0\");\n                                }\n                                else {\n                                    //if session duration is less than 1 sec - will shown as 0 second\n                                    return \"00:00:00\";\n                                }\n                            }\n                        }\n                    };\n                    SystemSetupActiveDirectoryStepViewerController.prototype.padLeft = function (str, length, padCharacter) {\n                        str = String(str);\n                        var padLength = length - str.length;\n                        if (padLength <= 0) {\n                            return str;\n                        }\n                        var pad = [];\n                        while (pad.length < padLength) {\n                            pad.push(padCharacter);\n                        }\n                        return pad.join(\"\") + str;\n                    };\n                    SystemSetupActiveDirectoryStepViewerController.$inject = ['$scope', '$element', '$http', '$timeout'];\n                    return SystemSetupActiveDirectoryStepViewerController;\n                }());\n                var systemSetupActiveDirectoryStepViewerComponent = {\n                    controller: SystemSetupActiveDirectoryStepViewerController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-active-directory-step-viewer/system-setup-active-directory-step-viewer.component.html',\n                    bindings: {\n                        stepData: '<',\n                        title: '@',\n                        objectTitle: '@',\n                        elapsedTimeSeconds: '<'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupActiveDirectoryStepViewer', systemSetupActiveDirectoryStepViewerComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupTagRuleController = (function () {\n                    function SystemSetupTagRuleController() {\n                    }\n                    /**\n                     * Invokes the delegate to delete a rule from tag\n                     */\n                    SystemSetupTagRuleController.prototype.deleteRule = function () {\n                        this.onRemoveRule({ rule: this.rule, tag: this.tag });\n                    };\n                    SystemSetupTagRuleController.$inject = [];\n                    return SystemSetupTagRuleController;\n                }());\n                var systemSetupTagRule = {\n                    controller: SystemSetupTagRuleController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-tag-rule/system-setup-tag-rule.component.html',\n                    bindings: {\n                        rule: '<',\n                        tag: '<?',\n                        onRemoveRule: '&'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupTagRule', systemSetupTagRule);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var tagsSetup;\n            (function (tagsSetup) {\n                var SystemSetupTagsRulesPopupController = (function () {\n                    function SystemSetupTagsRulesPopupController($element, $timeout, $scope) {\n                        this.$element = $element;\n                        this.$timeout = $timeout;\n                        this.$scope = $scope;\n                    }\n                    /**\n                     * Adds rules to tag\n                     */\n                    SystemSetupTagsRulesPopupController.prototype.addRules = function () {\n                        var _this = this;\n                        if (this.tagRulesForm.$invalid || this.tagRulesForm.$pristine) {\n                            return;\n                        }\n                        this.rules = [];\n                        _.each(this.models.commonNames, function (userRule) {\n                            _this.rules.push(userRule);\n                        });\n                        if (this.models.regexp) {\n                            this.rules = this.rules.concat(this.models.regexp.split(\";\"));\n                        }\n                        this.onAddRules({ rules: this.rules });\n                    };\n                    SystemSetupTagsRulesPopupController.prototype.removeRuleFromTag = function (rule) {\n                        _.remove(this.models.commonNames, function (currentItemDn) {\n                            return rule === currentItemDn;\n                        });\n                    };\n                    SystemSetupTagsRulesPopupController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.models = {\n                            commonNames: [],\n                            regexp: \"\"\n                        };\n                        this.$timeout(function () {\n                            _this.$element.addClass('enter-active');\n                        }, 50);\n                    };\n                    SystemSetupTagsRulesPopupController.$inject = ['$element', '$timeout', '$scope'];\n                    return SystemSetupTagsRulesPopupController;\n                }());\n                /**\n                 * Popup component. Used to enter tag rules (OU, CN, and Regex)\n                 * @type {{controller: Fortscale.SystemSetupApp.layouts.tagsSetup.SystemSetupTagsRulesPopupController, templateUrl: string, bindings: {}}}\n                 */\n                var systemSetupTagsRulesPopup = {\n                    controller: SystemSetupTagsRulesPopupController,\n                    templateUrl: 'system-setup-app/layouts/tags-setup/components/system-setup-tags-rules-popup/system-setup-tags-rules-popup.component.html',\n                    bindings: {\n                        onAddRules: '&',\n                        onCancel: '&'\n                    }\n                };\n                /**\n                 * This directive adds validation and formatting to the Organization field\n                 * @type {string|function(IDistinguishedNameUtilsService): ng.IDirective[]}\n                 */\n                var adValidateOrganizationsDirective = [\n                    'distinguishedNameUtils',\n                    function (distinguishedNameUtils) {\n                        var linkFn = function (scope, instanceElement, instanceAttributes, controller) {\n                            controller[0].$validators['ad-validate-organizations'] =\n                                function (modelValue, viewValue) {\n                                    if (!modelValue && !viewValue) {\n                                        return true;\n                                    }\n                                    return distinguishedNameUtils.validateOrganizations(modelValue);\n                                };\n                            controller[0].$formatters.push(function (value) {\n                                if (!value) {\n                                    return;\n                                }\n                                return distinguishedNameUtils.trimDistinguishedNames(value);\n                            });\n                        };\n                        return {\n                            require: ['ngModel'],\n                            link: linkFn\n                        };\n                    }];\n                /**\n                 * This directive adds validation and formatting to the Organization field\n                 * @type {string|function(IDistinguishedNameUtilsService): ng.IDirective[]}\n                 */\n                var adValidateCommonNamesDirective = [\n                    'distinguishedNameUtils',\n                    function (distinguishedNameUtils) {\n                        var linkFn = function (scope, instanceElement, instanceAttributes, controller) {\n                            controller[0].$validators['ad-validate-common-names'] =\n                                function (modelValue, viewValue) {\n                                    if (!modelValue && !viewValue) {\n                                        return true;\n                                    }\n                                    return distinguishedNameUtils.validateCommonNames(modelValue);\n                                };\n                            controller[0].$formatters.push(function (value) {\n                                if (!value) {\n                                    return;\n                                }\n                                return distinguishedNameUtils.trimDistinguishedNames(value);\n                            });\n                        };\n                        return {\n                            require: ['ngModel'],\n                            link: linkFn\n                        };\n                    }];\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .component('systemSetupTagsRulesPopup', systemSetupTagsRulesPopup)\n                    .directive('adValidateOrganizations', adValidateOrganizationsDirective)\n                    .directive('adValidateCommonNames', adValidateCommonNamesDirective);\n            })(tagsSetup = layouts.tagsSetup || (layouts.tagsSetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var tagsSetup;\n            (function (tagsSetup) {\n                var KEY_ARROW_UP = 38;\n                var KEY_ARROW_DOWN = 40;\n                var NO_CURRENT_INDEX = -1;\n                var RowItem = (function () {\n                    function RowItem() {\n                    }\n                    return RowItem;\n                }());\n                var GroupsOuSearchComponentController = (function () {\n                    function GroupsOuSearchComponentController($scope, $timeout, BASE_URL, $http) {\n                        this.$scope = $scope;\n                        this.$timeout = $timeout;\n                        this.BASE_URL = BASE_URL;\n                        this.$http = $http;\n                        this._SEARCH_GROUPS_OU_URL = this.BASE_URL + '/tags/search';\n                        this.attributeName = \"searchValue\";\n                        this.ousAndGroups = [];\n                        this.userRules = []; // contain the distinguish names\n                        //If the we hover a user using mouse or arrows the index should be 0 or greater.\n                        //If the user is on the search text input the index should be -1.\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                    }\n                    /**\n                     * Set the current index for selected user\n                     */\n                    GroupsOuSearchComponentController.prototype.updateIndex = function (newIndex) {\n                        this.currentHoverIndex = newIndex;\n                    };\n                    GroupsOuSearchComponentController.prototype.onSearchActive = function () {\n                        var searchActive = this.searchText ? this.searchText.length > 0 : false;\n                        if (this.timer) {\n                            this.$timeout.cancel(this.timer);\n                        }\n                        if (searchActive) {\n                            this.timer = this.$timeout(this._loadOuAndGroups.bind(this), 500);\n                        }\n                        else {\n                            this._safeHide();\n                        }\n                    };\n                    /**\n                     * Get the ou/groups, clear the timer, and display / hide the list off users\n                     * @private\n                     */\n                    GroupsOuSearchComponentController.prototype._loadOuAndGroups = function () {\n                        var ctrl = this;\n                        ctrl.timer = null;\n                        var query = {\n                            containedText: this.searchText\n                        };\n                        this.$http.get(this._SEARCH_GROUPS_OU_URL, { params: query })\n                            .then(function (res) {\n                            if (res.data) {\n                                var ousList = res.data[\"ous\"];\n                                var groupsList = res.data[\"groups\"];\n                                ctrl.ousAndGroups = [];\n                                _.each(ousList, function (ou) {\n                                    ctrl.ousAndGroups.push({\n                                        id: ou.id,\n                                        name: ou.ou,\n                                        distinguishedName: ou.distinguishedName,\n                                        type: \"OU\"\n                                    });\n                                });\n                                _.each(groupsList, function (group) {\n                                    var newItem = {\n                                        id: group.id,\n                                        name: group.name,\n                                        distinguishedName: group.distinguishedName,\n                                        type: \"Group\"\n                                    };\n                                    ctrl.ousAndGroups.push(newItem);\n                                });\n                                ctrl._safeHide();\n                            }\n                        });\n                    };\n                    GroupsOuSearchComponentController.prototype.rowClickedEvent = function (item) {\n                        if (this.isExistsItemSelected(item.distinguishedName)) {\n                            //If exists - remove from selected list\n                            _.remove(this.userRules, function (currentItemDn) {\n                                return item.distinguishedName === currentItemDn;\n                            });\n                        }\n                        else {\n                            //If not exists - add to selected list\n                            this.userRules.push(item.distinguishedName);\n                        }\n                    };\n                    GroupsOuSearchComponentController.prototype.isExistsItemSelected = function (dn) {\n                        var itemIndex = _.findIndex(this.userRules, function (currentItemDn) {\n                            return dn === currentItemDn;\n                        });\n                        return itemIndex > -1;\n                    };\n                    /**\n                     * Return true if the tooltip displayed\n                     * @returns {boolean|string}\n                     * @private\n                     */\n                    GroupsOuSearchComponentController.prototype._isVisible = function () {\n                        true;\n                        //return this._tooltip!=null && this._tooltip.visible;\n                    };\n                    GroupsOuSearchComponentController.prototype._safeHide = function () {\n                        if (this._isVisible()) {\n                        }\n                        ;\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                    };\n                    GroupsOuSearchComponentController.prototype.deleteSearchText = function () {\n                        this.searchText = null;\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                        this.ousAndGroups = [];\n                        this.applyFilter();\n                    };\n                    GroupsOuSearchComponentController.prototype.submitWithKeypress = function (e) {\n                        if (e.keyCode === 13) {\n                            //Key press happens before angular populate the value into the model\n                            var newValue = e.target.value;\n                            this.applyFilter(newValue);\n                        }\n                        else if ((e.keyCode === KEY_ARROW_UP || e.keyCode === KEY_ARROW_DOWN) && this.ousAndGroups) {\n                            if (e.keyCode === KEY_ARROW_UP) {\n                                this.currentHoverIndex > 0 ? this.currentHoverIndex-- : this.currentHoverIndex = NO_CURRENT_INDEX;\n                            }\n                            else if (e.keyCode === KEY_ARROW_DOWN) {\n                                this.currentHoverIndex < this.ousAndGroups.length - 1 ? this.currentHoverIndex++ : this.currentHoverIndex = this.ousAndGroups.length - 1;\n                            }\n                            this.stopEvent(e);\n                        }\n                        else if (e.keyCode === 27) {\n                            this._safeHide();\n                        }\n                    };\n                    /**\n                     * We need to prevent input curesur to move when arrow up or down. Submit with key press handle the actual event.\n                     * stop event should prevent keypress\n                     * @param e\n                     */\n                    GroupsOuSearchComponentController.prototype.stopEvent = function (e) {\n                        if (e.keyCode === KEY_ARROW_UP) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                        }\n                        else if (e.keyCode === KEY_ARROW_DOWN) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                        }\n                    };\n                    //Close the popup and reset the search text\n                    GroupsOuSearchComponentController.prototype.closePopup = function () {\n                        this.searchText = null;\n                        this._safeHide();\n                    };\n                    GroupsOuSearchComponentController.prototype.$onInit = function () {\n                    };\n                    //Apply filter actually affect the state\n                    GroupsOuSearchComponentController.prototype.applyFilter = function (differentSeachText) {\n                        this._safeHide();\n                        if (this.currentHoverIndex > NO_CURRENT_INDEX) {\n                        }\n                        else {\n                        }\n                    };\n                    /**\n                     * Watch action function . Set the value for the searchTaxt from outside\n                     *\n                     * @param {string|number} value\n                     */\n                    GroupsOuSearchComponentController.prototype._stateWatchActionFn = function (value) {\n                        this._safeHide();\n                        this.searchText = value;\n                    };\n                    GroupsOuSearchComponentController.$inject = ['$scope', '$timeout', 'BASE_URL', '$http'];\n                    return GroupsOuSearchComponentController;\n                }());\n                var GroupsOuSearchComponent = {\n                    controller: GroupsOuSearchComponentController,\n                    controllerAs: '$ctrl',\n                    templateUrl: 'system-setup-app/layouts/tags-setup/components/system-setup-tag-search/system-setup-tag-search.template.html',\n                    bindings: {\n                        userRules: '<'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .component('groupsOuSearch', GroupsOuSearchComponent);\n            })(tagsSetup = layouts.tagsSetup || (layouts.tagsSetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var shared;\n        (function (shared) {\n            var components;\n            (function (components) {\n                var SystemSetupLogRepositoryConnectorController = (function () {\n                    function SystemSetupLogRepositoryConnectorController($scope, $element, $http, BASE_URL, LOG_REPOSITORY_TYPES) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.LOG_REPOSITORY_TYPES = LOG_REPOSITORY_TYPES;\n                        this.showPassword = false;\n                        this.connectionTestResults = null;\n                        this.logRepositoryTypesState = (_a = {},\n                            _a[this.LOG_REPOSITORY_TYPES[0].value] = {\n                                name: this.LOG_REPOSITORY_TYPES[0].name,\n                                fields: {\n                                    id: {\n                                        required: true\n                                    },\n                                    password: {\n                                        name: 'Password',\n                                        required: true\n                                    },\n                                    port: {\n                                        defaultValue: 8089,\n                                        required: true\n                                    },\n                                    user: {\n                                        defaultValue: 'admin',\n                                        hint: 'Enter user name e.g. user@company.com',\n                                        required: true\n                                    },\n                                    host: {\n                                        required: true\n                                    }\n                                }\n                            },\n                            _a[this.LOG_REPOSITORY_TYPES[1].value] = {\n                                name: this.LOG_REPOSITORY_TYPES[1].name,\n                                fields: {\n                                    id: {\n                                        required: true\n                                    },\n                                    host: {\n                                        required: true\n                                    },\n                                    password: {\n                                        name: 'Security Token',\n                                        hint: 'Copy key from:  QRadar Admin > Authorized services > authentication token',\n                                        required: true\n                                    },\n                                    port: {\n                                        defaultValue: 3389,\n                                        required: false\n                                    },\n                                    user: {\n                                        defaultValue: null,\n                                        required: true\n                                    }\n                                }\n                            },\n                            _a\n                        );\n                        var _a;\n                    }\n                    /**\n                     * Toggles 'Show Password'\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.toggleShowPassword = function () {\n                        this.showPassword = !this.showPassword;\n                    };\n                    /**\n                     * Resets the connector to its initial state\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.resetConnector = function () {\n                        this.connector = _.cloneDeep(this._connector);\n                        _.each(this.formCtrl, function (formCtrlProp, propName) {\n                            if (/^models_/.test(propName)) {\n                                formCtrlProp.$setPristine();\n                                formCtrlProp.$setUntouched();\n                            }\n                        });\n                        this.formCtrl.$setPristine();\n                        this.formCtrl.$setUntouched();\n                        this._setConnectionValidity();\n                    };\n                    /**\n                     * Removes the current connector\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.removeConnector = function () {\n                        this.formCtrl.$setDirty();\n                        this.connector['removed'] = true;\n                        this.onRemoveConnector();\n                    };\n                    SystemSetupLogRepositoryConnectorController.prototype.getConnectorDefinition = function () {\n                        return this.logRepositoryTypesState[this.connector.fetchSourceType];\n                    };\n                    /**\n                     * Tests the connector. Sends params to the server and processes the response. If test fails, the form is invalid.\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.testConnector = function ($event) {\n                        var _this = this;\n                        if ($event.currentTarget.attributes['disabled'] &&\n                            $event.currentTarget.attributes['disabled'].value === 'disabled') {\n                            return;\n                        }\n                        // Starts loader\n                        this.setLoadingState({ state: true });\n                        // Get connector value\n                        var value = this.getValue();\n                        // Sets encrypted_password param and remove from connector object\n                        var params = {};\n                        if (value.encryptedPassword) {\n                            delete value.encryptedPassword;\n                            params.encrypted_password = true;\n                        }\n                        else {\n                            params.encrypted_password = false;\n                        }\n                        // Perform test and populate connectionTestResults\n                        this.$http.post(this.BASE_URL + '/log_repository/test', value, {\n                            params: params, transformResponse: function (message) { return message; }\n                        })\n                            .then(function () {\n                            _this.connectionTestResults = {\n                                status: 'success',\n                                message: 'Connection test successful.'\n                            };\n                        })\n                            .catch(function (err) {\n                            _this.connectionTestResults = {\n                                status: 'error',\n                                message: err.data\n                            };\n                        })\n                            .finally(function () {\n                            // Sets form validity (via connectionTest ngModel)\n                            _this._setConnectionValidity();\n                            // Turn off loader\n                            _this.setLoadingState({ state: false });\n                        });\n                    };\n                    /**\n                     * Returns the value of the corrent connector\n                     * @returns {ILogRepositoryConnector}\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.getValue = function () {\n                        var connector = _.cloneDeep(this.connector);\n                        // Raise flag encryptedPassword when password has not changed. If new-password and old-password are\n                        // the same it would mean that the password was received from the server and therefor is encrypted\n                        // (or its empty in which case the field would be invalid)\n                        if (this.connector.password === this._connector.password) {\n                            connector.encryptedPassword = true;\n                        }\n                        return connector;\n                    };\n                    /**\n                     * When switching between types, set defaults.\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype.changeRepositoryType = function () {\n                        this._setExplicitDefaultValues(true);\n                    };\n                    /**\n                     * Sets default values based on the type of repository\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._setExplicitDefaultValues = function (enforceDefaults) {\n                        var _this = this;\n                        if (enforceDefaults === void 0) { enforceDefaults = false; }\n                        var ctrl = this;\n                        /**\n                         * Set and explicit field value\n                         * @param type\n                         * @param fieldName\n                         */\n                        function setExplicitField(type, fieldName) {\n                            // If no value, or is asked to enforce defaults\n                            if (!ctrl.connector.port || enforceDefaults) {\n                                // Set the value on the model\n                                ctrl.connector[fieldName] = ctrl.logRepositoryTypesState[type].fields[fieldName].defaultValue;\n                                // Determine if dirty or pristine\n                                if (ctrl.connector[fieldName] !== ctrl._connector[fieldName]) {\n                                    ctrl.formCtrl['models_' + fieldName].$setDirty();\n                                }\n                                else {\n                                    ctrl.formCtrl['models_' + fieldName].$setPristine();\n                                }\n                            }\n                        }\n                        // Iterate through fields of repository type, and for each that has a 'defaultValue', invoke setExplicitField\n                        _.each(this.logRepositoryTypesState[this.connector.fetchSourceType].fields, function (fieldObj, fieldName) {\n                            if (fieldObj.hasOwnProperty('defaultValue')) {\n                                setExplicitField(_this.connector.fetchSourceType, fieldName);\n                            }\n                        });\n                    };\n                    /**\n                     * Initiates connector watch. Once received connector is cloned and placed on 'connector'.\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._initConnectorWatch = function () {\n                        var _this = this;\n                        var unwatch = this.$scope.$watch(function () { return _this._connector; }, function (connector) {\n                            if (connector) {\n                                _this.connector = _.cloneDeep(connector);\n                                unwatch();\n                                _this.$scope.$applyAsync(function () {\n                                    // Find the form controller\n                                    _this._setFormCtrl();\n                                    _this._AddConnectionTestValidation();\n                                    // Register the 'getValue' function\n                                    _this.registerConnector({ getValueFn: _this.getValue.bind(_this) });\n                                    _this._setExplicitDefaultValues();\n                                });\n                            }\n                        });\n                    };\n                    /**\n                     * Finds the form controller and places it on the instance\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._setFormCtrl = function () {\n                        this.formCtrl = this.$element.find('[ng-form]').controller('form');\n                    };\n                    /**\n                     * Checks id the form is valid with relations to the test.\n                     * Heuristics: If original connector and form connector are equal the its valid. If connectionTestResults is success then its valid.\n                     * @returns {boolean}\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._isFormTestedValid = function () {\n                        var formConnectionTested = !!(this.connectionTestResults &&\n                            this.connectionTestResults.status === 'success');\n                        return this.connectorsEqual || formConnectionTested;\n                    };\n                    /**\n                     * Sets connection validity to the connectionTest ngModel (which will affect form validity)\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._setConnectionValidity = function () {\n                        var connectionTestNgModel = (this.formCtrl['connectionTest']);\n                        connectionTestNgModel.$setValidity('connectionTest', this._isFormTestedValid());\n                    };\n                    SystemSetupLogRepositoryConnectorController.prototype._setConnectorsAreEqual = function () {\n                        this.connectorsEqual = _.isEqual(this.connector, this._connector);\n                    };\n                    /**\n                     * Adds watcher on connector parameters. When changed, _setConnectionValidity is invoked.\n                     * @private\n                     */\n                    SystemSetupLogRepositoryConnectorController.prototype._AddConnectionTestValidation = function () {\n                        var _this = this;\n                        this.$scope.$watchGroup([\n                            function () { return _this.connector.alias; },\n                            function () { return _this.connector.host; },\n                            function () { return _this.connector.password; },\n                            function () { return _this.connector.port; },\n                            function () { return _this.connector.fetchSourceType; },\n                            function () { return _this.connector.user; },\n                        ], function (newVal, oldVal) {\n                            if (newVal !== oldVal) {\n                                // Remove last test result if change has occurred\n                                if (_this.connectionTestResults) {\n                                    _this.connectionTestResults = null;\n                                }\n                            }\n                            _this._setConnectorsAreEqual();\n                            _this._setConnectionValidity();\n                        });\n                    };\n                    SystemSetupLogRepositoryConnectorController.prototype.$onInit = function () {\n                        this._initConnectorWatch();\n                    };\n                    SystemSetupLogRepositoryConnectorController.$inject = ['$scope', '$element', '$http', 'BASE_URL', 'LOG_REPOSITORY_TYPES'];\n                    return SystemSetupLogRepositoryConnectorController;\n                }());\n                var systemSetupLogRepositoryConnectorComponent = {\n                    controller: SystemSetupLogRepositoryConnectorController,\n                    templateUrl: 'system-setup-app/shared/components/system-setup-log-repository-connector/system-setup-log-repository-connector.component.html',\n                    bindings: {\n                        _connector: '<connector',\n                        connectorIndex: '<',\n                        onRemoveConnector: '&',\n                        registerConnector: '&',\n                        setLoadingState: '&'\n                    },\n                    require: {\n                        parentFormCtrl: '^form'\n                    }\n                };\n                angular.module('Fortscale.SystemSetupApp.shared.components')\n                    .component('systemSetupLogRepositoryConnector', systemSetupLogRepositoryConnectorComponent);\n            })(components = shared.components || (shared.components = {}));\n        })(shared = SystemSetupApp.shared || (SystemSetupApp.shared = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var systemSetup;\n            (function (systemSetup) {\n                var SystemSetupController = (function () {\n                    function SystemSetupController($scope, $element, $state, navigationUtils) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$state = $state;\n                        this.navigationUtils = navigationUtils;\n                        this._MAIN_CONTENT_CONTAINER_ELEMENT_SELECTOR = '.main-content-container';\n                        this._ANIMATE_BACK_CLASS_NAME = 'animate-back';\n                        this._STATIC_NAV_ITEM_STATE_NAME = 'systemSetup.setupSummary';\n                        this._formViewElement = this.$element.find(this._MAIN_CONTENT_CONTAINER_ELEMENT_SELECTOR);\n                    }\n                    SystemSetupController.prototype.continueToNexStep = function () {\n                        var nextState = this.navigationUtils.getNextState(this.$state.current.name);\n                        var nextNavItem = this.navigationUtils.getNavItemByState(nextState);\n                        this.transition(nextNavItem ? nextNavItem : nextState);\n                    };\n                    /**\n                     * Handles transition (animation and request) between forms\n                     *\n                     * @param navItem\n                     */\n                    SystemSetupController.prototype.transition = function (navItem) {\n                        // If navItem is string, then always move forward, and go to the state.\n                        // This is in case an explicit state movement is desired.\n                        if (_.isString(navItem)) {\n                            this._formViewElement.removeClass(this._ANIMATE_BACK_CLASS_NAME);\n                            this.$state.go(navItem);\n                            return;\n                        }\n                        // Do nothing if current and next states are equal\n                        if (navItem.state === this.$state.current.name) {\n                            return;\n                        }\n                        // Determine the direction of the animation.\n                        // If nav item is the static nav item (summary) then animation is backwards\n                        if (navItem.state === this._STATIC_NAV_ITEM_STATE_NAME) {\n                            this._formViewElement.removeClass(this._ANIMATE_BACK_CLASS_NAME);\n                        }\n                        else if (this.$state.current.name === this._STATIC_NAV_ITEM_STATE_NAME) {\n                            this._formViewElement.addClass(this._ANIMATE_BACK_CLASS_NAME);\n                        }\n                        else if (!this.navigationUtils.isNavigationForward(this.$state.current.name, navItem.state)) {\n                            this._formViewElement.addClass(this._ANIMATE_BACK_CLASS_NAME);\n                        }\n                        else {\n                            this._formViewElement.removeClass(this._ANIMATE_BACK_CLASS_NAME);\n                        }\n                        // Transition to requested state\n                        this.$state.go(navItem.state);\n                    };\n                    SystemSetupController.$inject = ['$scope', '$element', '$state', 'navigationUtils'];\n                    return SystemSetupController;\n                }());\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .controller('systemSetupController', SystemSetupController);\n            })(systemSetup = layouts.systemSetup || (layouts.systemSetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var activeDirectorySetup;\n            (function (activeDirectorySetup) {\n                //List of Datasources (For each data source we nned to do ETL+FETCH\n                var USERS_STEP = \"USER\";\n                var GROUPS_STEP = \"GROUP\";\n                var OUS_STEP = \"OU\";\n                var DEVICES_STEP = \"COMPUTER\";\n                /*\n                    Represent AdStep (data source)\n                 */\n                var IAdStep = (function () {\n                    function IAdStep() {\n                        this.etlCompletedPercentage = 0;\n                        this.fetchCompletedPercentage = 0;\n                        this.objectsCount = 0;\n                        this.isRunning = false;\n                        this.lastSuccessfullExecution = 0;\n                        this.success = false;\n                    }\n                    return IAdStep;\n                }());\n                activeDirectorySetup.IAdStep = IAdStep;\n                var ActiveDirectorySetupController = (function () {\n                    function ActiveDirectorySetupController($scope, $element, $http, BASE_URL, $timeout, $log, toastrService, BASE_WEBSOCKET_URL, $interval) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.$timeout = $timeout;\n                        this.$log = $log;\n                        this.toastrService = toastrService;\n                        this.BASE_WEBSOCKET_URL = BASE_WEBSOCKET_URL;\n                        this.$interval = $interval;\n                        this._END_POINT_PATH = '/active_directory'; // The web socket API\n                        this.isLoading = false;\n                        this.stompClient = null;\n                        //End of attributes for last execution\n                        //Old all the steps (data sources) and their status\n                        this.adStepsMap = {};\n                        this._getFormElementAndController();\n                        this._initDataFetch();\n                        this._featchEtlADStatus();\n                        this._openWebSocketFetchEtlAD();\n                        document.title = 'Active Directory Configuration';\n                        this._initAdStepDataCounters();\n                        this.$scope.$on('$destroy', this._clearElapsedTimeInterval);\n                    }\n                    /**\n                     * Returns a list of derived IActiveDirectoryConnector by using registered getValueFns.\n                     * @returns {IActiveDirectoryConnector[]}\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._getValues = function () {\n                        // Get a list of values by using registered getValueFns\n                        var domainControllers = _.map(this.getValueFns, function (valueFn) {\n                            var value = valueFn();\n                            return {\n                                dcs: value.dcs,\n                                domainBaseSearch: value.domainBaseSearch,\n                                domainUser: value.domainUser,\n                                domainPassword: value.domainPassword,\n                                removed: value.removed,\n                                encryptedPassword: !!value.encryptedPassword\n                            };\n                        });\n                        // Filter out all connectors that have been destroyed, and clean the remaining.\n                        domainControllers = _.filter(domainControllers, function (domainController) { return !domainController.removed; });\n                        _.each(domainControllers, function (domainController) { return delete domainController.removed; });\n                        return domainControllers;\n                    };\n                    /**\n                     * Submits available connectors.\n                     * @returns {IPromise<TResult>}\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._submitForm = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        var domainControllers = this._getValues();\n                        return this.$http.post(this.BASE_URL + this._END_POINT_PATH, domainControllers)\n                            .then(function (res) {\n                            _this.formElementController.$setPristine();\n                            return res;\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory Update Error');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    /**\n                     * Transitions to next step\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._continueToNextStep = function () {\n                        this.$scope['systemSetupCtrl'].continueToNexStep();\n                    };\n                    /**\n                     * Removes a connector from the list.\n                     *\n                     * @param connector\n                     */\n                    ActiveDirectorySetupController.prototype.removeConnector = function (connector) {\n                        this.activeDirectoryConnectors =\n                            _.filter(this.activeDirectoryConnectors, function (listConnector) {\n                                return listConnector !== connector;\n                            });\n                    };\n                    /**\n                     * This method open web socket connection to endpoint \"/active_directory/ad_fetch\" and listen to server messages on\n                     * '/wizard/ad-fetch-response' topic.\\\n                     *\n                     * When component's scope (this this') is destroyed, the connection disconected, so we will not have\n                     * to many open connections\n                     *\n                     */\n                    ActiveDirectorySetupController.prototype._openWebSocketFetchEtlAD = function () {\n                        //let socket:any = new SockJS('/fortscale-webapp/active_directory/ad_fetch',null, { debug: true , protocols_whitelist:['xhr-polling']});\n                        var socket = new SockJS(this.BASE_WEBSOCKET_URL + '/active_directory/ad_fetch_etl');\n                        this.stompClient = Stomp.over(socket);\n                        var stompClientTemp = this.stompClient;\n                        var ctrl = this;\n                        this.stompClient.connect({}, function (frame) {\n                            // setConnected(true);\n                            console.log('Connected: ' + frame);\n                            stompClientTemp.subscribe('/wizard/ad_fetch_etl_response', function (fetchETLResponse) {\n                                ctrl._adFetchDelegate(fetchETLResponse.body);\n                            });\n                        });\n                        this.$scope.$on('$destroy', function () {\n                            stompClientTemp.disconnect(function () {\n                                console.log(\"Socket have been disconnected due to navigate out action !\");\n                            });\n                        });\n                    };\n                    /**\n                     * This method get message from the websocket and update the UI accordingly\n                     */\n                    ActiveDirectorySetupController.prototype._adFetchDelegate = function (responseBody) {\n                        var _this = this;\n                        var status = JSON.parse(responseBody);\n                        console.log(\"Task finish execution:\" + status);\n                        var percentage = status.success ? 100 : 0;\n                        this.$timeout(function () {\n                            if (status.taskType === \"FETCH\") {\n                                _this.adStepsMap[status.dataSource].etlCompletedPercentage = 0;\n                                //this.adStepsMap[status.dataSource].lastSuccessfullExecution= null;\n                                if (status.success) {\n                                    _this.adStepsMap[status.dataSource].fetchCompletedPercentage = percentage;\n                                }\n                                else {\n                                    //Finish with failure. Stop execution\n                                    _this.adStepsMap[status.dataSource].isRunning = false;\n                                    _this.adStepsMap[status.dataSource].success = status.success;\n                                    _this.adStepsMap[status.dataSource].fetchCompletedPercentage = 0;\n                                }\n                            }\n                            else {\n                                _this.adStepsMap[status.dataSource].etlCompletedPercentage = percentage;\n                                _this.adStepsMap[status.dataSource].objectsCount = status.objectsCount;\n                                _this.adStepsMap[status.dataSource].isRunning = false;\n                                _this.adStepsMap[status.dataSource].lastSuccessfullExecution = status.lastExecutionTime;\n                                _this.adStepsMap[status.dataSource].success = status.success;\n                            }\n                        });\n                    };\n                    /**\n                     * Delegete to stop the execution process from server\n                     */\n                    ActiveDirectorySetupController.prototype.stopFeatchEtlADExecution = function () {\n                        var _this = this;\n                        this.$http.get(this.BASE_URL + this._END_POINT_PATH + \"/stop_ad_fetch_etl\").then(function (response) {\n                            if (response.status < 300) {\n                                _this.toastrService.success(\"FETCH/ETL execution stopped\");\n                                _this._featchEtlADStatus(); //Refresh the status\n                                _this._clearElapsedTimeInterval();\n                                _.each(_this.adStepsMap, function (step) { step.isRunning = true; });\n                            }\n                            else if (response.status === 406) {\n                                _this.toastrService.error(\"Stop failed. There was nothing to stop\");\n                            }\n                            else {\n                                _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory run error');\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory run error');\n                        });\n                    };\n                    /**\n                     * Get Current Execution Status\n                     */\n                    ActiveDirectorySetupController.prototype._featchEtlADStatus = function () {\n                        var _this = this;\n                        this.$http.get(this.BASE_URL + this._END_POINT_PATH + \"/ad_etl_fetch_status\").then(function (response) {\n                            if (response.data && response.data.fetchEtlExecutionStatus) {\n                                _this.$timeout(function () {\n                                    var currentExecutionFromUITime = response.data.fetchEtlExecutionStatus.lastAdFetchEtlExecutionTime;\n                                    var atLeastOneRunningSrartExecutionTime = false;\n                                    var tasksStatusArray = response.data.fetchEtlExecutionStatus.runningTasksStatuses;\n                                    _.each(tasksStatusArray, function (dataSourceStatus) {\n                                        if (_.isNil(dataSourceStatus.runningMode)) {\n                                            //Currently not running\n                                            _this.adStepsMap[dataSourceStatus.datasource].etlCompletedPercentage = 100;\n                                            _this.adStepsMap[dataSourceStatus.datasource].fetchCompletedPercentage = 100;\n                                            _this.adStepsMap[dataSourceStatus.datasource].objectsCount = dataSourceStatus.objectsCount;\n                                            _this.adStepsMap[dataSourceStatus.datasource].lastSuccessfullExecution = dataSourceStatus.lastExecutionFinishTime;\n                                            _this.adStepsMap[dataSourceStatus.datasource].isRunning = false;\n                                        }\n                                        else {\n                                            atLeastOneRunningSrartExecutionTime = true;\n                                            if (dataSourceStatus.runningMode.toLocaleLowerCase() === \"fetch\") {\n                                                _this.adStepsMap[dataSourceStatus.datasource].fetchCompletedPercentage = 0;\n                                            }\n                                            else {\n                                                _this.adStepsMap[dataSourceStatus.datasource].fetchCompletedPercentage = 100;\n                                            }\n                                            _this.adStepsMap[dataSourceStatus.datasource].etlCompletedPercentage = 0;\n                                            _this.adStepsMap[dataSourceStatus.datasource].isRunning = true;\n                                            _this.adStepsMap[dataSourceStatus.datasource].objectsCount = 0;\n                                            _this.adStepsMap[dataSourceStatus.datasource].lastSuccessfullExecution = 0;\n                                        }\n                                        _this.adStepsMap[dataSourceStatus.datasource].success = true;\n                                    });\n                                    //If any of the tasks running - start the execution time\n                                    if (atLeastOneRunningSrartExecutionTime && !_.isNil(currentExecutionFromUITime)) {\n                                        _this._startElapseTimeCount(currentExecutionFromUITime);\n                                    }\n                                });\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                        });\n                    };\n                    /**\n                     * Execute AD Fetch + ETL.\n                     * Alert if already running.\n                     * Doesn't wait for the running to finish\n                     */\n                    ActiveDirectorySetupController.prototype.featchEtlAD = function () {\n                        var _this = this;\n                        this.$http.get(this.BASE_URL + this._END_POINT_PATH + \"/ad_fetch_etl\").then(function (response) {\n                            if (response.status < 300) {\n                                _this.toastrService.success(\"Retrieve Active Directory Data\");\n                                _this._initAdStepDataCounters();\n                                _this._startElapseTimeCount();\n                                _.each(_this.adStepsMap, function (step) { step.isRunning = true; });\n                            }\n                            else if (response.status === 423) {\n                                _this.toastrService.error(\"FETCH/ETL Already Running\");\n                            }\n                            else {\n                                //alert(\"return error: \"+response.status);\n                                _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory run error');\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory run error');\n                        });\n                    };\n                    /*\n                    Return true if the Group / Users / OU / Devices is still executing right now\n                     */\n                    ActiveDirectorySetupController.prototype.isAnyTaskRunning = function () {\n                        var anyRunning = false;\n                        _.each(this.adStepsMap, function (step) {\n                            if (step.isRunning) {\n                                anyRunning = true; //At least one is running\n                            }\n                        });\n                        return anyRunning;\n                    };\n                    /**\n                     * Sets loader on/off\n                     * @param state\n                     */\n                    ActiveDirectorySetupController.prototype.setLoadingState = function (state) {\n                        this.isLoading = !!state;\n                    };\n                    /**\n                     * Gets the element's form element and constructor\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._getFormElementAndController = function () {\n                        var _this = this;\n                        this.$scope.$applyAsync(function () {\n                            _this.formElement = _this.$element.find('[ng-form]');\n                            _this.formElementController = angular.element(_this.formElement).controller('form');\n                        });\n                    };\n                    /**intellik\n                     * Initiates the the data fetching process\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._initDataFetch = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        this.$http.get(this.BASE_URL + this._END_POINT_PATH)\n                            .then(function (res) {\n                            _this._activeDirectoryConnectors = res.data.adConnectionList;\n                            _this.activeDirectoryConnectors = res.data.adConnectionList;\n                            _this.getValueFns = [];\n                            // Add new connector if list is empty\n                            if (_this.activeDirectoryConnectors.length === 0) {\n                                _this.activeDirectoryConnectors.push(_this._createNewConnector());\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Active Directory Load Error');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    /**\n                     * Tests if the data to be submited is the same as the existing data (used when saving a form to prevent\n                     * unneeded calls to the server)\n                     * @returns {boolean}\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._testEqualConnectorLists = function () {\n                        return _.isEqual(this._getValues(), this._activeDirectoryConnectors);\n                    };\n                    /**\n                     * Returns a new empty IActiveDirectoryConnector\n                     * @returns {{dcs: Array, domainBaseSearch: null, domainUser: null, domainPassword: null}}\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._createNewConnector = function () {\n                        return {\n                            dcs: [],\n                            domainBaseSearch: null,\n                            domainUser: null,\n                            domainPassword: null\n                        };\n                    };\n                    /**\n                     * Registers each added connector by being provided with a getValue function that will return the value of\n                     * connector\n                     * @param getValueFn\n                     */\n                    ActiveDirectorySetupController.prototype.registerConnector = function (getValueFn) {\n                        this.getValueFns.push(getValueFn);\n                    };\n                    /**\n                     * Adds a new connector. Creates a new connectors list (from the old one) and adds an empty connector.\n                     */\n                    ActiveDirectorySetupController.prototype.addNewConnector = function () {\n                        // Create new list (for immutability)\n                        this.activeDirectoryConnectors = this.activeDirectoryConnectors.slice(0);\n                        // Add new empty connector\n                        this.activeDirectoryConnectors.push(this._createNewConnector());\n                    };\n                    /**\n                     * Submits the form to the server\n                     */\n                    ActiveDirectorySetupController.prototype.saveForm = function () {\n                        var _this = this;\n                        if (this.formElementController.$invalid || this.formElementController.$pristine) {\n                            return;\n                        }\n                        if (this._testEqualConnectorLists()) {\n                            return;\n                        }\n                        this.isLoading = true;\n                        this._submitForm()\n                            .then(function () {\n                            _this._initDataFetch();\n                        });\n                    };\n                    /**\n                     * Method that run evey second more or less and update the time since that last execution\n                     */\n                    ActiveDirectorySetupController.prototype._calculateElapsedtime = function () {\n                        console.log(\"calculateElapsedtime\");\n                        this.elapsedTimeSeconds = Math.floor((new Date().getTime() - this.startExecutionTime) / 1000);\n                    };\n                    /**\n                     * Kill the time counter and restart the time count\n                     *\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._clearElapsedTimeInterval = function () {\n                        if (this.elapsedTimeCalculationPromise != null) {\n                            this.$interval.cancel(this.elapsedTimeCalculationPromise);\n                            this.elapsedTimeCalculationPromise = null;\n                        }\n                        this.elapsedTimeSeconds = null;\n                        this.startExecutionTime = null;\n                    };\n                    /**\n                     * set the start execution time and sent interval to update it each second\n                     * @param startTime\n                     * @private\n                     */\n                    ActiveDirectorySetupController.prototype._startElapseTimeCount = function (startTime) {\n                        var _this = this;\n                        if (_.isNil(startTime)) {\n                            this.startExecutionTime = new Date().getTime();\n                        }\n                        else {\n                            this.startExecutionTime = startTime;\n                        }\n                        this.elapsedTimeCalculationPromise = this.$interval(function () {\n                            _this._calculateElapsedtime();\n                        }, 1000);\n                    };\n                    /**\n                     * Submits the form to the server and continues to the next step in the wizard.\n                     */\n                    ActiveDirectorySetupController.prototype.saveFormAndContinue = function () {\n                        var _this = this;\n                        if (this.formElementController.$invalid || this.formElementController.$pristine) {\n                            return;\n                        }\n                        if (this._testEqualConnectorLists()) {\n                            this._continueToNextStep();\n                            return;\n                        }\n                        this.isLoading = true;\n                        this._submitForm()\n                            .then(function () {\n                            _this._continueToNextStep();\n                        });\n                    };\n                    ActiveDirectorySetupController.prototype._initAdStepDataCounters = function () {\n                        this.adStepsMap[USERS_STEP] = new IAdStep();\n                        this.adStepsMap[GROUPS_STEP] = new IAdStep();\n                        this.adStepsMap[OUS_STEP] = new IAdStep();\n                        this.adStepsMap[DEVICES_STEP] = new IAdStep();\n                    };\n                    ActiveDirectorySetupController.$inject = ['$scope', '$element', '$http', 'BASE_URL', '$timeout', '$log', 'toastrService', 'BASE_WEBSOCKET_URL', '$interval'];\n                    return ActiveDirectorySetupController;\n                }());\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .controller('activeDirectorySetupController', ActiveDirectorySetupController);\n            })(activeDirectorySetup = layouts.activeDirectorySetup || (layouts.activeDirectorySetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var setupSummary;\n            (function (setupSummary) {\n                var SetupSummaryController = (function () {\n                    function SetupSummaryController($q, $http, $log, BASE_URL, toastrService, $timeout, LOG_REPOSITORY_TYPES) {\n                        this.$q = $q;\n                        this.$http = $http;\n                        this.$log = $log;\n                        this.BASE_URL = BASE_URL;\n                        this.toastrService = toastrService;\n                        this.$timeout = $timeout;\n                        this.LOG_REPOSITORY_TYPES = LOG_REPOSITORY_TYPES;\n                        this.isLoading = false;\n                        this._ACTIVE_DIRECTORY_ENDPOINT = '/active_directory';\n                        this._LOG_REPOSITORY_ENDPOINT = '/log_repository';\n                        this._USER_TAGS_ENDPOINT = '/tags/user_tags';\n                        this._initDataFetch();\n                        this.logRepositoyTypes = _.keyBy(this.LOG_REPOSITORY_TYPES, 'value');\n                    }\n                    /**\n                     * Get active directory data and store it\n                     * @private\n                     */\n                    SetupSummaryController.prototype._initActiveDirectoryDataFetch = function () {\n                        var _this = this;\n                        return this.$http.get(this.BASE_URL + this._ACTIVE_DIRECTORY_ENDPOINT)\n                            .then(function (res) {\n                            _this.activeDirectoryConnectors = res.data.adConnectionList;\n                        });\n                    };\n                    /**\n                     * Get log repository data and store it\n                     * @private\n                     */\n                    SetupSummaryController.prototype._initLogRepositoryDataFetch = function () {\n                        var _this = this;\n                        return this.$http.get(this.BASE_URL + this._LOG_REPOSITORY_ENDPOINT)\n                            .then(function (res) {\n                            _this.logRepositoryConnectors = res.data.logRepositoryList;\n                        });\n                    };\n                    /**\n                     * Get tags data and store it\n                     * @returns {IPromise<TResult>}\n                     * @private\n                     */\n                    SetupSummaryController.prototype._initTagsDataFetch = function () {\n                        var _this = this;\n                        return this.$http.get(this.BASE_URL + this._USER_TAGS_ENDPOINT)\n                            .then(function (res) {\n                            // Sort list by display name\n                            _this.tagsList = _.orderBy(res.data.data, 'displayName');\n                        });\n                    };\n                    /**\n                     * Initates data fetch process.\n                     * @private\n                     */\n                    SetupSummaryController.prototype._initDataFetch = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        this.$q.all([\n                            this._initActiveDirectoryDataFetch(),\n                            this._initLogRepositoryDataFetch(),\n                            this._initTagsDataFetch()\n                        ])\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error.', 'Setup Summary data load');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    SetupSummaryController.$inject = ['$q', '$http', '$log', 'BASE_URL', 'toastrService', '$timeout', 'LOG_REPOSITORY_TYPES'];\n                    return SetupSummaryController;\n                }());\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .controller('setupSummaryController', SetupSummaryController);\n            })(setupSummary = layouts.setupSummary || (layouts.setupSummary = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var tagsSetup;\n            (function (tagsSetup) {\n                var MAX_RUILES_TO_PRESENT = 6;\n                var AugmentedTagDefinition = (function () {\n                    function AugmentedTagDefinition(name, displayName, rules, createsIndicator, active, isAssignable, error, changed, newTag, predefined) {\n                        if (name === void 0) { name = null; }\n                        if (displayName === void 0) { displayName = null; }\n                        if (rules === void 0) { rules = []; }\n                        if (createsIndicator === void 0) { createsIndicator = true; }\n                        if (active === void 0) { active = true; }\n                        if (isAssignable === void 0) { isAssignable = true; }\n                        if (error === void 0) { error = null; }\n                        if (changed === void 0) { changed = true; }\n                        if (newTag === void 0) { newTag = true; }\n                        if (predefined === void 0) { predefined = false; }\n                        this.name = name;\n                        this.displayName = displayName;\n                        this.rules = rules;\n                        this.createsIndicator = createsIndicator;\n                        this.active = active;\n                        this.isAssignable = isAssignable;\n                        this.error = error;\n                        this.changed = changed;\n                        this.newTag = newTag;\n                        this.predefined = predefined;\n                    }\n                    return AugmentedTagDefinition;\n                }());\n                var TagsSetupController = (function () {\n                    function TagsSetupController($scope, $http, BASE_URL, $log, $timeout, toastrService) {\n                        this.$scope = $scope;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.$log = $log;\n                        this.$timeout = $timeout;\n                        this.toastrService = toastrService;\n                        this.isLoading = false;\n                        this._USER_TAGS_URL = this.BASE_URL + '/tags/user_tags';\n                        this._RUNNING_TAGS_TASK_URL = this.BASE_URL + '/tags/run_tagging_task';\n                        this.nameOfeditTagName = null;\n                        this.editTagRulesName = null;\n                        this.changed = false;\n                        this.invalid = false;\n                        //Tell for each tag if we like to show all rules, or just the first X\n                        this.showAllRuleNumberForTag = [];\n                        this._initNewTag();\n                        this._initDataFetch();\n                        document.title = 'Tags Configuration';\n                    }\n                    /**\n                     * Sets the index of the currently edited tag name, and sets focus to the input field.\n                     *\n                     * @param tagIndex\n                     * @param evt\n                     */\n                    TagsSetupController.prototype.setTagNameEditIndex = function (tag, evt) {\n                        if (tag && (!tag.active || tag.predefined)) {\n                            return;\n                        }\n                        this.updatedTagDisplayNameModel = tag.name;\n                        this.nameOfeditTagName = tag.name;\n                        this.$timeout(function () {\n                            $(evt.currentTarget).find('input').focus();\n                        }, 200);\n                    };\n                    /**\n                     * On any tag name change, validate all tags, and determine if changed\n                     *\n                     * @param tag\n                     * @param originalTag\n                     */\n                    TagsSetupController.prototype.changeTagName = function (tag, originalTag) {\n                        var _this = this;\n                        tag.changed = this._isTagChanged(tag, originalTag);\n                        // As long as tag is considered new, the displayName affects the tag name.\n                        if (tag.newTag) {\n                            tag.name = tag.displayName;\n                        }\n                        // Validate all tags (because a change in one can affect another)\n                        _.each(this.tagsList, function (tag) {\n                            _this._validateTag(tag);\n                        });\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * On any tag name change, set tag.name and validate\n                     * @param tag\n                     */\n                    TagsSetupController.prototype.changeNewTagName = function (tag) {\n                        tag.name = tag.displayName;\n                        this._validateTag(tag);\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * Used to create blur (and force update by blur) when clicking on Enter\n                     *\n                     * @param evt\n                     */\n                    TagsSetupController.prototype.changeTagKeyDown = function (evt) {\n                        switch (evt.keyCode) {\n                            case 13:\n                                $(evt.currentTarget).blur();\n                                break;\n                            case 27:\n                                $(evt.currentTarget).blur();\n                                break;\n                        }\n                    };\n                    /**\n                     * When input looses focus, this method is called. It reverts the value if there's an error in the name.\n                     * It removes a new tag row if there's an error in the name (of a new tag). It determines if the form has\n                     * changed or has errors. It set the nameOfeditTagName to null.\n                     */\n                    TagsSetupController.prototype.finishEditTagName = function (tag) {\n                        tag.displayName = this.updatedTagDisplayNameModel;\n                        this._determineIfChanged();\n                        this._determineIfError();\n                        this.nameOfeditTagName = null;\n                    };\n                    /**\n                     * When finished editing a new tag display name, it will be considered as a tag and pushed into tags list.\n                     */\n                    TagsSetupController.prototype.finishEditNewTagName = function () {\n                        if (this.newTag.error || !this.newTag.displayName) {\n                            return;\n                        }\n                        // Set the tag name and put it in list\n                        this.tagsList.push(this.newTag);\n                        // Generate new tag and set 'changed' to form\n                        this._initNewTag();\n                        this.finishEditTagName(this.newTag);\n                    };\n                    /**\n                     * Removes a new tag\n                     * @param index\n                     * @param event\n                     */\n                    TagsSetupController.prototype.deleteNewTag = function (tag, event) {\n                        // Validate is a tag and a new tag\n                        if (!(tag && tag.newTag)) {\n                            return;\n                        }\n                        // Stop click event from bubbling to the row\n                        event.stopPropagation();\n                        // Remove tag\n                        _.remove(this.tagsList, function (iteratedTag) { return iteratedTag.name === tag.name; });\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * Toggles Creates-Indicator state.\n                     * @param tag\n                     * @param originalTag\n                     */\n                    TagsSetupController.prototype.toggleCreatesIndicator = function (tag, originalTag) {\n                        if (!tag.active) {\n                            return;\n                        }\n                        tag.createsIndicator = !tag.createsIndicator;\n                        tag.changed = this._isTagChanged(tag, originalTag);\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * Toggles Active state.\n                     * @param tag\n                     * @param originalTag\n                     */\n                    TagsSetupController.prototype.toggleActiveTag = function (tag, originalTag) {\n                        tag.active = !tag.active;\n                        tag.changed = this._isTagChanged(tag, originalTag);\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * Removes rule from a tag\n                     * @param rule\n                     * @param tag\n                     */\n                    TagsSetupController.prototype.removeRuleFromTag = function (rule, tag) {\n                        // Do nothing if tag is inactive\n                        if (!tag.active) {\n                            return;\n                        }\n                        tag.rules = _.filter(tag.rules, function (tagRule) { return tagRule !== rule; });\n                        var originalTag = _.find(this.originalTagsList, { name: tag.name });\n                        tag.changed = this._isTagChanged(tag, originalTag);\n                        this._determineIfChanged();\n                    };\n                    TagsSetupController.prototype._getTagFromListByName = function (tagName) {\n                        return _.find(this.tagsList, { \"name\": this.editTagRulesName });\n                    };\n                    /**\n                     * Adds rules to edited tag\n                     */\n                    TagsSetupController.prototype.addRules = function (rules) {\n                        var tag = this._getTagFromListByName(this.editTagRulesName);\n                        tag.rules = (tag.rules || []).concat(rules);\n                        this.editTagRulesName = null;\n                        var originalTag = _.find(this.originalTagsList, { name: tag.name });\n                        tag.changed = this._isTagChanged(tag, originalTag);\n                        this._determineIfChanged();\n                    };\n                    /**\n                     * Sets the index of the currently new rules tag popup\n                     * @param tagIndex\n                     */\n                    TagsSetupController.prototype.openAddTagRulesPopup = function (tag) {\n                        // Do nothing if tag is inactive\n                        if (!tag.active) {\n                            return;\n                        }\n                        this.editTagRulesName = tag.name;\n                    };\n                    /**\n                     * Closes add rules popup without update\n                     */\n                    TagsSetupController.prototype.cancelAddRules = function () {\n                        this.editTagRulesName = null;\n                    };\n                    /**\n                     * Saves the edited tags\n                     * @param disabled\n                     */\n                    TagsSetupController.prototype.saveTags = function (disabled) {\n                        var _this = this;\n                        if (disabled) {\n                            return;\n                        }\n                        this._submitTags()\n                            .then(function (res) {\n                            return _this._initDataFetch();\n                        })\n                            .then(function () {\n                            _this.changed = false;\n                            _this.toastrService.success(\"Tagging configuration saved locally, to execute user tagging click Save & Continue\");\n                        });\n                    };\n                    /**\n                     * Saves the edited tags and transitions to the nex step in the wizard\n                     * @param disabled\n                     */\n                    TagsSetupController.prototype.saveTagsAndContinue = function (disabled) {\n                        var _this = this;\n                        if (disabled) {\n                            return;\n                        }\n                        var ctrl = this;\n                        this._submitAndExecuteTagingTask()\n                            .then(function () {\n                            ctrl.run_tagging_task;\n                            _this._continueToNextStep();\n                        });\n                    };\n                    /**\n                     * Transitions to next step\n                     * @private\n                     */\n                    TagsSetupController.prototype._continueToNextStep = function () {\n                        this.$scope['systemSetupCtrl'].continueToNexStep();\n                    };\n                    /**\n                     * Returns a list of ITagDefinition by taking all changed IAugmentedTagDefinition, and cleaning them.\n                     * @returns {ITagDefinition[]}\n                     * @private\n                     */\n                    TagsSetupController.prototype._getChangedCleanTags = function () {\n                        var changedTags = _.filter(this.tagsList, 'changed');\n                        return _.map(changedTags, function (tag) {\n                            // Clone the tag\n                            var cleanTag = _.cloneDeep(tag);\n                            // Cleanup tag\n                            delete cleanTag.error;\n                            delete cleanTag.changed;\n                            delete cleanTag.newTag;\n                            return cleanTag;\n                        });\n                    };\n                    /**\n                     * Submits the edited tags\n                     * @returns {IPromise<TResult>}\n                     * @private\n                     */\n                    TagsSetupController.prototype._submitTags = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        var tags = this._getChangedCleanTags();\n                        return this.$http.post(this._USER_TAGS_URL, tags)\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Tags Update Error');\n                        })\n                            .finally(function () {\n                            _this.isLoading = false;\n                        });\n                    };\n                    /**\n                     * Submits the edited tags\n                     * @returns {IPromise<TResult>}\n                     * @private\n                     */\n                    TagsSetupController.prototype._submitAndExecuteTagingTask = function () {\n                        var _this = this;\n                        return this._submitTags().then(function () {\n                            _this.$http.get(_this._RUNNING_TAGS_TASK_URL)\n                                .catch(function (err) {\n                                _this.$log.error(err);\n                                _this.toastrService.error('There was an unknown server error while running tasks. Please try again.', 'Running Task TagsError');\n                            })\n                                .finally(function () {\n                            });\n                        });\n                    };\n                    /**\n                     * Compares properties on current tag and the original tag. If they are different then true is returned.\n                     * @param tag\n                     * @param originalTag\n                     * @returns {boolean}\n                     * @private\n                     */\n                    TagsSetupController.prototype._isTagChanged = function (tag, originalTag) {\n                        if (!originalTag) {\n                            return true;\n                        }\n                        if (tag.displayName !== originalTag.displayName) {\n                            return true;\n                        }\n                        if (tag.createsIndicator !== originalTag.createsIndicator) {\n                            return true;\n                        }\n                        if (tag.active !== originalTag.active) {\n                            return true;\n                        }\n                        if (!_.isEqual(tag.rules, originalTag.rules)) {\n                            return true;\n                        }\n                        return false;\n                    };\n                    /**\n                     * Removes a new tag (row)\n                     * @param tagIndex\n                     * @private\n                     */\n                    TagsSetupController.prototype._removeNewTag = function (tagIndex) {\n                        this.tagsList.splice(tagIndex, 1);\n                    };\n                    /**\n                     * Finds if any of the tags on tagsList has a 'changed' property set to true\n                     * @private\n                     */\n                    TagsSetupController.prototype._determineIfChanged = function () {\n                        this.changed = _.some(this.tagsList, function (tag) { return !!tag.changed; });\n                    };\n                    /**\n                     * Finds if any of the tags on tagsList has an 'error' property\n                     * @private\n                     */\n                    TagsSetupController.prototype._determineIfError = function () {\n                        this.invalid = _.some(this.tagsList, function (tag) { return !!tag.error; });\n                    };\n                    /**\n                     * Validates a tag. Find if a tag name is empty, or if the tag name is not unique.\n                     * @param tag\n                     * @param canBeEmptyName\n                     * @private\n                     */\n                    TagsSetupController.prototype._validateTag = function (tag, canBeEmptyName) {\n                        if (canBeEmptyName === void 0) { canBeEmptyName = false; }\n                        // tag display name should not be an empty string\n                        tag.error = {\n                            msg: null\n                        };\n                        // Get a list of other tags\n                        var otherTags = _.filter(this.tagsList, function (tagFromList) { return tagFromList !== tag; });\n                        // tag display name can not be empty\n                        if (!canBeEmptyName &&\n                            (tag.displayName === '' || tag.displayName === null || tag.displayName === undefined)) {\n                            tag.error.msg = 'Tag can not be empty.';\n                        }\n                        else if (_.some(otherTags, function (otherTag) { return otherTag.displayName.toLowerCase() === tag.displayName.toLowerCase(); })) {\n                            tag.error.msg = 'Tag name must be unique.';\n                        }\n                        else if (tag.newTag && _.some(otherTags, function (otherTag) { return otherTag.name.toLowerCase() === tag.name.toLowerCase(); })) {\n                            var dupTag = _.find(otherTags, { name: tag.name });\n                            tag.error.msg =\n                                \"There is another tag with the same name id; name-id: \" + dupTag.name + \" | name: \" + dupTag.displayName;\n                        }\n                        else {\n                            delete tag.error;\n                        }\n                        this._determineIfError();\n                    };\n                    /**\n                     * Loads tags data\n                     * @private\n                     */\n                    TagsSetupController.prototype._initDataFetch = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        return this.$http.get(this._USER_TAGS_URL)\n                            .then(function (res) {\n                            // Sort list by display name\n                            var tagsList = _.orderBy(res.data.data, 'displayName');\n                            // place original list (unedited)\n                            _this.originalTagsList = tagsList;\n                            // Clone to new list\n                            _this.tagsList = _.cloneDeep(tagsList);\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Tags Load Error');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    /**\n                     * Tell the UI, if the state of this tag allow to present all the rules, or limit the presentation to the amount of the allowed MAX\n                     * @param tag\n                     * @returns {number}\n                     */\n                    TagsSetupController.prototype.getRulesLimit = function (tag) {\n                        var showAll = this.showAllRuleNumberForTag[tag.name];\n                        if (showAll) {\n                            return tag.rules.length;\n                        }\n                        else {\n                            return MAX_RUILES_TO_PRESENT;\n                        }\n                    };\n                    /**\n                     * Change the state to the tag rules display.\n                     * If the tag state already present more then allowed this method set it to display just as the maximum allowed.\n                     * If the tag state limit the presented rules to the max value, we change the state to display all\n                     * @param tag\n                     */\n                    TagsSetupController.prototype.setRulesLimit = function (tag) {\n                        this.showAllRuleNumberForTag[tag.name] = !this.showAllRuleNumberForTag[tag.name];\n                    };\n                    /**\n                        The porpose of the moethod is to return if there are more tags to display or that we already presented\n                        more tags then allowed.\n            \n                     * If we currently display less tags then the tags that the user have, this method return \"more\",\n                     * if we currently display more tags then the defined max, the this methoer return \"less\"\n                     * @param tag\n                     * @returns {number}\n                     */\n                    TagsSetupController.prototype.displayMoreOrLessRulesText = function (tag) {\n                        var ruleLimitForCurrentTag = this.getRulesLimit(tag);\n                        if (tag.rules.length > ruleLimitForCurrentTag) {\n                            return \"more\";\n                        }\n                        if (ruleLimitForCurrentTag > MAX_RUILES_TO_PRESENT) {\n                            return \"less\";\n                        }\n                        return null;\n                    };\n                    /**\n                     * Initiates a new tag object\n                     *\n                     * @private\n                     */\n                    TagsSetupController.prototype._initNewTag = function () {\n                        this.newTag = new AugmentedTagDefinition();\n                    };\n                    TagsSetupController.$inject = ['$scope', '$http', 'BASE_URL', '$log', '$timeout', 'toastrService'];\n                    return TagsSetupController;\n                }());\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .controller('tagsSetupController', TagsSetupController);\n            })(tagsSetup = layouts.tagsSetup || (layouts.tagsSetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var SystemSetupApp;\n    (function (SystemSetupApp) {\n        var layouts;\n        (function (layouts) {\n            var logRepositorySetup;\n            (function (logRepositorySetup) {\n                var LogRepositorySetupController = (function () {\n                    function LogRepositorySetupController($scope, $element, $http, BASE_URL, $timeout, $log, toastrService, LOG_REPOSITORY_TYPES) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.$timeout = $timeout;\n                        this.$log = $log;\n                        this.toastrService = toastrService;\n                        this.LOG_REPOSITORY_TYPES = LOG_REPOSITORY_TYPES;\n                        this._END_POINT_PATH = '/log_repository';\n                        this.isLoading = false;\n                        this._initDataFetch();\n                        document.title = 'Log Repository Configuration';\n                    }\n                    /**\n                     * Returns a list of derived ILogRepositoryConnector by using registered getValueFns.\n                     * @returns {ILogRepositoryConnector[]}\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._getValues = function () {\n                        // Get a list of values by using registered getValueFns\n                        var logRepositories = _.map(this.getValueFns, function (valueFn) {\n                            var value = valueFn();\n                            return {\n                                id: value.id,\n                                alias: value.alias,\n                                fetchSourceType: value.fetchSourceType,\n                                host: value.host,\n                                user: value.user,\n                                password: value.password,\n                                port: value.port,\n                                removed: value.removed,\n                                encryptedPassword: !!value.encryptedPassword\n                            };\n                        });\n                        // Filter out all connectors that have been destroyed, and clean the remaining.\n                        logRepositories = _.filter(logRepositories, function (logRepository) { return !logRepository.removed; });\n                        _.each(logRepositories, function (logRepository) { return delete logRepository.removed; });\n                        return logRepositories;\n                    };\n                    /**\n                     * Submits available connectors.\n                     * @returns {IPromise<TResult>}\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._submitForm = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        var domainControllers = this._getValues();\n                        return this.$http.post(this.BASE_URL + this._END_POINT_PATH, domainControllers)\n                            .then(function (res) {\n                            _this.logRepositoryForm.$setPristine();\n                            return res;\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Log Repository Update Error');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    /**\n                     * Transitions to next step\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._continueToNextStep = function () {\n                        this.$scope['systemSetupCtrl'].continueToNexStep();\n                    };\n                    /**\n                     * Removes a connector from the list.\n                     *\n                     * @param connector\n                     */\n                    LogRepositorySetupController.prototype.removeConnector = function (connector) {\n                        this.logRepositoryConnectors =\n                            _.filter(this.logRepositoryConnectors, function (listConnector) {\n                                return listConnector !== connector;\n                            });\n                        /*  this.$http.delete(this.BASE_URL + this._END_POINT_PATH+\"/\"+connector.id)\n                              .then((res:ng.IHttpPromiseCallbackArg<{fetchSourceList:ILogRepositoryConnector}>) => {\n                                  this._initDataFetch();\n                              })\n                              .catch((err) => {\n                                  this.$log.error(err);\n                                  this.toastrService.error('There was an unknown server error. Please try again.',\n                                      'Log Repository Load Error');\n                              })\n                              .finally(() => {\n                                  this.$timeout(() => {\n                                      this.isLoading = false;\n                                  }, 500);\n              \n                              })*/\n                    };\n                    /**\n                     * Sets loader on/off\n                     * @param state\n                     */\n                    LogRepositorySetupController.prototype.setLoadingState = function (state) {\n                        this.isLoading = !!state;\n                    };\n                    /**\n                     * Initiates the the data fetching process\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._initDataFetch = function () {\n                        var _this = this;\n                        this.isLoading = true;\n                        this.$http.get(this.BASE_URL + this._END_POINT_PATH)\n                            .then(function (res) {\n                            _this._logRepositoryConnectors = res.data.logRepositoryList;\n                            _this.logRepositoryConnectors = res.data.logRepositoryList;\n                            if (_this.logRepositoryConnectors.length == 0) {\n                                var defaultConnector = {\n                                    id: null,\n                                    fetchSourceType: 'SPLUNK',\n                                    alias: '',\n                                    host: '',\n                                    user: '',\n                                    password: '',\n                                    port: null,\n                                    encryptedPassword: false\n                                };\n                                _this.logRepositoryConnectors.push(defaultConnector);\n                            }\n                            _this.getValueFns = [];\n                        })\n                            .catch(function (err) {\n                            _this.$log.error(err);\n                            _this.toastrService.error('There was an unknown server error. Please try again.', 'Log Repository Load Error');\n                        })\n                            .finally(function () {\n                            _this.$timeout(function () {\n                                _this.isLoading = false;\n                            }, 500);\n                        });\n                    };\n                    /**\n                     * Tests if the data to be submited is the same as the existing data (used when saving a form to prevent\n                     * unneeded calls to the server)\n                     * @returns {boolean}\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._testEqualConnectorLists = function () {\n                        return _.isEqual(this._getValues(), this._logRepositoryConnectors);\n                    };\n                    /**\n                     * Returns a new empty ILogRepositoryConnector\n                     * @returns {{dcs: Array, domainBaseSearch: null, domainUser: null, domainPassword: null}}\n                     * @private\n                     */\n                    LogRepositorySetupController.prototype._createNewConnector = function () {\n                        return {\n                            id: null,\n                            alias: null,\n                            fetchSourceType: this.LOG_REPOSITORY_TYPES[0].value,\n                            host: null,\n                            user: null,\n                            password: null,\n                            port: null,\n                            encryptedPassword: false\n                        };\n                    };\n                    /**\n                     * Registers each added connector by being provided with a getValue function that will return the value of\n                     * connector\n                     * @param getValueFn\n                     */\n                    LogRepositorySetupController.prototype.registerConnector = function (getValueFn) {\n                        this.getValueFns.push(getValueFn);\n                    };\n                    /**\n                     * Adds a new connector. Creates a new connectors list (from the old one) and adds an empty connector.\n                     */\n                    LogRepositorySetupController.prototype.addNewConnector = function () {\n                        // Create new list (for immutability)\n                        if (this.logRepositoryConnectors) {\n                            this.logRepositoryConnectors = this.logRepositoryConnectors.slice(0);\n                        }\n                        else {\n                            this.logRepositoryConnectors = new Array();\n                        }\n                        // Add new empty connector\n                        this.logRepositoryConnectors.push(this._createNewConnector());\n                    };\n                    /**\n                     * Submits the form to the server\n                     */\n                    LogRepositorySetupController.prototype.saveForm = function () {\n                        var _this = this;\n                        if (this.logRepositoryForm.$invalid || this.logRepositoryForm.$pristine) {\n                            return;\n                        }\n                        if (this._testEqualConnectorLists()) {\n                            return;\n                        }\n                        this.isLoading = true;\n                        this._submitForm()\n                            .then(function () {\n                            _this._initDataFetch();\n                        });\n                    };\n                    /**\n                     * Submits the form to the server and continues to the next step in the wizard.\n                     */\n                    LogRepositorySetupController.prototype.saveFormAndContinue = function () {\n                        var _this = this;\n                        if (this.logRepositoryForm.$invalid || this.logRepositoryForm.$pristine) {\n                            return;\n                        }\n                        if (this._testEqualConnectorLists()) {\n                            this._continueToNextStep();\n                            return;\n                        }\n                        this.isLoading = true;\n                        this._submitForm()\n                            .then(function () {\n                            _this._continueToNextStep();\n                        });\n                    };\n                    LogRepositorySetupController.$inject = ['$scope', '$element', '$http', 'BASE_URL', '$timeout', '$log',\n                        'toastrService', 'LOG_REPOSITORY_TYPES'];\n                    return LogRepositorySetupController;\n                }());\n                angular.module('Fortscale.SystemSetupApp.layouts')\n                    .controller('logRepositorySetupController', LogRepositorySetupController);\n            })(logRepositorySetup = layouts.logRepositorySetup || (layouts.logRepositorySetup = {}));\n        })(layouts = SystemSetupApp.layouts || (SystemSetupApp.layouts = {}));\n    })(SystemSetupApp = Fortscale.SystemSetupApp || (Fortscale.SystemSetupApp = {}));\n})(Fortscale || (Fortscale = {}));\n"],"sourceRoot":"/source/"}