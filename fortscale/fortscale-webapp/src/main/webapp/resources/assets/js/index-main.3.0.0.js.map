{"version":3,"sources":["page.js","config.js","http-authorization-interceptor.config.js","popup.js","dropdown.js","cache.js","EventBus.js","events.js","utils.js","format.js","conditions.js","styles.js","transforms.js","icons.js","tags.js","charts.data.service.js","colors.js","datePicker.js","state.js","DAL.js","api.js","fsHighChartService.js","colors_constants.js","menus_module.js","Menu.js","menus.js","dynamic_menus.js","controls_module.js","Control.js","ControlList.js","controls.js","data_entities_module.js","DataEntity.js","DataEntityField.js","DataEntitySort.js","dataEntities.js","QueryOperator.js","queryOperators.js","DataEntityFieldType.js","dataEntityFieldTypes.js","data_queries_module.js","DataQuery.js","reports_module.js","Report.js","reports.js","reports_process.js","search.js","popup-conditions.js","widgets_module.js","Widget.js","WidgetView.js","WidgetButton.js","dashboards.js","Dashboard.js","DashboardLayout.js","widget_views.js","widget.directive.js","explore.filters_module.js","Filter.js","FilterCollection.js","filters.js","filters_to_dataqueries_adapter.js","explore.filters.directive.js","filterValidators.js","explore_module.js","Explore.js","explore_widget.module.js","explore.controller.js","explore.dataviews_module.js","DataView.js","DataViewType.js","TableDataView.js","Graph.js","GraphDataView.js","explore.graphs.js","dataViewTypes.js","added_graphs_filter.js","Chart.js","table.module.js","table.controller.js","table.directive.js","TableConfig.js","bubbles.module.js","bubbles.directive.js","heatMap.module.js","heatMap.directive.js","barsChart.module.js","barsChart.directive.js","percentChart.module.js","percentChart.directive.js","properties.module.js","forceChart.module.js","forceChart.directive.js","scatterPlot.module.js","scatterPlot.directive.js","scatterPlot.controller.js","securityFeed.module.js","securityFeed.controller.js","securityFeed.service.js","tags.module.js","timeline.module.js","timeline.directive.js","timelinePoints.directive.js","timeline.service.js","timeline.controller.js","map.module.js","map.directive.js","pie.module.js","pie.directive.js","bars.module.js","bars.directive.js","stackedBars.module.js","stackedBars.directive.js","multiLine.module.js","multiLine.directive.js","spanBars.module.js","spanBars.directive.js","links.module.js","links.directive.js","multiTimeline.module.js","multiTimeline.directive.js","tree.module.js","tree.directive.js","figures.module.js","focusWhen.js","tooltip.js","app.module.js","app.routes.js","version.js","eventbus.js","widgets.js","widget_types.js","packages.js","auth.js","users.js","comments.js","main_controller.js","main_dashboard_controller.js","dashboard_controller.js","control_controller.js","buttonsBar_controller.js","dashboard_widget_controller.js","htmlWidget.module.js","items_list_controller.js","monitoring.controller.js","repeater.controller.js","package.controller.js","popup_controller.js","simplePagination.js","button_controller.js","account_settings_controller.js","global_settings_controller.js","dateRange.js","searchBox.js","progressBar.js","modal.js","hide_on_error.js","nav.js","tabs.js","dropdown_menu.js","dropdown_delegate.js","param_controls.js","checklist.js","dropdown-noclose.js","button_select.js","numbers_only.js","duration_only.js","number_range.js","string-in.js","data_field_type_filter.js","geo_hopping.controller.js","geo_hopping.service.js","tabs.module.js","tabs.controller.js","loader.js","base-url.constant.js","severities.constant.js","version.constant.js","restangular.config.js","angular-translate.config.js","remote-app-config.provider.js","configContainer.provider.js","configItem.provider.js","app-config.provider.js","app-config.formatters.js","app-config.validators.js","fs-config-type.directive.js","app-config.settings.js","app-config-messages.settings.js","fs-analytics.configuration.js","country-codes.constant.js","shared.module.js","IDataBean.js","IIndicator.js","IAlert.js","services.module.js","assert.factory.js","dependecy-mounter.service.js","fs-download-file.service.js","fs-indicator-graphs-handler.provider.js","fs-indicator-graphs-handler.config.js","interpolation.service.js","object-utils.service.js","csv-converter.service.js","url-utils.service.js","tags-utils.service.js","table-settings-util.service.js","json-loader.service.js","dateRanges.service.js","alert-feedback.module.js","alert-feedback.service.js","fs-min-score.module.js","fs-min-score.directive.js","fs-select.module.js","fs-select.directive.js","fs-autocomplete.module.js","fs-autocomplete.directive.js","fs-gen-input.module.js","fs-gen-input.directive.js","country-codes-util.service.js","fs-indicator-types.js","indicator-type-mapper.module.js","indicator-type-mapper-settings-global.js","indicator-type-mapper-settings-abstract-scatter-plot.js","indicator-type-mapper-settings-activity-time-anomaly.js","indicator-type-mapper-settings-aggregated-serial.js","indicator-type-mapper-settings-aggregated-serial-data-rate.js","indicator-type-mapper-settings-data-rate-scatter-plot.js","indicator-type-mapper-settings-dual-column-chart.js","indicator-type-mapper-settings-heatmap.js","indicator-type-mapper-settings-single-column-chart.js","indicator-type-mapper-settings-single-pie-chart.js","indicator-type-mapper-settings-column-range.js","indicator-type-mapper-settings-scatter-pie-chart.js","indicator-type-mapper-settings-scatter-column-chart.js","indicator-type-mapper-settings-shared-credentials.js","indicator-type-mapper-settings-geo-location.js","indicator-type-mapper-settings-geo-sequence.js","indicator-type-mapper-settings-lateral-movement.js","device-utils-service.js","indicator-type-map.factory.js","indicator-type-mapper.service.js","string-utils.service.js","model-utils.module.js","entity-utils.service.js","user-utils.service.js","fs-modals.service.js","fs-nanobar-automation.js","fs-indexddb-service.js","fs-indicator-error-codes.service.js","fs-indicator-error-codes-ntlm.js","fs-indicator-error-codes-kerberos.js","toastr.service.js","alert-updates.service.js","activity-interfaces.js","entity-activity-utils.service.js","state-management-service.js","am-maps-country-lat-long.const.js","am-maps-urils.service.js","filters.module.js","page-to-offset.filter.js","unix-to-time-stamp.filter.js","entity-id-to-name.js","duration-to-pretty-time.js","pascal-case.filter.js","ou-display.filter.js","pretty-bytes.js","pretty-ou.js","string-to-date.filter.js","pretty-messages.js","pretty-alert-name.js","round.js","encode-url-component.js","truncate-decimal.js","orNA.filter.js","orZero.filter.js","anomaly-type-formatter.filter.js","fs-ordinal.filter.js","fs-pretty-duration.filter.js","fs-dt-humanize.js","fs-not-in.filter.js","fs-partial-strong.js","fs-remove-if-exist.js","directives.module.js","fs-state-container.directive.js","control-types.const.js","url-state-manager.service.js","resource-factory.service.js","components.module.js","fs-controls.directive.js","fs-table.module.js","fs-table.directive.js","fs-table-collapsible-list.directive.js","fs-table-actions.directive.js","fs-daterange.directive.js","fs-simple-tabs-strip.directive.js","fs-date-picker.module.js","fs-date-picker.directive.js","fs-splitter.directive.js","fs-multiselect.directive.js","fs-multiselect-autocomplete.directive.js","fs-severity-tag.component.js","fs-nanobar.directive.js","fs-score-icon.directive.js","fs-card-header.component.js","fs-chart.module.js","general-chart.settings.value.js","pie-chart.settings.value.js","heatmap-chart.settings.value.js","column-chart.settings.value.js","scatter-plot-chart.settings.value.js","column-range-chart.settings.value.js","line-chart.settings.value.js","chart-model-mapping.service.js","chart-settings.service.js","fs-chart.directive.js","fs-user-tag-details.directive.js","fs-resource-store.module.js","fs-resource-store.directive.js","fs-resource-store.provider.js","fs-href-alert.directive.js","fs-flag.module.js","fs-flag.directive.js","fs-header-bar.component.js","fs-loader.component.js","fs-svg-icon.js","fs-alerts-tooltip.directive.js","fs-user-devices-tooltip.directive.js","fs-user-tooltip.directive.js","fs-indicators-tooltip.directive.js","fs-tag.component.js","fs-table-scrollable.component.js","alert-feedback-close-modal-controller.js","alert-feedback-open-modal-controller.js","alert-feedback-result-modal-controller.js","alert-feedback-failure-modal-controller.js","indicator-severities.value.js","layouts.module.js","alerts.controller.js","alerts.resolve.js","fs-alerts-record-menu.directive.js","user.module.js","user.route.js","Activities.js","user-tags-utils.service.js","user-watch-util.service.js","user-indicators-utils.service.js","user-alerts-utils.service.js","indicator-chart-transition-util.js","indicator-symbol-map.service.js","user-upper-bar.component.js","user-profile.component.js","user-tags.component.js","user-activity-countries.component.js","user-activity-authentication.component.js","user-activity-working-hours.component.js","user-activity-devices.component.js","user-activity-data-usage.component.js","user-risk-score.component.js","user-indicator.component.js","user-indicator-header.controller.js","user-indicator-description.component.js","user-indicator-events.component.js","user-indicator-charts.component.js","fs-indicator-am-chart.component.js","fs-indicator-am-geo-location.component.js","fs-indicator-activity-time-anomaly.component.js","user-alert-overview-comments.component.js","user-alert-overview-feedback.component.js","user-alert-overview-description.component.js","user-alert-overview-header.component.js","user-alert-flow.component.js","user.controller.js","user-attributes.controller.js","user-alert-overview.controller.js","user-indicator.controller.js","users.module.js","users-state-types.js","convert-users-state-utils.service.js","users-utils.service.js","users-search-popup.controller.js","users-severities-stacked-bar.component.js","users-action-bar.component.js","users-tag-all-popup.controller.js","users-grid.component.js","user-grid-row.component.js","users-filters.component.js","users-predefined-filter.component.js","users-filter-in-use.component.js","users-save-favorites-filter.component.js","users.controller.js","overview.module.js","overview.route.js","high-risk-users-utils.service.js","top-alerts-utils.service.js","alert-stats-utils.js","high-risk-users.component.js","overview-alerts-severity-by-day.directive.js","overview-alert-status.directive.js","overview-high-risk-user.component.js","overview-top-alerts.component.js","overview-alert.component.js","overview-users-tags-count.component.js","overview.controller.js","reports.module.js","reports.route.js","reports.resolve.js","reports.controller.js","fs-validator-ip.js","stale-accounts-monitoring.resolve.js","stale-accounts-monitoring.state.js","disabled-user-accounts.controller.js","inactive-user-accounts.controller.js","disabled-user-with-network.controller.js","terminated-user-with-network.controller.js","device-monitoring.resolve.js","device-monitoring.state.js","ip-investigation.controller.js","sensitive-resources-monitoring.controller.js","suspicious-endpoint-access.controller.js","suspicious-users.controller.js","suspicious-users.resolve.js","suspicious-users.state.js","external-access-to-network.resolve.js","external-access-to-network.state.js","suspicious-vpn-data-amount.controller.js","vpn-geo-hopping.controller.js","fs-report-header.directive.js","configuration.module.js","configurationNavigation.service.js","configurationForm.service.js","configurationDecorator.service.js","configuration.controller.js","configuration-form.controller.js","fs-config-affected-items.directive.js","log-email.decorator.js","system-email.decorator.js","system-siem.decorator.js","system-alerts-email.decorator.js","system-syslog-forwarding.decorator.js","ConfigurationRenderer.class.js","fs-config-renderer.directive.js","integer.renderer.js","string.renderer.js","password.renderer.js","ip.renderer.js","severity.renderer.js","checkbox.renderer.js","drop-down.renderer.js","boolean.renderer.js","users-list.renderer.js","fs-config-renderer-alerts-mail.directive.js","fs-config-renderer-forward-historical-alerts.directive.js","test-email.renderer.template.js","fs-config-renderer-active-directory.directive.js","batch-alert-forwarding.js","pxgrid-configuration.module.js","pxgrid-configuration.controller.js","pxgrid-configuration.route.js","fs-analytics.module.js","fs-uuid.js","fs-analytics.js"],"names":[],"mappingszGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClyzvvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvzttnrxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnxtfxlppgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxlrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnrlaxIA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvrzlvxxhkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1iBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzhzvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdczdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnjtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/IA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjvvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnhnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvzdnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACltpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtotEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfjthLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxrxplEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxnvdvpljJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnxpxjvxpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzlrntxOA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhvrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbvijrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACprEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACljlpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvnpzxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvzRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrxlYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrnjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjjrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbnlxtjprvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjvpxxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClppneA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACffile":"index-main.3.0.0.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module(\"Page\", []).factory(\"page\", function () {\n        return {\n            setPageTitle: function (title) {\n                document.title = \"Fortscale - \" + title;\n            }\n        };\n    });\n})();\n","(function () {\n    \"use strict\";\n    var config = {\n        dateFormat: \"MMM DD, YYYY\",\n        hourFormat: \"HH:mm:ss\",\n        timestampFormat: \"MMM DD YYYY, HH:mm:ss\",\n        fallbackFormat: \"MM/DD/YYYY HH:mm:ss\",\n        timezone: localStorage.timezone ? parseInt(localStorage.timezone, 10) : (new Date()).getTimezoneOffset() / -60,\n        alwaysUtc: true,\n        //used to determine threshold for notifying potentially large queries\n        scoreThreshold: 50,\n        daysThreshold: 30,\n        popupLargeQueryMsg: \"Please notice that this change might cause the query to take longer than usual. \" +\n            \"To send the query, please select 'YES' otherwise select 'NO'\"\n    };\n    config.popupScoreMessage = \"You have chosen to filter the results by a Minimum Score smaller than <b>\" +\n        config.scoreThreshold + \"</b>. \" + config.popupLargeQueryMsg;\n    config.popupDaysMessage = \"You have chosen to filter the results by a Time Range greater than <b>\" +\n        config.daysThreshold + \"</b> days. \" + config.popupLargeQueryMsg;\n    angular.module(\"Config\", [])\n        .constant(\"config\", config)\n        .constant(\"configFlags\", {\n        qa: !!localStorage.qa,\n        verbose: !!localStorage.verbose,\n        mockData: !!localStorage.allowMockData\n    });\n}());\n","(function () {\n    'use strict';\n    var writeLastLoginTimeoutId = null;\n    /**\n     * Writes the last successfull rest api time to localStorage\n     */\n    function writeLastLoginTime() {\n        localStorage.setItem('last-login-time', new Date().valueOf() - 2000);\n    }\n    /**\n     * Creates a 2 s throttle before writing to localStorage\n     */\n    function setLastLoginTimeout() {\n        clearTimeout(writeLastLoginTimeoutId);\n        writeLastLoginTimeoutId = setTimeout(writeLastLoginTime, 2000);\n    }\n    angular.module('Config')\n        .factory('httpAuthorizationErrorInterceptor', [\n        '$q',\n        '$rootScope',\n        'BASE_URL',\n        function ($q, $rootScope, BASE_URL) {\n            return {\n                response: function (response) {\n                    // If a successfull attempt was made to the server api, the last login\n                    // time is updated\n                    var rgx = new RegExp('^' + BASE_URL);\n                    if (rgx.test(response.config.url)) {\n                        setLastLoginTimeout();\n                    }\n                    return response;\n                },\n                responseError: function (rejection) {\n                    if (rejection.status === 401 && rejection.statusText === 'Unauthorized') {\n                        // Get a session login. If it was not found, go to login without\n                        // the modal.\n                        var sessionLogin = sessionStorage.getItem('session-login');\n                        if (!sessionLogin) {\n                            var href = 'signin.html?redirect=' +\n                                encodeURIComponent(document.location.hash);\n                            window.location.href = href;\n                        }\n                        else {\n                            sessionStorage.removeItem('session-login');\n                            localStorage.removeItem('last-login-time');\n                            $rootScope.modal = {\n                                show: true,\n                                src: rejection.status === 403 ?\n                                    \"views/modals/password_expired.html\" :\n                                    \"views/modals/session_expired.html\"\n                            };\n                        }\n                    }\n                    return $q.reject(rejection);\n                }\n            };\n        }])\n        .config(['$httpProvider', function ($httpProvider) {\n            $httpProvider.interceptors.push('httpAuthorizationErrorInterceptor');\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Popup\", []).directive(\"popup\", [function () {\n            return {\n                templateUrl: 'scripts/directives/popup/popup.template.html',\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    var lastSrc;\n                    scope.$watch(attrs.popupConfig, function (popup) {\n                        if (!popup) {\n                            return;\n                        }\n                        scope.params = popup.params || {};\n                        scope.width = popup.width || 500;\n                        scope.height = popup.height || 400;\n                        scope.popupTitle = popup.title;\n                        scope.position = popup.position;\n                        scope.show = popup.show;\n                        if (popup.src && lastSrc !== popup.src) {\n                            scope.popupSrc = popup.src;\n                            lastSrc = popup.src;\n                        }\n                        if (popup.scope) {\n                            for (var scopeParam in popup.scope) {\n                                if (popup.scope.hasOwnProperty(scopeParam)) {\n                                    scope[scopeParam] = popup.scope[scopeParam];\n                                }\n                            }\n                        }\n                        setStyle();\n                    });\n                    scope.close = function () {\n                        if (scope.popup) {\n                            scope.show = scope.popup.show = false;\n                        }\n                    };\n                    element.on(\"click\", \"a[href]\", function () {\n                        scope.close();\n                        return true;\n                    });\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                    scope.$on(\"closePopups\", scope.close);\n                    function setStyle() {\n                        if (scope.position) {\n                            var top = scope.position.top, left = scope.position.left;\n                            if (top + scope.height + 30 > document.body.clientHeight) {\n                                top = scope.position.top - scope.height;\n                                if (top < document.body.scrollTop) {\n                                    top = document.body.clientHeight - scope.height - 30;\n                                }\n                            }\n                            if (left + scope.width + 30 > document.body.clientWidth) {\n                                left = scope.position.left - scope.width;\n                                if (left < document.body.scrollLeft) {\n                                    left = document.body.clientWidth - scope.width - 30;\n                                }\n                            }\n                            scope.popupStyle = {\n                                width: scope.width,\n                                height: scope.height,\n                                left: left,\n                                top: top\n                            };\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Dropdown\", []).directive(\"dropdown\", [\"$timeout\", function ($timeout) {\n            function dropdownLink(scope, element) {\n                function open() {\n                    dropdownEl.classList.add(\"dropdown-open\");\n                    setTimeout(setMenuPositionAndShow);\n                    document.body.addEventListener(\"mousedown\", onMouseDown);\n                }\n                function close(e) {\n                    if (e && (e.target.classList.contains(\"dropdown-list-toggle-label\") ||\n                        e.target.classList.contains(\"dropdown-directive-menu\"))) {\n                        return true;\n                    }\n                    dropdownEl.classList.remove(\"dropdown-visible\");\n                    $timeout(function () {\n                        dropdownEl.classList.remove(\"dropdown-open\");\n                        menuEl.style.removeProperty(\"height\");\n                        menuEl.style.removeProperty(\"width\");\n                    });\n                    document.body.removeEventListener(\"mousedown\", onMouseDown);\n                }\n                function toggle() {\n                    if (scope.isOpen) {\n                        close();\n                    }\n                    else {\n                        open();\n                    }\n                }\n                function onMouseDown(e) {\n                    var el = e.target;\n                    if (el.classList.contains(\"dropdown-list-toggle-label\")) {\n                        return true;\n                    }\n                    do {\n                        if (el === document.documentElement) {\n                            return close();\n                        }\n                        if (el === menuEl) {\n                            return true;\n                        }\n                    } while (!!(el = el.parentNode));\n                }\n                function setMenuPositionAndShow() {\n                    var buttonRect = buttonEl.getBoundingClientRect();\n                    menuEl.style.top = buttonRect.top + \"px\";\n                    menuEl.style.left = buttonRect.left + \"px\";\n                    var documentWidth = document.documentElement.clientWidth, documentHeight = document.documentElement.clientHeight, menuClientRect = menuEl.getBoundingClientRect(), maxWidth = documentWidth - MARGIN * 2, maxHeight = documentHeight - MARGIN * 2;\n                    var recalculateRect, dontSetLeft, dontSetTop;\n                    if (menuClientRect.width > maxWidth) {\n                        menuEl.style.width = maxWidth + \"px\";\n                        menuEl.style.left = MARGIN + \"px\";\n                        recalculateRect = true;\n                        dontSetLeft = true;\n                    }\n                    if (menuClientRect.height > maxHeight) {\n                        menuEl.style.height = maxHeight + \"px\";\n                        menuEl.style.top = MARGIN + \"px\";\n                        recalculateRect = true;\n                        dontSetTop = true;\n                    }\n                    if (!dontSetLeft || !dontSetTop) {\n                        if (recalculateRect) {\n                            menuClientRect = menuEl.getBoundingClientRect();\n                        }\n                        if (!dontSetLeft) {\n                            var farthestPosition = documentWidth - MARGIN;\n                            if (menuClientRect.right > farthestPosition && menuClientRect.width < maxWidth) {\n                                var leftDelta = menuClientRect.right - farthestPosition;\n                                menuEl.style.left = (buttonRect.left - leftDelta) + \"px\";\n                            }\n                        }\n                        if (!dontSetTop) {\n                            var lowestPosition = documentHeight - MARGIN;\n                            if (menuClientRect.bottom > lowestPosition && menuClientRect.height < maxHeight) {\n                                var bottomDelta = menuClientRect.bottom - lowestPosition;\n                                menuEl.style.top = (buttonRect.top - bottomDelta) + \"px\";\n                            }\n                        }\n                    }\n                    dropdownEl.classList.add(\"dropdown-visible\");\n                }\n                var dropdownEl = element[0], menuEl = dropdownEl.querySelector(\".dropdown-directive-menu\"), buttonEl = dropdownEl.querySelector(\"button\");\n                var MARGIN = 20;\n                scope.toggle = toggle;\n                menuEl.addEventListener(\"mouseup\", close);\n            }\n            return {\n                replace: true,\n                restrict: \"E\",\n                transclude: true,\n                scope: {\n                    buttonText: \"@\",\n                    buttonClass: \"@\",\n                    closeOnClick: \"=\",\n                    disabled: \"=\"\n                },\n                template: '<div class=\"dropdown-directive\"><button ng-click=\"toggle()\" class=\"{{buttonClass}}\" ' +\n                    'ng-disabled=\"disabled\">{{buttonText}}</button>' +\n                    '<div class=\"dropdown-directive-menu\" ng-transclude></div></div>',\n                link: dropdownLink\n            };\n        }]);\n})();\n","(function () {\n    'use strict';\n    var prefix = \"cache_\";\n    var CACHE_DISABLED = !!localStorage.__disableCache;\n    function Cache($rootScope, options) {\n        if (!options || !options.id) {\n            throw new Error(\"Can't instantiate Cache - no id specified.\");\n        }\n        this.$rootScope = $rootScope;\n        this.options = options || {};\n        this.data = {};\n        if (this.__defineGetter__) {\n            this.__defineGetter__(\"id\", function () {\n                return options.id;\n            });\n        }\n        else {\n            this.id = options.id;\n        }\n    }\n    Cache.clearAll = function () {\n        var cachePrefixRegExp = new RegExp(\"^\" + prefix);\n        for (var key in localStorage) {\n            if (cachePrefixRegExp.test(key)) {\n                localStorage.removeItem(key);\n            }\n        }\n    };\n    Cache.prototype = {\n        getKey: function (keyName) {\n            return [prefix, this.id, keyName].join(\"_\");\n        },\n        getItem: function (keyName, options) {\n            if (CACHE_DISABLED) {\n                return null;\n            }\n            var dataStr = localStorage.getItem(this.getKey(keyName));\n            if (!dataStr) {\n                return null;\n            }\n            var dataObj = JSON.parse(dataStr);\n            if (dataObj && dataObj.expires && dataObj.expires < new Date().valueOf()) {\n                this.removeItem(keyName);\n                return null;\n            }\n            var data = dataObj && dataObj.data;\n            if (options && options.hold) {\n                this.data[keyName] = data;\n            }\n            return data;\n        },\n        removeItem: function (keyName) {\n            if (CACHE_DISABLED) {\n                return null;\n            }\n            localStorage.removeItem(this.getKey(keyName));\n            if (this.data[keyName]) {\n                delete this.data[keyName];\n            }\n        },\n        setItem: function (keyName, data, options) {\n            if (CACHE_DISABLED) {\n                return null;\n            }\n            options = options || {};\n            if (!options.expires && !options.expiresIn) {\n                options.expiresIn = this.options.itemsExpireIn;\n            }\n            var storageData = { data: data };\n            if (options.expires) {\n                storageData.expires = options.expires;\n            }\n            else if (options.expiresIn) {\n                storageData.expires = new Date().valueOf() + options.expiresIn * 1000;\n            }\n            localStorage.setItem(this.getKey(keyName), JSON.stringify(storageData));\n            if (options.hold) {\n                this.data[keyName] = data;\n            }\n        }\n    };\n    angular.module(\"Cache\", []).factory('Cache', function ($injector) {\n        var constructor = function (options) { return $injector.instantiate(Cache, { options: options }); };\n        constructor.clearAll = Cache.clearAll;\n        return constructor;\n    });\n})();\n","(function () {\n    'use strict';\n    angular.module(\"EventBus\", [])\n        .factory(\"EventBus\", [\"$rootScope\", function ($rootScope) {\n            function EventBus() {\n                var eventHandlers = {};\n                this.subscribe = function (eventName, eventHandler) {\n                    var event = eventHandlers[eventName];\n                    if (!event) {\n                        event = eventHandlers[eventName] = [];\n                    }\n                    if (!~event.indexOf(eventHandler)) {\n                        event.push(eventHandler);\n                    }\n                };\n                this.unsubscribe = function (eventName, eventHandler) {\n                    var event = eventHandlers[eventName];\n                    if (event) {\n                        for (var i = event.length - 1; i >= 0; i--) {\n                            if (event[i] === eventHandler) {\n                                event.splice(i, 1);\n                            }\n                        }\n                    }\n                };\n                this.triggerEvent = function (eventName, data) {\n                    if (!eventName) {\n                        throw new Error(\"No event name specified to trigger.\");\n                    }\n                    if (typeof (eventName) !== \"string\") {\n                        throw new TypeError(\"Invalid eventName to trigger, expected a string but got \" +\n                            eventName.constructor.name + \".\");\n                    }\n                    var event = eventHandlers[eventName];\n                    if (event) {\n                        event.forEach(function (eventHandler) {\n                            eventHandler({ eventName: eventName }, data);\n                        });\n                    }\n                };\n            }\n            /**\n             * Creates objects for subscribing/unsubscribing to events in an object.\n             * e.g, called like this: EventBus.setToObject({}, [\"addChild\"]) the object will look like this:\n             * { onAddChild: { subscribe: function(eventHandler), ubsubscribe: function(eventHandler) }\n             * @param obj\n             * @param events\n             * @returns The created eventBus, so the object can trigger it internally.\n             */\n            EventBus.setToObject = function (obj, events) {\n                var eventBus = new EventBus();\n                events.forEach(function (event) {\n                    obj[getEventName(event)] = {\n                        subscribe: function (eventHandler) {\n                            eventBus.subscribe(event, eventHandler);\n                        },\n                        unsubscribe: function (eventHandler) {\n                            eventBus.unsubscribe(event, eventHandler);\n                        }\n                    };\n                });\n                return eventBus;\n            };\n            function getEventName(eventName) {\n                return \"on\" + eventName.replace(/\\b\\w/g, function (a) {\n                    return a.toUpperCase();\n                });\n            }\n            return EventBus;\n        }]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Manages app-wide events for operations that can't be done by function calls\n     * @param EventBus\n     * @returns {{triggerDashboardEvent: triggerDashboardEvent}}\n     */\n    function events(EventBus) {\n        function triggerDashboardEvent(event, data, params) {\n            var eventObj = {};\n            if (event.constructor === Array) {\n                eventObj.events = event;\n            }\n            else {\n                eventObj.event = event;\n            }\n            if (data) {\n                eventObj.data = data;\n            }\n            if (params) {\n                eventObj.params = params;\n            }\n            eventsEventBus.triggerEvent(\"dashboardEvent\", eventObj);\n        }\n        var api = {\n            triggerDashboardEvent: triggerDashboardEvent\n        };\n        var eventsEventBus = EventBus.setToObject(api, [\"dashboardEvent\"]);\n        return api;\n    }\n    events.$inject = [\"EventBus\"];\n    angular.module(\"Events\", [\"EventBus\"])\n        .factory(\"events\", events);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Utils\", [\"Config\"])\n        .factory(\"utils\", [\"$http\", \"config\",\n        function ($http, config) {\n            var ipAddressRegExp = /^(\\d{1,3}\\.){3}\\d{1,3}$/, // Not exactly accurate, but good enough for now\n            hashRegExp = /#.*$/, parsedStringTest = /\\{\\{/;\n            var stringParsers = {};\n            var parseStringFormatters = {\n                /**\n                 *\n                 * @param {*} value\n                 * @returns {*}\n                 * @description\n                 * Takes a value argument.\n                 * If value is number, the method tries to convert it to absolute number.\n                 * If value is anything but a number, the value is returned.\n                 */\n                abs: function (value) {\n                    return angular.isNumber(value) ? Math.abs(value) : value;\n                },\n                allowNull: function (value) {\n                    return value === undefined || value === null || value === \"\" ? null : value;\n                },\n                bytesCount: function (value) {\n                    return methods.numbers.bytesCount(value);\n                },\n                defaultIfEmpty: function (value, defaultValue) {\n                    return typeof value !== \"undefined\" ? value : defaultValue;\n                },\n                bytesPerSecCount: function (value) {\n                    value = methods.numbers.bytesCount(value);\n                    if (!value) {\n                        return value;\n                    }\n                    return value + \"/sec\";\n                },\n                capitalize: function (value) {\n                    return methods.strings.capitalize(value);\n                },\n                cast: function (value, type) {\n                    if (type === \"number\") {\n                        return parseFloat(value);\n                    }\n                    if (type === \"boolean\") {\n                        return !!value;\n                    }\n                    return value.toString();\n                },\n                closeDate: function (value) {\n                    var momentValue = methods.date.getMoment(value);\n                    if (momentValue.isValid()) {\n                        return momentValue.fromNow();\n                    }\n                    return value;\n                },\n                count: function (value) {\n                    return value.length;\n                },\n                /**\n                 * Get date string from date\n                 *\n                 * @param  {number|Object} value           Date time value or Moment instance\n                 * @param  {string}        format          Set format\n                 *     \"unixtimestamp\" - Unix time value\n                 *     \"valueOf\"       - Regular time value\n                 *     \"MM/DD/YYYY\"    - Custom pattern (any valid Moment pattern)\n                 *\n                 * @param  {string}        add             Custom `add` (can be negative)\n                 *     (e.g. \"4hours\", \"-1month\")\n                 *     See: http://momentjs.com/docs/#/manipulating/add/\n                 *\n                 * @param  {string}        startOrEndOfDay Set time to start/end of day\n                 *     \"start\" - Set time to start of day\n                 *     \"end\"   - Set time to end of day\n                 *\n                 * @return {string}                        Resulting date string or \"\"\n                 */\n                date: function (value, format, add, startOrEndOfDay) {\n                    if (!value) {\n                        return \"\";\n                    }\n                    // Build date object\n                    // If already a moment object, returns as is\n                    var momentValue = methods.date.getMoment(value);\n                    if (momentValue.isValid()) {\n                        if (startOrEndOfDay === \"start\") {\n                            momentValue.startOf(\"day\");\n                        }\n                        else if (startOrEndOfDay === \"end\") {\n                            momentValue.endOf(\"day\");\n                        }\n                        if (add) {\n                            // Custom `add` (e.g. \"4hours\" or \"-1month\")\n                            momentValue = methods.date.shiftDate(momentValue, add);\n                        }\n                        if (format) {\n                            // Predefined setups\n                            if (format === \"unixtimestamp\") {\n                                return Math.floor(momentValue.valueOf() / 1000);\n                            }\n                            if (format === \"valueOf\") {\n                                return momentValue.valueOf();\n                            }\n                            // If part of config default patterns, use it, otherwise use as is\n                            return momentValue.format(config[format] || format);\n                        }\n                        else {\n                            // Format using default patterns\n                            return momentValue.format(config.timestampFormat || config.fallbackFormat);\n                        }\n                    }\n                    return \"\";\n                },\n                dayDiff: function (value1, value2) {\n                    var m1 = methods.date.getMoment(value1), m2 = methods.date.getMoment(value2);\n                    if (!m1.isValid() || !m2.isValid()) {\n                        console.error(\"Can't get dayDiff, values: \", value1, value2);\n                        return \"?\";\n                    }\n                    return methods.date.diff(m1.toDate(), m2.toDate(), \"days\");\n                },\n                dateDiffFromNow: function (value, valueUnit, returnFormat, startOrEndOfDay) {\n                    valueUnit = valueUnit || \"days\";\n                    returnFormat = returnFormat || \"unixtimestamp\";\n                    switch (valueUnit) {\n                        case \"days\":\n                            value *= 24 * 60 * 60 * 1000;\n                            break;\n                        case \"hours\":\n                            value *= 60 * 60 * 1000;\n                            break;\n                        case \"minutes\":\n                            value *= 60 * 1000;\n                            break;\n                        case \"seconds\":\n                            value *= 1000;\n                            break;\n                    }\n                    // we reduce the time in miliseconds\n                    var momentValue = methods.date.getMoment(new Date().getTime() - value);\n                    if (startOrEndOfDay) {\n                        if (startOrEndOfDay === \"start\") {\n                            momentValue.startOf(\"day\");\n                        }\n                        else if (startOrEndOfDay === \"end\") {\n                            momentValue.endOf(\"day\");\n                        }\n                    }\n                    if (returnFormat === \"unixtimestamp\") {\n                        return Math.floor(momentValue.valueOf() / 1000);\n                    }\n                    if (returnFormat === \"valueOf\") {\n                        return momentValue.valueOf();\n                    }\n                    return momentValue.format(returnFormat); // for example \"MM/DD/YYYY HH:mm\"\n                },\n                dateSql: function (value, column) {\n                    return \"to_date(\" + parseStringFormatters.dateToUtc(column || 'date_time') + \")\";\n                },\n                dateToUtc: function (value, columnName) {\n                    return \"hours_add(\" + (value || columnName || 'date_time') + \", \" + config.timezone + \")\";\n                },\n                /**\n                 *\n                 * @param {*} value\n                 * @returns {*}\n                 * @description\n                 * Takes a value. Validates that the value is a number.\n                 * Returns the value if not a number.\n                 * Returns (n*100).toFixes(2) if is number.\n                 */\n                decimalToPercentage: function (value) {\n                    if (angular.isNumber(value)) {\n                        return (value * 100).toFixed(2);\n                    }\n                    return value;\n                },\n                /**\n                 * Given a number, which represents a time span, returns the number formatted with prettyDate\n                 */\n                diffToPrettyDate: function (value, units) {\n                    var seconds = methods.date.toSeconds(value, units);\n                    if (!seconds && seconds !== 0) {\n                        return seconds;\n                    }\n                    return methods.date.prettyDate(seconds, true);\n                },\n                /**\n                 * Given a number, which represents a time span, returns the number formatted with prettyTime\n                 */\n                diffToPrettyTime: function (value, units) {\n                    return methods.duration.prettyTime(value, units);\n                },\n                /**\n                 * Given a prettyTime format, return the number according to the units\n                 */\n                durationToNumber: function (value, units) {\n                    return methods.duration.durationToNumber(value, units);\n                },\n                divide: function (value, divideBy, mathFunc) {\n                    value = Number(value);\n                    divideBy = Number(divideBy);\n                    if (isNaN(value) || isNaN(divideBy)) {\n                        return value;\n                    }\n                    if (!angular.isNumber(value) || !angular.isNumber(Number(divideBy))) {\n                        return value;\n                    }\n                    var result = value / divideBy;\n                    if (mathFunc) {\n                        return Math[mathFunc](result);\n                    }\n                    return result;\n                },\n                encodeURIComponent: function (value) {\n                    return encodeURIComponent(value);\n                },\n                /**\n                 *\n                 * @param {number} score\n                 * @param {string} tableName\n                 * @returns {string}\n                 * @description\n                 * Given a table name and a minimum event score, returns the optimized table's name,\n                 * if it exists and the score fits.\n                 **/\n                eventsTable: function (score, tableName) {\n                    return methods.strings.getEventsTableName(tableName, score);\n                },\n                eventUserSql: function () {\n                    return \"users.displayname, users.id as userid, users.isuseradministrator, \" +\n                        \"users.isuserexecutive, users.accountisdisabled, users.isuseraccountservice, \" +\n                        \"users.followed\";\n                },\n                groupName: function (value) {\n                    var groupMatch = value.match(/^CN=([^\\,]+)/);\n                    if (groupMatch) {\n                        return groupMatch[1];\n                    }\n                    return value;\n                },\n                //This function return a string that replace the separator with the splitter,\n                //e.g: (shavit,yossi):join:$:, will be ---> shavit$yossi\n                \"join\": function (value, separator, splitter) {\n                    if (typeof (value) === \"string\") {\n                        value = value.split(splitter || \",\");\n                    }\n                    return (value) ? value.join(separator || \",\") : null;\n                },\n                max: function (value, secondValue) {\n                    var int1 = parseInt(value), int2 = parseInt(secondValue), max = Math.max(int1, int2);\n                    return isNaN(max) ? \"?\" : max;\n                },\n                min: function (value, secondValue) {\n                    var int1 = parseInt(value), int2 = parseInt(secondValue), min = Math.min(int1, int2);\n                    return isNaN(min) ? \"?\" : min;\n                },\n                multiply: function (value, multiplyBy) {\n                    if (!angular.isNumber(value) || !angular.isNumber(Number(multiplyBy))) {\n                        return value;\n                    }\n                    return value * multiplyBy;\n                },\n                not: function (value) {\n                    return !value;\n                },\n                number: function (value) {\n                    var match = value.match(/\\d+/);\n                    if (match) {\n                        return match[0];\n                    }\n                    return value;\n                },\n                \"or\": function (value1, value2) {\n                    return !value1 && value1 !== 0 ? value2 : value1;\n                },\n                //squiz cahrs to the left side of a value to make it be with the proper chars\n                //e.g: \"shavit\":10:- will be \"----shavit\"\n                padLeft: function (value, length, character) {\n                    return methods.strings.padLeft(value, length, character);\n                },\n                /*\n                 * parse strings into URL params format (e.g replace \",\" with \"%2C\")\n                 */\n                paramValue: function (value) {\n                    return encodeURIComponent(value);\n                },\n                removeEmptyValue: function (value) {\n                    if (value === undefined || value === null) {\n                        return \"\";\n                    }\n                    return value;\n                },\n                removeAtDomain: function (value) {\n                    if (!value) {\n                        return \"\";\n                    }\n                    var match = value.match(/^(.+)@/);\n                    return match ? (match[1] !== \"\" ? match[1] : value) : value;\n                },\n                removeDotDomain: function (value) {\n                    if (methods.strings.isIpAddress(String(value))) {\n                        return value;\n                    }\n                    if (!value) {\n                        return \"\";\n                    }\n                    var match = value.match(/^([^\\.]+)\\./);\n                    return match ? match[1] : value;\n                },\n                round: function (value) {\n                    if (!angular.isNumber(value)) {\n                        return value;\n                    }\n                    return Math.round(value);\n                },\n                secondsToHour: function (value, hourOnly) {\n                    if (hourOnly) {\n                        return Math.round(value / 3600);\n                    }\n                    return [\n                        methods.strings.padLeft(Math.floor(value / 3600), 2, \"0\"),\n                        methods.strings.padLeft(Math.floor(value % 3600 / 60), 2, \"0\"),\n                        methods.strings.padLeft(value % 60, 2, \"0\")\n                    ].join(\":\");\n                },\n                sinceNow: function (value, format, add, startOrEndOfDay) {\n                    return parseStringFormatters.date.call(this, \"now\", format, add, startOrEndOfDay);\n                },\n                span: function (value1, value2Field, divider) {\n                    var span = Math.abs(this.data[value2Field] - value1);\n                    if (!isNaN(span) && divider) {\n                        return Math.floor(span / divider);\n                    }\n                    return span;\n                },\n                \"switch\": function (value, ifTrue, ifFalse) {\n                    return value ? ifTrue : ifFalse;\n                },\n                paging: function (page, pagingParamName, pageSize) {\n                    page = page || 1;\n                    if (typeof (page) === \"string\") {\n                        page = parseInt(page);\n                    }\n                    var paging = this.params[pagingParamName], offset = (page - 1) * pageSize;\n                    pageSize = parseInt(pageSize, 10);\n                    if (!paging || !pageSize || isNaN(offset) || isNaN(pageSize) || !paging.total ||\n                        !paging.currentPageCount) {\n                        return null;\n                    }\n                    return (offset + 1) + \" - \" + (offset + paging.currentPageCount) + \" of \" + paging.total;\n                },\n                pluralOrSingular: function (value, singular, plural) {\n                    if (!value || !angular.isNumber(value)) {\n                        return plural;\n                    }\n                    if (value === 1) {\n                        return singular;\n                    }\n                    return plural;\n                },\n                properties: function (value) {\n                    var str = [];\n                    for (var p in value) {\n                        if (value.hasOwnProperty(p)) {\n                            str.push(p + \": \" + value[p]);\n                        }\n                    }\n                    return str.join(\", \");\n                },\n                timeSpan: function (value1, value2Field) {\n                    if (!value1 || value2Field && !this.data[value2Field]) {\n                        return null;\n                    }\n                    var value2 = value2Field ? this.data[value2Field] : 'now';\n                    var moment1 = methods.date.getMoment(value1);\n                    var moment2 = methods.date.getMoment(value2);\n                    if (!moment1.isValid() || !moment2.isValid()) {\n                        return \"?\";\n                    }\n                    var diff = Math.abs(moment1.diff(moment2));\n                    return diff < 1000 && (diff / 1000).toFixed(2) + \" seconds\" ||\n                        (diff = diff / 1000) < 60 && diff.toFixed(2) + \" seconds\" ||\n                        (diff = diff / 60) < 60 && Math.floor(diff) + \":\" +\n                            methods.strings.padLeft(String(Math.floor(60 * (diff % 1))), 2, \"0\") + \" minutes\" ||\n                        (diff = diff / 60) < 24 && Math.floor(diff) + \":\" +\n                            methods.strings.padLeft(String(Math.floor(60 * (diff % 1))), 2, \"0\") + \" hours\" ||\n                        Math.floor(diff / 24) + \" days\";\n                },\n                timeZone: function (value) {\n                    return new Date().getTimezoneOffset() * -1;\n                },\n                toLowerCase: function (value) {\n                    if (!value || !angular.isString(value)) {\n                        return value;\n                    }\n                    return value.toLowerCase();\n                },\n                toUpperCase: function (value) {\n                    if (!value || !angular.isString(value)) {\n                        return value;\n                    }\n                    return value.toUpperCase();\n                },\n                unixTimeToDate: function (value) {\n                    return methods.date.getMoment(Number(value) * 1000).toDate();\n                },\n                matches: function (value, pattern, matchValue, noMatchValue) {\n                    var patternRegexp = methods.regexp.patterns[pattern] || new RegExp(pattern);\n                    if (!patternRegexp || !patternRegexp.test(value)) {\n                        return noMatchValue;\n                    }\n                    return matchValue;\n                },\n                toFixed: function (value, decimals) {\n                    if (!value) {\n                        return value;\n                    }\n                    return parseFloat(value.toFixed(decimals));\n                },\n                yesNo: function (value) {\n                    return value ? \"Yes\" : \"No\";\n                }\n            };\n            function getParamValueForParser(value) {\n                if (!value || typeof (value) !== \"string\") {\n                    return value;\n                }\n                var paramMatch = value.match(/^@(.+)/);\n                if (paramMatch) {\n                    // This line is bad. There is no way to know what will be the 'this'\n                    // However, fixing it is a problem because the original intention is not known.\n                    // So adding validthis is the best ot the worst options :(\n                    /*jshint validthis: true */\n                    return this.params[paramMatch[1]];\n                }\n                return value;\n            }\n            function getValueVariable(val) {\n                var objName, path;\n                if (/^@/.test(val)) {\n                    objName = \"params\";\n                    path = val.match(/^@(.*)/)[1];\n                }\n                else {\n                    objName = \"data\";\n                    path = val;\n                }\n                var pathProperties = path.split(\".\"), propertyName = pathProperties[0], finalVariable = [objName + (~propertyName.indexOf(\"**dot**\") ? \"['\" + propertyName + \"']\" :\n                        \".\" + propertyName)];\n                if (pathProperties.length > 1) {\n                    for (var i = 1; i < pathProperties.length; i++) {\n                        propertyName = pathProperties[i];\n                        finalVariable.push(finalVariable[finalVariable.length - 1] +\n                            (~propertyName.indexOf(\"**dot**\") ? \"['\" + propertyName + \"']\" : \".\" + propertyName));\n                    }\n                }\n                return finalVariable.join(\" && \").replace(/\\*\\*dot\\*\\*/g, \".\");\n            }\n            function getParamsAndFormatting(param) {\n                var paramWithFormatting = param.replace(/\\\\:/g, \"*__*\"), params;\n                paramWithFormatting = paramWithFormatting.split(\":\");\n                var value = paramWithFormatting[0];\n                value = value.replace(/\\\\\\./g, \"**dot**\");\n                params = value.split(/\\s?\\|\\|\\s?/);\n                for (var i = params.length - 1; i >= 0; i--) {\n                    param = params[i];\n                    if (!param) {\n                        params.splice(i, 1);\n                    }\n                    else {\n                        params[i] = getValueVariable(param);\n                    }\n                }\n                if (paramWithFormatting.length === 1) {\n                    return { params: params };\n                }\n                var methodParams = paramWithFormatting.slice(2);\n                angular.forEach(methodParams, function (paramValue, i) {\n                    methodParams[i] = '\"' + paramValue.replace(/\\*__\\*/g, \":\") + '\"';\n                });\n                return {\n                    params: params,\n                    method: paramWithFormatting[1],\n                    parameters: methodParams\n                };\n            }\n            var methods = {\n                // Exposing parsing methods for unit testing\n                // This is private, do not call it from other files!\n                _parseStringFormatters: parseStringFormatters,\n                arrays: {\n                    areEqual: function (arr1, arr2) {\n                        if (!arr1 || !arr2) {\n                            throw new Error(\"Missing values to compare arrays.\");\n                        }\n                        if (!angular.isArray(arr1) || !angular.isArray(arr2)) {\n                            throw new Error(\"areEqual received non-array parameter(s).\");\n                        }\n                        if (arr1.length !== arr2.length) {\n                            return false;\n                        }\n                        for (var i = 0; i < arr1.length; i++) {\n                            if (!methods.objects.areEqual(arr1[i], arr2[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    /**\n                     *\n                     * @param {Array} arr1\n                     * @param {Array} arr2\n                     * @returns {boolean}\n                     * @description\n                     * Verifies that all members in second array exist in first array\n                     */\n                    doesNotContain: function (arr1, arr2) {\n                        var _errMsg = 'utils.arrays.doesNotContain: ';\n                        // Validations\n                        if (!angular.isArray(arr1)) {\n                            throw new TypeError(_errMsg + 'first argument must be an array.');\n                        }\n                        if (!angular.isArray(arr2)) {\n                            throw new TypeError(_errMsg + 'second argument must be an array.');\n                        }\n                        // Iterate through second array and find the indexOf for each member.\n                        // If any of the members return indexof of 0 and up the method will return false,\n                        // otherwise the method will return true.\n                        for (var i = 0; i < arr2.length; i++) {\n                            if (!!~arr1.indexOf(arr2[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    /**\n                     *\n                     * @param {Array} arr\n                     * @param findFunction\n                     * @returns {*}\n                     * @description\n                     * Takes an array and a function.\n                     * Iterates through the array.\n                     * The find function is invoked for each member of the array with the member.\n                     * If the fundFunction returns true, the method returns the member.\n                     * If findFunction does not return true for any of the iterations, the method returns null.\n                     */\n                    find: function (arr, findFunction) {\n                        // Validations\n                        var _errMsg = 'utils.arrays.find: ';\n                        if (!angular.isArray(arr)) {\n                            throw new TypeError(_errMsg + 'arr argument must be an array.');\n                        }\n                        if (!angular.isFunction(findFunction)) {\n                            throw new TypeError(_errMsg + 'findFunction argument must be a function.');\n                        }\n                        var member;\n                        for (var i = 0; i < arr.length; i++) {\n                            member = arr[i];\n                            if (findFunction(member)) {\n                                return member;\n                            }\n                        }\n                        return null;\n                    },\n                    /**\n                     * Given an array of objects, returns an array of unique values for the specified property.\n                     * For example, for ([{ a: 2, b: 1}, { a: 3, b: 1}, { a: 2, b: 6 }], \"a\"), returns [2, 3]\n                     * If the array is not of objects, the property is disregarded and an array of unique values\n                     * is returned, for example:\n                     * [1,2,4,2,4,6,1,2,1] returns [1,2,4,6]\n                     * @param array An array of objects\n                     * @param property The property to get unique values for\n                     */\n                    getUniqueValues: function (array, property) {\n                        var index = {};\n                        array.forEach(function (obj) {\n                            var value;\n                            if (obj) {\n                                if (angular.isObject(obj)) {\n                                    value = obj[property];\n                                }\n                                else {\n                                    value = obj;\n                                }\n                                if (value !== undefined) {\n                                    index[value] = true;\n                                }\n                            }\n                        });\n                        return Object.keys(index);\n                    },\n                    /**\n                     * Replaces the array's member in the 'index' position with the specified newMembers.\n                     * If multiple members are specified, the size of the array changes.\n                     * @param arr The array in which to do the replacement\n                     * @param index the position in the array that should be replaced\n                     * @param newMembers The new members. Can be either a value, object or array. If array,\n                     * the replacement puts all array members into the original array.\n                     */\n                    replace: function (arr, index, newMembers) {\n                        if (newMembers.constructor !== Array) {\n                            newMembers = [newMembers];\n                        }\n                        Array.prototype.splice.apply(arr, [index, 1].concat(newMembers));\n                    },\n                    shuffle: function (array) {\n                        var currentIndex = array.length, temporaryValue, randomIndex;\n                        // While there remain elements to shuffle...\n                        while (0 !== currentIndex) {\n                            // Pick a remaining element...\n                            randomIndex = Math.floor(Math.random() * currentIndex);\n                            currentIndex -= 1;\n                            // And swap it with the current element.\n                            temporaryValue = array[currentIndex];\n                            array[currentIndex] = array[randomIndex];\n                            array[randomIndex] = temporaryValue;\n                        }\n                        return array;\n                    },\n                    toSentence: function (array, connector, wrapper) {\n                        var arrayCopy = angular.copy(array);\n                        connector = connector || \"and\";\n                        if (arrayCopy.length < 2) {\n                            return arrayCopy.toString();\n                        }\n                        if (wrapper) {\n                            arrayCopy.forEach(function (member, i) {\n                                arrayCopy[i] = wrapper + member + wrapper;\n                            });\n                        }\n                        return arrayCopy.slice(0, -1).join(\", \") + \" \" + connector + \" \" +\n                            arrayCopy[arrayCopy.length - 1];\n                    }\n                },\n                date: {\n                    /**\n                     * Used to match \"4hours\" or \"-1month\"\n                     */\n                    re_shiftDate: /^(-?\\d+)(\\w+)$/,\n                    /**\n                     * Shift a date object forward or backwards\n                     *\n                     * @param  {Object} dateObj Moment date object\n                     * @param  {string} shiftBy Shift string (can be negative)\n                     *     (e.g. \"4hours\", \"-1month\")\n                     *     See: http://momentjs.com/docs/#/manipulating/add/\n                     *\n                     * @return {Object}         Shifted date object\n                     */\n                    shiftDate: function (dateObj, shiftBy) {\n                        var addMatch = shiftBy.match(this.re_shiftDate);\n                        // Validations\n                        if (!addMatch) {\n                            throw new Error(\"Invalid shiftBy string: \" + shiftBy);\n                        }\n                        if (!moment.isMoment(dateObj)) {\n                            throw new Error(\"dateObj must be a moment instance: \" + dateObj);\n                        }\n                        return dateObj.add(Number(addMatch[1]), addMatch[2]);\n                    },\n                    /**\n                     * Is the value a timestamp string\n                     *\n                     * @param  {*}       value Timestamp value\n                     * @return {Boolean}       Is it a timestamp in seconds or milliseconds\n                     */\n                    isTimeStamp: function (value) {\n                        if (typeof value !== 'string' && typeof value !== 'number') {\n                            throw new TypeError(\"Timestap value must be a String or a Number; Value: \" + value);\n                        }\n                        return /^(\\d{10}|\\d{13})$/.test(value);\n                    },\n                    compareDates: function (date1, date2) {\n                        return date1.getYear() === date2.getYear() && date1.getMonth() === date2.getMonth() &&\n                            date1.getDate() === date2.getDate();\n                    },\n                    diff: function (date1, date2, units) {\n                        if (date1 === \"now\") {\n                            date1 = this.getMoment('now').toDate();\n                        }\n                        if (date2 === \"now\") {\n                            date2 = this.getMoment('now').toDate();\n                        }\n                        var milliseconds = Math.abs(date2 - date1);\n                        if (!units || units === \"milliseconds\") {\n                            return milliseconds;\n                        }\n                        var seconds = milliseconds / 1000;\n                        if (units === \"minutes\") {\n                            return Math.round(seconds / 60);\n                        }\n                        if (units === \"hours\") {\n                            return Math.round(seconds / 3600);\n                        }\n                        if (units === \"days\") {\n                            return Math.round(seconds / (3600 * 24));\n                        }\n                        if (units === \"weeks\") {\n                            return Math.round(seconds / (3600 * 24 * 7));\n                        }\n                        if (units === \"months\") {\n                            return Math.round(seconds / (3600 * 24 * 30));\n                        }\n                        if (units === \"years\") {\n                            return Math.round(seconds / (3600 * 24 * 365));\n                        }\n                    },\n                    /**\n                     * Get a Moment object\n                     *\n                     * @param  {number|string|Object} date Input date\n                     * @param  {boolean=} utc         Flag to define usage of moment with UTC\n                     *     Use `null` to force the default setting\n                     * @param  {string=}  parseFormat Specific parsing format for the input\n                     *     See: http://momentjs.com/docs/#/parsing/string-format/\n                     *\n                     * @return {Object}       Moment object\n                     */\n                    getMoment: function (date, utc, parseFormat) {\n                        // Handle default UTC value from `config`\n                        if (typeof utc === 'undefined' || utc === null) {\n                            utc = config.alwaysUtc || false;\n                        }\n                        // Cache a reference to Moment depending on UTC flag\n                        var _moment = utc ? moment.utc : moment;\n                        if (!date) {\n                            date = 'now';\n                        }\n                        if (typeof date === \"number\") {\n                            // Sometimes the time value is returned in seconds and not milliseconds\n                            if (String(date).length === 10) {\n                                date = date * 1000;\n                            }\n                            return _moment(date);\n                        }\n                        if (typeof date === \"string\") {\n                            // If date in format \"+0d\" or \"-0h\"\n                            if (date === \"now\" || /^[\\-\\+]?0[smhd]$/.test(date)) {\n                                return _moment();\n                            }\n                            // If a string of a number date value, reasses as a number\n                            if (/^\\d+$/.test(date)) {\n                                return this.getMoment(Number(date));\n                            }\n                            // If date in format \"YYYY-MM-DD\"\n                            if (/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n                                var newDate = _moment(date, \"YYYY-MM-DD\");\n                                if (newDate.isValid()) {\n                                    return newDate;\n                                }\n                            }\n                            // If date in format \"4hours\" or \"-1month\",\n                            // return current time after shift\n                            if (this.re_shiftDate.test(date)) {\n                                return this.shiftDate(_moment(), date);\n                            }\n                        }\n                        // If already a moment object, return it\n                        if (moment.isMoment(date)) {\n                            return date;\n                        }\n                        // If a specific parsing format has been given\n                        if (parseFormat && _moment(date, parseFormat).isValid()) {\n                            return _moment(date, parseFormat);\n                        }\n                        // If a JS date object, wrap it with moment\n                        // Or if it's a valid date after creation, use that\n                        if (angular.isDate(date) || _moment(date).isValid()) {\n                            return _moment(date);\n                        }\n                        throw new Error(\"Invalid date: \" + date);\n                    },\n                    getDatesSpan: function (start, end) {\n                        var firstDate = this.getMoment(start), lastDate = this.getMoment(end);\n                        if (!firstDate.isValid() || !lastDate.isValid()) {\n                            return null;\n                        }\n                        var daysCount = Math.abs(firstDate.diff(lastDate, \"days\")), dates = [];\n                        for (var i = 0; i < daysCount; i++) {\n                            dates.push(firstDate.add(1, \"days\").clone().toDate());\n                        }\n                        return dates;\n                    },\n                    localToUtc: function (date) {\n                        var moment = this.getMoment(date);\n                        if (!moment.isValid()) {\n                            throw new Error(\"Invalid date: \" + date);\n                        }\n                        moment.subtract(config.timezone, \"hours\");\n                        return moment.toDate();\n                    },\n                    // ES6 Getter\n                    get timezone() {\n                        return config.timezone;\n                    },\n                    toUnixTimestamp: function (date) {\n                        var moment = this.getMoment(date);\n                        return Math.floor(moment.valueOf() / 1000);\n                    },\n                    utcToLocal: function (date) {\n                        var moment = this.getMoment(date);\n                        if (!moment.isValid()) {\n                            throw new Error(\"Invalid date: \" + date);\n                        }\n                        moment.add(config.timezone, \"hours\");\n                        return moment.toDate();\n                    },\n                    prettyDate: function (diffSeconds, isShort) {\n                        var day_diff = Math.floor(diffSeconds / 86400);\n                        var units = {\n                            long: {\n                                now: \"< 1 minute\",\n                                second: \"1 second\",\n                                seconds: \" seconds\",\n                                minute: \"1 minute\",\n                                minutes: \" minutes\",\n                                hour: \"1 hour\",\n                                hours: \" hours\",\n                                yesterday: \"1 day\",\n                                days: \" days\",\n                                week: \" week\",\n                                weeks: \" weeks\",\n                                month: \"1 month\",\n                                months: \" months\",\n                                years: \" years\"\n                            },\n                            short: {\n                                now: \"< 1m\",\n                                second: \"1s\",\n                                seconds: \"s\",\n                                minute: \"1m\",\n                                minutes: \"m\",\n                                hour: \"1h\",\n                                hours: \"h\",\n                                yesterday: \"1d\",\n                                days: \"d\",\n                                weeks: \"w\",\n                                month: \"1M\",\n                                months: \"M\",\n                                years: \"y\"\n                            }\n                        };\n                        var unitsToUse = isShort ? units.short : units.long;\n                        if (isNaN(day_diff) || day_diff < 0) {\n                            return;\n                        }\n                        return (day_diff === 0 && (diffSeconds < 1 && unitsToUse.now ||\n                            diffSeconds === 1 && unitsToUse.second ||\n                            diffSeconds < 60 && diffSeconds + unitsToUse.seconds ||\n                            diffSeconds < 120 && unitsToUse.minute ||\n                            diffSeconds < 3600 && Math.floor(diffSeconds / 60) + unitsToUse.minutes ||\n                            diffSeconds < 7200 && unitsToUse.hour ||\n                            diffSeconds < 86400 && Math.floor(diffSeconds / 3600) + unitsToUse.hours) ||\n                            day_diff === 1 && unitsToUse.yesterday ||\n                            day_diff < 14 && day_diff + unitsToUse.days ||\n                            day_diff < 31 && Math.ceil(day_diff / 7) + unitsToUse.weeks ||\n                            day_diff < 62 && unitsToUse.month ||\n                            day_diff < 365 && Math.floor(day_diff / 30.416) + unitsToUse.months ||\n                            Math.floor(day_diff / 365) + unitsToUse.years);\n                    },\n                    toSeconds: function (value, units) {\n                        switch (units) {\n                            case \"milliseconds\":\n                                return value / 1000;\n                            case \"seconds\":\n                                return value;\n                            case \"minutes\":\n                                return value * 60;\n                            case \"hours\":\n                                return value * 3600;\n                            case \"days\":\n                                return value * 3600 * 24;\n                            default:\n                                throw new Error(\"Unsupported unit, '\" + units +\n                                    \"', expecting milliseconds, seconds, minutes, hours or days.\");\n                        }\n                    }\n                },\n                http: {\n                    wrappedHttpGet: function (url, config) {\n                        return $http.get(url, config).then(function (response) {\n                            return response.data;\n                        });\n                    },\n                    wrappedHttpPost: function (url, config) {\n                        return $http.post(url, config).then(function (response) {\n                            return response.data;\n                        });\n                    }\n                },\n                numbers: {\n                    parse: function (value) {\n                        if (typeof (value) === \"number\") {\n                            return value;\n                        }\n                        if (typeof (value) === \"string\") {\n                            if (/^(\\-|\\+)?([0-9\\.]+|Infinity)$/.test(value)) {\n                                return value;\n                            }\n                        }\n                        return NaN;\n                    },\n                    /**\n                     *\n                     * @param {*} value\n                     * @returns {string}\n                     * @description\n                     * Takes a value argument.\n                     * It tries to parse it to integer.\n                     * If the parse fails, RangeError is thrown.\n                     * If the parse is successful a string is returned by the following value:\n                     * (n < 10^3) => n + ' B'\n                     * else (n < 10^6) => (n/10^3).toFixed(2) + ' KB'\n                     * else (n < 10^9) => (n/10^6).toFixed(2) + ' MB'\n                     * else (n < 10^12) => (n/10^9).toFixed(2) + ' TB'\n                     * Examples: bytesCount('999990') //returns '999.99 KB'\n                     * Examples: bytesCount(1010000000000) //returns '999.99 GB'\n                     */\n                    bytesCount: function (value) {\n                        if (!value) {\n                            return value;\n                        }\n                        var count = parseInt(value, 10);\n                        if (isNaN(count)) {\n                            throw new RangeError('utils.numbers.bytesCount: parseInt(value, 10) returned NaN.');\n                        }\n                        return count < 1000 && count + \" B\" ||\n                            (count = count / 1000) < 1000 && count.toFixed(2) + \" KB\" ||\n                            (count = count / 1000) < 1000 && count.toFixed(2) + \" MB\" ||\n                            (count = count / 1000) < 1000 && count.toFixed(2) + \" GB\" ||\n                            (count = count / 1000) && count.toFixed(2) + \" TB\";\n                    }\n                },\n                strings: {\n                    /**\n                     * Return the string with a capital letter\n                     * @param str\n                     * @returns {*}\n                     */\n                    capitalize: function (str) {\n                        if (!str) {\n                            return str;\n                        }\n                        if (!angular.isString(str)) {\n                            throw new TypeError('utils.strings.capitalize: str is not a String');\n                        }\n                        return str.toLowerCase().replace(/\\b\\w/g, \n                        //For each first character of any word - do \"char\".upparcase\n                        function (c) {\n                            return c.toUpperCase();\n                        });\n                    },\n                    /**\n                     *\n                     * @param {string|*} tableName\n                     * @param {number=} minScore Optional\n                     * @returns {string}\n                     * @description\n                     * Given a table name and a minimum event score, returns the optimized table's name,\n                     * if it exists and the score fits.\n                     */\n                    getEventsTableName: function (tableName, minScore) {\n                        // Validations\n                        var _errMsg = 'utils.strings.getEventsTableName: ';\n                        if (!tableName) {\n                            throw new ReferenceError(_errMsg +\n                                'tableName argument must not be falsy.');\n                        }\n                        // If tableName is not in this whiteList array, the tableName is returned as-is\n                        if ([\"authenticationscores\", \"sshscores\", \"vpndatares\", \"vpnsessiondatares\"]\n                            .indexOf(tableName) === -1) {\n                            return tableName;\n                        }\n                        if (minScore && angular.isNumber(minScore) && minScore >= 50) {\n                            return tableName + \"_top\";\n                        }\n                        return tableName;\n                    },\n                    /**\n                     * Test IPAddress\n                     * @param str\n                     * @returns {boolean}\n                     */\n                    isIpAddress: function (str) {\n                        return ipAddressRegExp.test(str);\n                    },\n                    /**\n                     * Return value of a shorter string acording to length\n                     * @param str\n                     * @param numOfChars\n                     * @returns {string}\n                     */\n                    shortStr: function (str, numOfChars) {\n                        if (str.length > 0) {\n                            if (str.length > numOfChars) {\n                                return str.substring(0, numOfChars - 3) + \"...\";\n                            }\n                            else {\n                                return str;\n                            }\n                        }\n                    },\n                    padLeft: function (str, length, padCharacter) {\n                        str = String(str);\n                        var padLength = length - str.length;\n                        if (padLength <= 0) {\n                            return str;\n                        }\n                        var pad = [];\n                        while (pad.length < padLength) {\n                            pad.push(padCharacter);\n                        }\n                        return pad.join(\"\") + str;\n                    },\n                    /**\n                     * @param value The string to parse (placeholders using {{}} )\n                     * @param data  Parameters to use to replace placeholders\n                     * @param params    Parameters to use to replace placeholders\n                     * @param index\n                     * @param dataOverrideParams    In case the same parameters exists both in the data and params,\n                     * use the data's (default is false)\n                     * @returns {*} The parsed string\n                     */\n                    parseValue: function (value, data, params, index, dataOverrideParams) {\n                        if (!value) {\n                            return \"\";\n                        }\n                        if (!parsedStringTest.test(value)) {\n                            return value;\n                        }\n                        var cachedParser = stringParsers[value];\n                        if (!cachedParser) {\n                            var foundVars = false, escapedValue = value.replace(/\\\"/g, \"\\\\\\\"\");\n                            var parserStr = escapedValue.replace(/\\{\\{([^\\}]+)\\}\\}/g, function (match, variable) {\n                                foundVars = true;\n                                var paramsAndFormatting = getParamsAndFormatting(variable);\n                                if (paramsAndFormatting.method) {\n                                    return '\" + parsers.removeEmptyValue.call({ originalContext: this }, parsers.' +\n                                        paramsAndFormatting.method + '.apply({ data: data, params: params, ' +\n                                        'index: index, originalContext: this }, [' +\n                                        paramsAndFormatting.params.join(\" || \") + ', ' +\n                                        paramsAndFormatting.parameters.join(\",\") +\n                                        '].map(getParamValueForParser.bind({ params: params })))) + \"';\n                                }\n                                else {\n                                    return '\" + parsers.removeEmptyValue.call({ originalContext: this }, ' +\n                                        paramsAndFormatting.params.join(\" || \") + ') + \"';\n                                }\n                            });\n                            if (!foundVars) {\n                                return value;\n                            }\n                            parserStr = 'try{ return \"' + parserStr +\n                                '\"; } catch(e){ console.error(\"Error parsing string \\'' + value +\n                                '\\': \", e.message); throw e; }';\n                            /*jslint evil: true */\n                            //The following code causes: The Function constructor is a form of eval.\n                            cachedParser = stringParsers[value] = new Function(\"data\", \"params\", \"index\", \"parsers\", \"getParamValueForParser\", parserStr);\n                        }\n                        /*\n                         IMPORTANT: This is a hack. Originally we used only the \"data\" to fill the placeholders\n                         in the value string, but after adding also the \"params\", we didn't handle the scenario of\n                         properties with the same key that appear both in \"data\" and \"params\". In order to avoid\n                         major changes we left the default to be \"params\" overrides \"data\", but left an option to\n                         change it. We should probably try to let the \"data\" override the \"param\"\n                         */\n                        if (dataOverrideParams) {\n                            // In case the same parameters exists both in the data and params, use the data's\n                            return cachedParser(angular.extend({}, params, data), params || {}, index, parseStringFormatters, getParamValueForParser) || \"\";\n                        }\n                        else {\n                            // In case the same parameters exists both in the data and params, use the param's\n                            return cachedParser(angular.extend({}, data, params), params || {}, index, parseStringFormatters, getParamValueForParser) || \"\";\n                        }\n                    }\n                },\n                duration: {\n                    /**\n                     gets string of format hh:mm:ss and return number that represent duration in decimal\n                     notation (hours scope).\n                     */\n                    durationToNumber: function (value, units) {\n                        if (value === undefined || value === 'undefined' || value === null) {\n                            return 0;\n                        }\n                        var duration = moment.duration(value, units);\n                        switch (units) {\n                            case \"milliseconds\":\n                                return duration.asMilliseconds();\n                            case \"seconds\":\n                                return duration.asSeconds();\n                            case \"minutes\":\n                                return duration.asMinutes();\n                            case \"hours\":\n                                return duration.asHours().toFixed(2);\n                            case \"days\":\n                                return duration.asDays().toFixed(2);\n                            default:\n                                throw new Error(\"Unsupported unit, '\" + units + \"', expecting milliseconds, \" +\n                                    \"seconds, minutes, hours or days.\");\n                        }\n                    },\n                    /**\n                     * Formats an int representing number of seconds into a time string, hh:mm:ss\n                     * @param diffSeconds\n                     */\n                    prettyTime: function (diffSeconds, units) {\n                        // if no duration in source data - like to show the value as \"\" -\n                        // which will be translated to N/A\n                        if (diffSeconds === null || diffSeconds === undefined) {\n                            return \"\";\n                        }\n                        else {\n                            var duration = moment.duration(Number(diffSeconds), units);\n                            var days = duration.days();\n                            //should never happened in our product - all our sessions are defined as less\n                            // than 24 hours\n                            if (days && days > 0) {\n                                return days + \"d\";\n                            }\n                            else {\n                                var hours = duration.hours(), minutes = duration.minutes(), seconds = duration.seconds();\n                                if (hours || minutes || seconds) {\n                                    return methods.strings.padLeft(hours, 2, \"0\") + \":\" +\n                                        methods.strings.padLeft(minutes, 2, \"0\") + \":\" +\n                                        methods.strings.padLeft(seconds, 2, \"0\");\n                                }\n                                else {\n                                    //if session duration is less than 1 sec - will shown as 0 second\n                                    return \"00:00:00\";\n                                }\n                            }\n                        }\n                    }\n                },\n                objects: {\n                    arrayToObject: function (arr, property) {\n                        var obj = {};\n                        angular.forEach(arr, function (member) {\n                            var memberPropertyValue = member[property];\n                            if (memberPropertyValue) {\n                                obj[memberPropertyValue] = member;\n                            }\n                        });\n                        return obj;\n                    },\n                    areEqual: function (a, b) {\n                        if (typeof (a) !== typeof (b)) {\n                            return false;\n                        }\n                        if (!a && b || a && !b) {\n                            return false;\n                        }\n                        if (angular.isArray(a) !== angular.isArray(b)) {\n                            return false;\n                        }\n                        if (angular.isArray(a) && angular.isArray(b)) {\n                            if (a.length !== b.length) {\n                                return false;\n                            }\n                            for (var i = 0; i < a.length; i++) {\n                                if (!methods.objects.areEqual(a[i], b[i])) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        }\n                        else if (angular.isObject(a)) {\n                            if (a.constructor !== b.constructor) {\n                                return false;\n                            }\n                            if (angular.isDate(a) && angular.isDate(b)) {\n                                return a.valueOf() === b.valueOf();\n                            }\n                            if (Object.keys(a).length !== Object.keys(b).length) {\n                                return false;\n                            }\n                            for (var p in a) {\n                                if (a.hasOwnProperty(p)) {\n                                    if (!methods.objects.areEqual(a[p], b[p])) {\n                                        return false;\n                                    }\n                                }\n                            }\n                            return true;\n                        }\n                        else {\n                            return a === b;\n                        }\n                    },\n                    /**\n                     * Return true if obj contains any of the specified param names\n                     * @param obj\n                     * @param paramNames\n                     */\n                    containsAnyParam: function (obj, paramNames) {\n                        for (var i = 0; i < paramNames.length; i++) {\n                            if (obj[paramNames[i]] !== undefined) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    },\n                    containsAllParams: function (obj, paramNames) {\n                        for (var i = 0, paramName; (!!(paramName = paramNames[i])); i++) {\n                            if (!obj[paramName]) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    /**\n                     * DEEP copy! Muaahaaahaahhh!\n                     * @param obj\n                     * @returns {*|void}\n                     */\n                    copy: function (obj) {\n                        return methods.objects.extend({}, obj);\n                    },\n                    /**\n                     * Extends objects, uses jQuery.extend, since angular.extend doesn't have deep-extend support.\n                     * @param args\n                     * @returns {*|void}\n                     */\n                    extend: function (args) {\n                        return jQuery.extend.apply(this, [true].concat(Array.prototype.slice.call(arguments, 0)));\n                    },\n                    getObjectByPath: function (rootObj, path) {\n                        path = path || '';\n                        var parts = path.split(\".\"), obj = rootObj;\n                        for (var i = 0, part; (part = parts[i]) !== undefined; i++) {\n                            obj = obj[part];\n                            if (obj === null || obj === undefined) {\n                                return obj;\n                            }\n                        }\n                        return obj;\n                    },\n                    toArray: function (obj, formatter) {\n                        var arr = [];\n                        for (var p in obj) {\n                            if (obj.hasOwnProperty(p)) {\n                                arr.push(formatter ? formatter(p, obj[p]) : obj[p]);\n                            }\n                        }\n                        return arr;\n                    }\n                },\n                regexp: {\n                    patterns: {\n                        IP: /^(\\d{1,3}\\.){3}(\\d{1,3})$/\n                    }\n                },\n                url: {\n                    escapeUrl: function (url) {\n                        var parts = url.split(\"?\");\n                        if (parts.length > 1) {\n                            var params = parts[1].split(\"&\"), escapedParams = [];\n                            params.forEach(function (param) {\n                                var paramSplit = param.match(/^([\\w\\.]+=)(.*)$/);\n                                if (paramSplit) {\n                                    escapedParams.push(paramSplit[1] + encodeURIComponent(paramSplit[2]));\n                                }\n                                else {\n                                    escapedParams.push(param);\n                                }\n                            });\n                            return parts[0] + \"?\" + escapedParams.join(\"&\");\n                        }\n                        return url;\n                    },\n                    getQuery: function (params) {\n                        var paramValue, encodedParams = [];\n                        for (var paramName in params) {\n                            if (params.hasOwnProperty(paramName)) {\n                                paramValue = params[paramName];\n                                if (angular.isObject(paramValue)) {\n                                    paramValue = JSON.stringify(paramValue);\n                                }\n                                if (paramValue !== null && paramValue !== undefined && paramValue !== \"\") {\n                                    encodedParams.push([paramName, encodeURIComponent(paramValue)].join(\"=\"));\n                                }\n                            }\n                        }\n                        return encodedParams.join(\"&\");\n                    },\n                    getQueryParams: function () {\n                        var queryParams = window.location.search;\n                        return this.parseUrlParams(queryParams);\n                    },\n                    //given a url string parse it to an object where each url parameter is mapped to a property\n                    // in the return object\n                    parseUrlParams: function (url) {\n                        var params = {};\n                        if (url) {\n                            // Discard the URL prefix (take only the parameters)\n                            var index = url.indexOf(\"?\");\n                            var paramKeyValues = index >= 0 ? url.substring(index + 1).split(\"&\") : [];\n                            angular.forEach(paramKeyValues, function (keyValue) {\n                                if (keyValue) {\n                                    var parts = keyValue.split(\"=\");\n                                    var decoded = decodeURIComponent(parts[1]);\n                                    // Do not add key-value pair if decoding failed\n                                    if (decoded) {\n                                        params[parts[0]] = decoded;\n                                    }\n                                }\n                            });\n                        }\n                        return params;\n                    },\n                    haveTheSameHash: function (url1, url2) {\n                        var hash1 = url1.match(hashRegExp), hash2 = url2.match(hashRegExp);\n                        if (hash1 && hash2) {\n                            return hash1[0] === hash2[0];\n                        }\n                        return false;\n                    }\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Format\", [\"Utils\"])\n        .factory(\"format\", [\"utils\", function (utils) {\n            var methods = {\n                boolean: function (value) {\n                    return !!value;\n                },\n                date: function (value, options) {\n                    var date = utils.date.getMoment(value);\n                    if (options.prettyDate) {\n                        return utils.date.prettyDate(date.toDate(), options.shortPrettyDate);\n                    }\n                    return date.format(options.format);\n                },\n                float: function (value, options) {\n                    var floatValue = parseFloat(value, 10);\n                    if (options && options.decimals) {\n                        return floatValue.toFixed(options.decimals);\n                    }\n                    else {\n                        return floatValue;\n                    }\n                },\n                int: function (value, options) {\n                    return parseInt(value, 10);\n                },\n                formatItem: function (item, value) {\n                    if (!item.format) {\n                        return value;\n                    }\n                    var method = methods[item.format];\n                    if (!method) {\n                        return value;\n                    }\n                    return method(value, item.formatOptions);\n                }\n            };\n            methods.datetime = methods.date;\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Conditions\", [\"Format\", \"Transforms\", \"DataEntities\"]).factory(\"conditions\", [\"format\", \"utils\", \"dataEntities\", function (format, utils, dataEntities) {\n            var validations = {\n                contains: function (val1, val2) {\n                    if (validations.hasNoValue(val1) || validations.hasNoValue(val2)) {\n                        return false;\n                    }\n                    if (angular.isArray(val1)) {\n                        return !!~val1.indexOf(val2);\n                    }\n                    var regexp = new RegExp(val2, \"i\");\n                    return regexp.test(val1);\n                }, equals: function (val1, val2) {\n                    if (angular.isObject(val1) && angular.isObject(val2)) {\n                        return val1 === val2;\n                    }\n                    if ((val1 === null || val1 === undefined) && (val2 === null || val2 === undefined)) {\n                        return true;\n                    }\n                    if (((val1 === null || val1 === undefined) && (val2 !== null && val2 !== undefined)) ||\n                        ((val1 !== null && val1 !== undefined) && (val2 === undefined || val2 === undefined))) {\n                        return false;\n                    }\n                    return val1.toString() === val2.toString();\n                }, entityExists: function (val1, val2) {\n                    return dataEntities.entityExists(val1 || val2);\n                }, entityDoesntExists: function (val1, val2) {\n                    return !dataEntities.entityExists(val1 || val2);\n                }, isFalsy: function (val) {\n                    return !val;\n                }, isTruthy: function (val) {\n                    return !!val;\n                }, notEquals: function (val1, val2) {\n                    return val1 !== val2;\n                }, greaterThan: function (val1, val2) {\n                    return val1 > val2;\n                }, greaterThanOrEquals: function (val1, val2) {\n                    return val1 >= val2;\n                }, lesserThan: function (val1, val2) {\n                    return val1 < val2;\n                }, lesserThanOrEqual: function (val1, val2) {\n                    return val1 <= val2;\n                }, included: function (val1, arr) {\n                    return !!~arr.indexOf(val1);\n                }, hasValue: function (value) {\n                    return value !== undefined && value !== null;\n                }, hasNoValue: function (value) {\n                    return !validations.hasValue(value);\n                }\n            };\n            function getQueryParamOperator(paramValue) {\n                var paramOperator = getParamOperator(paramValue), defaultOperator = \"equals\";\n                if (!paramOperator) {\n                    return defaultOperator;\n                }\n                for (var operatorName in operatorTypesParamPrefixes) {\n                    if (operatorTypesParamPrefixes.hasOwnProperty(operatorName)) {\n                        if (operatorTypesParamPrefixes[operatorName] === paramOperator) {\n                            return operatorName;\n                        }\n                    }\n                }\n                return defaultOperator;\n            }\n            var paramParsers = {\n                dateRange: function (param) {\n                    if (angular.isObject(param)) {\n                        return param;\n                    }\n                    var dates = param.split(\"::\"), dateRange = {\n                        timeStart: dates[0], timeEnd: dates[0]\n                    };\n                    if (dates.length > 1) {\n                        dateRange.timeEnd = dates[1];\n                    }\n                    return dateRange;\n                },\n                range: function (param) {\n                    if (angular.isObject(param)) {\n                        return param;\n                    }\n                    var range = param.split(\"::\");\n                    return {\n                        min: range[0], max: range[1]\n                    };\n                },\n                \"default\": function (param) {\n                    return param;\n                }\n            };\n            function getParamOperator(param) {\n                var operator;\n                for (var i = 0, prefix; (!!(prefix = operatorCharacters[i])); i++) {\n                    if (!param.indexOf(prefix)) {\n                        if (!operator || prefix.length > operator.length) {\n                            operator = prefix;\n                        }\n                    }\n                }\n                return operator;\n            }\n            var operatorTypesParamPrefixes = {\n                contains: \"~\",\n                notEquals: \"!\",\n                greaterThan: \">\",\n                greaterThanOrEquals: \">=\",\n                lesserThan: \"<\",\n                lesserThanOrEqual: \"<=\",\n                startsWith: \"^\",\n                endsWith: \"$\",\n                \"in\": \"[]\",\n                dateRange: \":\",\n                hasValue: \"*\",\n                hasNoValue: \"!*\",\n                range: \"--\"\n            };\n            var operatorCharacters = [];\n            angular.forEach(operatorTypesParamPrefixes, function (prefix) {\n                operatorCharacters.push(prefix);\n            });\n            var operators = {\n                boolean: {\n                    \"default\": \"equals\", operators: [{ name: \"equals\", display: \"=\", requiresValue: true }]\n                }, string: {\n                    \"default\": \"equals\",\n                    operators: [{ name: \"equals\", display: \"=\", requiresValue: true, allowMultiple: true },\n                        { name: \"in\", display: \"IN\", text: \"=\", requiresValue: true },\n                        { name: \"notEquals\", display: \"!=\", requiresValue: true, allowMultiple: true },\n                        { name: \"contains\", display: \"Contains\", requiresValue: true },\n                        { name: \"hasValue\", display: \"Has value\", sql: \"IS NOT NULL\", requiresValue: false },\n                        { name: \"hasNoValue\", display: \"Has no value\", sql: \"IS NULL\", requiresValue: false },\n                        { name: \"startsWith\", display: \"Starts With\", requiresValue: true },\n                        { name: \"endsWith\", display: \"Ends With\", requiresValue: true },\n                        { name: \"regexp\", display: \"RegExp\", requiresValue: true }]\n                }, number: {\n                    \"default\": \"equals\",\n                    operators: [{ name: \"equals\", display: \"=\", requiresValue: true },\n                        { name: \"greaterThan\", display: \">\", requiresValue: true, types: [\"number\"] },\n                        { name: \"greaterThanOrEquals\", display: \"≥\", requiresValue: true, types: [\"number\"] },\n                        { name: \"lesserThan\", display: \"<\", requiresValue: true, types: [\"number\"] },\n                        { name: \"lesserThanOrEqual\", display: \"≤\", requiresValue: true, types: [\"number\"] },\n                        { name: \"hasValue\", display: \"Has value\", requiresValue: false },\n                        { name: \"hasNoValue\", display: \"Has no value\", requiresValue: false }]\n                }, date: {\n                    \"default\": \"dateRange\",\n                    operators: [{ name: \"dateRange\", display: \"Dates\", text: \"\", requiresValue: true, types: [\"date\"] },\n                        { name: \"greaterThan\", display: \">\", requiresValue: true, types: [\"date\"] },\n                        { name: \"greaterThanOrEquals\", display: \"≥\", requiresValue: true, types: [\"date\"] },\n                        { name: \"lesserThan\", display: \"<\", requiresValue: true, types: [\"date\"] },\n                        { name: \"lesserThanOrEqual\", display: \"≤\", requiresValue: true, types: [\"date\"] }]\n                }, hours: {\n                    \"default\": \"greaterThan\",\n                    operators: [{ name: \"equals\", display: \"=\", requiresValue: true },\n                        { name: \"greaterThan\", display: \">\", requiresValue: true, types: [\"number\"] },\n                        { name: \"greaterThanOrEquals\", display: \"≥\", requiresValue: true, types: [\"number\"] },\n                        { name: \"lesserThan\", display: \"<\", requiresValue: true, types: [\"number\"] },\n                        { name: \"lesserThanOrEqual\", display: \"≤\", requiresValue: true, types: [\"number\"] }]\n                }, range: {\n                    \"default\": \"range\", operators: [{ name: \"range\", display: \"\", requiresValue: true, types: [\"range\"] }]\n                }\n            };\n            function getFormattedValue(value) {\n                if (angular.isDate(value)) {\n                    return utils.date.getMoment(value).format(\"YYYY-MM-DD\");\n                }\n                return value;\n            }\n            var operatorsToParamValues = {\n                dateRange: function (dates) {\n                    var strDates = [dates.timeStart];\n                    if (dates.timeEnd && dates.timeEnd !== dates.timeStart) {\n                        strDates.push(dates.timeEnd);\n                    }\n                    return strDates.join(\"::\");\n                },\n                range: function (rangeValue) {\n                    return rangeValue.min + \"::\" + rangeValue.max;\n                },\n                greaterThan: getFormattedValue,\n                greaterThanOrEquals: getFormattedValue,\n                lesserThan: getFormattedValue,\n                lesserThanOrEqual: getFormattedValue\n            };\n            var operatorsToString = {\n                dateRange: function (value) {\n                    var isRange = value.timeEnd && value.timeEnd !== value.timeStart, str = isRange ? \"between \" : \"= \";\n                    str += utils.date.getMoment(value.timeStart).format(\"MM/DD/YYYY\");\n                    if (isRange) {\n                        str += \" - \";\n                        str += utils.date.getMoment(value.timeEnd).format(\"MM/DD/YYYY\");\n                    }\n                    return str;\n                }\n            };\n            var stringToOperators = {\n                date: function (value) {\n                    var time = utils.date.getMoment(value).format(\"YYYY-MM-DD\");\n                    return {\n                        timeStart: time, timeEnd: time\n                    };\n                }\n            };\n            var operatorsSqlValue = {\n                contains: function (value, fieldName, condition) {\n                    return \"lcase(\" + fieldName + \") LIKE '%\" + value.toLowerCase() + \"%'\";\n                }, equals: function (value, fieldName, condition) {\n                    if (condition.valueField) {\n                        return [fieldName, condition.valueField].join(\" = \");\n                    }\n                    if (condition.castAs) {\n                        return fieldName + \" = cast(\" + value + \" as \" + condition.castAs + \")\";\n                    }\n                    else if (typeof (value) === \"string\") {\n                        if (condition.type === \"date\") {\n                            var dateStr;\n                            if (/^\\d+$/.test(value)) {\n                                dateStr = utils.date.getMoment(parseInt(value)).format(\"YYYY-MM-DD\");\n                            }\n                            else {\n                                dateStr = value;\n                            }\n                            return dateStr ? 'to_date(' + fieldName + ') = \"' + dateStr + '\"' : \"\";\n                        }\n                        else {\n                            return \"lcase(\" + fieldName + \") = \\\"\" + value.toLowerCase() + \"\\\"\";\n                        }\n                    }\n                    else {\n                        return [fieldName, value].join(\" = \");\n                    }\n                }, range: function (value, fieldName, condition) {\n                    return fieldName + \" <= \" + value.max + \" AND \" + fieldName + \" >= \" + value.min;\n                }, dateRange: function (value, fieldName, condition) {\n                    var dateStart = utils.date.getMoment(angular.isObject(value) ? value.timeStart :\n                        value), dateEnd = utils.date.getMoment(angular.isObject(value) ? value.timeEnd :\n                        value), fieldNameParts = fieldName.split(\".\"), tableName = fieldNameParts.length > 1 ?\n                        fieldNameParts[0] + \".\" : \"\";\n                    var dateStartValue;\n                    var dateEndValue;\n                    // Shift to fill in the whole day\n                    dateStart.startOf(\"day\");\n                    dateEnd.endOf(\"day\");\n                    // Set date start\n                    if (condition.useValueOfDates) {\n                        dateStartValue = getValueForType(dateStart.valueOf(), \"date\");\n                    }\n                    else {\n                        dateStartValue = \"'\" + dateStart.format(\"YYYY-MM-DD\") + \" 00:00:00'\";\n                    }\n                    // Set date end\n                    if (condition.useValueOfDates) {\n                        dateEndValue = getValueForType(dateEnd.valueOf(), \"date\");\n                    }\n                    else {\n                        dateEndValue = \"'\" + dateEnd.format(\"YYYY-MM-DD\") + \" 23:59:59'\";\n                    }\n                    var sql;\n                    if (dateStartValue === dateEndValue) {\n                        sql = fieldName + \" = \" + dateEndValue;\n                    }\n                    else {\n                        sql = [fieldName, \"IS NOT NULL AND\", fieldName, \">=\", dateStartValue, \"AND\", fieldName, \"<=\",\n                            dateEndValue].join(\" \");\n                    }\n                    if (condition.usePartitions !== false) {\n                        var partitions = utils.date.getDatePartitionSql(dateStart, dateEnd, tableName + \"yearmonthday\");\n                        sql = partitions + \" AND \" + sql;\n                    }\n                    return sql;\n                }, endsWith: function (value, fieldName) {\n                    return \"lcase(\" + fieldName + \") LIKE '%\" + value.toLowerCase() + \"'\";\n                }, greaterThan: function (value, fieldName, condition) {\n                    return getDeltaCondition(value, fieldName, condition);\n                }, greaterThanOrEquals: function (value, fieldName, condition) {\n                    return getDeltaCondition(value, fieldName, condition);\n                }, hasValue: function (value, fieldName, condition) {\n                    var sql = fieldName + \" IS NOT NULL\";\n                    if (condition.type !== \"number\" && condition.type !== \"boolean\") {\n                        sql += \" AND \" + fieldName + \" != \\\"\\\"\";\n                    }\n                    return sql;\n                }, hasNoValue: function (value, fieldName, condition) {\n                    var sql = fieldName + \" IS NULL\";\n                    if (condition.type !== \"number\" && condition.type !== \"boolean\") {\n                        sql += \" OR \" + fieldName + \" = \\\"\\\"\";\n                    }\n                    return sql;\n                }, \"in\": function (value, fieldName) {\n                    return fieldName + \" IS NOT NULL AND \" + fieldName + \" IN (\" + value + \")\";\n                }, lesserThan: function (value, fieldName, condition) {\n                    return getDeltaCondition(value, fieldName, condition);\n                }, lesserThanOrEqual: function (value, fieldName, condition) {\n                    return getDeltaCondition(value, fieldName, condition);\n                }, regexp: function (value, fieldName) {\n                    return fieldName + \" REGEXP '\" + value + \"'\";\n                }, startsWith: function (value, fieldName) {\n                    return \"lcase(\" + fieldName + \") LIKE '\" + value.toLowerCase() + \"%'\";\n                }\n            };\n            function getPartitionStamp(value, operator) {\n                var momentValue;\n                if (isNaN(value)) {\n                    momentValue = utils.date.getMoment(value);\n                }\n                else {\n                    momentValue = utils.date.getMoment(Number(value));\n                }\n                return utils.date.getDatePartitionSql(momentValue, null, \"yearmonthday\", false, operator);\n            }\n            function getDeltaCondition(value, fieldName, condition) {\n                var operator = operatorTypesParamPrefixes[condition.operator];\n                var sql = \"(\" + fieldName + \" IS NOT NULL AND \";\n                if (condition.type === \"date\") {\n                    if (condition.usePartitions !== false) {\n                        sql += getPartitionStamp(value, operator) + \" AND \";\n                    }\n                    sql += fieldName + \" \" + operator + \" \" +\n                        (condition.valueField || getValueForType(value, condition.type, condition.operator));\n                }\n                else {\n                    sql += fieldName + \" \" + operator + \" \" + (condition.valueField || value);\n                }\n                return sql + \")\";\n            }\n            function getValueForType(value, type, conditionOperator) {\n                if (type === \"date\") {\n                    if (typeof value === \"string\") {\n                        if (/^\\d+$/.test(value)) {\n                            var momentValue = utils.date.getMoment(Number(value));\n                            if (conditionOperator) {\n                                if (conditionOperator === \"greaterThanOrEquals\" ||\n                                    conditionOperator === \"greaterThan\") {\n                                    momentValue.startOf(\"day\");\n                                }\n                                else if (conditionOperator === \"lesserThanOrEqual\" ||\n                                    conditionOperator === \"greaterThan\") {\n                                    momentValue.endOf(\"day\");\n                                }\n                            }\n                            return \"cast(\" + Math.floor(momentValue.valueOf() / 1000) + \" as timestamp)\";\n                        }\n                        else if (/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n                            return \"'\" + value + \"'\";\n                        }\n                    }\n                }\n                return value;\n            }\n            var operatorsIndex = {};\n            function populateOperatorsIndex(operator) {\n                operatorsIndex[operator.name] = {\n                    sql: operator.sql || operator.display,\n                    display: operator.display,\n                    requiresValue: operator.requiresValue,\n                    text: operator.text\n                };\n            }\n            for (var operatorType in operators) {\n                if (operators.hasOwnProperty(operatorType)) {\n                    angular.forEach(operators[operatorType].operators, populateOperatorsIndex);\n                }\n            }\n            function getOrConditionsIndex(conditions) {\n                var orConditionsValues = {}, index = {};\n                angular.forEach(conditions, function (condition) {\n                    var orConditionValue = orConditionsValues[condition.field];\n                    if (orConditionValue === undefined) {\n                        orConditionsValues[condition.field] = 0;\n                    }\n                    else {\n                        orConditionsValues[condition.field]++;\n                    }\n                });\n                for (var field in orConditionsValues) {\n                    if (orConditionsValues.hasOwnProperty(field)) {\n                        if (orConditionsValues[field]) {\n                            index[field] = false;\n                        }\n                    }\n                }\n                return index;\n            }\n            function hasConditionsWithValue(filter) {\n                if (filter.type === \"search\") {\n                    return true;\n                }\n                if (!filter.conditions || !filter.conditions.length) {\n                    return false;\n                }\n                var conditionConfig;\n                for (var i = 0, condition; (!!(condition = filter.conditions[i])); i++) {\n                    conditionConfig = methods.getOperator(condition.operator);\n                    if (!conditionConfig.requiresValue) {\n                        return true;\n                    }\n                    if (condition.valueField) {\n                        return true;\n                    }\n                    if (condition.value || condition.value === 0 || condition.value === false ||\n                        condition.values && condition.values.length) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            function filterValuesToConditions(operator, filterValues, fieldId, entities, innerAnd, availableEntities) {\n                var paramParser = paramParsers[operator] ||\n                    paramParsers.default, conditionsArr = [], entitiesDictionary = utils.objects.arrayToObject(entities, \"id\"), entitiesFiltersIndex = {};\n                function addCondition(conditionValue) {\n                    var valueField = getValueField(getParamValueSqlField(conditionValue, availableEntities, true)), value = valueField ? null :\n                        paramParser(conditionValue), fieldIdParts = fieldId.split(\".\"), fieldIdWithoutEntity = fieldIdParts[fieldIdParts.length - 1], entityId = fieldIdParts[0], filter = entitiesFiltersIndex[entityId] &&\n                        entitiesFiltersIndex[entityId][fieldIdWithoutEntity];\n                    if (!filter) {\n                        entitiesFiltersIndex[entityId] =\n                            utils.objects.arrayToObject(entitiesDictionary[entityId].filters, \"id\");\n                        filter = entitiesFiltersIndex[entityId][fieldIdWithoutEntity];\n                    }\n                    conditionsArr.push({\n                        field: filter.column || fieldIdWithoutEntity,\n                        table: fieldIdParts.length > 1 && !filter.column ?\n                            entitiesDictionary[entityId].tableAlias || entitiesDictionary[entityId].table : null,\n                        operator: operator,\n                        valueField: valueField,\n                        value: value,\n                        or: true,\n                        type: filter.type,\n                        usePartitions: entitiesDictionary[entityId].usePartitions,\n                        useValueOfDates: entitiesDictionary[entityId].useValueOfDates,\n                        innerAnd: innerAnd\n                    });\n                }\n                if (operator === \"in\") {\n                    var inValues = [];\n                    filterValues.forEach(function (value) {\n                        if (!getValueField(value)) {\n                            inValues.push(\"\\\"\" + value + \"\\\"\");\n                        }\n                    });\n                    addCondition(inValues.join(\",\"));\n                }\n                else {\n                    filterValues.forEach(addCondition);\n                }\n                return conditionsArr;\n            }\n            function getValueField(value) {\n                if (typeof (value) !== \"string\") {\n                    return null;\n                }\n                var fieldMatch = value.match(/^\\[(\\w+\\.\\w+)\\]$/);\n                return fieldMatch ? fieldMatch[1] : null;\n            }\n            function getFilterParamName(filter) {\n                if (filter.type === \"search\") {\n                    return \"search.\" + filter.id;\n                }\n                return (filter.entityId || filter.entity.id) + \".\" + (filter.id || filter.filterId);\n            }\n            function paramsToEntityFilters(entity, params, availableEntities) {\n                var filtersValues = {};\n                function getParamValues(filter, paramOperatorValues) {\n                    var operator = getQueryParamOperator(paramOperatorValues), paramValues = operator === \"equals\" ?\n                        paramOperatorValues :\n                        paramOperatorValues.substr(operatorTypesParamPrefixes[operator].length), paramValuesParser = paramParsers[operator] || paramParsers.default, tempParamValues = paramValues.replace(/\\,\\,/g, \"**;;**\");\n                    paramValues = tempParamValues.split(\",\");\n                    angular.forEach(paramValues, function (value, i) {\n                        value = value.replace(/\\*\\*\\;\\;\\*\\*/g, \",\");\n                        var paramValue = getParamValueSqlField(value, availableEntities);\n                        if (!paramValue) {\n                            if (filter.type === \"string\" || filter.type === \"date\" || filter.type === \"range\") {\n                                paramValue = paramValuesParser(value.replace(/_;_/g, \",\").replace(/_;;_/g, \"|\"));\n                            }\n                            else if (filter.type === \"number\" || filter.type === \"hours\") {\n                                paramValue = parseFloat(value);\n                                if (isNaN(paramValue)) {\n                                    paramValue = null;\n                                }\n                            }\n                            else if (filter.type === \"boolean\") {\n                                paramValue = value.toLowerCase() === \"true\";\n                            }\n                        }\n                        paramValues[i] = paramValue;\n                    });\n                    var paramName = getParamName(filter), filterValues = filtersValues[paramName];\n                    if (!filterValues) {\n                        filterValues = filtersValues[paramName] = {};\n                    }\n                    filterValues[operator] = paramValues;\n                }\n                function getBulkFilters() {\n                    var values = [\"true\", \"false\"];\n                    values.forEach(function (value) {\n                        var bulkFields = params[entity.id + \"._\" + value];\n                        if (bulkFields) {\n                            bulkFields.split(\",\").forEach(function (field) {\n                                params[entity.id + \".\" + field] = value;\n                            });\n                        }\n                    });\n                }\n                function getParamName(filter) {\n                    return entity.id + \".\" + filter.id;\n                }\n                getBulkFilters();\n                angular.forEach(entity.filters, function (filter) {\n                    var paramName = getParamName(filter), paramValue = params[paramName];\n                    if (paramValue !== undefined && paramValue !== null) {\n                        var paramOperators = angular.isArray(paramValue) ? paramValue :\n                            typeof (paramValue) === \"string\" ? paramValue.split(\"|\") : [String(paramValue)];\n                        paramOperators.forEach(function (paramOperator) {\n                            getParamValues(filter, paramOperator);\n                        });\n                        if (params[paramName + \".or\"]) {\n                            filtersValues[paramName].andOr = \"or\";\n                        }\n                        if (params[paramName + \"_conjuction\"]) {\n                            filtersValues[paramName].innerAnd =\n                                params[paramName + \"_conjuction\"].toLowerCase() === \"and\";\n                        }\n                    }\n                });\n                return filtersValues;\n            }\n            function getParamValueSqlField(value, availableEntities, useTable) {\n                var fieldMatch = typeof (value) === \"string\" && value.match(/^\\[(\\w+)(?:\\.(\\w+))?\\]$/);\n                if (!fieldMatch) {\n                    return null;\n                }\n                var entity;\n                var fieldEntity = fieldMatch[2] ? getEntityTableName(fieldMatch[1], availableEntities) || entity :\n                    entity;\n                var sqlField = fieldEntity[useTable ? \"table\" : \"id\"] + \".\", fieldName = fieldMatch[2] ||\n                    fieldMatch[1], entitySqlField = getEntityFieldName(fieldEntity, fieldName);\n                if (!entitySqlField) {\n                    throw new Error(\"Invalid field, \" + fieldName);\n                }\n                return \"[\" + sqlField + entitySqlField + \"]\";\n            }\n            function getEntityTableName(entityName, availableEntities) {\n                for (var i = 0, entity; (!!(entity = availableEntities[i])); i++) {\n                    if (entity.id === entityName) {\n                        return entity;\n                    }\n                }\n                return null;\n            }\n            function getEntityFieldName(entity, fieldId) {\n                for (var i = 0, entityField; (!!(entityField = entity.fields[i])); i++) {\n                    if (entityField.id === fieldId) {\n                        return entityField.column || entityField.id;\n                    }\n                }\n                return null;\n            }\n            var methods = {\n                conditionsToSql: function (conditions) {\n                    var sql = [], conditionFields = {}, fieldSql = {}, fieldSqlClauses, fieldConjuctions;\n                    angular.forEach(conditions, function (condition) {\n                        if (condition.sql) {\n                            sql.push(condition.sql);\n                        }\n                        else if (condition.field) {\n                            var field = conditionFields[condition.field];\n                            if (!field) {\n                                field = conditionFields[condition.field] = [];\n                                fieldSql[condition.field] = [];\n                            }\n                            field.push(condition);\n                        }\n                    });\n                    function populateFieldConjuctions(condition) {\n                        var conditionValue = condition.value;\n                        var getValueFunction = operatorsSqlValue[condition.operator], orCondition, conditionTable = condition.table ? condition.table + \".\" : \"\", conditionField = conditionTable + condition.field;\n                        fieldConjuctions.push(condition.innerAnd ? \"AND\" : \"OR\");\n                        if (getValueFunction) {\n                            orCondition = getValueFunction(conditionValue, conditionField, condition);\n                        }\n                        else {\n                            if (typeof (conditionValue) === \"string\") {\n                                conditionValue = \"\\\"\" + conditionValue + \"\\\"\";\n                            }\n                            orCondition = [conditionField, operatorsIndex[condition.operator].sql,\n                                condition.valueField || conditionValue].join(\" \");\n                        }\n                        if (orCondition && !~fieldSql[fieldName].indexOf(orCondition)) {\n                            fieldSql[fieldName].push(orCondition);\n                        }\n                    }\n                    function populateFieldSqlClauses(fieldClause, i) {\n                        if (i) {\n                            fieldSqlClauses.push(\" \" + fieldConjuctions[i] + \" \");\n                        }\n                        fieldSqlClauses.push(fieldClause);\n                    }\n                    for (var fieldName in conditionFields) {\n                        if (conditionFields.hasOwnProperty(fieldName)) {\n                            fieldConjuctions = [];\n                            fieldSqlClauses = [];\n                            angular.forEach(conditionFields[fieldName], populateFieldConjuctions);\n                            fieldSqlClauses.push(\"(\");\n                            fieldSql[fieldName].forEach(populateFieldSqlClauses);\n                            fieldSqlClauses.push(\")\");\n                            sql.push(fieldSqlClauses.join(\"\"));\n                        }\n                    }\n                    return sql.join(\" AND \");\n                },\n                conditionToString: function (condition, filter) {\n                    var operator = methods.getOperator(condition.operator), operatorDisplay = operator.text !==\n                        undefined ? operator.text :\n                        operator.display, conditionText = [operatorDisplay.toLowerCase()], valueWrapper = filter.type === \"string\" ? \"'\" : \"\";\n                    if (operator.requiresValue) {\n                        if (condition.values && condition.values.length) {\n                            valueWrapper = typeof condition.values[0] === \"string\" ? \"'\" : \"\";\n                            conditionText.push(utils.arrays.toSentence(condition.values, filter.conjuction, valueWrapper));\n                        }\n                        else {\n                            var valueField = condition.valueField || getValueField(condition.value);\n                            if (valueField) {\n                                conditionText.push(valueField);\n                            }\n                            else if (operatorsToString[condition.operator]) {\n                                conditionText.push(operatorsToString[condition.operator](condition.value));\n                            }\n                            else {\n                                if (condition.filterType === \"date\" || condition.filterType === \"dateSelect\") {\n                                    if (condition.timeStart && condition.timeEnd) {\n                                        conditionText.push(operatorsToString.dateRange(condition.value));\n                                    }\n                                    else {\n                                        var m = utils.date.getMoment(condition.value);\n                                        if (m.isValid()) {\n                                            conditionText.push(m.format(\"YYYY-MM-DD\"));\n                                        }\n                                        else {\n                                            conditionText.push(\"BAD DATE\");\n                                        }\n                                    }\n                                }\n                                else if (condition.filterType === \"hoursSelect\") {\n                                    conditionText.push(condition.value / 3600 + \":00\");\n                                }\n                                else if (condition.filterType === \"range\") {\n                                    conditionText.push(condition.value.min + filter.settings.labelSuffix + \" ≤ \" +\n                                        filter.name + \" ≤ \" + condition.value.max + filter.settings.labelSuffix);\n                                }\n                                else {\n                                    if (angular.isDate(condition.value)) {\n                                        conditionText.push(utils.date.getMoment(condition.value).format(\"YYYY-MM-DD\"));\n                                    }\n                                    else {\n                                        conditionText.push(condition.value !== null && condition.value !== undefined ?\n                                            \" \" + valueWrapper + condition.value + valueWrapper : \"(none)\");\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return conditionText.join(\" \");\n                },\n                filterHasConditionsWithValue: hasConditionsWithValue,\n                filtersToSqlParams: function (filters, entities, entitiesJoin, savedSearches, sqlConditions, availableEntities) {\n                    function getJoins() {\n                        var joins = [];\n                        if (entitiesJoin) {\n                            entitiesJoin.forEach(function (entityJoin) {\n                                if (joinRequired(entityJoin)) {\n                                    var join = { caseSensitive: entityJoin._caseSensitive }, i = 1;\n                                    for (var p in entityJoin) {\n                                        if (entityJoin.hasOwnProperty(p)) {\n                                            if (p[0] === \"_\") {\n                                                continue;\n                                            }\n                                            join[\"table\" + i] = entitiesDictionary[p].table;\n                                            join[\"field\" + i] = entityJoin[p];\n                                            i++;\n                                        }\n                                    }\n                                    joins.push(join);\n                                }\n                            });\n                        }\n                        return joins;\n                    }\n                    function joinRequired(entityJoin) {\n                        var i, entity, entityFound;\n                        for (var p in entityJoin) {\n                            if (entityJoin.hasOwnProperty(p)) {\n                                entityFound = false;\n                                if (p[0] === \"_\") {\n                                    continue;\n                                }\n                                for (i = 0; (!!(entity = entities[i])); i++) {\n                                    if (entity.id === p) {\n                                        entityFound = true;\n                                        break;\n                                    }\n                                }\n                                if (!entityFound) {\n                                    return false;\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    var sqlParams = {\n                        whereClauses: []\n                    }, entitiesDictionary = utils.objects.arrayToObject(entities, \"id\"), joins = getJoins(), filterConditions;\n                    if (savedSearches && savedSearches.length) {\n                        sqlParams.whereClauses =\n                            sqlParams.whereClauses.concat(methods.savedSearchesToFilters(savedSearches, entities, entitiesJoin));\n                    }\n                    if (sqlConditions && sqlConditions.length) {\n                        var sqlConditionsData = [];\n                        if (!angular.isArray(sqlConditions)) {\n                            sqlConditions = [sqlConditions];\n                        }\n                        sqlConditions.forEach(function (sqlCondition) {\n                            sqlConditionsData.push({\n                                sql: sqlCondition\n                            });\n                        });\n                        sqlParams.whereClauses.push({\n                            conditions: sqlConditionsData\n                        });\n                    }\n                    function setFiltersCondition(filterValues, index) {\n                        if (index !== \"andOr\" && index !== \"innerAnd\") {\n                            var operator = angular.isString(index) ? index :\n                                getQueryParamOperator(filterValues);\n                            if (!angular.isArray(filterValues)) {\n                                filterValues = [filterValues];\n                            }\n                            filterConditions.conditions =\n                                filterConditions.conditions.concat(filterValuesToConditions(operator, filterValues, fieldId, entities, !!filters[fieldId].innerAnd, availableEntities));\n                        }\n                    }\n                    for (var fieldId in filters) {\n                        if (filters.hasOwnProperty(fieldId)) {\n                            filterConditions = { conditions: [], isOr: !!filters[fieldId].andOr };\n                            angular.forEach(filters[fieldId], setFiltersCondition);\n                            sqlParams.whereClauses.push(filterConditions);\n                        }\n                    }\n                    if (joins.length) {\n                        sqlParams.join = joins;\n                    }\n                    return sqlParams;\n                },\n                filtersToParams: function (filters, entities) {\n                    var params = {};\n                    if (!filters) {\n                        return params;\n                    }\n                    if (!angular.isArray(filters)) {\n                        filters = [filters];\n                    }\n                    entities.forEach(function (entity) {\n                        params[entity.id + \"_page\"] = null;\n                    });\n                    angular.forEach(filters, function (filter) {\n                        var filterParamName = getFilterParamName(filter);\n                        if (filter.enabled && methods.filterHasConditionsWithValue(filter)) {\n                            if (filter.type === \"search\") {\n                                params[filterParamName] = 1;\n                            }\n                            else {\n                                var filterValues = [];\n                                var conditionOperators = {};\n                                filter.conditions.forEach(function (condition) {\n                                    var conditionOperator = condition.valueField && condition.operator === \"in\" ?\n                                        \"equals\" :\n                                        condition.operator, operator = conditionOperators[conditionOperator], values = condition.values ? angular.copy(condition.values) : [];\n                                    if (condition.valueField) {\n                                        values.push(\"[\" + condition.valueField + \"]\");\n                                    }\n                                    if (condition.value !== null && condition.value !== undefined) {\n                                        values.push(condition.value);\n                                    }\n                                    if (!operator) {\n                                        operator = conditionOperators[conditionOperator] = [];\n                                    }\n                                    if (values && values.length) {\n                                        values.forEach(function (value) {\n                                            if (value !== null && value !== undefined) {\n                                                var strValue = operatorsToParamValues[conditionOperator] ?\n                                                    operatorsToParamValues[conditionOperator](value) :\n                                                    angular.isString(value) ? utils.url.formatStringForParam(value) :\n                                                        value;\n                                                if (!~operator.indexOf(strValue)) {\n                                                    operator.push(strValue);\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                for (var operatorName in conditionOperators) {\n                                    if (conditionOperators.hasOwnProperty(operatorName)) {\n                                        filterValues.push((operatorTypesParamPrefixes[operatorName] || \"\") +\n                                            conditionOperators[operatorName].join(\",\"));\n                                    }\n                                }\n                                if (filterValues.length) {\n                                    params[filterParamName] = filterValues.join(\"|\");\n                                    if (filter.andOr === \"or\") {\n                                        params[filterParamName + \".or\"] = 1;\n                                    }\n                                }\n                                else {\n                                    params[filterParamName] = null;\n                                }\n                            }\n                        }\n                        else {\n                            params[filterParamName] = null;\n                        }\n                    });\n                    return params;\n                },\n                filterStringToValue: function (filterType, value) {\n                    var convertor = stringToOperators[filterType];\n                    return convertor ? convertor(value) : value;\n                },\n                getFilterParamName: getFilterParamName,\n                getOperator: function (operatorName) {\n                    return operatorsIndex[operatorName];\n                },\n                getParamOperator: function (operatorName) {\n                    return operatorTypesParamPrefixes[operatorName];\n                },\n                getUsedEntities: function (entities, savedSearches, params) {\n                    var filters = this.paramsToFilters(entities, params), usedEntities = [], usedEntityIds = {};\n                    savedSearches.forEach(function (search) {\n                        search.entities.forEach(function (entityId) {\n                            usedEntityIds[entityId] = true;\n                        });\n                    });\n                    var entityMatchRegExp = /^(.*)\\./, operator, operatorValues;\n                    function setUsedEntityId(value) {\n                        var valueField = getValueField(value);\n                        if (valueField) {\n                            usedEntityIds[valueField.split(\".\")[0]] = true;\n                        }\n                    }\n                    for (var filterName in filters) {\n                        if (filters.hasOwnProperty(filterName)) {\n                            usedEntityIds[filterName.match(entityMatchRegExp)[1]] = true;\n                            for (operator in filters[filterName]) {\n                                if (filters[filterName].hasOwnProperty(operator)) {\n                                    operatorValues = filters[filterName][operator];\n                                    if (angular.isArray(operatorValues)) {\n                                        operatorValues.forEach(setUsedEntityId);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    entities.forEach(function (entity) {\n                        if (usedEntityIds[entity.id]) {\n                            var entityCopy = angular.copy(entity), minScore = entity.scoreField &&\n                                params[entity.id + \".\" + entity.scoreField];\n                            if (minScore) {\n                                if (typeof (minScore) === \"string\") {\n                                    minScore = minScore.match(/^\\>\\=?(\\d+)/);\n                                }\n                                if (minScore) {\n                                    if (!angular.isNumber(minScore)) {\n                                        minScore = parseInt(minScore[1], 10);\n                                    }\n                                    if (!isNaN(minScore)) {\n                                        entityCopy.table = utils.strings.getEventsTableName(entity.table, minScore);\n                                        if (entityCopy.table !== entity.table) {\n                                            entityCopy.tableAlias = entity.table;\n                                        }\n                                    }\n                                }\n                            }\n                            usedEntities.push(entityCopy);\n                        }\n                    });\n                    return usedEntities;\n                },\n                getValueField: getValueField,\n                operators: operators,\n                get operatorsIndex() {\n                    return angular.copy(operatorsIndex);\n                },\n                paramsToSqlParams: function (usedEntities, entitiesJoin, savedSearches, params, sqlConditions, availableEntities) {\n                    return methods.filtersToSqlParams(methods.paramsToFilters(usedEntities, params, availableEntities), usedEntities, entitiesJoin, savedSearches, sqlConditions, availableEntities);\n                },\n                paramsToFilters: function (usedEntities, params, availableEntities) {\n                    var filtersValues = {};\n                    availableEntities = availableEntities || usedEntities;\n                    usedEntities.forEach(function (entity) {\n                        angular.extend(filtersValues, paramsToEntityFilters(entity, params, availableEntities));\n                    });\n                    return filtersValues;\n                },\n                savedSearchesToFilters: function (savedSearches, entities, entitiesJoin) {\n                    var filters = [];\n                    savedSearches.forEach(function (search) {\n                        if (search.enabled === undefined) {\n                            search.enabled = true;\n                        }\n                        search.type = \"search\";\n                        search.filters.forEach(function (filter) {\n                            filter.enabled = true;\n                        });\n                        var params = methods.filtersToParams(search.filters, entities), filterObj = methods.paramsToSqlParams(entities, entitiesJoin, search.savedSearches || [], params, [], entities);\n                        filterObj.isOr = search.andOr === \"or\";\n                        filters.push(filterObj);\n                    });\n                    return filters;\n                },\n                validateCondition: function (value1, operator, value2) {\n                    var validation = validations[operator];\n                    if (!validation) {\n                        throw new Error(\"Invalid operator for validation: '\" + operator + \"'.\");\n                    }\n                    return validation(value1, value2);\n                },\n                /**\n                 * Gets an array of conditions and returns true/false, whether the conditions are met or not.\n                 * @param conditions Array of conditions\n                 * @param data Data object to use in condition checkers\n                 * @param params State object\n                 * @returns {boolean}\n                 */\n                validateConditions: function (conditions, data, params) {\n                    if (!conditions) {\n                        return true;\n                    }\n                    if (!angular.isArray(conditions)) {\n                        conditions = [conditions];\n                    }\n                    var conditionValue, conditionField, dataValue, paramMatch, orConditionsValues = getOrConditionsIndex(conditions);\n                    for (var i = 0, condition; (!!(condition = conditions[i])); i++) {\n                        conditionValue = condition.value;\n                        if (conditionValue !== undefined) {\n                            if (/^@/.test(condition.value)) {\n                                conditionValue = data[condition.value];\n                            }\n                            else if (params) {\n                                if (!condition.value.match) {\n                                    conditionValue = condition.value;\n                                }\n                                else if (!!(paramMatch = condition.value.match(/^\\{\\{([^\\}]+)\\}\\}$/))) {\n                                    conditionValue = params[paramMatch[1]];\n                                }\n                            }\n                        }\n                        conditionField = condition.field;\n                        if (conditionField) {\n                            if (!!(paramMatch = conditionField.match(/^\\{\\{([^\\}]+)\\}\\}$/))) {\n                                dataValue = params[paramMatch[1]];\n                            }\n                            else {\n                                dataValue = utils.objects.getObjectByPath(data, conditionField);\n                            }\n                            if (condition.fieldType) {\n                                dataValue = format[condition.fieldType](dataValue, {});\n                            }\n                        }\n                        var conditionResult = methods.validateCondition(dataValue, condition.operator, conditionValue), orConditionsValue = orConditionsValues[condition.field];\n                        if (orConditionsValue !== undefined) {\n                            orConditionsValues[condition.field] = orConditionsValue | conditionResult;\n                        }\n                        else if (!conditionResult) {\n                            return false;\n                        }\n                    }\n                    for (var field in orConditionsValues) {\n                        if (orConditionsValues.hasOwnProperty(field)) {\n                            if (!orConditionsValues[field]) {\n                                return false;\n                            }\n                        }\n                    }\n                    return true;\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Styles\", [\"Format\", \"Conditions\"])\n        .factory(\"styles\", [\"$q\", \"$http\", \"conditions\", \"format\", \"utils\",\n        function ($q, $http, conditions, format, utils) {\n            var savedStyles, onStylesLoad = [], loadingStyles;\n            function getSavedStyle(styleName) {\n                if (savedStyles) {\n                    var style = savedStyles[styleName];\n                    if (style) {\n                        return $q.when(style);\n                    }\n                    else {\n                        return $q.reject(\"Style '\" + styleName + \"' not found.\");\n                    }\n                }\n                if (loadingStyles) {\n                    var deferred = $q.defer();\n                    onStylesLoad.push({ name: styleName, deferred: deferred });\n                    return deferred.promise;\n                }\n                else {\n                    loadingStyles = true;\n                    return utils.http.wrappedHttpGet(\"data/styles.json\").then(function (stylesData) {\n                        savedStyles = stylesData;\n                        loadingStyles = false;\n                        if (onStylesLoad.length) {\n                            onStylesLoad.forEach(function (onLoad) {\n                                getSavedStyle(onLoad.name).then(function (style) {\n                                    onLoad.deferred.resolve(style);\n                                });\n                            });\n                            onStylesLoad = null;\n                        }\n                        return getSavedStyle(styleName);\n                    });\n                }\n            }\n            var presets = {\n                severity: function (settings) {\n                    var colors = {\n                        medium: \"rgb(226, 172, 1)\",\n                        high: \"#cc0000\"\n                    };\n                    function getCondition(properties, value) {\n                        return {\n                            properties: properties,\n                            \"conditions\": [\n                                {\n                                    \"field\": settings.conditionField,\n                                    \"fieldType\": settings.conditionType,\n                                    \"operator\": \"greaterThanOrEquals\",\n                                    \"value\": value\n                                }\n                            ]\n                        };\n                    }\n                    return [\n                        getCondition({ color: colors.medium, \"font-weight\": \"bold\" }, settings.medium),\n                        getCondition({ color: colors.high, \"font-weight\": \"bold\" }, settings.high)\n                    ];\n                }\n            };\n            function getStylePreset(options) {\n                if (!options.preset || !presets[options.preset]) {\n                    throw new Error(\"Invalid style preset, '\" + options.preset + \"'.\");\n                }\n                var preset = presets[options.preset];\n                return preset(options.settings);\n            }\n            function parseStyle(styleSettings, data, params) {\n                var style = {};\n                function addItemProperties(styleItem) {\n                    for (var property in styleItem.properties) {\n                        if (styleItem.properties.hasOwnProperty(property)) {\n                            style[property] = styleItem.properties[property];\n                        }\n                    }\n                }\n                angular.forEach(styleSettings, function (styleItem) {\n                    if (!styleItem.conditions) {\n                        addItemProperties(styleItem);\n                    }\n                    else {\n                        var conditionValue, conditionField, dataValue, paramMatch;\n                        for (var i = 0, condition; (condition = styleItem.conditions[i]) !== undefined; i++) {\n                            conditionValue = condition.value;\n                            if (/^@/.test(condition.value)) {\n                                conditionValue = data[condition.value];\n                            }\n                            conditionField = condition.field;\n                            if (!!(paramMatch = conditionField.match(/^\\{\\{([^\\}]+)\\}\\}$/))) {\n                                dataValue = params[paramMatch[1]];\n                            }\n                            else {\n                                dataValue = data[conditionField];\n                            }\n                            if (condition.fieldType) {\n                                dataValue = format[condition.fieldType](dataValue);\n                            }\n                            if (!conditions.validateCondition(dataValue, condition.operator, condition.value)) {\n                                return;\n                            }\n                        }\n                        addItemProperties(styleItem);\n                    }\n                });\n                return style;\n            }\n            function getStyleParams(field, data) {\n                if (!field.styleParams) {\n                    return {};\n                }\n                var styleParams = {};\n                for (var paramName in field.styleParams) {\n                    if (field.styleParams.hasOwnProperty(paramName)) {\n                        styleParams[paramName] = data[field.styleParams[paramName]];\n                    }\n                }\n                return styleParams;\n            }\n            var methods = {\n                getStyle: function (field, data) {\n                    if (field.style.preset) {\n                        return $q.when(getStylePreset(field.style));\n                    }\n                    else {\n                        if (typeof (field.style) === \"string\") {\n                            return getSavedStyle(field.style).then(function (styleSettings) {\n                                return parseStyle(styleSettings, data, getStyleParams(field, data));\n                            });\n                        }\n                        else {\n                            return parseStyle(field.style, data, getStyleParams(field, data));\n                        }\n                    }\n                },\n                getParseStyleFunction: function (field) {\n                    if (typeof (field.style) === \"string\") {\n                        return getSavedStyle(field.style).then(function (styleSettings) {\n                            return function (data) {\n                                return parseStyle(styleSettings, data, getStyleParams(field, data));\n                            };\n                        });\n                    }\n                    else {\n                        return function (data) {\n                            return parseStyle(field.style, data, getStyleParams(field, data));\n                        };\n                    }\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Transforms\", [\"Utils\"]).factory(\"transforms\", [\"utils\", function (utils) {\n            //function getGroupLinkDn(groupParts, partIndex) {\n            //    var linkParts = [];\n            //    for (var i = partIndex; i < groupParts.length; i++) {\n            //        linkParts.push(groupParts[i]);\n            //    }\n            //    return linkParts.join(\",\");\n            //}\n            var methods = {\n                adUser: function (value) {\n                    var cnMatch = value.match(/^CN=([^\\,]+)/);\n                    if (cnMatch) {\n                        return cnMatch[1];\n                    }\n                    return value;\n                },\n                adUsers: function (value) {\n                    if (!value) {\n                        return value;\n                    }\n                    var users = value.match(/CN=([^\\,]+)/g), adUsers = [];\n                    if (!users) {\n                        return value;\n                    }\n                    users.forEach(function (user) {\n                        adUsers.push(user.split(\"=\")[1]);\n                    });\n                    if (adUsers.length) {\n                        return adUsers.join(\", \");\n                    }\n                    return value;\n                },\n                arrayJoin: function (array, options) {\n                    if (!array) {\n                        return null;\n                    }\n                    options = options || {};\n                    return array.join(options.joiner || \", \");\n                },\n                count: function (array) {\n                    if (!array) {\n                        return 0;\n                    }\n                    return array.length;\n                },\n                date: function (date, options) {\n                    if (!date) {\n                        return \"\";\n                    }\n                    if (!options) {\n                        options = { format: \"MM/DD/YY HH:mm\" };\n                    }\n                    var newDate = utils.date.getMoment(date);\n                    if (options.prettyDate) {\n                        return utils.date.prettyDate(newDate.toDate(), options.shortPrettyDate);\n                    }\n                    return newDate.format(options.format);\n                },\n                /* Deprecated, remove after March 1st, 2015 if no problem arises!\n                 group: function(groupStr, options){\n                 if (!groupStr)\n                 return \"\";\n    \n                 options = options || {};\n    \n                 var groupParts = groupStr.split(\",\"),\n                 results = [];\n    \n    \n                 angular.forEach(groupParts, function(part, partIndex){\n                 var partMatch = part.match(/^(\\w{2})=(.*)/);\n                 if (partMatch && partMatch[1] !== \"DC\"){\n                 results.splice(0, 0, \"<a href='#/d/investigate/group_membership?user_groups.group_dn=\" +\n                 encodeURIComponent(\"$\" + getGroupLinkDn(groupParts, partIndex).replace(/,/g, \"_;_\")) + \"'>\" +\n                 partMatch[2] + \"</a>\");\n                 }\n                 });\n    \n                 return results.join(options.divider || \" &gt; \");\n                 },\n                 */\n                ou: function (ouStr, options) {\n                    if (!ouStr) {\n                        return \"\";\n                    }\n                    options = options || {};\n                    var ous = ouStr.split(\",\"), results = [], ouMatch = /^OU=(.*)$/;\n                    angular.forEach(ous, function (ou) {\n                        var match = ou.match(ouMatch);\n                        if (match) {\n                            results.push(match[1]);\n                        }\n                    });\n                    return results.join(options.divider || \" &gt; \");\n                },\n                round: function (number) {\n                    return parseInt(number, 10);\n                },\n                string: function (str, options) {\n                    if (options && options.regExp) {\n                        return str.replace(new RegExp(options.regExp), options.replaceWith);\n                    }\n                    return str;\n                },\n                stringDate: function (value, options) {\n                    var transformed = methods.date(value, options);\n                    return methods.string(transformed, options);\n                },\n                transformParams: function (params, paramsTransform) {\n                    var transformedParams = angular.copy(params);\n                    if (paramsTransform) {\n                        var transform;\n                        transformedParams = {};\n                        for (var paramName in paramsTransform) {\n                            if (paramsTransform.hasOwnProperty(paramName)) {\n                                transform = paramsTransform[paramName];\n                                if (params[paramName] !== undefined) {\n                                    transformedParams[paramName] = methods[transform.type](params[paramName], transform);\n                                }\n                            }\n                        }\n                    }\n                    return transformedParams;\n                },\n                transformValue: function (value, transformSettings) {\n                    var method = methods[transformSettings.method];\n                    if (!method) {\n                        throw new Error(\"Invalid transform method: \", transformSettings.method);\n                    }\n                    return method(value, transformSettings.options);\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Icons\", [\"Conditions\", \"Format\", \"Styles\"])\n        .factory(\"icons\", [\"$q\", \"$http\", \"conditions\", \"format\", \"styles\", \"utils\",\n        function ($q, $http, conditions, format, styles, utils) {\n            var savedIcons, onLoad = [], loadingData;\n            function getSavedIcon(presetName) {\n                if (savedIcons) {\n                    if (savedIcons[presetName]) {\n                        return $q.when(savedIcons[presetName]);\n                    }\n                    else {\n                        return $q.reject(\"Icon '\" + presetName + \"' not found.\");\n                    }\n                }\n                else {\n                    if (loadingData) {\n                        var deferred = $q.defer();\n                        onLoad.push({ name: presetName, deferred: deferred });\n                        return deferred.promise;\n                    }\n                    loadingData = true;\n                    return utils.http.wrappedHttpGet(\"data/icons.json\").then(function (iconsData) {\n                        savedIcons = iconsData;\n                        onLoad.forEach(function (_onLoad) {\n                            getSavedIcon(_onLoad.name).then(function (icon) {\n                                _onLoad.deferred.resolve(icon);\n                            }, _onLoad.deferred.reject);\n                        });\n                        return getSavedIcon(presetName);\n                    });\n                }\n            }\n            function getIconPresetStyles(iconPreset) {\n                var iconItemIndex = 0, iconItem = iconPreset[iconItemIndex], styleParsers = {}, stylePromises = [];\n                do {\n                    iconItem.__id = iconItemIndex;\n                    if (iconItem.style) {\n                        stylePromises.push(styles.getParseStyleFunction(iconItem));\n                    }\n                    else {\n                        stylePromises.push($q.when(null));\n                    }\n                } while (!!(iconItem = iconPreset[++iconItemIndex]));\n                return $q.all(stylePromises).then(function (_styleParsers) {\n                    _styleParsers.forEach(function (styleParser, i) {\n                        if (styleParser) {\n                            styleParsers[i] = styleParser;\n                        }\n                    });\n                    return styleParsers;\n                });\n            }\n            function parseIconSync(iconPreset, data, params, styles) {\n                var icon = {}, iconItemIndex = 0, iconItem = iconPreset[iconItemIndex];\n                do {\n                    if (!iconItem.conditions) {\n                        icon.type = iconItem.type;\n                    }\n                    else {\n                        var conditionValue, conditionField, dataValue, paramMatch;\n                        for (var i = 0, condition; !!(condition = iconItem.conditions[i]); i++) {\n                            conditionValue = condition.value;\n                            if (/^@/.test(condition.value)) {\n                                conditionValue = data[condition.value];\n                            }\n                            conditionField = condition.field;\n                            paramMatch = conditionField.match(/^\\{\\{([^\\}]+)\\}\\}$/);\n                            if (paramMatch) {\n                                dataValue = params[paramMatch[1]];\n                            }\n                            else {\n                                dataValue = data[conditionField];\n                            }\n                            if (condition.fieldType) {\n                                dataValue = format[condition.fieldType](dataValue);\n                            }\n                            if (conditions.validateCondition(dataValue, condition.operator, condition.value)) {\n                                icon.type = iconItem.type;\n                                break;\n                            }\n                        }\n                    }\n                    if (iconItem.tooltip) {\n                        icon.tooltip = utils.strings.parseValue(iconItem.tooltip, data, params);\n                    }\n                    if (icon.type) {\n                        if (styles[iconItemIndex]) {\n                            icon.style = styles[iconItemIndex](data);\n                        }\n                        return icon;\n                    }\n                } while (!!(iconItem = iconPreset[++iconItemIndex]));\n                return icon;\n            }\n            function parseIcon(iconPreset, data, params) {\n                return getIconPresetStyles(iconPreset, params).then(function (styles) {\n                    return parseIconSync(iconPreset, data, params, styles);\n                });\n            }\n            function getIconParams(iconSettings, data) {\n                if (!iconSettings.presetParams) {\n                    return {};\n                }\n                var iconParams = {};\n                for (var paramName in iconSettings.presetParams) {\n                    if (iconSettings.presetParams.hasOwnProperty(paramName)) {\n                        iconParams[paramName] = utils.objects.getObjectByPath(data, iconSettings.presetParams[paramName]);\n                    }\n                }\n                return iconParams;\n            }\n            var methods = {\n                getIcon: function (iconSettings, data) {\n                    function parseAndReturnIcon(iconPreset) {\n                        var params = getIconParams(iconSettings, data);\n                        return parseIcon(iconPreset, data, params).then(function (icon) {\n                            if (iconSettings.tooltip) {\n                                icon.tooltip = utils.strings.parseValue(iconSettings.tooltip, data, params);\n                            }\n                            return icon;\n                        });\n                    }\n                    if (typeof (iconSettings) === \"string\") {\n                        return $q.when({ type: iconSettings });\n                    }\n                    if (iconSettings.type) {\n                        return $q.when(iconSettings.type);\n                    }\n                    else if (iconSettings.map) {\n                        var fieldValue = data[iconSettings.mapField];\n                        if (fieldValue) {\n                            return $q.when(iconSettings.map[fieldValue]);\n                        }\n                    }\n                    else if (iconSettings.preset) {\n                        return getSavedIcon(iconSettings.preset).then(parseAndReturnIcon);\n                    }\n                    else {\n                        return parseAndReturnIcon(iconSettings);\n                    }\n                },\n                getIconParsers: function (iconsSettings) {\n                    var promises = [];\n                    iconsSettings.forEach(function (iconSettings) {\n                        promises.push(methods.getParseIconFunction(iconSettings));\n                    });\n                    return $q.all(promises);\n                },\n                getParseIconFunction: function (iconSettings) {\n                    if (typeof (iconSettings) === \"string\") {\n                        return getSavedIcon(iconSettings).then(function (iconPreset) {\n                            return function (data) {\n                                return parseIcon(iconPreset, data, getIconParams(iconSettings, data));\n                            };\n                        }, function (error) {\n                            return function () {\n                                return { type: iconSettings };\n                            };\n                        });\n                    }\n                    else if (iconSettings.preset) {\n                        return getSavedIcon(iconSettings.preset).then(function (iconPreset) {\n                            var presetCopy = angular.copy(iconPreset);\n                            presetCopy.forEach(function (iconItem) {\n                                angular.extend(iconItem, iconSettings);\n                            });\n                            iconPreset = presetCopy;\n                            return getIconPresetStyles(iconPreset, iconSettings).then(function (styles) {\n                                return function (data) {\n                                    var params = getIconParams(iconSettings, data), icon = parseIconSync(iconPreset, data, params, styles);\n                                    if (iconSettings.tooltip) {\n                                        icon.tooltip = utils.strings.parseValue(iconSettings.tooltip, data, params);\n                                    }\n                                    return icon;\n                                };\n                            });\n                        });\n                    }\n                    else {\n                        return $q.when(function (data) {\n                            return parseIcon(iconSettings, data, getIconParams(iconSettings, data));\n                        });\n                    }\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Tags\", []).factory(\"tags\", [\"$q\", \"utils\",\n        function ($q, utils) {\n            var savedTags;\n            var defer;\n            function getTags(tagsName, data) {\n                if (!tagsName || !data) {\n                    return null;\n                }\n                var tagsObj = angular.isObject(tagsName) && tagsName;\n                var tagsConfig = savedTags[tagsObj ? tagsObj.name : tagsName];\n                if (!tagsConfig) {\n                    return null;\n                }\n                var usedTags = [], valuesData = {};\n                if (tagsObj && tagsObj.values && data[tagsObj.values]) {\n                    var tags = data[tagsObj.values];\n                    if (typeof (tags) === \"string\") {\n                        tags = tags.split(\",\");\n                    }\n                    if (tags.constructor !== Array) {\n                        throw new TypeError(\"Invalid tags, expected an Array but got \" +\n                            tags.constructor.name + \".\");\n                    }\n                    tags.forEach(function (value) {\n                        valuesData[tagsObj.valuesMap && tagsObj.valuesMap[value] || value] = true;\n                    });\n                }\n                tagsConfig.forEach(function (tag) {\n                    var fieldName = tagsObj && tagsObj.map && tagsObj.map[tag.field] || tag.field;\n                    if (valuesData[fieldName] || data[fieldName]) {\n                        usedTags.push(tag);\n                    }\n                });\n                return usedTags;\n            }\n            var methods = {\n                getTagsSync: getTags,\n                getTags: function (tagsName, data) {\n                    if (savedTags) {\n                        return $q.when(getTags(tagsName, data));\n                    }\n                    else {\n                        return methods.initTags().then(function (tags) {\n                            return getTags(tagsName, data);\n                        });\n                    }\n                },\n                initTags: function () {\n                    // Check if it's the first time we're fetching the tags\n                    var firstTime = !defer;\n                    // If called before, use the same deferred object\n                    defer = defer || $q.defer();\n                    // If first time, fetch the tags data\n                    if (firstTime) {\n                        utils.http.wrappedHttpGet(\"data/tags.json\").then(function (tags) {\n                            savedTags = tags;\n                            // Resolve all of the promises that are waiting for the tags\n                            defer.resolve(tags);\n                        });\n                    }\n                    // Always return the same promise\n                    // If it was already resolved, it's `.then` will execute immediately\n                    // with `tags` data as first param\n                    return defer.promise;\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"ChartWidgets\", [\"Utils\", \"Styles\", \"Transforms\"])\n        .factory(\"chartWidgetsData\", [\"$q\", \"utils\", \"styles\", \"transforms\", function ($q, utils, styles, transforms) {\n            function getPredefinedValues(predefinedValuesSettings) {\n                if (predefinedValuesSettings.type === \"date\") {\n                    var dates = utils.date.getDatesSpan(predefinedValuesSettings.first, predefinedValuesSettings.last), timestamps = [];\n                    angular.forEach(dates, function (date) {\n                        timestamps.push(date.valueOf());\n                    });\n                    return timestamps;\n                }\n                return null;\n            }\n            function isSameValue(type, val1, val2) {\n                if (type === \"date\") {\n                    if (!val1 || !val2) {\n                        return false;\n                    }\n                    var moment1 = utils.date.getMoment(val1), moment2 = utils.date.getMoment(val2);\n                    return moment1.year() === moment2.year() && moment1.month() === moment2.month() &&\n                        moment1.date() === moment2.date();\n                }\n                return false;\n            }\n            function isSmallerValue(type, val1, val2) {\n                if (type === \"date\") {\n                    if (!val1 || !val2) {\n                        return false;\n                    }\n                    var moment1 = utils.date.getMoment(val1), moment2 = utils.date.getMoment(val2);\n                    return !utils.date.compareDates(moment1.toDate(), moment2.toDate()) && moment1 < moment2;\n                }\n                return false;\n            }\n            function createDefaultValue(seriesSettings, labelSettings, labelValue) {\n                var value = {};\n                value[labelSettings.field] = labelValue;\n                angular.forEach(seriesSettings, function (series) {\n                    value[series.field] = series.default !== undefined ? series.default : null;\n                });\n                return value;\n            }\n            function setPredefinedValues(data, seriesSettings, labelSettings) {\n                var predefinedValuesSettings = labelSettings.predefinedValues, labelValues = getPredefinedValues(predefinedValuesSettings), labelField = labelSettings.field;\n                if (predefinedValuesSettings.type === \"date\") {\n                    while (data.length && isSmallerValue(\"date\", data[0][labelField], labelValues[0])) {\n                        data.splice(0, 1);\n                    }\n                }\n                for (var i = 0; i < labelValues.length; i++) {\n                    if (!isSameValue(predefinedValuesSettings.type, data[i] && data[i][labelField], labelValues[i])) {\n                        data.splice(i, 0, createDefaultValue(seriesSettings, labelSettings, labelValues[i]));\n                    }\n                }\n            }\n            function setPercent(data, countField) {\n                var total = 0;\n                data.forEach(function (item) {\n                    var count = item[countField];\n                    if (count && !isNaN(count)) {\n                        total += count;\n                    }\n                });\n                data.forEach(function (item) {\n                    var count = item[countField];\n                    if (count && !isNaN(count)) {\n                        item._percent = 100 * count / total;\n                    }\n                });\n            }\n            return {\n                getData: function (view, data, params) {\n                    var deferred = $q.defer(), styleDeferreds = [], styleDeferredsMapping = {};\n                    var viewData = { chartValues: data };\n                    if (view.settings.labels.predefinedValues) {\n                        setPredefinedValues(viewData.chartValues, view.settings.series, view.settings.labels);\n                    }\n                    angular.forEach(view.settings.series, function (series, i) {\n                        series._label = utils.strings.parseValue(series.label, data, params, i);\n                        if (series.style) {\n                            styleDeferredsMapping[String(styleDeferreds.length)] = i;\n                            styleDeferreds.push(styles.getParseStyleFunction(series));\n                        }\n                        if (view.settings.setPercent) {\n                            setPercent(viewData.chartValues, series.field);\n                        }\n                        if (series.tooltip) {\n                            viewData.chartValues.forEach(function (item) {\n                                item.tooltip = utils.strings.parseValue(series.tooltip, item, params);\n                            });\n                        }\n                    });\n                    if (view.settings.legend) {\n                        viewData.legend = view.settings.legend;\n                    }\n                    else if (view.settings.series.length === 1 && view.settings.series[0].legend) {\n                        viewData.legend = { items: [] };\n                        angular.forEach(data, function (item) {\n                            viewData.legend.items.push({ value: utils.strings.parseValue(view.settings.series[0].legend, item, params) });\n                        });\n                    }\n                    angular.forEach(viewData.chartValues, function (item, itemIndex) {\n                        if (view.settings.labels.transform) {\n                            item._label =\n                                transforms[view.settings.labels.transform.method](item[view.settings.labels.field], view.settings.labels.transform.options);\n                        }\n                        else {\n                            item._label = utils.strings.parseValue(view.settings.labels.value, item, params, itemIndex);\n                        }\n                    });\n                    if (view.settings.selectedData) {\n                        for (var property in view.settings.selectedData) {\n                            if (view.settings.selectedData.hasOwnProperty(property)) {\n                                view.settings.selectedData[property] =\n                                    utils.strings.parseValue(view.settings.selectedData[property], data, params);\n                            }\n                        }\n                    }\n                    if (styleDeferreds.length) {\n                        $q.all(styleDeferreds).then(function (styleParsers) {\n                            var colorSeries = [];\n                            for (var styleDeferredIndex in styleDeferredsMapping) {\n                                if (styleDeferredsMapping.hasOwnProperty(styleDeferredIndex)) {\n                                    colorSeries.push({\n                                        series: view.settings.series[styleDeferredsMapping[styleDeferredIndex]],\n                                        styleParser: styleParsers[parseInt(styleDeferredIndex, 10)]\n                                    });\n                                }\n                            }\n                            angular.forEach(viewData.chartValues, function (item, itemIndex) {\n                                item._style = {};\n                                angular.forEach(colorSeries, function (colorSeriesItem) {\n                                    item._style[colorSeriesItem.series.field] = colorSeriesItem.styleParser(item);\n                                    if (!view.settings.legend && viewData.legend) {\n                                        viewData.legend.items[itemIndex].color =\n                                            item._style[colorSeriesItem.series.field].color;\n                                    }\n                                });\n                            });\n                            deferred.resolve(viewData);\n                        });\n                    }\n                    else {\n                        deferred.resolve(viewData);\n                    }\n                    return deferred.promise;\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Colors\", []).factory(\"colors\", [function () {\n            var colors = {\n                success: \"rgb(50, 146, 36)\",\n                failure: \"#D77576\"\n            };\n            var colorMaps = {\n                severity: {\n                    low: '#80BFF0',\n                    medium: '#F1CC37',\n                    high: '#F59925',\n                    critical: '#D77576'\n                },\n                scale: ['#D6D6D6', '#880000'],\n                binary: ['#D6D6D6', '#880000'],\n                sshStatus: {\n                    accepted: colors.success,\n                    failed: colors.failure\n                },\n                status: {\n                    \"success\": colors.success,\n                    \"failure\": colors.failure\n                }\n            };\n            var defaultRange = ['#D6D6D6', '#880000'];\n            var methods = {\n                getScale: function (colorSettings) {\n                    if (colorSettings && angular.isObject(colorSettings)) {\n                        if (colorSettings.map) {\n                            var defaultColor = colorSettings.map._default || \"#000000\", field = colorSettings.field, map = typeof (colorSettings.map) === \"string\" ? colorMaps[colorSettings.map] :\n                                colorSettings.map;\n                            if (!map || !angular.isObject(map)) {\n                                throw new Error(\"Invalid color map, \" + colorSettings.map);\n                            }\n                            return function (d) {\n                                var value = angular.isObject(d) ? d[field] : d, mapValue = map[value.toLowerCase()];\n                                if (!value || !mapValue) {\n                                    return defaultColor;\n                                }\n                                return mapValue;\n                            };\n                        }\n                        else if (colorSettings.domain) {\n                            var rangeCopy;\n                            if (colorSettings.range && colorSettings.rangeMap) {\n                                var rangeMap = colorMaps[colorSettings.rangeMap];\n                                rangeCopy = colorSettings.range && angular.copy(colorSettings.range);\n                                if (rangeMap) {\n                                    for (var i = 0, color; i < rangeCopy.length; i++) {\n                                        color = rangeMap[rangeCopy[i]];\n                                        if (color) {\n                                            rangeCopy[i] = color;\n                                        }\n                                    }\n                                }\n                            }\n                            return d3.scale.linear().domain(colorSettings.domain)\n                                .range(rangeCopy || colorSettings.range || defaultRange);\n                        }\n                    }\n                    if (colorSettings) {\n                        if (colorSettings === \"score\" || colorSettings === \"severity\") {\n                            return d3.scale.linear().domain([0, 50, 51, 79, 80, 94, 95, 100])\n                                .range([\n                                colorMaps.severity.low, colorMaps.severity.low,\n                                colorMaps.severity.medium, colorMaps.severity.medium,\n                                colorMaps.severity.high, colorMaps.severity.high,\n                                colorMaps.severity.critical, colorMaps.severity.critical\n                            ]);\n                        }\n                        if (colorSettings === \"binary\" || colorSettings === \"scale\") {\n                            return d3.scale.linear().domain([0, 1]).range([colorMaps[colorSettings][0],\n                                colorMaps[colorSettings][1]]);\n                        }\n                        var d3Scale = d3.scale[colorSettings];\n                        if (d3Scale) {\n                            return d3Scale();\n                        }\n                    }\n                    return d3.scale.category20c();\n                },\n                getColors: function (type) {\n                    return type ? colorMaps[type] : colorMaps;\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('DatePicker', [\"Utils\"])\n        .directive('ofsDatepicker', [\"utils\", function (utils) {\n            return {\n                template: '<span><input type=\"text\" ng-model=\"dateValue\" ng-change=\"onDateValueChange(dateValue)\" ' +\n                    'class=\"datepicker\" placeholder=\"{{placeholder}}\" ng-class=\"{ error: isRequired && !currentDate}\" /> ' +\n                    '<select ng-show=\"showHours\" ng-options=\"hour.value as hour.label for hour in hours\" ng-model=\"hour\"' +\n                    ' ng-change=\"onSelectHour(hour)\"></select></span>',\n                restrict: 'E',\n                require: '?ngModel',\n                replace: true,\n                scope: {\n                    onSelect: \"&\",\n                    isRequired: \"=?\",\n                    endOfDay: \"=?\",\n                    startOfDay: \"=?\",\n                    min: \"=?minValue\",\n                    max: \"=?maxValue\",\n                    showHours: \"=?\",\n                    placeholder: \"@\"\n                },\n                link: function postLink(scope, element, attrs, ngModel) {\n                    var $input = element.find(\"input\"), currentHour = 0;\n                    var MOMENT_DATE_FORMAT = \"MM/DD/YYYY\", DATEPICKER_DATE_FORMAT = \"mm/dd/yy\";\n                    function setHours(min, max) {\n                        scope.min = scope.min || 0;\n                        scope.max = scope.max || 24;\n                        scope.hours = [];\n                        for (var i = scope.min; i <= scope.max; i++) {\n                            scope.hours.push({ value: i, label: utils.strings.padLeft(String(i), 2, \"0\") + \":00\" });\n                        }\n                    }\n                    function selectDate(date) {\n                        if (scope.onSelect) {\n                            scope.onSelect({ date: date });\n                        }\n                        scope.currentDate = date;\n                        ngModel.$setViewValue(date, scope);\n                    }\n                    function minMaxWatch(datepickerOption) {\n                        return function (value) {\n                            if (!value) {\n                                return;\n                            }\n                            var currentDate = scope.currentDate;\n                            if (!angular.isDate(currentDate) && typeof (scope.currentDate === \"string\")) {\n                                currentDate = utils.date.getMoment(scope.currentDate, null, MOMENT_DATE_FORMAT);\n                            }\n                            $input.datepicker(\"option\", datepickerOption + \"Date\", value);\n                            if (typeof value === \"string\") {\n                                value = parseInt(value, 10);\n                            }\n                            if (typeof value === \"number\") {\n                                value = utils.date.getMoment('now').add(value, \"days\").toDate();\n                            }\n                            var shouldChange = datepickerOption === \"min\" ?\n                                currentDate.valueOf() >= value.valueOf() :\n                                currentDate.valueOf() <= value.valueOf();\n                            if (currentDate && value && shouldChange) {\n                                $input.val(utils.date.getMoment(currentDate).format(MOMENT_DATE_FORMAT));\n                            }\n                        };\n                    }\n                    scope.$on(\"$destroy\", function (e, data) {\n                        element.empty();\n                        element.off();\n                    });\n                    ngModel.$render = function () {\n                        try {\n                            var valueMoment;\n                            if (ngModel.$viewValue && ngModel.$viewValue.timeStart && ngModel.$viewValue.timeEnd) {\n                                if (utils.date.getDatesSpan(ngModel.$viewValue.timeStart, ngModel.$viewValue.timeEnd).length === 0) {\n                                    valueMoment = utils.date.getMoment(ngModel.$viewValue.timeStart);\n                                }\n                            }\n                            if (!valueMoment) {\n                                valueMoment = ngModel.$viewValue && utils.date.getMoment(ngModel.$viewValue);\n                            }\n                            if (valueMoment && valueMoment.isValid()) {\n                                scope.dateValue = valueMoment.format(MOMENT_DATE_FORMAT);\n                                scope.currentDate = valueMoment.toDate();\n                                scope.hour = scope.currentDate.getHours();\n                            }\n                            else {\n                                $input.val(\"\");\n                                scope.currentDate = null;\n                            }\n                        }\n                        catch (e) {\n                            $input.val(\"\");\n                            scope.currentDate = null;\n                        }\n                        scope.selectedTab = ngModel.$viewValue;\n                    };\n                    scope.$watch(\"min\", minMaxWatch(\"min\"));\n                    scope.$watch(\"max\", minMaxWatch(\"max\"));\n                    scope.onSelectHour = function (hour) {\n                        currentHour = hour;\n                        scope.hour = hour;\n                        if (scope.onSelect) {\n                            scope.onSelect({\n                                date: utils.date.getMoment(scope.currentDate.setHours(hour)).toDate()\n                            });\n                        }\n                    };\n                    scope.onDateValueChange = function (value) {\n                        if (!value && scope.currentDate) {\n                            selectDate(null);\n                        }\n                    };\n                    scope.hour = 0;\n                    $input.datepicker({\n                        dateFormat: DATEPICKER_DATE_FORMAT,\n                        onSelect: function (dateText) {\n                            scope.$apply(function () {\n                                var date = utils.date.getMoment(dateText, null, MOMENT_DATE_FORMAT);\n                                if (scope.endOfDay) {\n                                    date.endOf(\"day\");\n                                }\n                                else if (scope.startOfDay) {\n                                    date.startOf(\"day\");\n                                }\n                                else if (scope.hour) {\n                                    date.add(scope.hour, \"hours\");\n                                }\n                                selectDate(date.toDate());\n                            });\n                        }\n                    });\n                    setHours();\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Holds the current state of the app - global params.\n     * Listens for changes to state in the browser's URL and updates accordingly, then triggers an event.\n     * @param $rootScope\n     * @param $routeParams\n     * @param utils\n     * @returns {{currentParams, setParams: setParams}}\n     */\n    function state($rootScope, $routeParams, $location, $route, $timeout, utils, EventBus) {\n        var currentParams = {}, locked = false, \n        // Lock is available to avoid an infinite loop when the service updates the URL.\n        // In case the service updates URL, it first locks temporarily the URL listener.\n        lockTimeout, eventBus;\n        function init() {\n            setParams();\n            /*\n             * Notice the difference between locationChangeSuccess and routeChangeSuccess:\n             *\n             * locationChangeSuccess is triggered when the URL parameters\n             * are changed, i.e. when there's a change after the ?\n             * (for example: /#/d/explore/ssh?...)\n             *\n             * routeChangeSuccess is triggered when the URL route is changed,\n             * i.e. when something after the #, but before the ? is changed\n             * (for example: /#/d/explore/ssh?... ---> /#/d/explore/vpn)\n             */\n            $rootScope.$on(\"$locationChangeSuccess\", function (e, params) {\n                if (!locked) {\n                    setParams();\n                }\n            });\n            $rootScope.$on(\"$routeChangeSuccess\", function (e, params) {\n                if (!locked) {\n                    setParams();\n                }\n            });\n        }\n        function lockUrlListener() {\n            $timeout.cancel(lockTimeout);\n            locked = true;\n            lockTimeout = $timeout(function () {\n                locked = false;\n            }, 15);\n        }\n        function setParamsToUrl(params) {\n            var paramValue;\n            for (var paramName in params) {\n                if (params.hasOwnProperty(paramName)) {\n                    paramValue = params[paramName];\n                    // If the param exists in the URL, remove it.\n                    if ($routeParams[paramName]) {\n                        $location.search(paramName, null);\n                    }\n                    // Make sure that the parameter has value.\n                    if (paramValue !== null && (typeof paramValue !== 'undefined')) {\n                        $location.search(paramName, getParamQueryValue(paramValue));\n                    }\n                }\n            }\n        }\n        function getParamQueryValue(paramValue) {\n            var queryValue;\n            if (paramValue.constructor === Array) {\n                queryValue = paramValue.map(function (member) {\n                    return getParamQueryValue(member);\n                });\n                queryValue = queryValue.join(\",\");\n            }\n            else if (Object(paramValue) === paramValue) {\n                queryValue = [];\n                for (var p in paramValue) {\n                    if (paramValue.hasOwnProperty(p)) {\n                        queryValue.push(p + \"=\" + paramValue[p]);\n                    }\n                }\n                queryValue = queryValue.join(\",\");\n            }\n            else {\n                queryValue = paramValue;\n            }\n            return queryValue;\n        }\n        function getChangedParams(params) {\n            var changedParams = {};\n            var paramValue;\n            for (var p in params) {\n                if (params.hasOwnProperty(p)) {\n                    paramValue = parseParamValue(params[p]);\n                    if (paramValue === \"\") {\n                        paramValue = null;\n                    }\n                    if (currentParams[p] !== paramValue) {\n                        changedParams[p] = paramValue;\n                    }\n                }\n            }\n            for (p in currentParams) {\n                if (params[p] === null) {\n                    changedParams[p] = null;\n                }\n            }\n            return changedParams;\n        }\n        function parseParamValue(paramValue) {\n            var paramValueCopy = angular.copy(paramValue);\n            if (Object(paramValueCopy) === paramValueCopy) {\n                if (paramValueCopy.constructor === Array) {\n                    var arrayMembers = [], property;\n                    for (var _i = 0, paramValueCopy_1 = paramValueCopy; _i < paramValueCopy_1.length; _i++) {\n                        var member = paramValueCopy_1[_i];\n                        if (Object(member) === member) {\n                            for (property in member) {\n                                if (member.hasOwnProperty(property)) {\n                                    arrayMembers.push(property + \"=\" + member[property]);\n                                }\n                            }\n                        }\n                        else {\n                            arrayMembers.push(member);\n                        }\n                    }\n                    paramValueCopy = arrayMembers.join(\",\");\n                }\n            }\n            return paramValueCopy;\n        }\n        function parseParams(params) {\n            var parsedParams = {};\n            var paramValue;\n            for (var p in params) {\n                if (params.hasOwnProperty(p)) {\n                    paramValue = params[p];\n                    if (paramValue.constructor === Array) {\n                        parsedParams[p] = paramValue.join(\",\");\n                    }\n                    else {\n                        parsedParams[p] = paramValue;\n                    }\n                }\n            }\n            return parsedParams;\n        }\n        function setParams() {\n            var changedParams = getChangedParams($routeParams);\n            currentParams = parseParams($routeParams);\n            notifyParamsChange(changedParams);\n        }\n        function notifyParamsChange(changedParams) {\n            if (eventBus && Object.keys(changedParams).length) {\n                eventBus.triggerEvent(\"stateChange\", { params: changedParams });\n            }\n        }\n        function notifyStateChange() {\n            if (eventBus) {\n                eventBus.triggerEvent(\"stateChange\", {});\n            }\n        }\n        /**\n         * Gets a mapping of parameters and returns a flat object with the params and their parsed value according\n         * to the data\n         * Example:\n         * mapParams({ param1: { value: 'Hello {{testParam}}' },\n         * param2: { value: 'Not included', setIf: 'nonExistingProperty' } },\n         * { testParam: 'World' }) returns { param1: 'Hello World' }\n         * @param {Object} paramsMap\n         * @param {Object} data\n         */\n        function mapParams(paramsMap, data) {\n            var params = {};\n            var paramConfig, useParam, paramValue;\n            for (var param in paramsMap) {\n                if (paramsMap.hasOwnProperty(param)) {\n                    paramConfig = paramsMap[param];\n                    useParam = true;\n                    if (Object(paramConfig) === paramConfig) {\n                        if (paramConfig.setIf) {\n                            useParam = !!data[paramConfig.setIf];\n                        }\n                        if (useParam) {\n                            paramValue = paramConfig.dataValue ? data[paramConfig.dataValue] :\n                                utils.strings.parseValue(paramConfig.value, data);\n                        }\n                    }\n                    else {\n                        paramValue = utils.strings.parseValue(paramConfig, data);\n                    }\n                    if (useParam) {\n                        params[param] = paramValue;\n                    }\n                }\n            }\n            return params;\n        }\n        init();\n        var stateObj = {\n            get currentParams() {\n                return currentParams;\n            },\n            /**\n             * Returns a URL-ready string of params. If params are not specified, uses the current state params.\n             * @param params\n             */\n            getUrlParams: function (params) {\n                params = params || currentParams;\n                var urlParams = [];\n                for (var param in params) {\n                    if (param !== \"dashboardId\" && param !== \"entityId\") {\n                        urlParams.push(param + \"=\" + encodeURIComponent(getParamQueryValue(params[param])));\n                    }\n                }\n                return urlParams.join(\"&\");\n            },\n            mapParams: mapParams,\n            setParams: function (params, setToUrl, notify) {\n                var changedParams = getChangedParams(params);\n                if (Object.keys(changedParams).length) {\n                    var paramValue;\n                    for (var p in changedParams) {\n                        if (changedParams.hasOwnProperty(p)) {\n                            paramValue = changedParams[p];\n                            if (paramValue === null) {\n                                delete currentParams[p];\n                            }\n                            else {\n                                currentParams[p] = paramValue;\n                            }\n                        }\n                    }\n                    lockUrlListener();\n                    if (setToUrl !== false) {\n                        setParamsToUrl(params);\n                    }\n                    if (notify !== false) {\n                        notifyParamsChange(changedParams);\n                    }\n                }\n            },\n            refresh: function () {\n                notifyStateChange();\n            }\n        };\n        eventBus = EventBus.setToObject(stateObj, [\"stateChange\"]);\n        return stateObj;\n    }\n    state.$inject = [\"$rootScope\", \"$routeParams\", \"$location\", \"$route\", \"$timeout\", \"utils\", \"EventBus\"];\n    angular.module(\"State\", [\"Utils\", \"EventBus\"]).factory(\"state\", state);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"DAL\", [\"Version\", \"Utils\", \"Config\"])\n        .factory(\"DAL\", [\"$http\", \"$q\", \"api\", \"version\", \"utils\", \"configFlags\", \"$timeout\",\n        function ($http, $q, api, version, utils, configFlags, $timeout) {\n            var runningReports = {};\n            var methods = {\n                dashboards: {\n                    getDashboardById: function (dashboardId) {\n                        if (!dashboardId) {\n                            return $q.reject(\"No dashboard ID specified.\");\n                        }\n                        return utils.http.wrappedHttpGet(\"data/dashboards/\" + dashboardId.replace(/\\./g, \"/\") +\n                            \".json?v=\" + version)\n                            .catch(function (error) {\n                            var errorMessage = error.status === 404 ?\n                                \"Dashboard '\" + dashboardId + \"' not found.\" :\n                                \"Can't get dashboard '\" + dashboardId + \"'. Error: \" + error.data;\n                            errorMessage += ' Redirecting to Overview.';\n                            var err = {\n                                message: errorMessage,\n                                code: 404,\n                                redirectToState: 'overview'\n                            };\n                            return $q.reject(err);\n                        });\n                    }\n                },\n                entities: {\n                    getEntity: function (entityId) {\n                        return utils.http.wrappedHttpGet(\"data/entities/\" + entityId + \".json?v=\" + version)\n                            .catch(function (error) {\n                            var errorMessage = error.status === 404 ? \"Entity '\" + entityId + \"' not found.\" :\n                                \"Can't get entity '\" + entityId + \"'. Error: \" + error.data;\n                            return $q.reject(errorMessage);\n                        });\n                    }\n                },\n                filters: {\n                    getSavedSearch: function (searchId) {\n                        var search = localStorage.getItem(\"search_\" + searchId);\n                        if (search) {\n                            return $q.when(JSON.parse(search));\n                        }\n                        return $q.reject(\"Saved search with ID '\" + searchId + \"' not found.\");\n                    },\n                    getSavedSearches: function () {\n                        var searches = [], keyMatch = /^search_/;\n                        for (var key in localStorage) {\n                            if (localStorage.hasOwnProperty(key)) {\n                                if (keyMatch.test(key)) {\n                                    searches.push(JSON.parse(localStorage[key]));\n                                }\n                            }\n                        }\n                        return $q.when(searches);\n                    },\n                    save: function (search) {\n                        var searchId = search.name.toLowerCase().replace(/\\W/g, \"_\"), storageKey = \"search_\" + searchId;\n                        if (localStorage[storageKey] && !confirm('A search named \"' + search.name +\n                            '\" already exists. Overwrite?')) {\n                            return $q.reject(\"A search named \\\"\" + search.name + \"\\\" already exists.\");\n                        }\n                        search.id = searchId;\n                        localStorage.setItem(\"search_\" + searchId, JSON.stringify(search));\n                        return $q.when(search);\n                        //return utils.http.wrappedHttpPost()\n                    },\n                    remove: function (search) {\n                        var searchId = search.name.toLowerCase().replace(/\\W/g, \"_\"), storageKey = \"search_\" + searchId;\n                        localStorage.removeItem(storageKey);\n                        return $q.when(search);\n                    }\n                },\n                reports: {\n                    /**\n                     * Gets a report config file's contents\n                     * @param reportId The ID of the report to get. Dots (.) are replaced with slashes to form\n                     * folder paths (user.top_events -> user/top_events.json)\n                     * @returns {promise}\n                     */\n                    getReport: function (reportId) {\n                        var deferred = $q.defer();\n                        $http.get(\"data/reports/\" + reportId.replace(/\\./g, \"/\") + \".json?v=\" + version)\n                            .success(deferred.resolve)\n                            .error(deferred.reject);\n                        return deferred.promise;\n                    },\n                    /**\n                     * Routes the report between mock data or server API. If any of the required params are not\n                     * available, returns empty data.\n                     * @param report The report object\n                     * @param params The report params, each with the value ready to send\n                     * @returns {promise}\n                     */\n                    runReport: function (report, params) {\n                        function resolveSameReports(results, error) {\n                            var runningReportDeferreds = runningReports[runningReportKey];\n                            if (runningReportDeferreds) {\n                                runningReportDeferreds.forEach(function (deferred) {\n                                    if (error) {\n                                        deferred.reject(error);\n                                    }\n                                    else {\n                                        deferred.resolve(results);\n                                    }\n                                });\n                            }\n                            delete runningReports[runningReportKey];\n                        }\n                        function onReportSuccess(results) {\n                            resolveSameReports(results);\n                            return results;\n                        }\n                        function onReportError(error) {\n                            var errorMessage = error.status === 404 ? \"File '\" + fileUrl + \"' not found.\" :\n                                error.data;\n                            resolveSameReports(null, errorMessage);\n                            return $q.reject(errorMessage);\n                        }\n                        // report.delay is used for testing only, to simulate slow requests.\n                        if (report.delay) {\n                            var reportCopy = report.clone(), deferred = $q.defer();\n                            delete reportCopy.delay;\n                            $timeout(function () {\n                                methods.reports.runReport(reportCopy, params)\n                                    .then(deferred.resolve, deferred.reject);\n                            }, report.delay);\n                            return deferred.promise;\n                        }\n                        var runningReportKey = JSON.stringify({ report: report, params: params }), runningReportDeferreds = runningReports[runningReportKey];\n                        // If the same report is being queried at the moment, there's no need to query it again,\n                        // just use the same results:\n                        if (runningReportDeferreds) {\n                            var reportDeferred = $q.defer();\n                            runningReportDeferreds.push(reportDeferred);\n                            return reportDeferred.promise;\n                        }\n                        else {\n                            runningReports[runningReportKey] = [];\n                        }\n                        // Transitioning from the old (mock_data) to the new (mockData)\n                        var mockData = report.mockData || report.mock_data;\n                        if (mockData && configFlags.mockData) {\n                            var urlParams = utils.url.getQuery(params), fileUrl = \"data/mock_data/\" + utils.strings.parseValue(mockData, {}, params)\n                                .replace(/\\./g, \"/\") + \".json?v=\" + new Date().valueOf() +\n                                (urlParams ? \"&\" + urlParams : \"\");\n                            return utils.http.wrappedHttpGet(fileUrl)\n                                .then(onReportSuccess.bind(report), onReportError);\n                        }\n                        else {\n                            var paramValue;\n                            if (report.requiredParams) {\n                                for (var i = 0; i < report.requiredParams.length; i++) {\n                                    paramValue = params[report.requiredParams[i]];\n                                    if (!paramValue && paramValue !== 0) {\n                                        return $q.when({\n                                            data: [],\n                                            total: 0\n                                        }).then(onReportSuccess.bind(report), onReportError);\n                                    }\n                                }\n                            }\n                            return api.query(report, params, report.options)\n                                .then(onReportSuccess.bind(report), onReportError);\n                        }\n                    }\n                },\n                widgets: {\n                    getWidget: function (widgetId) {\n                        return utils.http.wrappedHttpGet(\"data/widgets/\" + widgetId.replace(/\\./g, \"/\") +\n                            \".json?v=\" + version).catch(function (error) {\n                            var errorMessage = error.status === 404 ? \"Widget '\" + widgetId + \"' not found.\" :\n                                \"Can't get widget '\" + widgetId + \"'. Error: \" + error.data;\n                            return $q.reject(errorMessage);\n                        });\n                    }\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Handles data requests from/to the Fortscale API\n     * @param $q\n     * @param $resource\n     * @param $rootScope\n     * @param utils\n     * @returns {{query: queryApi}}\n     */\n    function api($q, $resource, $rootScope, utils) {\n        function getParamsData(data) {\n            var resourceParams = [\"entity\", \"id\", \"method\"], params = {}, paramsData = {};\n            for (var paramName in data) {\n                if (data.hasOwnProperty(paramName)) {\n                    if (~resourceParams.indexOf(paramName)) {\n                        params[paramName] = data[paramName];\n                    }\n                    else {\n                        paramsData[paramName] = data[paramName];\n                    }\n                }\n            }\n            return { data: paramsData, params: params };\n        }\n        function queryApi(query, params, options) {\n            var timeStart = new Date();\n            function promiseSuccess(queryResult) {\n                if (angular.isObject(queryResult)) {\n                    queryResult.time = new Date() - timeStart;\n                }\n                return queryResult || $q.reject(\"No response received for query: \" + JSON.stringify(query));\n            }\n            function promiseError(error) {\n                if (error.status === 401 || error.status === 403) {\n                    $rootScope.$broadcast(\"authError\", error.data || { status: error.status });\n                    return $q.reject(\"Authentication error.\");\n                }\n                if (error.status === 404) {\n                    return $q.reject(\"API unavailable.\");\n                }\n                if (typeof (error) === \"string\") {\n                    return $q.reject(error);\n                }\n                return $q.reject(\"API call failed: \" + error.data.message + \" (\" + error.data.code + \").\" +\n                    (error.data.developerMessage ? \" Description: \" + error.data.developerMessage : \"\"));\n            }\n            if (typeof (query.path) === \"string\") {\n                return utils.http.wrappedHttpGet(utils.strings.parseValue(query.path, params))\n                    .then(promiseSuccess, promiseError);\n            }\n            var resource = query.endpoint && query.endpoint.subEntityName ? apiWithSubEntityResource : apiResource, resourceData = angular.extend({}, options, params, query.endpoint);\n            for (var property in resourceData) {\n                if (resourceData.hasOwnProperty(property)) {\n                    if (angular.isString(resourceData[property])) {\n                        if (property === \"query\" && options && options.isCount) {\n                            continue;\n                        }\n                        else if ((!options || !options.isCount) && property === \"countQuery\") {\n                            continue;\n                        }\n                        resourceData[property] = utils.strings.parseValue(resourceData[property], {}, params);\n                    }\n                }\n            }\n            if (resourceData.paging) {\n                var page = resourceData.paging.param ?\n                    params[resourceData.paging.param] && parseInt(params[resourceData.paging.param], 10) :\n                    utils.strings.parseValue(resourceData.paging.page, {}, params);\n                resourceData.size = resourceData.limit = resourceData.size || resourceData.paging.pageSize || 10;\n                resourceData.page = page || 0;\n                resourceData.offset = ((page - 1) * resourceData.size) || 0;\n                delete resourceData.paging;\n            }\n            if (query.method && query.method.toLowerCase() === \"post\") {\n                var resourcesParams = getParamsData(resourceData);\n                return resource.save(resourcesParams.params, resourcesParams.data).$promise\n                    .then(promiseSuccess, promiseError);\n            }\n            else if (query.openInIframe) {\n                var IFRAME_ID = \"reportIframe\";\n                var iframe = document.querySelector(\"#\" + IFRAME_ID);\n                if (!iframe) {\n                    iframe = document.createElement('iframe');\n                    iframe.id = IFRAME_ID;\n                    iframe.style.display = 'none';\n                    document.body.appendChild(iframe);\n                }\n                var iframeSrc = \"/fortscale-webapp/api/\" + resourceData.api + \"?\", queryParams = [];\n                for (var paramName in resourceData) {\n                    if (resourceData.hasOwnProperty(paramName)) {\n                        var paramValue = resourceData[paramName];\n                        if (angular.isObject(paramValue)) {\n                            paramValue = JSON.stringify(paramValue);\n                        }\n                        if (paramValue !== null && paramValue !== undefined && paramValue !== \"\") {\n                            queryParams.push(paramName + \"=\" + encodeURIComponent(paramValue));\n                        }\n                    }\n                }\n                iframeSrc += queryParams.join(\"&\");\n                iframe.src = iframeSrc;\n                var deferred = $q.defer();\n                deferred.resolve({});\n                return deferred.promise.then(promiseSuccess, promiseError);\n            }\n            else {\n                return resource.get(resourceData).$promise.then(promiseSuccess, promiseError);\n            }\n        }\n        var apiResource = $resource(\"/fortscale-webapp/api/:api/:entity/:id/:method\", {\n            id: \"@id\"\n        });\n        var apiWithSubEntityResource = $resource(\"\" +\n            \"/fortscale-webapp/api/:api/:entity/:id/:subEntityName/:subEntityId/:method\", {\n            id: \"@id\",\n            subEntityName: \"@subEntityName\",\n            subEntityId: \"@subEntityId\"\n        });\n        return {\n            query: queryApi\n        };\n    }\n    api.$inject = [\"$q\", \"$resource\", \"$rootScope\", \"utils\"];\n    angular.module(\"DAL\").factory(\"api\", api);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"FSHighChart\", [\"Colors\", \"Utils\"]).service('fsHighChartService', function () {\n        var basicConfiguration;\n        /**\n         * Init static highchart settings\n         * Define the init and execute it\n         */\n        var init = function () {\n            /**\n             * Workaround - when have multi highcharts and you print one of them-\n             * all the other are shrink.\n             * This workaround taken from: https://github.com/highslide-software/highcharts.com/issues/1093\n             */\n            Highcharts.setOptions({\n                chart: {\n                    events: {\n                        //When any chart trigger \"afterPrint\" event, we manually iterate all the charts and operate the\n                        // \"reflow\" method.\n                        afterPrint: function () {\n                            Highcharts.charts.forEach(function (chart) {\n                                if (chart !== undefined) {\n                                    chart.reflow();\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n            basicConfiguration = {\n                \"chart\": {},\n                \"series\": [],\n                \"title\": {\n                    //Must be empty, if we will remove it, highchart will generate default title\n                    \"text\": \"\"\n                },\n                \"credits\": {\n                    //Payment license, no credits needed.\n                    \"enabled\": false\n                },\n                tooltip: {\n                    enabled: false\n                },\n                // Fortscale as default loading mechanism, no need to use loading of highchart.\n                \"loading\": false,\n                \"size\": {}\n            };\n        };\n        this.getBasicChartConfiguration = function () {\n            return angular.copy(basicConfiguration);\n        };\n        init();\n    });\n}());\n","(function () {\n    'use strict';\n    var LOW = \"low\";\n    var MEDIUM = \"medium\";\n    var HIGH = \"high\";\n    var CRITICAL = \"critical\";\n    var LOW_SCORE = 50;\n    var MEDIUM_SCORE = 80;\n    var HIGH_SCORE = 95;\n    var CRITICAL_SCORE = 101;\n    var LOW_COLOR = \"#80BFF0\";\n    var MEDIUM_COLOR = \"#F1CD37\";\n    var HIGH_COLOR = \"#F78D1B\";\n    var CRITICAL_COLOR = \"#D77576\";\n    //Pay attention- changing the order of the score colors in the array will change the order of the legend\n    var SCORE_COLOR_META_DATA = {\n        critical: {\n            name: CRITICAL,\n            color: CRITICAL_COLOR,\n            minScore: HIGH_SCORE,\n            maxScore: CRITICAL_SCORE\n        },\n        high: {\n            name: HIGH,\n            color: HIGH_COLOR,\n            minScore: MEDIUM_SCORE,\n            maxScore: HIGH_SCORE\n        },\n        medium: {\n            name: MEDIUM,\n            color: MEDIUM_COLOR,\n            minScore: LOW_SCORE,\n            maxScore: MEDIUM_SCORE\n        },\n        low: {\n            name: LOW,\n            color: LOW_COLOR,\n            minScore: 0,\n            maxScore: LOW_SCORE\n        }\n    };\n    var COLORS_RANGE_BLUE = ['#A4C0FC', '#6E9AF5', '#5786EB', '#2661E0', '#0441C4', '#032B80'];\n    angular.module(\"FSHighChart\").constant('SCORE_COLOR_META_DATA', SCORE_COLOR_META_DATA);\n    angular.module(\"FSHighChart\").constant('COLORS_RANGE_BLUE', COLORS_RANGE_BLUE);\n})();\n","angular.module(\"Menus\", [\"Utils\", \"Version\", \"Conditions\"]);\n","(function () {\n    'use strict';\n    angular.module(\"Menus\").factory(\"Menu\", [\"dynamicMenus\", function (dynamicMenus) {\n            function Menu(config) {\n                this.validate(config);\n                parseDynamicMenuItems(config);\n                this.items = config.items;\n                this.id = config.id;\n                if (config.name) {\n                    this.text = config.name;\n                }\n            }\n            Menu.prototype.validate = function (config) {\n                if (!config) {\n                    return;\n                }\n                var ERROR_PREFIX = \"Can't create Menu, \";\n                if (!config.id) {\n                    throw new Error(ERROR_PREFIX + \"missing ID.\");\n                }\n                if (typeof (config.id) !== \"string\") {\n                    throw new TypeError(ERROR_PREFIX + \"expected a string ID but got \" + typeof (config.id));\n                }\n                if (!config.items) {\n                    throw new Error(ERROR_PREFIX + \"missing the items array.\");\n                }\n                if (config.items.constructor !== Array) {\n                    throw new TypeError(ERROR_PREFIX + \" expected an array for items.\");\n                }\n                for (var _i = 0, _a = config.items; _i < _a.length; _i++) {\n                    var item = _a[_i];\n                    if (item.dynamicMenu) {\n                        continue;\n                    }\n                    if (Object(item) !== item) {\n                        throw new TypeError(ERROR_PREFIX + \"invalid item config, expected an object but got \" + item);\n                    }\n                    if (!item.text && !item.name) {\n                        throw new Error(ERROR_PREFIX + \"missing text for item.\");\n                    }\n                    if (!item.url && !item.onSelect) {\n                        throw new Error(ERROR_PREFIX + \"a menu item must have either a url or onSelect properties.\");\n                    }\n                }\n            };\n            function parseDynamicMenuItems(menuConfig) {\n                dynamicMenus.setDynamicMenus(menuConfig.items);\n            }\n            return Menu;\n        }]);\n})();\n","(function () {\n    'use strict';\n    function menusFactory($q, utils, version, conditions, Menu) {\n        var menus = {}, onMenuLoad = {};\n        function getMenu(menu, settings, data, params) {\n            var menuItems = [], itemsData = angular.copy(data), menuInstance = angular.copy(menu);\n            if (settings.params) {\n                var param;\n                for (var paramName in settings.params) {\n                    if (settings.params.hasOwnProperty(paramName)) {\n                        param = settings.params[paramName];\n                        if (typeof (param) === \"string\") {\n                            itemsData[paramName] = utils.strings.parseValue(settings.params[paramName], data, params);\n                        }\n                        else if (angular.isObject(param) && param.dashboardParam) {\n                            itemsData[paramName] = params[param.dashboardParam];\n                        }\n                    }\n                }\n            }\n            menu.items.forEach(function (item, i) {\n                var itemCopy = angular.copy(item);\n                if (!item.conditions || conditions.validateConditions(item.conditions, itemsData, params)) {\n                    itemCopy.text = utils.strings.parseValue(item.text || item.name, itemsData, params, i);\n                    if (item.url) {\n                        itemCopy.href = utils.strings.parseValue(item.url, itemsData, params);\n                        if (itemCopy.href === window.location.href ||\n                            utils.url.haveTheSameHash(itemCopy.href, window.location.href)) {\n                            return true;\n                        }\n                    }\n                    menuItems.push(itemCopy);\n                }\n            });\n            if (!menuItems.length) {\n                return null;\n            }\n            menuInstance.items = menuItems;\n            menuInstance.params = settings.params;\n            return menuInstance;\n        }\n        var methods = {\n            getMenuById: function (menuId) {\n                if (menus[menuId]) {\n                    return $q.when(new Menu(utils.objects.copy(menus[menuId])));\n                }\n                if (onMenuLoad[menuId]) {\n                    var deferred = $q.defer();\n                    onMenuLoad[menuId].push({ menuId: menuId, deferred: deferred });\n                    return deferred.promise;\n                }\n                onMenuLoad[menuId] = [];\n                return utils.http.wrappedHttpGet(\"data/menus/\" + menuId.replace(/\\./g, \"/\") + \".json?v=\" +\n                    version).then(function (menu) {\n                    menus[menuId] = menu;\n                    var menuObj = new Menu(utils.objects.copy(menu));\n                    if (onMenuLoad[menuId].length) {\n                        onMenuLoad[menuId].forEach(function (onLoad) {\n                            onLoad.deferred.resolve(menuObj);\n                        });\n                    }\n                    return menuObj;\n                });\n            },\n            getMenu: function (menuSettings, data, params) {\n                if (menuSettings.id) {\n                    return methods.getMenuById(menuSettings.id).then(function (menu) {\n                        return getMenu(menu, menuSettings, data, params);\n                    });\n                }\n                return getMenu(menuSettings, menuSettings, data, params);\n            },\n            getMenuParser: function (menuSettings) {\n                if (!menuSettings.id) {\n                    return $q.when(menuSettings);\n                }\n                return this.getMenuById(menuSettings.id).then(function (menu) {\n                    return function (data, params) {\n                        return getMenu(menu, menuSettings, data, params);\n                    };\n                });\n            },\n            initMenu: function (menuId) {\n                return methods.getMenuById(menuId);\n            },\n            initMenus: function (menuIds) {\n                if (!menuIds || !menuIds.length) {\n                    return $q.when(null);\n                }\n                var promises = [];\n                menuIds.forEach(function (menuId) {\n                    promises.push(methods.initMenu(menuId));\n                });\n                return $q.all(promises);\n            }\n        };\n        return methods;\n    }\n    menusFactory.$inject = [\"$q\", \"utils\", \"version\", \"conditions\", \"Menu\"];\n    angular.module(\"Menus\").factory(\"menus\", menusFactory);\n})();\n","(function () {\n    'use strict';\n    function dynamicMenus(dataEntities, utils, state) {\n        /**\n         * Iterates over an array of menu items and replaces dynamic menus with entities menu items\n         * @param menuItems\n         * @param params\n         */\n        function setDynamicMenus(menuItems, params) {\n            var newIndices = [];\n            params = params || state.currentParams;\n            menuItems.forEach(function (menuItem, index) {\n                if (menuItem.dynamicMenu) {\n                    newIndices.push({\n                        index: index,\n                        newItems: getBaseEntityDynamicMenu(menuItem.dynamicMenu)\n                    });\n                }\n                else if (menuItem.children) {\n                    setDynamicMenus(menuItem.children);\n                }\n            });\n            // It's done from the end to the start because the size of navData changes while looping:\n            for (var itemsMap, i = newIndices.length - 1; i >= 0; i--) {\n                itemsMap = newIndices[i];\n                utils.arrays.replace(menuItems, itemsMap.index, itemsMap.newItems);\n            }\n            menuItems.forEach(function (menuItem) {\n                if (menuItem.url) {\n                    menuItem.href = utils.strings.parseValue(menuItem.url, {}, params);\n                }\n            });\n        }\n        /**\n         * Given a dynamic menu configuration, with base entity, returns an array of menu items for all extending\n         * (non-abstract) entities. Each menu item has 'name' and 'url' properties.\n         * @param dynamicMenuConfig\n         * @returns {*}\n         */\n        function getBaseEntityDynamicMenu(dynamicMenuConfig) {\n            if (!dynamicMenuConfig) {\n                throw new Error(\"Can't create base entity dynamic menu items - missing dynamicMenuConfig.\");\n            }\n            if (!dynamicMenuConfig.baseEntity || dynamicMenuConfig.baseEntity.length === 0) {\n                throw new Error(\"Can't get base entity dynamic menu items - no base entity specified.\");\n            }\n            if (!dynamicMenuConfig.name || !dynamicMenuConfig.url) {\n                throw new Error(\"Can't create dynamic menu items for base entity, 'name' and 'url' are required.\");\n            }\n            // Go over all base entities to collect extending entities for menu\n            var menuItems = [];\n            // gets entity and returns item that represents menu item\n            function extractMenuDataFromEntity(entity) {\n                return {\n                    name: utils.strings.parseValue(dynamicMenuConfig.name, { entity: entity }).replace(/\\\\\\\\/g, \"\"),\n                    url: utils.strings.parseValue(dynamicMenuConfig.url, { entity: entity }).replace(/\\\\\\\\/g, \"\")\n                };\n            }\n            var leafEntities;\n            for (var index = 0; index < dynamicMenuConfig.baseEntity.length; index++) {\n                // get extending entities of base entity\n                leafEntities = dataEntities.getExtendingEntities(dynamicMenuConfig.baseEntity[index]);\n                // create menu item for each extended entity\n                menuItems = menuItems.concat(leafEntities.map(extractMenuDataFromEntity));\n            }\n            return menuItems;\n        }\n        return {\n            setDynamicMenus: setDynamicMenus\n        };\n    }\n    dynamicMenus.$inject = [\"dataEntities\", \"utils\", \"state\"];\n    angular.module(\"Menus\").factory(\"dynamicMenus\", dynamicMenus);\n})();\n","angular.module(\"Controls\", [\"Utils\", \"Conditions\", \"EventBus\", \"State\"]);\n","(function () {\n    'use strict';\n    var controlTypes = new Set([\"search\", \"constant\", \"date\", \"dateRange\", \"number\", \"select\", \"checklist\", \"duration\",\n        \"buttonSelect\", \"checkbox\", \"multiSelect\", \"paging\", \"simplePagination\", \"text\"]);\n    function ControlClass() {\n        function Control(config) {\n            this.validate(config);\n            this._config = config;\n            this.hide = config.hide;\n            /**\n             * The type of the control. Has to be one of the known control types, in the controlTypes Set above.\n             * @type {config.type|*}\n             */\n            this.type = config.type;\n            /**\n             * The name of the param this Control controls.\n             */\n            this.param = config.param;\n            /**\n             * The name of the param this Control controls.\n             */\n            this.paramGroup = config.paramGroup;\n            /**\n             * [Optional] If specified, the url is parsed according to the formatParam string before the param controls\n             * are updated.\n             */\n            this.formatParam = config.formatParam;\n            /**\n             * If isRequired is true, the param controls can't be updated if the Control has no value.\n             * @type {boolean}\n             */\n            this.isRequired = !!config.isRequired;\n            /**\n             * If the control need a specific validator which is defined in the filterValidators\n             * @type {string}\n             */\n            if (config.filterValidator) {\n                this.filterValidator = config.filterValidator;\n            }\n            /**\n             * If autoUpdate is true, the param controls are updated when the control is changed, no need for the\n             * update button\n             * @type {boolean}\n             */\n            this.autoUpdate = !!config.autoUpdate;\n            this.disabled = !!config.disabled;\n            /**\n             * Text to display near the control\n             * @type {*|string}\n             */\n            this.label = config.label && String(config.label);\n            /**\n             * Text to add by the control template after the control's input\n             * @type {parseLanguage.suffix|*|obj.suffix|string}\n             */\n            this.suffix = config.suffix && String(config.suffix);\n            /**\n             * type-specific configuration for the control\n             * @type {view.settings|*|$scope.view.settings|Function|widgetConfig.settings|exports.translations.settings}\n             */\n            this.settings = config.settings;\n            this.value = config.value;\n        }\n        Control.prototype.validate = function (config) {\n            if (!config.type) {\n                throw new Error(\"Can't create Control, missing the 'type' property.\");\n            }\n            if (!controlTypes.has(config.type)) {\n                throw new Error(\"Unknown Control type, '\" + config.type + \"'.\");\n            }\n            if (!config.param) {\n                throw new Error(\"Can't create Control, missing the 'param' property.\");\n            }\n            if (typeof (config.param) !== \"string\") {\n                throw new TypeError(\"Invalid param for Control, expected a string but got \" + typeof (config.param) +\n                    \".\");\n            }\n            if (config.paramGroup && typeof (config.paramGroup) !== \"string\") {\n                throw new TypeError(\"Invalid paramGroup for Control, expected a string but got \" +\n                    typeof (config.paramGroup) + \".\");\n            }\n            if (config.formatParam && typeof (config.formatParam) !== \"string\") {\n                throw new TypeError(\"Invalid formatParam for Control, expected a string but got \" +\n                    typeof (config.formatParam) + \".\");\n            }\n        };\n        Control.prototype.clone = function () {\n            return Control.copy(this);\n        };\n        Control.copy = function (otherControl) {\n            if (!otherControl) {\n                throw new Error(\"No Control provided to copy.\");\n            }\n            if (!(otherControl instanceof Control)) {\n                throw new TypeError(\"Can't copy Control, expected an instance of Control but got \" +\n                    otherControl.constructor.name + \".\");\n            }\n            return new Control(otherControl._config);\n        };\n        return Control;\n    }\n    ControlClass.$inject = [];\n    angular.module(\"Controls\").factory(\"Control\", ControlClass);\n})();\n","(function () {\n    'use strict';\n    function ControlListClass(controls) {\n        function ControlList(config) {\n            if (!config) {\n                return this;\n            }\n            if (config.constructor === Array) {\n                config = { controls: config };\n            }\n            this.validate(config);\n            var controlList = this;\n            if (!controlList.controls) {\n                controlList.controls = [];\n            }\n            config.controls.forEach(function (controlConfig) {\n                controlList.controls.push(controls.loadControl(controlConfig));\n            });\n        }\n        ControlList.prototype.validate = function (config) {\n            if (!config.controls) {\n                throw new Error(\"Can't create ControlList, missing the 'controls' property.\");\n            }\n        };\n        ControlList.prototype.getParams = function () {\n            var params = {};\n            if (!this.controls) {\n                return params;\n            }\n            this.controls.forEach(function (control) {\n                controls.getControlValue(control, {}, params);\n            });\n            return params;\n        };\n        return ControlList;\n    }\n    ControlListClass.$inject = [\"controls\"];\n    angular.module(\"Controls\").factory(\"ControlList\", ControlListClass);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Controls\").factory(\"controls\", [\"Control\", \"$q\", \"utils\", \"conditions\", function (Control, $q, utils, conditions) {\n            function checkInit() {\n                if (!controls) {\n                    throw new Error(\"Controls are not initialized yet.\");\n                }\n            }\n            function setControls() {\n                controls = new Map();\n                window.__controlsConfig__.forEach(function (controlConfig) {\n                    var control = new Control(controlConfig);\n                    controls.set(controlConfig.controlId, control);\n                });\n                // Clean-up, remove the temporary controls:\n                delete window.__controlsConfig__;\n            }\n            var controls;\n            /**\n             * update control specific properties according to control type\n             **/\n            var controlInitMethods = {\n                link: function (control, data, params) {\n                    if (!control._href) {\n                        control._href = control.href;\n                    }\n                    control.href = utils.strings.parseValue(control._href, data, params);\n                    control.text = utils.strings.parseValue(control.text, data, params);\n                },\n                select: function (control) {\n                    function checkConditions(option) {\n                        return !(option.conditions && !conditions.validateConditions(option.conditions, null, null));\n                    }\n                    if (!control.settings._options) {\n                        control.settings._options = control.settings.options;\n                    }\n                    control.settings._options = control.settings._options.filter(checkConditions);\n                    control.settings.options = control.settings._options.map(function (option) {\n                        var parsedOption = {};\n                        if (Object(option) === option) {\n                            if (option.label === undefined && option.value === undefined) {\n                                throw new Error(\"Can't create select control, option missing value and label.\");\n                            }\n                            parsedOption.label = String(option.label || option.value);\n                            parsedOption.value = option.value && String(option.value);\n                        }\n                        else {\n                            parsedOption.label = String(option);\n                            parsedOption.value = String(option);\n                        }\n                        return parsedOption;\n                    });\n                }\n            };\n            // Getting pre-loaded controls:\n            if (window.__controlsConfig__) {\n                setControls();\n            }\n            return {\n                getControlById: function (controlId) {\n                    checkInit();\n                    // Because of the caching mechanism, there was reuse of controls, which lead to shared behavior\n                    // between controls. Changed to a deep copy, instead of returning a reference Originally: return\n                    // controls.get(controlId);\n                    return angular.copy(controls.get(controlId));\n                },\n                loadControl: function (controlConfig) {\n                    if (controlConfig instanceof Control) {\n                        return controlConfig.clone();\n                    }\n                    if (controlConfig.controlId) {\n                        var existingControl = this.getControlById(controlConfig.controlId);\n                        var fullControlConfig = angular.extend({}, existingControl._config, controlConfig);\n                        return new Control(fullControlConfig);\n                    }\n                    else {\n                        var controlInit = controlInitMethods[controlConfig.type];\n                        if (controlInit) {\n                            controlInit(controlConfig);\n                        }\n                        return new Control(controlConfig);\n                    }\n                },\n                /**\n                 * Inits the entities. This should be done before any usage of other methods in this service.\n                 * Runs in the Loader app, NOT in Fortscale app!\n                 * @returns {*}\n                 */\n                initControl: function (controlId) {\n                    if (controls.has(controlId)) {\n                        return $q.when(angular.copy(controls.get(controlId)));\n                    }\n                    return utils.http.wrappedHttpGet(\"data/controls/\" + controlId.replace(/\\./g, \"/\") +\n                        \".json\").then(function (resourceControlConfig) {\n                        return resourceControlConfig;\n                    }, function (error) {\n                        var errorMessage = error.status === 404 ?\n                            \"Control '\" + controlId + \"' not found.\" :\n                            \"Can't get control '\" + controlId + \"'. Error: \" + error.data;\n                        return $q.reject(errorMessage);\n                    });\n                },\n                /*\n                 *\n                 * Loads all the currently known param, done manually, since there is no way to load all file exists\n                 * in a folder.\n                 *\n                 */\n                initControls: function () {\n                    controls = new Map();\n                    var controlPromise = [this.initControl(\"account_properties\"), this.initControl(\"minscore\"),\n                        this.initControl(\"user_types\")];\n                    return $q.all(controlPromise).then(function (promise) {\n                        var array = [];\n                        promise.forEach(function (controlConfig) {\n                            array.push(controlConfig);\n                        });\n                        window.__controlsConfig__ = array;\n                    });\n                },\n                /*\n                 *\n                 * Load params according to given configuration\n                 *\n                 */\n                loadControls: function (controlsToLoad) {\n                    if (!controls) {\n                        return null;\n                    }\n                    controlsToLoad.forEach(function (control, i) {\n                        if (control.controlId && !control._ready) {\n                            var loadedControl = this.getControlById(control.controlId) || {};\n                            controls[i] = jQuery.extend(true, loadedControl, control);\n                            controls[i]._ready = true;\n                            var controlInit = controlInitMethods[control.type];\n                            if (controlInit) {\n                                controlInit(control);\n                            }\n                        }\n                    });\n                    return controlsToLoad;\n                },\n                /*\n                 *\n                 * Load params according to given configuration\n                 *\n                 */\n                getControlValue: function (control, inputParams, outputParams) {\n                    var paramValue = this.getControlValueForParam(control, inputParams);\n                    if (control.paramGroup) {\n                        var groupParamValue = control.param + \"=\" +\n                            ((paramValue === null) || (typeof paramValue === 'undefined') ? \"_null_\" : paramValue);\n                        if (!outputParams[control.paramGroup]) {\n                            outputParams[control.paramGroup] = groupParamValue;\n                        }\n                        else {\n                            outputParams[control.paramGroup] += \",\" + groupParamValue;\n                        }\n                    }\n                    else {\n                        outputParams[control.param] = paramValue;\n                    }\n                },\n                /**\n                 * Returns the value to be used in the param the specified control is for. The return value is a string.\n                 * @param control\n                 * @param params\n                 * @returns {String|undefined}\n                 */\n                getControlValueForParam: function (control, params) {\n                    if (!control.value && control.value !== 0) {\n                        return;\n                    }\n                    var value = angular.copy(control.value);\n                    var timeStart;\n                    var timeEnd;\n                    if (angular.isArray(value)) {\n                        if (!value.length) {\n                            return;\n                        }\n                        value = value.join(\",\");\n                    }\n                    // If we have a format, parse it and return the result\n                    if (control.formatParam) {\n                        return utils.strings.parseValue(control.formatParam, {\n                            value: control.value\n                        }, params);\n                    }\n                    if (control.type === \"date\") {\n                        if (control.settings && control.settings.endOfDay) {\n                            timeEnd = angular.isDate(value) ? value : parseInt(value, 10);\n                            value = utils.date.getMoment(timeEnd).endOf(\"day\").valueOf();\n                        }\n                        else if (control.settings && control.settings.startOfDay) {\n                            timeStart = angular.isDate(value) ? value : parseInt(value, 10);\n                            value = utils.date.getMoment(timeStart).startOf(\"day\").valueOf();\n                        }\n                    }\n                    else if (control.type === \"dateRange\") {\n                        // Get time values of the start of the day and end of the day\n                        timeStart = utils.date.getMoment(value.timeStart)\n                            .startOf(\"day\").valueOf();\n                        timeEnd = utils.date.getMoment(value.timeEnd)\n                            .endOf(\"day\").valueOf();\n                        value = timeStart + \",\" + timeEnd;\n                    }\n                    return value;\n                }\n            };\n        }]);\n}());\n","angular.module(\"DataEntities\", [\"Utils\", \"Config\"]);\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"DataEntity\", [\"DataEntityField\", \"DataEntitySort\", function (DataEntityField, DataEntitySort) {\n            function DataEntity(config) {\n                if (config) {\n                    this.validate(config);\n                    this.name = config.name;\n                    this.id = config.id;\n                    this.baseEntityId = config.extendsEntity;\n                    this.isAbstract = config.isAbstract;\n                    this.showInExplore = config.showInExplore;\n                    this.fields = new Map();\n                    for (var _i = 0, _a = config.fields; _i < _a.length; _i++) {\n                        var field = _a[_i];\n                        this.fields.set(field.id, new DataEntityField(field, this));\n                    }\n                    // link scoredFields:\n                    var scoreFieldId;\n                    for (var _b = 0, _c = Array.from(this.fields.values()); _b < _c.length; _b++) {\n                        field = _c[_b];\n                        if (!!(scoreFieldId = field.scoreField)) {\n                            field.scoreField = this.fields.get(scoreFieldId);\n                            if (!field.scoreField) {\n                                throw new Error(\"Can't create DataEntity, score field '\" + scoreFieldId +\n                                    \"' not found.\");\n                            }\n                        }\n                    }\n                    this.eventsEntity = config.eventsEntity || null;\n                    this.sessionEntity = config.sessionEntity || null;\n                    this.requiredFields = config.requiredFields || [];\n                    this.nameForMenu = config.nameForMenu || null; //nameForMenu is sometimes different than entity\n                    // name. for example: name: 'SSH'. nameForMenu: 'SSH\n                    // events'\n                    if (config.defaultSort) {\n                        var sort = config.defaultSort;\n                        if (sort.constructor !== Array) {\n                            sort = [sort];\n                        }\n                        this.defaultSort = sort.map(function (sortField) {\n                            return new DataEntitySort(sortField);\n                        });\n                    }\n                    // TODO: Get this from the server!!\n                    if (this.fields.has(\"event_score\") || this.fields.has(\"session_score\")) {\n                        this.performanceField = {\n                            field: this.fields.get(\"event_score\") || this.fields.get(\"session_score\"),\n                            value: 50\n                        };\n                    }\n                }\n            }\n            DataEntity.prototype.validate = function (config) {\n                if (Object(config) !== config) {\n                    throw new TypeError(\"Invalid configuration for DataEntity, expected an object, got \" +\n                        typeof (config) + \".\");\n                }\n                if (config.name) {\n                    if (typeof (config.name) !== \"string\") {\n                        throw new TypeError(\"Invalid name for DataEntity, expected a string but got \" +\n                            typeof (config.name));\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntity, missing the 'name' property.\");\n                }\n                if (config.id) {\n                    if (typeof (config.id) !== \"string\") {\n                        throw new TypeError(\"Invalid id for DataEntity, expected a string but got \" +\n                            typeof (config.id));\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntity, missing the 'id' property.\");\n                }\n                if (config.extends) {\n                    if (typeof (config.extends) !== \"string\") {\n                        throw new TypeError(\"Invalid extends for DataEntity, expected a string but got \" +\n                            typeof (config.extends));\n                    }\n                }\n                if (config.fields) {\n                    if (config.fields.constructor !== Array) {\n                        throw new TypeError(\"Invalid fields for DataEntity, expected and array but got \" +\n                            typeof (config.fields));\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntity, missing the 'fields' property.\");\n                }\n                if (config.requiredFields) {\n                    if (config.requiredFields.constructor !== Array) {\n                        throw new TypeError(\"Invalid requiredFields for DataEntity. Expected array but got \" +\n                            typeof (config.requiredFields.constructor));\n                    }\n                    for (var _i = 0, _a = config.requiredFields; _i < _a.length; _i++) {\n                        var field = _a[_i];\n                        if (typeof (field) !== \"string\") {\n                            throw new TypeError(\"Invalid required field for DataEntity. Expected a string but got \" +\n                                typeof (field));\n                        }\n                    }\n                }\n                if (config.eventsEntity && typeof (config.eventsEntity) !== \"string\") {\n                    throw new TypeError(\"Invalid eventsEntity for DataEntity. Expected a string but got \" +\n                        typeof (config.eventsEntity));\n                }\n                if (config.sessionEntity && typeof (config.sessionEntity) !== \"string\") {\n                    throw new TypeError(\"Invalid sessionEntity for DataEntity. Expected a string but got \" +\n                        typeof (config.sessionEntity));\n                }\n            };\n            /**\n             * Checks whether this DataEntity extends the specified DataEntity by checking the baseEntity tree.\n             * @param anotherDataEntity\n             * @returns {Boolean}\n             */\n            DataEntity.prototype.extendsEntity = function (anotherDataEntity) {\n                if (!this.baseEntity || !anotherDataEntity || !(anotherDataEntity instanceof DataEntity)) {\n                    return false;\n                }\n                if (this.baseEntity === anotherDataEntity) {\n                    return true;\n                }\n                return this.baseEntity.extendsEntity(anotherDataEntity);\n            };\n            DataEntity.prototype.__defineGetter__(\"fieldsArray\", function () {\n                if (!this._fieldsArray) {\n                    this._fieldsArray = [];\n                    for (var _i = 0, _a = Array.from(this.fields.values()); _i < _a.length; _i++) {\n                        var field = _a[_i];\n                        this._fieldsArray.push(field);\n                    }\n                }\n                return this._fieldsArray;\n            });\n            /**\n             * Given a the ID of another DataEntity, returns the possible JOINS between this entity and that one, which\n             * can be used in a DataQuery\n             * @param entityId\n             */\n            DataEntity.prototype.getEntityJoin = function (entityId) {\n                if (!entityId || typeof (entityId) !== \"string\") {\n                    throw new Error(\"Invalid joinedEntityId, expected a string but got \" + entityId + \".\");\n                }\n                if (entityId === this.id) {\n                    return [];\n                }\n                return (this.linkedEntities || []).filter(function (linkedEntity) {\n                    return linkedEntity.entity === entityId;\n                });\n            };\n            return DataEntity;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"DataEntityField\", [\"dataEntityFieldTypes\", function (dataEntityFieldTypes) {\n            /**\n             * Constructor for fields in Data Entities\n             * @param config\n             * @param dataEntity\n             * @constructor\n             */\n            function DataEntityField(config, dataEntity) {\n                this.validate(config);\n                this.entity = dataEntity;\n                this.id = config.id;\n                this.name = config.name;\n                this.type = dataEntityFieldTypes[config.type.toLowerCase()];\n                this.scoreField = config.scoreField || null;\n                this.isSearchable = !!config.searchable;\n                this.isDefaultEnabled = !!config.isDefaultEnabled;\n                this.attributes = config.attributes || [];\n                this.tags = config.tags || [];\n                this.format = config.format;\n                this.valueList = config.valueList;\n                this.shownForSpecificEntity = config.shownForSpecificEntity;\n                /**\n                 * joinFrom and joinTo are keys which are used to connect entities. From and to describe directionality, so\n                 * a join can be done only from one entity to another but not in reverse.\n                 * @type {null|*}\n                 */\n                this.joinFrom = config.joinFrom || null;\n                this.joinTo = config.joinTo || null;\n            }\n            DataEntityField.prototype.validate = function (config) {\n                if (Object(config) !== config) {\n                    throw new TypeError(\"Invalid configuration for DataEntityField, expected an object, got \" +\n                        typeof (config) + \".\");\n                }\n                if (config.name) {\n                    if (typeof (config.name) !== \"string\") {\n                        throw new TypeError(\"Invalid name for DataEntityField, expected a string but got \" +\n                            typeof (config.name));\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntityField, missing the 'name' property.\");\n                }\n                if (config.id) {\n                    if (typeof (config.id) !== \"string\") {\n                        throw new TypeError(\"Invalid id for DataEntityField, expected a string but got \" +\n                            typeof (config.id));\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntityField, missing the 'id' property.\");\n                }\n                if (config.type) {\n                    if (typeof (config.type) !== \"string\") {\n                        throw new TypeError(\"Invalid type for DataEntityField, expected a string but got \" +\n                            typeof (config.type) + \".\");\n                    }\n                    if (!dataEntityFieldTypes[config.type.toLowerCase()]) {\n                        throw new Error(\"Can't instantiate DataEntityField, unknown field type, '\" + config.type + \"'.\");\n                    }\n                }\n                else {\n                    throw new Error(\"Can't instantiate DataEntityField, missing the 'id' property.\");\n                }\n                if (config.scoreField) {\n                    if (typeof (config.id) !== \"string\") {\n                        throw new TypeError(\"Invalid scoreField for DataEntityField, expected a string but got \" +\n                            typeof (config.scoreField) + \".\");\n                    }\n                }\n                if (config.valueList) {\n                    if (!angular.isArray(config.valueList)) {\n                        throw new TypeError(\"Invalid valueList for DataEntityField, expected and array but got \" +\n                            config.valueList + \".\");\n                    }\n                }\n                if (config.attributes) {\n                    if (!angular.isArray(config.attributes)) {\n                        throw new TypeError(\"Invalid attributes for DataEntityField, expected and array but got \" +\n                            config.attributes + \".\");\n                    }\n                }\n                if (config.tags) {\n                    if (!angular.isArray(config.tags)) {\n                        throw new TypeError(\"Invalid tags for DataEntityField, expected and array but got \" + config.tags +\n                            \".\");\n                    }\n                }\n            };\n            return DataEntityField;\n        }]);\n}());\n","(function () {\n    'use strict';\n    function DataEntitySortClass() {\n        function DataEntitySort(config) {\n            this.validate(config);\n            this.field = config.field.id;\n            this.direction = config.direction ? config.direction.toUpperCase() : \"ASC\";\n        }\n        DataEntitySort.prototype.validate = function (config) {\n            if (!config.field) {\n                throw new Error(\"Can't create DataEntitySort, missing field.\");\n            }\n            if (config.direction) {\n                if (typeof (config.direction) !== \"string\") {\n                    throw new TypeError(\"Invalid 'direction' for DataEntitySort, expected a string but got \" +\n                        typeof (config.direction));\n                }\n                var directionStr = config.direction.toUpperCase();\n                if (directionStr !== \"ASC\" && directionStr !== \"DESC\") {\n                    throw new Error(\"Unknown direction for DataEntitySort, '\" + config.direction + \"'.\");\n                }\n            }\n        };\n        return DataEntitySort;\n    }\n    angular.module(\"DataEntities\").factory(\"DataEntitySort\", DataEntitySortClass);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"dataEntities\", [\"DataEntity\", \"$q\", \"utils\", \"configFlags\", function (DataEntity, $q, utils, configFlags) {\n            function checkInit() {\n                if (!entities) {\n                    throw new Error(\"Entities are not initialized yet.\");\n                }\n            }\n            function setEntities() {\n                entities = new Map();\n                window.__entitiesConfig__.forEach(function (entityConfig) {\n                    var entity = new DataEntity(entityConfig);\n                    entities.set(entity.id, entity);\n                });\n                getAllEntities();\n                // Set the base entities:\n                entities.forEach(function (entity) {\n                    if (entity.baseEntityId) {\n                        var baseEntity = entities.get(entity.baseEntityId);\n                        if (!baseEntity) {\n                            throw new Error(\"Unknown base entity, '\" + entity.baseEntityId + \"'.\");\n                        }\n                        entity.baseEntity = baseEntity;\n                        delete entity.baseEntityId;\n                        entity.linkedEntities = getLinkedEntities(entity);\n                    }\n                });\n                // Clean-up, remove the temporary entities:\n                delete window.__entitiesConfig__;\n            }\n            function getEntityById(entityId) {\n                checkInit();\n                return entities.get(entityId);\n            }\n            /**\n             * Given a DataEntity, returns all entities with which JOIN data queries can be done.\n             * @param dataEntity\n             */\n            function getLinkedEntities(dataEntity) {\n                if (!(dataEntity instanceof DataEntity)) {\n                    throw new TypeError(\"Expected an instance of DataEntity, got: \" + dataEntity + \".\");\n                }\n                if (!dataEntity._joinFromFields) {\n                    dataEntity._joinFromFields = dataEntity.fieldsArray.filter(function (field) {\n                        return field.joinFrom;\n                    });\n                    dataEntity._joinFromFields = utils.objects.arrayToObject(dataEntity._joinFromFields, \"joinFrom\");\n                }\n                if (!Object.keys(dataEntity._joinFromFields).length) {\n                    return [];\n                }\n                var linkedEntities = [];\n                entitiesArray.forEach(function (entity) {\n                    if (entity === dataEntity) {\n                        return true;\n                    }\n                    if (!entity._joinToFields) {\n                        entity._joinToFields = entity.fieldsArray.filter(function (entityField) {\n                            return entityField.joinTo;\n                        });\n                        entity._joinToFields = utils.objects.arrayToObject(entity._joinToFields, \"joinTo\");\n                    }\n                    for (var joinTo in entity._joinToFields) {\n                        if (entity._joinToFields.hasOwnProperty(joinTo)) {\n                            if (dataEntity._joinFromFields[joinTo]) {\n                                linkedEntities.push({\n                                    entity: entity.id,\n                                    joinFields: {\n                                        left: dataEntity.id + \".\" + dataEntity._joinFromFields[joinTo].id,\n                                        right: entity.id + \".\" + entity._joinToFields[joinTo].id\n                                    }\n                                });\n                            }\n                        }\n                    }\n                });\n                return linkedEntities;\n            }\n            /**\n             * Returns all the non-abstract entities\n             * @returns {*}\n             */\n            function getAllEntities() {\n                if (entitiesArray && entitiesArray.length) {\n                    return entitiesArray;\n                }\n                entitiesArray = [];\n                for (var _i = 0, _a = Array.from(entities); _i < _a.length; _i++) {\n                    var entity = _a[_i];\n                    if (!entity[1].isAbstract) {\n                        entitiesArray.push(entity[1]);\n                    }\n                }\n                return entitiesArray;\n            }\n            var entities, entitiesArray;\n            // Getting pre-loaded entities:\n            if (window.__entitiesConfig__) {\n                setEntities();\n            }\n            return {\n                entityExists: function (entityId) {\n                    return entities.has(entityId);\n                },\n                getAllEntities: getAllEntities,\n                getEntityById: getEntityById,\n                /**\n                 * Gets all non-abstract entities that extend the specified base entity\n                 * @param baseEntityId\n                 * @returns {*}\n                 */\n                getExtendingEntities: function (baseEntityId) {\n                    var baseEntity = entities.get(baseEntityId);\n                    if (!baseEntity) {\n                        throw new Error(\"Unknown base entity, '\" + baseEntityId + \"'.\");\n                    }\n                    if (baseEntity._childEntities !== undefined) {\n                        return baseEntity._childEntities;\n                    }\n                    var childEntities = [];\n                    entities.forEach(function (entity) {\n                        if (!entity.isAbstract && entity.extendsEntity(baseEntity)) {\n                            childEntities.push(entity);\n                        }\n                    });\n                    baseEntity._childEntities = childEntities;\n                    return childEntities;\n                },\n                getLinkedEntities: getLinkedEntities,\n                getField: function (entityId, fieldId) {\n                    var field;\n                    var entity = getEntityById(entityId);\n                    if (entity) {\n                        field = entity.fields.get(fieldId);\n                    }\n                    return field;\n                }.bind(this),\n                /**\n                 * Inits the entities. This should be done before any usage of other methods in this service.\n                 * Runs in the Loader app, NOT in Fortscale app!\n                 * @returns {*}\n                 */\n                initEntities: function () {\n                    if (entities) {\n                        return $q.when(entities);\n                    }\n                    return utils.http.wrappedHttpGet(configFlags.mockData ? \"data/mock_data/getentities.json\" :\n                        \"/fortscale-webapp/api/getEntities\").then(function (results) {\n                        // Put the entities data temporarily in the global scope, since after this the Fortscale\n                        // angular app will start\n                        window.__entitiesConfig__ = results.data;\n                    }, function (error) {\n                        console.error(\"Error getting entities: \", error);\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"QueryOperator\", function () {\n        function QueryOperator(config) {\n            this.validate(config);\n            this.id = config.id;\n            this.name = config.name;\n            this.requiresValue = !!config.requiresValue;\n            this.supportsSearch = !!config.supportsSearch;\n            this.inputTemplate = config.inputTemplate;\n            this.defaultValue = config.defaultValue;\n            this.paramOperator = config.paramOperator || \"\";\n            this.valueToParamConfig = config.valueToParam;\n            if (this.valueToParamConfig) {\n                this.valueToParam = function valueToParam(value, valueType, valueFormat) {\n                    if (this.valueToParamConfig.constructor === Function) {\n                        return this.valueToParamConfig(value);\n                    }\n                    else if (this.valueToParamConfig[valueType]) {\n                        return this.valueToParamConfig[valueType](value, valueFormat);\n                    }\n                    return value;\n                };\n            }\n            this.paramToValueConfig = config.paramToValue;\n            if (this.paramToValueConfig) {\n                this.paramToValue = function paramToValue(param, valueType) {\n                    if (this.paramToValueConfig.constructor === Function) {\n                        return this.paramToValueConfig(param);\n                    }\n                    else if (this.paramToValueConfig[valueType]) {\n                        return this.paramToValueConfig[valueType](param);\n                    }\n                    return param;\n                };\n            }\n            //add support in display which is different from the value - relevant currently for duration fields\n            this.paramToDisplayValueConfig = config.paramToDisplayValue;\n            if (this.paramToDisplayValueConfig) {\n                this.paramToDisplayValue = function paramToDisplayValue(param, valueType, valueFormat) {\n                    if (this.paramToDisplayValueConfig.constructor === Function) {\n                        return this.paramToDisplayValueConfig(param);\n                    }\n                    else if (this.paramToDisplayValueConfig[valueType]) {\n                        return this.paramToDisplayValueConfig[valueType](param, valueFormat);\n                    }\n                    return undefined;\n                };\n            }\n            this.dataQueryOperator = config.dataQueryOperator || config.id;\n            this.validators = config.validators || [];\n            this.displayValidators = config.displayValidators || [];\n        }\n        QueryOperator.prototype.validate = function (config) {\n            if (!config.id) {\n                throw new Error(\"Can't create QueryOperator, missing id.\");\n            }\n            if (!config.name) {\n                throw new Error(\"Can't create QueryOperator, missing name.\");\n            }\n            if (config.requiresValue && !config.inputTemplate) {\n                throw new Error(\"Can't create QueryOperator for operator '\" + config.name +\n                    \"', missing inputTemplate.\");\n            }\n            if (config.paramOperator && typeof (config.paramOperator) !== \"string\") {\n                throw new TypeError(\"Can't create QueryOperator, expected string for paramOperator but got \" +\n                    typeof (config.paramOperator));\n            }\n        };\n        return QueryOperator;\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"queryOperators\", [\"QueryOperator\", \"utils\",\n        function (QueryOperator, utils) {\n            /**\n             * Common handlers\n             */\n            function durationPrettyTime(paramValue, valueFormat) {\n                return utils.duration.prettyTime(paramValue, valueFormat);\n            }\n            function durationToNumber(value, valueFormat) {\n                return utils.duration.durationToNumber(value, valueFormat);\n            }\n            /**\n             * Get date range string of a full day from a single date value\n             *\n             * @param  {*}      value Any valid value for `utils.date.getMoment`\n             * @return {string}       Day start to day end range\n             */\n            function valueToDateRange(value) {\n                var start = utils.date.getMoment(value).startOf('day');\n                var end = utils.date.getMoment(value).endOf('day');\n                return start + \"::\" + end;\n            }\n            /**\n             * Get date range object from a date range string\n             *\n             * @param  {string} paramValue Date range string, as in `valueToDateRange` above\n             * @param  {string} operatorId The relevant operator context, used for the error\n             * @return {Object}            An object with `timeStart` and `timeEnd` properties\n             */\n            function parseDateRangeStr(paramValue, operatorId) {\n                // Validate input\n                if (!(/[^:]+::[^:]+/.test(paramValue))) {\n                    throw new Error(\"Date range value must be in format: 'date::date'\");\n                }\n                var rangeParts = paramValue.split(\"::\");\n                var timeStart = utils.date.getMoment(rangeParts[0]);\n                var timeEnd = utils.date.getMoment(rangeParts[1]);\n                // If range of strings that are not timestamps\n                // Shift to start of and end of days\n                if (!utils.date.isTimeStamp(rangeParts[0])) {\n                    timeStart.startOf('day');\n                }\n                if (!utils.date.isTimeStamp(rangeParts[1])) {\n                    timeEnd.endOf('day');\n                }\n                // Make sure we have valid dates\n                if (!timeStart.isValid() || !timeEnd.isValid()) {\n                    throw new Error(\"Invalid value for \" + operatorId +\n                        \" - one or both dates are invalid: '\" + paramValue + \"'.\");\n                }\n                return {\n                    timeStart: timeStart.toDate(),\n                    timeEnd: timeEnd.toDate()\n                };\n            }\n            /**\n             * Operators settings\n             */\n            var operatorsConfig = [\n                {\n                    id: \"equals\",\n                    name: \"=\",\n                    requiresValue: true,\n                    supportsSearch: true,\n                    inputTemplate: {\n                        string: \"string\",\n                        number: \"number\",\n                        date_time: \"date\",\n                        timestamp: \"date\",\n                        boolean: \"boolean\",\n                        duration: \"duration\",\n                        select: \"select\"\n                    },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        boolean: true,\n                        date_time: \"now\"\n                    },\n                    valueToParam: {\n                        date_time: valueToDateRange,\n                        duration: durationToNumber\n                    },\n                    paramToValue: {\n                        date_time: function (paramValue) {\n                            return parseDateRangeStr(paramValue, 'EqualsRange');\n                        }\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    //notEquals for date relates to a certain day, not timestamp, therefore we need range\n                    // -startOfDay and EndofDay. not a single parameter.\n                    id: \"notEquals\",\n                    name: \"≠\",\n                    paramOperator: \"!\",\n                    requiresValue: true,\n                    supportsSearch: true,\n                    inputTemplate: {\n                        string: \"string\",\n                        number: \"number\",\n                        date_time: \"date\",\n                        timestamp: \"date\",\n                        boolean: \"boolean\",\n                        duration: \"duration\",\n                        select: \"select\"\n                    },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        boolean: true,\n                        date_time: \"now\"\n                    },\n                    valueToParam: {\n                        date_time: valueToDateRange,\n                        duration: durationToNumber\n                    },\n                    paramToValue: {\n                        date_time: function (paramValue) {\n                            return parseDateRangeStr(paramValue, 'notEqualsRange');\n                        }\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    id: \"in\",\n                    name: \"IN\",\n                    paramOperator: \"[]\",\n                    text: \"=\",\n                    requiresValue: true,\n                    inputTemplate: \"stringIn\",\n                    defaultValue: { string: [] },\n                    validators: [\"isArrayValidator\"],\n                    valueToParam: function (value) {\n                        return value.map(function (val) {\n                            return val.replace(/[|]/g, \"~~\");\n                        }).join(\"|\");\n                    },\n                    paramToValue: function (paramValue) {\n                        if (paramValue === \"\") {\n                            return [];\n                        }\n                        return paramValue.split(\"|\").map(function (val) {\n                            return val.replace(/~~/g, \"|\");\n                        });\n                    }\n                },\n                {\n                    id: \"contains\",\n                    name: \"Contains\",\n                    paramOperator: \"~\",\n                    requiresValue: true,\n                    inputTemplate: \"string\"\n                },\n                {\n                    id: \"hasValue\",\n                    name: \"Has value\",\n                    paramOperator: \"*\",\n                    requiresValue: false\n                },\n                {\n                    id: \"hasNoValue\",\n                    name: \"Has no value\",\n                    paramOperator: \"!*\",\n                    requiresValue: false\n                },\n                {\n                    id: \"startsWith\",\n                    name: \"Starts With\",\n                    paramOperator: \"^\",\n                    requiresValue: true,\n                    inputTemplate: \"string\"\n                },\n                {\n                    id: \"endsWith\",\n                    name: \"Ends With\",\n                    paramOperator: \"$\",\n                    requiresValue: true,\n                    inputTemplate: \"string\"\n                },\n                {\n                    id: \"regexp\",\n                    name: \"RegExp\",\n                    paramOperator: \"/\",\n                    requiresValue: true,\n                    inputTemplate: \"regex\"\n                },\n                {\n                    id: \"greaterThan\",\n                    name: \">\",\n                    paramOperator: \">\",\n                    requiresValue: true,\n                    inputTemplate: { number: \"number\", date_time: \"date\", timestamp: \"date\", duration: \"duration\" },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        date_time: \"now\",\n                        timestamp: \"now\",\n                        number: 0\n                    },\n                    valueToParam: {\n                        date_time: function (paramValue) {\n                            return utils.date.getMoment(paramValue).endOf('day');\n                        },\n                        duration: durationToNumber\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    id: \"greaterThanOrEquals\",\n                    name: \"≥\",\n                    paramOperator: \">=\",\n                    requiresValue: true,\n                    inputTemplate: { number: \"number\", date_time: \"date\", timestamp: \"date\", duration: \"duration\" },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        date_time: \"now\",\n                        timestamp: \"now\",\n                        number: 0\n                    },\n                    valueToParam: {\n                        date_time: function (paramValue) {\n                            return utils.date.getMoment(paramValue).startOf('day');\n                        },\n                        duration: durationToNumber\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    id: \"lesserThan\",\n                    name: \"<\",\n                    paramOperator: \"<\",\n                    requiresValue: true,\n                    inputTemplate: { number: \"number\", date_time: \"date\", timestamp: \"date\", duration: \"duration\" },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        date_time: \"now\",\n                        timestamp: \"now\",\n                        number: 0\n                    },\n                    valueToParam: {\n                        date_time: function (paramValue) {\n                            return utils.date.getMoment(paramValue).startOf('day');\n                        },\n                        duration: durationToNumber\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    id: \"lesserThanOrEquals\",\n                    name: \"≤\",\n                    paramOperator: \"<=\",\n                    requiresValue: true,\n                    inputTemplate: { number: \"number\", date_time: \"date\", timestamp: \"date\", duration: \"duration\" },\n                    validators: { date_time: [\"dateValidator\"] },\n                    displayValidators: { duration: [\"isDurationValidator\"] },\n                    defaultValue: {\n                        date_time: \"now\",\n                        timestamp: \"now\",\n                        number: 0\n                    },\n                    valueToParam: {\n                        date_time: function (paramValue) {\n                            return utils.date.getMoment(paramValue).endOf('day');\n                        },\n                        duration: durationToNumber\n                    },\n                    paramToDisplayValue: {\n                        duration: durationPrettyTime\n                    }\n                },\n                {\n                    id: \"range\",\n                    dataQueryOperator: \"between\",\n                    name: \"Range\",\n                    paramOperator: \"--\",\n                    requiresValue: true,\n                    inputTemplate: \"numberRange\",\n                    validators: [\"numberRangeValidator\"],\n                    valueToParam: function (value) {\n                        return value.fromValue + \"--\" + value.toValue;\n                    },\n                    paramToValue: function (paramValue) {\n                        if (typeof (paramValue) !== \"string\") {\n                            throw new TypeError(\"Invalid param value for numberRange, expected a string but got \" +\n                                paramValue);\n                        }\n                        var rangeParts = paramValue.split(\"--\");\n                        if (rangeParts.length !== 2) {\n                            throw new Error(\"Invalid value for numberRange, '\" + paramValue + \"'.\");\n                        }\n                        return {\n                            fromValue: rangeParts[0],\n                            toValue: rangeParts[1]\n                        };\n                    }\n                },\n                {\n                    id: \"dateRange\",\n                    dataQueryOperator: \"between\",\n                    validators: [\"dateRangeValidator\"],\n                    name: \"Between\",\n                    paramOperator: \":\",\n                    requiresValue: true,\n                    inputTemplate: \"dateRange\",\n                    valueToParam: function (value) {\n                        var start;\n                        var end;\n                        // If an object with timeStart and timeEnd\n                        if (angular.isObject(value) && value.timeStart && value.timeEnd) {\n                            start = utils.date.getMoment(value.timeStart).startOf('day');\n                            end = utils.date.getMoment(value.timeEnd).endOf('day');\n                        }\n                        else {\n                            start = utils.date.getMoment(value).startOf('day');\n                            end = utils.date.getMoment(value).endOf('day');\n                        }\n                        return start + '::' + end;\n                    },\n                    paramToValue: function (paramValue) {\n                        return parseDateRangeStr(paramValue, 'dateRange');\n                    },\n                    defaultValue: {\n                        date_time: {\n                            timeStart: \"-7d\",\n                            timeEnd: \"now\"\n                        }\n                    }\n                }\n            ];\n            var operators = new Map(), paramOperators = {};\n            operatorsConfig.forEach(function (operator) {\n                var paramOperatorId = operator.paramOperator || \"equals\";\n                // Checking that paramOperators are unique:\n                if (paramOperators[paramOperatorId]) {\n                    throw new Error(\"Duplicate param operator: \" + paramOperatorId);\n                }\n                var queryOperator = new QueryOperator(operator);\n                operators.set(operator.id, queryOperator);\n                paramOperators[paramOperatorId] = queryOperator;\n            });\n            var logicalOperators = {\n                AND: \"AND\",\n                OR: \"OR\"\n            };\n            return {\n                /**\n                 * Given a param value (URL param), returns the used QueryOperator\n                 * @param paramValue\n                 */\n                getParamOperator: function (paramValue) {\n                    var paramPrefixMatch = paramValue.match(/^[^\\w\\d]{1,2}/), operator;\n                    if (paramPrefixMatch) {\n                        var prefix = paramPrefixMatch[0];\n                        // The operator prefix is either one or two characters. First we try to find a\n                        // two-character operator, then a single-character, if two isn't found:\n                        operator = paramOperators[prefix] || paramOperators[prefix[0]];\n                    }\n                    return operator || paramOperators.equals;\n                },\n                get operators() {\n                    return operators;\n                },\n                get logicalOperators() {\n                    return logicalOperators;\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"DataEntities\").factory(\"DataEntityFieldType\", [\"queryOperators\", function (queryOperators) {\n            /**\n             * Constructor that represents a type for dataEntity fields, to be used in DataQueries.\n             * Contains the type and its available operators.\n             * @param config\n             * @constructor\n             */\n            function DataEntityFieldType(config) {\n                this.validate(config);\n                this.id = config.id;\n                this.name = config.name;\n                this.operators = config.operators.map(function (operatorId) {\n                    var operator = queryOperators.operators.get(operatorId);\n                    if (!operator) {\n                        throw new Error(\"Invalid operator for DataEntityFieldType: \" + operatorId);\n                    }\n                    return operator;\n                });\n                this.parseValue = config.parser;\n            }\n            DataEntityFieldType.prototype.validate = function (config) {\n                if (!config.id || typeof (config.id) !== \"string\") {\n                    throw new TypeError(\"Can't crate DataEntityFieldType, expected a string ID.\");\n                }\n                if (!config.name || typeof (config.name) !== \"string\") {\n                    throw new TypeError(\"Can't crate DataEntityFieldType, expected a string name.\");\n                }\n                if (!config.operators) {\n                    throw new Error(\"Can't create DataEntityFieldType, missing the operators array.\");\n                }\n                if (!config.parser || !(config.parser instanceof Function)) {\n                    throw new Error(\"Can't create DataEntityFieldType, expected a parser function.\");\n                }\n                if (config.operators.constructor !== Array) {\n                    throw new TypeError(\"Invalid operators for DataEntityFieldType, expected an array.\");\n                }\n            };\n            DataEntityFieldType.prototype.__defineGetter__(\"defaultOperator\", function () {\n                return this.operators[0];\n            });\n            return DataEntityFieldType;\n        }]);\n})();\n","(function () {\n    'use strict';\n    /**\n     * The available types for Data Entity fields. Returns an object, of which each property is the ID of a type\n     * ('string', 'boolean', ...). Each type has an ID, name and its possible operators.\n     * @param DataEntityFieldType DI for the DataEntityFieldType constructor\n     * @param utils DI for the DataEntityFieldType constructor\n     * @returns {{boolean: {id: string, name: string, operators: string[]}, string: {id: string, name: string,\n     *     operators: string[]}, number: {id: string, name: string, operators: string[]}, date_time: {id: string, name:\n     *     string, operators: string[]}, timestamp: {id: string, name: string, operators: string[]}}}\n     * @constructor\n     */\n    function dataEntityFieldTypes(DataEntityFieldType, utils) {\n        function dateTimeParser(value) {\n            if (value === undefined || value === null) {\n                return value;\n            }\n            // It's a date range:\n            if (Object(value) === value && !angular.isDate(value)) {\n                if (!value.timeEnd || !value.timeStart) {\n                    throw new Error(\"Invalid object for date, should contain both timeStart and timeEnd.\");\n                }\n                var startMoment = utils.date.getMoment(value.timeStart).startOf(\"day\"), endMoment = utils.date.getMoment(value.timeEnd).endOf(\"day\");\n                if (!startMoment.isValid() || !endMoment.isValid()) {\n                    throw new Error(\"Invalid timeStart or timeEnd for date.\");\n                }\n                return { timeStart: startMoment.toDate(), timeEnd: endMoment.toDate() };\n            }\n            else {\n                var momentValue = utils.date.getMoment(value);\n                if (momentValue.isValid()) {\n                    return momentValue.toDate();\n                }\n            }\n            throw new TypeError(\"Can't parse value to date_time: \" + value + \".\");\n        }\n        function timestampParser(value) {\n            if (value === undefined || value === null) {\n                return value;\n            }\n            // It's a timestamp range:\n            if (Object(value) === value && !angular.isDate(value)) {\n                if (!value.timeEnd || !value.timeStart) {\n                    throw new Error(\"Invalid object for date, should contain both timeStart and timeEnd.\");\n                }\n                var startMoment = utils.date.getMoment(value.timeStart), endMoment = utils.date.getMoment(value.timeEnd);\n                if (!startMoment.isValid() || !endMoment.isValid()) {\n                    throw new Error(\"Invalid timeStart or timeEnd for date.\");\n                }\n                return { timeStart: startMoment.toDate(), timeEnd: endMoment.toDate() };\n            }\n            else {\n                var momentValue = utils.date.getMoment(value);\n                if (momentValue.isValid()) {\n                    return momentValue.toDate();\n                }\n            }\n            throw new TypeError(\"Can't parse value to date_time: \" + value + \".\");\n        }\n        var commonOperators = [\"hasValue\", \"hasNoValue\"], dateOperators = [\"dateRange\", \"equals\", \"notEquals\", \"greaterThan\", \"greaterThanOrEquals\", \"lesserThan\",\n            \"lesserThanOrEquals\"];\n        var types = {\n            \"boolean\": {\n                id: \"BOOLEAN\",\n                name: \"Boolean\",\n                operators: [\"equals\"],\n                parser: function (value) {\n                    if (value === undefined || value === null) {\n                        return value;\n                    }\n                    if (value === \"true\") {\n                        return true;\n                    }\n                    if (value === \"false\") {\n                        return false;\n                    }\n                    return !!value;\n                }\n            },\n            \"string\": {\n                id: \"STRING\",\n                name: \"String\",\n                operators: [\"equals\", \"notEquals\", \"contains\", \"in\", \"startsWith\", \"endsWith\"],\n                parser: function (value) {\n                    if (value === undefined || value === null) {\n                        return value;\n                    }\n                    if (typeof (value) === \"string\") {\n                        return value;\n                    }\n                    if (Object(value) === value) {\n                        if (angular.isArray(value)) {\n                            return value;\n                        }\n                        return JSON.parse(value);\n                    }\n                    return value.toString();\n                }\n            },\n            \"number\": {\n                id: \"NUMBER\",\n                name: \"Number\",\n                operators: [\"equals\", \"notEquals\", \"greaterThan\", \"greaterThanOrEquals\", \"lesserThan\",\n                    \"lesserThanOrEquals\", \"range\"],\n                parser: function (value) {\n                    //undefiend is whne the filter is not set and should set 0 for numeric default value\n                    if (value === undefined || value === 'undefined') {\n                        return 0;\n                    }\n                    //null is defined and handled by changing it to the default value of '0'\n                    if (value === null || value === 'null') {\n                        return null;\n                    }\n                    if (angular.isObject(value)) {\n                        return value;\n                    }\n                    return utils.numbers.parse(value);\n                }\n            },\n            //date_time: the time in day resolution.\n            \"date_time\": {\n                id: \"DATE_TIME\",\n                name: \"Date\",\n                operators: dateOperators,\n                parser: dateTimeParser\n            },\n            //timestamp: includes also the hours, minutes, etc.\n            \"timestamp\": {\n                id: \"TIMESTAMP\",\n                name: \"Timestamp\",\n                operators: dateOperators,\n                parser: timestampParser\n            },\n            //duration is in format hh:mm:ss\n            \"duration\": {\n                id: \"duration\",\n                name: \"duration\",\n                operators: [\"equals\", \"notEquals\", \"greaterThan\", \"greaterThanOrEquals\", \"lesserThan\",\n                    \"lesserThanOrEquals\"],\n                parser: function (value) {\n                    return value;\n                }\n            },\n            //select from constant list of values\n            \"select\": {\n                id: \"select\",\n                name: \"select\",\n                operators: [\"equals\", \"notEquals\"],\n                parser: function (value) {\n                    return value;\n                }\n            }\n        };\n        var type;\n        for (var typeId in types) {\n            if (types.hasOwnProperty(typeId)) {\n                type = types[typeId];\n                type.operators = type.operators.concat(commonOperators);\n                types[typeId] = new DataEntityFieldType(type);\n            }\n        }\n        return types;\n    }\n    dataEntityFieldTypes.$inject = [\"DataEntityFieldType\", \"utils\"];\n    angular.module(\"DataEntities\").factory(\"dataEntityFieldTypes\", dataEntityFieldTypes);\n})();\n","angular.module(\"DataQueries\", [\"Conditions\", \"Utils\", \"DataEntities\"]);\n","(function () {\n    'use strict';\n    angular.module(\"DataQueries\").factory(\"DataQuery\", [\"utils\", \"conditions\", \"dataEntities\", \"queryOperators\", \"DataEntity\",\n        function (utils, conditions, dataEntities, queryOperators, DataEntity) {\n            function dateTimeParse(value) {\n                if (typeof (value) === \"string\") {\n                    var dateRangeMatch = value.match(dateRangeRegExp);\n                    if (dateRangeMatch) {\n                        value = { timeStart: parseInt(dateRangeMatch[1]), timeEnd: parseInt(dateRangeMatch[2]) };\n                    }\n                }\n                if (Object(value) === value && !angular.isDate(value)) {\n                    return dateTimeParse(value.timeStart) + \",\" + dateTimeParse(value.timeEnd);\n                }\n                var _value = value, momentValue = utils.date.getMoment(value);\n                if (momentValue.isValid()) {\n                    return momentValue.unix();\n                }\n                return _value;\n            }\n            function numberRangeParse(value) {\n                if (typeof (value) === \"number\") {\n                    return value;\n                }\n                if (typeof (value) === \"string\") {\n                    var parsedNumber = parseFloat(value);\n                    if (!isNaN(parsedNumber)) {\n                        return parsedNumber;\n                    }\n                    var numberRangeMatch = value.match(numberRangeRegExp);\n                    if (numberRangeMatch) {\n                        value = { fromValue: parseInt(numberRangeMatch[1]), toValue: parseInt(numberRangeMatch[2]) };\n                    }\n                    else {\n                        throw new Error(\"Unable to parse string into int:  \" + value);\n                    }\n                }\n                return value.fromValue + \",\" + value.toValue;\n            }\n            function validateEntity(entityId) {\n                if (!dataEntities.getEntityById(entityId)) {\n                    throw new Error(\"Unknown entity, '\" + entityId + \"'.\");\n                }\n            }\n            function validateField(entityId, fieldId) {\n                var entity = dataEntities.getEntityById(entityId);\n                if (!entity) {\n                    throw new Error(\"Unknown DataEntity, '\" + entityId + \"'.\");\n                }\n                if (!entity.fields.get(fieldId)) {\n                    throw new Error(\"Unknown DataQuery field in entity \" + entityId + \": \" + fieldId);\n                }\n            }\n            // Helper to check if an entity exists in a DataQuery, for validating fields:\n            function validateEntityExistsInDataQuery(dataQuery, entityId) {\n                if (!entityId || typeof (entityId) !== \"string\") {\n                    throw new Error(\"Invalid entityId to validate, expected a string, got: \" + entityId);\n                }\n                if (~dataQuery.entities.indexOf(entityId)) {\n                    return true;\n                }\n                var found;\n                if (dataQuery.join) {\n                    found = dataQuery.join.some(function (join) {\n                        return join.entity === entityId;\n                    });\n                }\n                if (!found && dataQuery.subQuery) {\n                    found = dataQuery.subQuery.dataQueries.some(function (subQuery) {\n                        try {\n                            validateEntityExistsInDataQuery(subQuery, entityId);\n                            return true;\n                        }\n                        catch (error) {\n                            return false;\n                        }\n                    });\n                }\n                if (found) {\n                    return true;\n                }\n                throw new Error(\"Entity '\" + entityId + \"' is not available in the DataQuery.\");\n            }\n            function DataQuery(data, params) {\n                var dataQuery = this;\n                this.fields = [];\n                this.entities = [];\n                this.sort = [];\n                // Setting to undefined just so it's clear they're available:\n                this.conditions = undefined;\n                this.limit = undefined;\n                this.offset = undefined;\n                this.subQuery = undefined;\n                if (data && Object(data) === data) {\n                    if (data.entity) {\n                        if (typeof (data.entity) !== \"string\") {\n                            throw new TypeError(\"Invalid entity for DataQuery, expected string but got \" +\n                                typeof (data.entity));\n                        }\n                        data.entities = this.entities = [data.entity];\n                    }\n                    else if (data.entities) {\n                        if (!angular.isArray(data.entities)) {\n                            throw new TypeError(\"Expected array for DataQuery.entities, got \" +\n                                typeof (data.entities));\n                        }\n                        this.entities = data.entities;\n                    }\n                    // Make sure the DataQuery doesn't use unknown entities:\n                    this.entities.forEach(validateEntity);\n                    if (data.entitiesJoin) {\n                        var entitiesJoin = data.entitiesJoin.constructor === Array ? data.entitiesJoin :\n                            [data.entitiesJoin];\n                        this.join = entitiesJoin.map(function (joinConfig) {\n                            return new DataQueryJoin(joinConfig, dataQuery.entities, params);\n                        });\n                    }\n                    if (data.subQuery) {\n                        if (this.entities && this.entities.length) {\n                            throw new Error(\"A DataQuery can't have both an entity and a subquery.\");\n                        }\n                        this.subQuery = new DataQuerySubQuery(data.subQuery, params);\n                    }\n                    if (data.fields) {\n                        if (!angular.isArray(data.fields)) {\n                            throw new TypeError(\"Expected array for DataQuery.fields, got \" + typeof (data.fields));\n                        }\n                        this.fields = data.fields.map(function (field) {\n                            return new DataQueryField(field, dataQuery, params);\n                        });\n                    }\n                    if (data.conditions) {\n                        var rootTerm = angular.isArray(data.conditions) ? {\n                            operator: \"AND\",\n                            terms: data.conditions\n                        } : data.conditions;\n                        if (!angular.isObject(rootTerm)) {\n                            throw new Error(\"Invalid conditions for data query, must be either an object or \" +\n                                \"array.\");\n                        }\n                        if (isConditionEnabled(rootTerm, params)) {\n                            this.conditions = new DataQueryCondition(rootTerm, params, this);\n                        }\n                    }\n                    if (data.groupBy) {\n                        var groupByArray = angular.isArray(data.groupBy) ? data.groupBy : [data.groupBy];\n                        this.groupBy = groupByArray.map(function (groupByField) {\n                            return new DataQueryField(groupByField, dataQuery, params);\n                        });\n                    }\n                    if (data.sort) {\n                        var sortArray = angular.isArray(data.sort) ? data.sort : [data.sort];\n                        this.sort = sortArray.map(function (sortItem) {\n                            return new DataQuerySort(sortItem, dataQuery, params);\n                        });\n                    }\n                    if (data.limit !== null && typeof (data.limit) !== 'undefined') {\n                        var limit = data.limit;\n                        if (typeof (data.limit) === \"string\") {\n                            limit = Number(utils.strings.parseValue(limit));\n                        }\n                        // -1 == no limit\n                        if (isNaN(limit) || !angular.isNumber(limit) || limit < -1 || Math.floor(limit) !== limit) {\n                            throw new TypeError(\"Invalid limit for DataQuery, must be a positive integer\");\n                        }\n                        this.limit = limit;\n                        this.offset = 0;\n                    }\n                    if (data.offset) {\n                        var offset = data.offset;\n                        if (typeof (data.offset) === \"string\") {\n                            offset = Number(utils.strings.parseValue(offset));\n                        }\n                        if (isNaN(offset) || !angular.isNumber(data.offset) || data.offset < 1 ||\n                            Math.floor(data.offset) !== data.offset) {\n                            throw new TypeError(\"Invalid offset for DataQuery, must be a positive integer\");\n                        }\n                        this.offset = data.offset;\n                    }\n                }\n            }\n            function isConditionEnabled(condition, params) {\n                if (condition.enabled === undefined) {\n                    return true;\n                }\n                if (condition.enabled === true || condition.enabled === false) {\n                    return condition.enabled;\n                }\n                return conditions.validateConditions(condition.enabled, params, params);\n            }\n            function DataQueryField(data, dataQuery, params) {\n                if (typeof (data) === \"string\") {\n                    var parts = data.split(\".\");\n                    if (parts.length === 1) {\n                        data = { id: data };\n                    }\n                    else if (parts.length === 2) {\n                        data = { entity: parts[0] };\n                        if (parts[1] === \"*\") {\n                            data.allFields = true;\n                        }\n                        else {\n                            data.id = parts[1];\n                        }\n                    }\n                    else {\n                        throw new Error(\"Invalid field, '\" + data + \"'\");\n                    }\n                }\n                if (Object(data) !== data) {\n                    throw new TypeError(\"Invalid configuration for DataQueryField. Expected string or object, \" +\n                        \"got \" + typeof (data));\n                }\n                if (!data.id && !data.alias && !data.allFields) {\n                    throw new Error(\"Invalid DataQuery field - must have either id, alias or allFields.\");\n                }\n                if (data.alias) {\n                    this.alias = data.alias;\n                }\n                if (data.entity) {\n                    if (!dataEntities.getEntityById(data.entity)) {\n                        throw new Error(\"Unknown entity, '\" + data.entity + \"', for field '\" +\n                            (data.alias || data.id) + \"'.\");\n                    }\n                    this.entity = data.entity;\n                }\n                if (data.id) {\n                    this.id = utils.strings.parseValue(data.id, {}, params);\n                }\n                if (data.allFields) {\n                    this.allFields = true;\n                }\n                if (data.func) {\n                    this.func = new DataQueryFieldFunction(data.func, params);\n                }\n                if (data.valueParam) {\n                    this.value = params[data.valueParam];\n                }\n                else if (data.value !== undefined) {\n                    if (data.value === null) {\n                        throw new Error(\"The value of a DataQueryField can't be null.\");\n                    }\n                    this.value =\n                        typeof (data.value) === \"string\" ? utils.strings.parseValue(data.value, {}, params) :\n                            data.value;\n                }\n                if (this.value !== undefined) {\n                    if (this.value !== null && typeof (this.value) === \"object\" && !angular.isDate(this.value) &&\n                        !angular.isArray(this.value)) {\n                        throw new TypeError(\"Invalid value for field - can't be a literal object.\");\n                    }\n                    this.valueType = this.value === null ? \"STRING\" : String(typeof (this.value)).toUpperCase();\n                    if (angular.isDate(this.value)) {\n                        this.valueType = \"TIMESTAMP\";\n                    }\n                    else if (angular.isArray(this.value)) {\n                        this.valueType = \"ARRAY\";\n                    }\n                }\n                var entityId = this.entity;\n                // If an entity is explicitly specified for the field, validate that it's available in the DataQuery\n                if (entityId) {\n                    try {\n                        validateEntityExistsInDataQuery(dataQuery, entityId);\n                    }\n                    catch (error) {\n                        throw new Error(\"Unavailable entity '\" + entityId + \"' for field: \" + JSON.stringify(this));\n                    }\n                }\n                else if (dataQuery.entities && dataQuery.entities.length) {\n                    // Otherwise, assume the DataQuery's entity\n                    entityId = dataQuery.entities[0];\n                }\n                if (this.id && entityId) {\n                    validateField(entityId, this.id);\n                }\n            }\n            function DataQueryCondition(data, params, dataQuery) {\n                if (Object(data) !== data) {\n                    throw new TypeError(\"Invalid type for DataQuery condition, should be an object\");\n                }\n                if (!dataQuery) {\n                    throw new Error(\"Missing dataQuery.\");\n                }\n                if (!(dataQuery instanceof DataQuery)) {\n                    throw new TypeError(\"Can't create DataQueryCondition, expected dataQuery to be an \" +\n                        \"instance of DataQuery, got \" + dataQuery.constructor.name + \".\");\n                }\n                this.type = \"term\";\n                if (data.operator) {\n                    if (typeof (data.operator) !== \"string\") {\n                        throw new TypeError(\"Invalid value for DataQueryCondition.operator, \" +\n                            \"expecting a string, got \" + typeof (data.operator));\n                    }\n                    var upperCaseType = data.operator.toUpperCase();\n                    if (upperCaseType !== \"AND\" && upperCaseType !== \"OR\") {\n                        throw new Error(\"Invalid value for DataQueryCondition.operator, must be either \" +\n                            \"'AND' or 'OR' (case insensitive)\");\n                    }\n                    this.logicalOperator = upperCaseType;\n                }\n                else {\n                    this.logicalOperator = \"AND\";\n                }\n                if (data.terms) {\n                    this.terms = [];\n                }\n                for (var i = 0, term; !!(term = data.terms[i]); i++) {\n                    if (term.type && term.type === \"term\") {\n                        if (isConditionEnabled(term, params)) {\n                            this.terms.push(new DataQueryCondition(term, params, dataQuery));\n                        }\n                    }\n                    else {\n                        if (isConditionEnabled(term, params)) {\n                            this.terms.push(new DataQueryConditionField(term, params, dataQuery));\n                        }\n                    }\n                }\n            }\n            function DataQueryConditionField(data, params, dataQuery) {\n                if (Object(data) !== data) {\n                    throw new TypeError(\"Invalid type for DataQuery condition field, should be an object\");\n                }\n                var dataCopy = angular.copy(data);\n                var conditionValue = dataCopy.valueParam ? params[dataCopy.valueParam] : dataCopy.value;\n                delete dataCopy.value;\n                delete dataCopy.valueParam;\n                this.field = new DataQueryField(dataCopy, dataQuery, params);\n                if (!data.operator || typeof (data.operator) !== \"string\") {\n                    throw new Error(\"Can't create DataQueryConditionField - operator property is missing \" +\n                        \"or is not a string\");\n                }\n                var conditionOperator = queryOperators.operators.get(data.operator);\n                if (!conditionOperator) {\n                    throw new Error(\"Can't create DataQueryConditionField - unknown operator, '\" + data.operator +\n                        \"'\");\n                }\n                this.queryOperator = conditionOperator.dataQueryOperator;\n                this.type = \"field\";\n                if (conditionOperator.requiresValue) {\n                    // The condition can be evaluated against another field, like \"event_score > event_time_score\",\n                    // rather than \"event_score > 50\":\n                    if (data.valueField) {\n                        this.valueField = new DataQueryField(data.valueField, dataQuery, params);\n                    }\n                    if (conditionValue === undefined && !this.valueField) {\n                        throw new Error(\"Can't create DataQueryConditionField - a value is required for \" +\n                            \"operator '\" + data.operator + \"'\");\n                    }\n                    this.value = conditionValue;\n                    this.valueType = this.field.valueType;\n                    if (this.field.id) {\n                        var entityId = this.field.entity || dataQuery.entities[0];\n                        validateField(entityId, this.field.id);\n                        // If valueField is used, meaning that another field is used as value, there's no need to\n                        // do anything about the condition's value:\n                        if (!this.valueField) {\n                            var entity = dataEntities.getEntityById(entityId);\n                            var entityField = entity.fields.get(this.field.id);\n                            if (typeof (this.value) === \"string\") {\n                                this.value = utils.strings.parseValue(this.value, {}, params);\n                            }\n                            // Some field types have parsers, since the data might have to be formatted before\n                            // sending:\n                            var valueParser = valueTypeParsers[entityField.type.id];\n                            if (valueParser) {\n                                this.value = valueParser(this.value);\n                            }\n                            if (angular.isArray(this.value)) {\n                                this.value = this.value.map(function (val) {\n                                    return val.replace(/[,]/g, \"~~\");\n                                }).join();\n                            }\n                        }\n                    }\n                }\n                delete this.field.valueType;\n            }\n            function DataQuerySort(data, dataQuery, params) {\n                if (typeof (data) === \"string\") {\n                    this.field = new DataQueryField(data, dataQuery, params);\n                }\n                if (typeof (data.field) === \"string\") {\n                    this.field = new DataQueryField(data.field, dataQuery, params);\n                }\n                else if (Object(data) === data) {\n                    this.field = new DataQueryField(data.field || data, dataQuery, params);\n                }\n                if (!this.field) {\n                    throw new Error(\"Can't create DataQuery sort - missing the field property\");\n                }\n                if (data.direction) {\n                    if (typeof (data.direction) !== \"string\") {\n                        throw new TypeError(\"Invalid direction for DataQuerySort - expected string but got \" +\n                            typeof (data.direction));\n                    }\n                    var directionUpperCase = data.direction.toUpperCase();\n                    if (directionUpperCase !== \"ASC\" && directionUpperCase !== \"DESC\") {\n                        throw new Error(\"Invalid direction for DataQuery sort, expected either 'ASC' or \" +\n                            \"'DESC' (case insensitive) but got '\" + data.direction + \"'\");\n                    }\n                    this.direction = directionUpperCase;\n                }\n            }\n            function DataQueryFieldFunction(data) {\n                if (!data.name) {\n                    throw new Error(\"Can't create DataQuery field function - missing function name.\");\n                }\n                if (typeof (data.name) !== \"string\") {\n                    throw new Error(\"Can't create DataQuery field function - function name must be a string.\");\n                }\n                this.name = data.name.toLowerCase();\n                if (data.params) {\n                    this.params = {};\n                    for (var p in data.params) {\n                        if (data.params.hasOwnProperty(p)) {\n                            this.params[p] = String(data.params[p]);\n                        }\n                    }\n                }\n            }\n            function DataQueryJoin(data, entities) {\n                if (data.joinType) {\n                    if (typeof (data.joinType) !== \"string\") {\n                        throw new TypeError(\"Invalid joinType for DataQueryJoin. Expected string, got \" +\n                            typeof (data.joinType) + \".\");\n                    }\n                    var joinType = data.joinType.toUpperCase();\n                    if (!~[\"RIGHT\", \"LEFT\"].indexOf(joinType)) {\n                        throw new Error(\"Invalid joinType, expected either 'RIGHT' or 'LEFT' \" +\n                            \"(case-insensitive), got '\" + joinType + \"'.\");\n                    }\n                    this.type = joinType;\n                }\n                else {\n                    this.type = \"LEFT\";\n                }\n                if (!data.entity) {\n                    throw new Error(\"Missing entity for DataQueryJoin.\");\n                }\n                this.entity = data.entity instanceof DataEntity ? data.entity.id : data.entity;\n                if (typeof (this.entity) !== \"string\") {\n                    throw new TypeError(\"Invalid entity for DataQueryJoin. Expected string, got \" +\n                        typeof (this.entity));\n                }\n                if (~entities.indexOf(data.entity)) {\n                    throw new Error(\"Can't create DataQueryJoin, the entity \" + data.entity +\n                        \" already exists in the DataQuery.\");\n                }\n                if (!data.joinFields.left || !data.joinFields.right) {\n                    throw new Error(\"DataQueryJoin.joinFields should contain both left and right fields.\");\n                }\n                [\"left\", \"right\"].forEach(function (side) {\n                    var entityField = data.joinFields[side].split(\".\");\n                    if (entityField.length !== 2) {\n                        throw new Error(\"Invalid \" + side + \" joinField. Expected [entity].[field] but got '\" +\n                            data.joinFields[side] + \"'.\");\n                    }\n                    validateEntity(entityField[0]);\n                    validateField(entityField[0], entityField[1]);\n                    this[side] = { entity: entityField[0], field: entityField[1] };\n                }.bind(this));\n            }\n            function DataQuerySubQuery(data, params) {\n                if (data.combineMethod && typeof (data.combineMethod) !== \"string\") {\n                    throw new TypeError(\"Invalid combineMethod for DataQuerySubQuery, expected a string but got \" +\n                        typeof (data.combineMethod) + \".\");\n                }\n                this.combineMethod = data.combineMethod ? queryCombineMethods[data.combineMethod] :\n                    queryCombineMethods.UnionDistinct;\n                if (!this.combineMethod) {\n                    throw new Error(\"Invalid combineMethod for DataQuerySubQuery: '\" + data.combineMethod + \"'.\");\n                }\n                if (data.dataQueries) {\n                    if (!angular.isArray(data.dataQueries)) {\n                        throw new TypeError(\"Can't create DataQuerySubQuery, expected dataQueries to be an array.\");\n                    }\n                    this.dataQueries = data.dataQueries.map(function (dataQueryConfig) {\n                        var extendedDataQueryConfig = utils.objects.extend({}, dataQueryConfig, data.common);\n                        return new DataQuery(extendedDataQueryConfig, params);\n                    });\n                }\n                else {\n                    this.dataQueries = [];\n                }\n            }\n            var queryCombineMethods = {\n                \"UnionAll\": \"UnionAll\",\n                \"UnionDistinct\": \"UnionDistinct\"\n            };\n            /**\n             * valueTypeParsers are used for preparing values to be sent to the server in data queries.\n             * DataQueryConditionField.value, for example, needs to be parsed. All parsers should return a string,\n             * since the dataQuery API expects values to be sent as strings.\n             */\n            var valueTypeParsers = {\n                \"DATE_TIME\": dateTimeParse,\n                \"TIMESTAMP\": dateTimeParse,\n                \"NUMBER\": numberRangeParse\n            };\n            var numberRangeRegExp = /^(\\d+),(\\d+)$/;\n            var dateRangeRegExp = /^(\\d+),(\\d+)$/;\n            return DataQuery;\n        }]);\n}());\n","angular.module(\"Reports\", [\"DAL\", \"Cache\", \"Utils\", \"Config\", \"DataQueries\"]);\n","(function () {\n    'use strict';\n    var setOfProcess = new Set([\"add\", \"combine\", \"extend\", \"getUsersDetails\", \"groupBy\", \"groupByField\", \"map\", \"sort\",\n        \"limit\"]);\n    function ReportClass($q, utils, reports) {\n        var allReports = {};\n        function Report(config) {\n            this.validate(config);\n            function getReportById(reportId) {\n                /* jshint validthis: true */\n                this._initializing = true;\n                onInit = [];\n                reports.getReport(reportId).then(function (reportConfig) {\n                    delete config.reportId;\n                    utils.objects.extend(reportConfig, config);\n                    setReportProperties(reportConfig);\n                    if (onInit.length) {\n                        for (var _i = 0, onInit_1 = onInit; _i < onInit_1.length; _i++) {\n                            var onInitDeferred = onInit_1[_i];\n                            onInitDeferred.resolve(self);\n                        }\n                    }\n                }, function (error) {\n                    if (onInit.length) {\n                        for (var _i = 0, onInit_2 = onInit; _i < onInit_2.length; _i++) {\n                            var onInitDeferred = onInit_2[_i];\n                            onInitDeferred.reject(error);\n                        }\n                    }\n                }).finally(function () {\n                    onInit = null;\n                    delete self._initializing;\n                    delete self.onInitSubscribe;\n                });\n            }\n            function setReportProperties(reportConfig) {\n                self.validate(reportConfig);\n                self.endpoint = reportConfig.endpoint;\n                self.params = reportConfig.params ? reportConfig.params.map(function (paramConfig) {\n                    return new ReportParam(paramConfig);\n                }) : [];\n                self.allowCache = reportConfig.allowCache !== false;\n                self.mockData = reportConfig.mock_data;\n                self.requiredParams = reportConfig.requiredParams;\n                self.process = reportConfig.process;\n                if (reportConfig.joinReports) {\n                    self.joinReports = reportConfig.joinReports.reports.map(function (childReport) {\n                        var childReportConfig = reportConfig.joinReports.common ?\n                            utils.objects.extend({}, reportConfig.joinReports.common, childReport) : childReport;\n                        return new Report(childReportConfig);\n                    });\n                }\n            }\n            var self = this, onInit;\n            if (config.reportId) {\n                getReportById(config.reportId);\n            }\n            else {\n                setReportProperties(config);\n            }\n            this._config = config;\n            self.onInitSubscribe = function () {\n                var deferred = $q.defer();\n                onInit.push(deferred);\n                return deferred.promise;\n            };\n        }\n        Report.prototype.validate = function (config) {\n            var param = null;\n            if (!config) {\n                throw new Error(\"No report configuration to validate.\");\n            }\n            if (Object(config) !== config) {\n                throw new TypeError(\"Invalid report configuration, expected an object but got \" + config);\n            }\n            if (config.reportId && typeof (config.reportId) !== \"string\") {\n                throw new TypeError(\"Can't create report, the 'reportId' property must be a string.\");\n            }\n            if (!config.endpoint && !config.joinReports) {\n                throw new Error(\"Can't create report, missing the 'endpoint' property.\");\n            }\n            if (config.endpoint && Object(config.endpoint) !== config.endpoint) {\n                throw new TypeError(\"Can't create report, endpoint is not an object.\");\n            }\n            if (config.joinReports) {\n                if (!angular.isObject(config.joinReports)) {\n                    throw new TypeError(\"Invalid joinReports, expected an object but got \" + config.joinReports);\n                }\n                if (!config.joinReports.reports) {\n                    throw new Error(\"Report.joinReports is mising the 'reports' property.\");\n                }\n                if (!angular.isArray(config.joinReports.reports)) {\n                    throw new TypeError(\"Invalid 'reports' for joinReports, expected an Arrya but got \" +\n                        config.joinReports.reports);\n                }\n            }\n            if (config.mock_data && typeof (config.mock_data) !== \"string\") {\n                throw new TypeError(\"Can't create report, expected a string for mock_data but got \" +\n                    typeof (config.mock_data) + \".\");\n            }\n            if (config.params) {\n                if (config.params.constructor !== Array) {\n                    throw new TypeError(\"Can't create report, expected params to be an array but got \" + config.params);\n                }\n                for (var _i = 0, _a = config.params; _i < _a.length; _i++) {\n                    param = _a[_i];\n                    if (param.dashboardParam === undefined && param.value === undefined &&\n                        param.default === undefined) {\n                        throw new Error(\"Can't create report, param doesn't have either 'dashboardParam', \" +\n                            \"'value' or 'default' properties.\");\n                    }\n                }\n            }\n            if (config.requiredParams) {\n                if (config.requiredParams.constructor !== Array) {\n                    throw new TypeError(\"Cant' create report, requiredParams must be an Array.\");\n                }\n                for (var _b = 0, _c = config.requiredParams; _b < _c.length; _b++) {\n                    param = _c[_b];\n                    if (typeof (param) !== \"string\") {\n                        throw new TypeError(\"Can't create report, invalid required param, expected a string but got \" +\n                            param + \".\");\n                    }\n                }\n            }\n            if (config.process) {\n                if (config.process.constructor !== Array) {\n                    config.process = [config.process];\n                }\n                for (var _d = 0, _e = config.process; _d < _e.length; _d++) {\n                    var process = _e[_d];\n                    if (!process.processId || typeof (process.processId) !== \"string\") {\n                        throw new TypeError(\"Cant' create report, processId must be a string.\");\n                    }\n                    if (!setOfProcess.has(process.processId)) {\n                        throw new TypeError(\"Cant' create report, unknown processId \" + process.processId);\n                    }\n                }\n            }\n        };\n        /**\n         * Creates a deep copy of the specified Report\n         * @param report\n         * @returns {ReportClass.Report}\n         */\n        Report.copy = function (report) {\n            var newReport = new Report(report._config);\n            for (var p in report) {\n                if (report.hasOwnProperty(p) && p !== \"joinReports\") {\n                    newReport[p] = report[p];\n                }\n            }\n            return newReport;\n        };\n        /**\n         * Returns a copy of this Report\n         */\n        Report.prototype.clone = function () {\n            return Report.copy(this);\n        };\n        /**\n         * Runs the report. Returns a promise which is resolved when data is ready or an error occurs.\n         * @param {object} state Params to use when running the report\n         * @param {number} priority The priority on which to run the report - lower number is higher priority\n         * @param {boolean} noCache Whether to allow data to be retrieved from cache\n         * @returns {Promise}\n         */\n        Report.prototype.run = function (state, priority, noCache) {\n            var report = this;\n            this.isLoading = true;\n            if (this._initializing) {\n                return this.onInitSubscribe().then(function () {\n                    return report.run(state);\n                }, function (error) {\n                    report.isLoading = false;\n                    return $q.reject(error);\n                });\n            }\n            else {\n                var forceRefresh = noCache !== undefined ? !!noCache : !report.allowCache;\n                return reports.runReport(this, state, forceRefresh, priority).finally(function () {\n                    report.isLoading = false;\n                });\n            }\n        };\n        Report.loadReport = function (config) {\n            if (config.reportId) {\n                var existingReport = allReports[config.reportId];\n                if (existingReport) {\n                    return $q.when(existingReport);\n                }\n                return utils.http.wrappedHttpGet(\"data/reports/\" + config.reportId.replace(/\\./g, \"/\") +\n                    \".json\").then(function (reportConfig) {\n                    var fullReportConfig = utils.objects.extend({}, reportConfig, config), reportId = fullReportConfig.reportId;\n                    delete fullReportConfig.reportId;\n                    var report = new Report(fullReportConfig);\n                    allReports[reportId] = report;\n                    return report;\n                }, function (error) {\n                    var errorMessage = error.status === 404 ? \"Report '\" + config.reportId + \"' not found.\" :\n                        \"Can't get report '\" + config.reportId + \"'. Error: \" + error.data;\n                    return $q.reject(errorMessage);\n                });\n            }\n            return new Report(config);\n        };\n        function ReportParam(config) {\n            /**\n             * The name of the param in the state params object\n             * @type string\n             */\n            this.dashboardParam = config.dashboardParam;\n            /**\n             * The value of the param - will be parsed using the state params object\n             */\n            this.value = config.value;\n            /**\n             * Default value for the param, if it's not present in the state params object (Optional)\n             */\n            this[\"default\"] = config.default;\n            /**\n             * The name of the param inside the report\n             */\n            this.field = config.field;\n            this.isRequired = !!config.isRequired;\n            return this;\n        }\n        return Report;\n    }\n    ReportClass.$inject = [\"$q\", \"utils\", \"reports\"];\n    angular.module(\"Reports\").factory(\"Report\", ReportClass);\n})();\n","(function () {\n    'use strict';\n    /**\n     * Service for running reports - configurations of calls to the REST API\n    **/\n    function reports($q, $timeout, DAL, Cache, reportsProcess, utils, configFlags, DataQuery, conditions, state) {\n        var cache = new Cache({ id: \"reports\" }), // this is for data\n        cachedReports = {}, // This one is just for the report definitions\n        runReportsTimeout;\n        var globalSearchParams = [\"page\", \"limit\", \"offset\", \"pageSize\", \"orderBy\", \"orderByDirection\"];\n        var queue = {\n            clearRunReportQueue: function () {\n                console.log(\"CLEAR: \");\n                if (!queue.runReportQueue) {\n                    return;\n                }\n                queue.runReportQueue.forEach(function (reportPriority) {\n                    reportPriority.reports.forEach(function (report) {\n                        if (report.deferred) {\n                            report.deferred.reject({ aborted: true });\n                        }\n                        if (configFlags.verbose) {\n                            console.log(\"Aborted report \", report);\n                        }\n                    });\n                });\n                queue.runReportQueue = null;\n                queue.currentRunningPriority = null;\n            },\n            findReportPosition: function (reportObj) {\n                var priorityIndex, reportIndex, priority;\n                for (priorityIndex = 0; priorityIndex < this.runReportQueue.length; priorityIndex++) {\n                    priority = this.runReportQueue[priorityIndex];\n                    for (reportIndex = 0; reportIndex < priority.reports.length; reportIndex++) {\n                        if (reportObj === priority.reports[reportIndex]) {\n                            return { priority: priority, reportIndex: reportIndex, priorityIndex: priorityIndex };\n                        }\n                    }\n                }\n                return null;\n            },\n            runReportQueue: null,\n            currentRunningPriority: null,\n            currentRunningReports: null,\n            runNextQueuedPriority: function () {\n                if (queue.currentRunningReports && queue.currentRunningReports.length) {\n                    return;\n                }\n                if (!queue.runReportQueue || !queue.runReportQueue.length) {\n                    return;\n                }\n                var nextQueuePriority;\n                for (var priorityIndex = 0, priority; !!(priority = queue.runReportQueue[priorityIndex]); priorityIndex++) {\n                    if (priority.reports && priority.reports.length) {\n                        nextQueuePriority = priority;\n                        break;\n                    }\n                }\n                if (!nextQueuePriority) {\n                    return;\n                }\n                queue.currentRunningPriority = nextQueuePriority;\n                queue.currentRunningReports = [];\n                queue.currentRunningPriority.reports.forEach(function (reportObj) {\n                    if (~queue.currentRunningReports.indexOf(reportObj)) {\n                        return true;\n                    }\n                    queue.currentRunningReports.push(reportObj);\n                    if (configFlags.verbose) {\n                        console.log(\"Run report: \", reportObj);\n                    }\n                    runReport(reportObj).then(function (results) {\n                        var deferred = reportObj.deferred;\n                        delete reportObj.deferred;\n                        deferred.resolve(results);\n                    }, function (error) {\n                        var deferred = reportObj.deferred;\n                        delete reportObj.deferred;\n                        deferred.reject(error);\n                    }).finally(function () {\n                        queue.currentRunningReports.splice(queue.currentRunningReports.indexOf(reportObj), 1);\n                        queue.runNextQueuedPriority();\n                    });\n                });\n                this.currentRunningPriority.reports = [];\n            },\n            queueReport: function (reportObj) {\n                var deferred = $q.defer();\n                $timeout.cancel(runReportsTimeout);\n                reportObj.deferred = deferred;\n                if (!queue.runReportQueue) {\n                    queue.runReportQueue = [{ priority: reportObj.priority, reports: [reportObj] }];\n                }\n                else {\n                    var added;\n                    for (var i = 0, reportPriority; i < queue.runReportQueue.length; i++) {\n                        reportPriority = queue.runReportQueue[i];\n                        if (reportPriority.priority === reportObj.priority) {\n                            reportPriority.reports.push(reportObj);\n                            added = true;\n                            break;\n                        }\n                    }\n                    if (!added) {\n                        queue.runReportQueue.push({ priority: reportObj.priority, reports: [reportObj] });\n                    }\n                    queue.runReportQueue.sort(function (a, b) {\n                        return a.priority > b.priority ? 1 : -1;\n                    });\n                }\n                runReportsTimeout = $timeout(function () {\n                    queue.runNextQueuedPriority();\n                }, 40);\n                return deferred.promise;\n            }\n        };\n        function parseParams(report, params) {\n            var parsedParams = {};\n            angular.forEach(report.params, function (param) {\n                var paramValue = params[param.dashboardParam], fieldName = param.field;\n                if (param.value && paramValue !== undefined && paramValue !== null && paramValue !== \"\") {\n                    parsedParams[fieldName] = utils.strings.parseValue(param.value, params, {});\n                }\n                else if (paramValue !== undefined && paramValue !== null && paramValue !== \"\") {\n                    parsedParams[fieldName] = paramValue;\n                }\n                else if ((parsedParams[fieldName] === undefined || parsedParams[fieldName] === null ||\n                    parsedParams[fieldName] === \"\") && param.default !== undefined && param.default !== null) {\n                    parsedParams[fieldName] =\n                        typeof (param.default) === \"string\" ? utils.strings.parseValue(param.default, {}, params) :\n                            param.default;\n                }\n            });\n            if (params) {\n                for (var paramName in params) {\n                    if (params.hasOwnProperty(paramName)) {\n                        if (~globalSearchParams.indexOf(paramName) && params[paramName] !== undefined &&\n                            params[paramName] !== null) {\n                            parsedParams[paramName] = params[paramName];\n                        }\n                    }\n                }\n            }\n            return parsedParams;\n        }\n        function getInSeconds(value) {\n            var valueMatch = value.match(/^(\\d+)(\\w)$/);\n            if (!valueMatch) {\n                throw new Error(\"Invalid time period value: \" + value);\n            }\n            var int = parseInt(valueMatch[1], 10), unit = valueMatch[2];\n            if (unit === \"s\") {\n                return int;\n            }\n            if (unit === \"m\") {\n                return int * 60;\n            }\n            if (unit === \"h\") {\n                return int * 3600;\n            }\n            if (unit === \"d\") {\n                return int * 3600 * 24;\n            }\n            throw new Error(\"Invalid time period value: \" + value);\n        }\n        function checkRequiredParams(report, params) {\n            var result = { success: true, missingParams: [] };\n            if (report.params) {\n                report.params.forEach(function (param) {\n                    if (param.isRequired && !params[param.dashboardParam]) {\n                        result.success = false;\n                        result.missingParams.push(param.dashboardParam);\n                    }\n                });\n            }\n            return result;\n        }\n        function getCachedDataByKey(cacheItemKey, forceRefresh) {\n            if (forceRefresh) {\n                cache.removeItem(cacheItemKey);\n                return null;\n            }\n            else {\n                var cachedData = cache.getItem(cacheItemKey, { hold: true });\n                if (cachedData) {\n                    return cachedData;\n                }\n            }\n            return null;\n        }\n        function getCacheKey(report, params) {\n            var keyParams = utils.objects.copy(params), reportEndpoint = utils.objects.copy(report.endpoint) || \"\";\n            if (reportEndpoint) {\n                delete reportEndpoint.fields;\n                delete reportEndpoint.sort;\n                delete reportEndpoint.paging;\n                if (reportEndpoint.entities) {\n                    var entityIds = [];\n                    reportEndpoint.entities.forEach(function (entity) {\n                        entityIds.push(entity.id);\n                    });\n                    reportEndpoint.entities = entityIds.join(\"_\");\n                }\n            }\n            if (report.cacheIgnoredParams) {\n                report.cacheIgnoredParams.forEach(function (ignoredParam) {\n                    delete keyParams[ignoredParam];\n                });\n            }\n            return JSON.stringify(reportEndpoint) + \"_\" + JSON.stringify(keyParams);\n        }\n        function getReportDataFromCache(reportObj, cacheKey) {\n            if (!reportObj.report || !reportObj.report.cache) {\n                return null;\n            }\n            var report = reportObj.report, params = reportObj.params;\n            var parsedParams = parseParams(report, params), cacheItemKey = cacheKey || getCacheKey(report, parsedParams);\n            var cachedData = getCachedDataByKey(cacheItemKey, reportObj.forceRefresh);\n            if (cachedData) {\n                return cachedData;\n            }\n        }\n        function runReport(reportObj) {\n            /**\n             * This function resolves the reports.\n             * It handle the process in sense that if there is few process like \"groupBy\" and \"limit\",\n             * it will chain then one at the time while the processed data will pass from process to process\n             * @param results\n             * @param index\n             * @returns {*}\n             */\n            function resolve(results, index) {\n                if (report.process && results.data) {\n                    var processesArr = [];\n                    //if the value is not in array, we push it to the array\n                    if (angular.isArray(report.process)) {\n                        processesArr = report.process;\n                    }\n                    else {\n                        processesArr.push(report.process);\n                    }\n                    // we format the index if this is the first run\n                    index = index ? index : 0;\n                    return $q.when(reportsProcess.processData(processesArr[index].processId, results, processesArr[index].params))\n                        .then(function (processedResults) {\n                        if (index < processesArr.length - 1) {\n                            //if there is more then one process, we will call this function again and pass the new\n                            // processed data to it\n                            index++;\n                            return resolve(processedResults, index);\n                        }\n                        else {\n                            // else we return the processed data\n                            return finishResolve(processedResults);\n                        }\n                    }, onError);\n                }\n                else {\n                    return finishResolve(results);\n                }\n            }\n            function finishResolve(results) {\n                if (report.cache && results.data.length) {\n                    var saveData = utils.objects.copy(results);\n                    delete saveData.$promise;\n                    delete saveData.$resolved;\n                    delete saveData.time;\n                    cache.setItem(cacheItemKey, results, { expiresIn: getInSeconds(report.cache), hold: false });\n                }\n                results.time = utils.date.getMoment('now').toDate() - timeStart;\n                return results.data ? results : { data: [], total: 0, time: results.time };\n            }\n            function onError(error) {\n                if (report.cache) {\n                    cache.removeItem(cacheItemKey);\n                }\n                return $q.reject(error);\n            }\n            function doRunReport() {\n                return DAL.reports.runReport(report, parsedParams)\n                    .then(function (results) {\n                    return resolve(results);\n                }, onError);\n            }\n            var report = reportObj.report, params = reportObj.params, forceRefresh = reportObj.forceRefresh, timeStart = utils.date.getMoment('now').toDate();\n            if (typeof (report) === \"string\") {\n                return methods.runReportById(report, params, forceRefresh);\n            }\n            var requiredParamsCheck = checkRequiredParams(report, params);\n            if (!requiredParamsCheck.success) {\n                return $q.reject({\n                    error: \"requiredParams\",\n                    message: \"Missing required parameters: \" + requiredParamsCheck.missingParams.join(\", \") + \".\"\n                });\n            }\n            var parsedParams = parseParams(report, params), cacheItemKey = getCacheKey(report, parsedParams), cachedData = getReportDataFromCache(reportObj, cacheItemKey);\n            //support addition of condition check on an report,\n            //Uses for a case where there is a report on a general entity as User but with a condition on a special\n            // data source. If the condition is not meet the report wont be execute.\n            if (report.endpoint && report.endpoint.conditions &&\n                !conditions.validateConditions(report.endpoint.conditions, null, state.currentParams)) {\n                return resolve({ data: [], total: 0 });\n            }\n            if (cachedData) {\n                return $q.when(cachedData);\n            }\n            if (report.joinReports) {\n                return methods.runReports(report.joinReports, report, params, forceRefresh).then(function (results) {\n                    var data = [], total = 0, totalTime = 0;\n                    angular.forEach(results, function (result) {\n                        data = data.concat(result.data);\n                        total += result.total;\n                        totalTime += result.time || 0;\n                    });\n                    return resolve({ data: data, total: total });\n                });\n            }\n            // Since we're replacing the dataQuery configuration with the data for the REST API,\n            // stash the configuration for later use.\n            var dataQueryConfig = report.dataQueryConfig || report.endpoint && report.endpoint.dataQuery;\n            if (dataQueryConfig) {\n                try {\n                    try {\n                        report.endpoint.dataQuery = dataQueryConfig instanceof DataQuery ? dataQueryConfig :\n                            new DataQuery(dataQueryConfig, parsedParams);\n                        if (!report.dataQueryConfig) {\n                            report.dataQueryConfig = dataQueryConfig;\n                        }\n                    }\n                    catch (error) {\n                        return $q.reject({ message: \"Can't create DataQuery. Error: \" + error.message, error: error });\n                    }\n                    if (configFlags.verbose) {\n                        console.log(\"Running DataQuery: \", report.endpoint.dataQuery);\n                    }\n                    return doRunReport();\n                }\n                catch (error) {\n                    return $q.reject(error);\n                }\n            }\n            return doRunReport();\n        }\n        var methods = {\n            abortCurrentReports: queue.clearRunReportQueue,\n            getReport: function (reportId) {\n                if (cachedReports[reportId]) {\n                    return $q.when(cachedReports[reportId]);\n                }\n                else {\n                    return DAL.reports.getReport(reportId).then(function (report) {\n                        cachedReports[reportId] = report;\n                        return report;\n                    });\n                }\n            },\n            runReport: function (report, params, forceRefresh, priority) {\n                var reportObj = {\n                    priority: priority || 0,\n                    report: report,\n                    params: params,\n                    forceRefresh: forceRefresh\n                };\n                var cachedData = getReportDataFromCache(reportObj);\n                if (cachedData) {\n                    return $q.when(cachedData);\n                }\n                if (!angular.isNumber(priority)) {\n                    return runReport(reportObj);\n                }\n                return queue.queueReport(reportObj);\n            },\n            runReportById: function (reportId, params, forceRefresh) {\n                return methods.getReport(reportId).then(function (report) {\n                    return methods.runReport(report, params, forceRefresh);\n                });\n            },\n            runReports: function (reports, parentReport, params, forceRefresh) {\n                var promises = [], common;\n                if (Object(reports) === reports) {\n                    if (!!(common = reports.common)) {\n                        reports = reports.reports.map(function (report) {\n                            return utils.objects.extend({}, common, report);\n                        });\n                    }\n                }\n                angular.forEach(reports, function (report) {\n                    var reportCopy = report.constructor.name === \"Report\" ? report.clone() : utils.objects.copy(report);\n                    reportCopy.params =\n                        reportCopy.params ? reportCopy.params.concat(parentReport.params || []) : parentReport.params;\n                    promises.push(methods.runReport(reportCopy, params, forceRefresh));\n                });\n                return $q.all(promises);\n            }\n        };\n        return methods;\n    }\n    reports.$inject =\n        [\"$q\", \"$timeout\", \"DAL\", \"Cache\", \"reportsProcess\", \"utils\", \"configFlags\", \"DataQuery\", \"conditions\",\n            \"state\"];\n    angular.module(\"Reports\").factory(\"reports\", reports);\n})();\n","(function () {\n    'use strict';\n    /**\n     * Post-processing for data returned by a report call. The process is define within the report itself.\n     * @param $q\n     * @param DAL\n     * @param utils\n     * @returns {{processData: processData}}\n     */\n    function reportsProcess($q, DAL, utils) {\n        var processes = {\n            add: function (results, params) {\n                if (!params || !params.field) {\n                    throw new Error(\"Can't add results - no field specified.\");\n                }\n                if (!results.data || !results.data.length) {\n                    return null;\n                }\n                var addResult = results.data[0][params.field], result = params.extend || {};\n                if (results.data.length > 1) {\n                    for (var i = 1; i < results.data.length; i++) {\n                        addResult += results.data[i][params.field];\n                    }\n                }\n                result[params.field] = addResult;\n                return { data: [result], total: 1, time: results.time };\n            },\n            combine: function (results, params) {\n                var index = {}, indexedResults = [];\n                angular.forEach(results.data, function (result) {\n                    var groupByValue = result[params.groupBy];\n                    var indexObj = index[groupByValue];\n                    if (!indexObj) {\n                        indexObj = index[groupByValue] = angular.copy(params.defaultValue);\n                        indexObj[params.groupBy] = groupByValue;\n                    }\n                    for (var fieldName in params.fields) {\n                        if (params.fields.hasOwnProperty(fieldName)) {\n                            indexObj[result[fieldName]] = result[params.fields[fieldName]];\n                        }\n                    }\n                });\n                for (var groupByValue in index) {\n                    if (index.hasOwnProperty(groupByValue)) {\n                        indexedResults.push(index[groupByValue]);\n                    }\n                }\n                return $q.when({ data: indexedResults, total: results.total, time: results.time });\n            },\n            extend: function (results, params) {\n                if (!params || !Object.keys(params).length) {\n                    return results;\n                }\n                results.data.forEach(function (item) {\n                    angular.extend(item, params);\n                });\n                return results;\n            },\n            getUsersDetails: function (results, params) {\n                var deferred = $q.defer(), usernames = [];\n                if (!params || !params.userField || !params.userType) {\n                    deferred.reject(\"Missing parameters for getUserDetails.\");\n                    return deferred.promise;\n                }\n                angular.forEach(results.data, function (item) {\n                    usernames.push(item[params.userField]);\n                });\n                if (!usernames.length) {\n                    deferred.resolve({ data: [], total: 0 });\n                }\n                DAL.reports.runReport({\n                    endpoint: {\n                        entity: \"app\",\n                        id: params.userType,\n                        method: \"usersDetails\",\n                        usernames: usernames.join(\",\")\n                    },\n                    \"mock_data\": \"userFind\"\n                }).then(function (userDetailsResults) {\n                    angular.forEach(userDetailsResults.data, function (userDetails) {\n                        for (var i = 0, item; i < results.data.length; i++) {\n                            item = results.data[i];\n                            if ((userDetails.samacountName &&\n                                userDetails.samacountName.toLowerCase() === item[params.userField].toLowerCase()) ||\n                                (userDetails.adUserPrincipalName && userDetails.adUserPrincipalName.toLowerCase() ===\n                                    item[params.userField].toLowerCase() || (userDetails.name &&\n                                    userDetails.name.toLowerCase() === item[params.userField].toLowerCase()))) {\n                                item.userDetails = userDetails;\n                                break;\n                            }\n                        }\n                    });\n                    deferred.resolve(results);\n                }, deferred.reject);\n                return deferred.promise;\n            },\n            /*\n             *\n             *\tAllow group by aggregation also in the frontend - ideally this functionality will move completely to\n             *\tthe backend, cause of time implementation issues currently implemented in the frontend.\n             *\n             *\n             */\n            groupBy: function (results, params) {\n                var index = {}, indexedResults = [];\n                angular.forEach(results.data, function (result) {\n                    var resultProperties = Object.keys(result);\n                    var groupByValue = \"\";\n                    // create id for all records that are group together\n                    // support multiple group by fields, from which this id is created.\n                    angular.forEach(params.groupBy, function (groupByColumn) {\n                        groupByValue += \"_\" + result[groupByColumn];\n                    });\n                    // add/return the id to the distinct record map.\n                    var indexObj = index[groupByValue];\n                    if (!indexObj) {\n                        indexObj = index[groupByValue] = {};\n                    }\n                    //remove group by fields values from original record.\n                    angular.forEach(params.groupBy, function (groupByColumn) {\n                        indexObj[groupByColumn] = result[groupByColumn];\n                        resultProperties.splice(resultProperties.indexOf(groupByColumn), 1);\n                    });\n                    if (params.fields) {\n                        // for all aggregation fields\n                        angular.forEach(params.fields, function (field) {\n                            // get field name and value and destination field name for the joined record.\n                            var fieldValue = result[field.fieldName];\n                            var fieldName = field.fieldName;\n                            // remove value from original record if needed.\n                            if (field.fieldNewName === undefined) {\n                                var propertyIndex = resultProperties.indexOf(fieldName);\n                                if (~propertyIndex) {\n                                    resultProperties.splice(propertyIndex, 1);\n                                }\n                            }\n                            else {\n                                fieldName = field.fieldNewName;\n                            }\n                            //allow pivot operation uses the pivot field to get the prefix for the column name as\n                            // addition to the aggregated field. the new field name pattern will be\n                            // pivotFieldValue_aggregatedFieldName and the operation on the value can be any of the\n                            // basic aggregation operations.\n                            if (field.fieldFunc === \"pivot\") {\n                                if (field.pivotFieldName !== undefined) {\n                                    var pivotPropertyIndex = resultProperties.indexOf(field.pivotFieldName);\n                                    if (~pivotPropertyIndex) {\n                                        var pivotField = result[field.pivotFieldName];\n                                        resultProperties.splice(pivotPropertyIndex, 1);\n                                        fieldName = pivotField + \"_\" + fieldName;\n                                        aggregateOperation(indexObj, fieldName, fieldValue, field.fieldPivotFunc);\n                                    }\n                                }\n                            }\n                            else {\n                                aggregateOperation(indexObj, fieldName, fieldValue, field.fieldFunc, result[field.referenceFieldName], field.referenceValue);\n                            }\n                        });\n                    }\n                    // add all other values haven't been handled until now\n                    if (resultProperties.length) {\n                        resultProperties.forEach(function (propertyName) {\n                            indexObj[propertyName] = result[propertyName];\n                        });\n                    }\n                });\n                // add all joined records to new result set\n                for (var groupByValue in index) {\n                    if (index.hasOwnProperty(groupByValue)) {\n                        indexedResults.push(index[groupByValue]);\n                    }\n                }\n                return $q.when({ data: indexedResults, total: results.total, time: results.time });\n            },\n            groupByField: function (results, params) {\n                function groupRows(fieldValue) {\n                    var rows = [];\n                    for (var i = originalData.length - 1, row; !!(row = originalData[i]); i--) {\n                        if (row[params.field] === fieldValue) {\n                            rows.splice(0, 0, originalData.splice(i, 1)[0]);\n                        }\n                    }\n                    newResults = newResults.concat(rows);\n                }\n                var originalData = angular.copy(results.data);\n                if (!originalData || originalData.length <= 2) {\n                    return results;\n                }\n                var newResults = originalData.splice(0, 1);\n                while (originalData.length) {\n                    groupRows(newResults[newResults.length - 1][params.field]);\n                    if (originalData.length) {\n                        newResults.push(originalData.splice(0, 1)[0]);\n                    }\n                }\n                return { data: newResults, total: results.total, time: results.time };\n            },\n            map: function (results, params) {\n                var mappedData = [];\n                angular.forEach(results.data, function (item) {\n                    mappedData.push(mapObj(params.map, item));\n                });\n                return { data: mappedData, total: results.total, time: results.time };\n            },\n            sort: function (results, params) {\n                var fields = params.fields || [params.field];\n                var resultsCopy = angular.copy(results), sortFunc = params.direction && params.direction.toLocaleLowerCase() === \"desc\" ?\n                    function (a, b) {\n                        var values = getValuesToCompare(a, b);\n                        if (values.a === values.b) {\n                            return 0;\n                        }\n                        if (!values.a && values.a !== 0 && values.b) {\n                            return -1;\n                        }\n                        if (!values.b && values.b !== 0 && values.a) {\n                            return 1;\n                        }\n                        return values.a < values.b ? 1 : -1;\n                    } :\n                    function (a, b) {\n                        var values = getValuesToCompare(a, b);\n                        if (values.a === values.b) {\n                            return 0;\n                        }\n                        if (!values.a && values.a !== 0 && values.b) {\n                            return 1;\n                        }\n                        if (!values.b && values.b !== 0 && values.a) {\n                            return -1;\n                        }\n                        return values.a > values.b ? 1 : -1;\n                    };\n                resultsCopy.data = resultsCopy.data.sort(sortFunc);\n                function getValuesToCompare(a, b) {\n                    var fieldIndex = -1, field, aVal, bVal;\n                    do {\n                        fieldIndex++;\n                        field = fields[fieldIndex];\n                        if (field) {\n                            aVal = a[field];\n                            bVal = b[field];\n                        }\n                    } while (field && aVal === bVal);\n                    return { a: aVal, b: bVal };\n                }\n                return resultsCopy;\n            },\n            limit: function (results, params) {\n                var resultsCopy = angular.copy(results);\n                resultsCopy.data = resultsCopy.data.splice(0, params.numOfRows);\n                return resultsCopy;\n            }\n        };\n        function aggregateOperation(indexObj, fieldName, fieldValue, fieldFunc, referenceField, referenceValue) {\n            if (fieldFunc === \"case\") {\n                if (referenceValue === referenceField) {\n                    indexObj[fieldName] = fieldValue;\n                }\n            }\n            else if (indexObj[fieldName] === undefined) {\n                indexObj[fieldName] = fieldValue;\n            }\n            else {\n                if (fieldFunc === \"sum\") {\n                    indexObj[fieldName] += fieldValue;\n                }\n                else if (fieldFunc === \"max\") {\n                    indexObj[fieldName] = Math.max(indexObj[fieldName], fieldValue);\n                }\n                else if (fieldFunc === \"min\") {\n                    indexObj[fieldName] = Math.max(indexObj[fieldName], fieldValue);\n                }\n                else if (fieldFunc === \"count\") {\n                    indexObj[fieldName] += 1;\n                }\n                else if (fieldValue) {\n                    indexObj[fieldName] = fieldValue;\n                }\n            }\n        }\n        function mapObj(map, data) {\n            var mappedObj = {}, pValue;\n            function populateMappedObj(propertyName) {\n                mappedObj[p][propertyName] = data[propertyName];\n            }\n            for (var p in map) {\n                if (map.hasOwnProperty(p)) {\n                    pValue = map[p];\n                    if (typeof (pValue) === \"string\") {\n                        mappedObj[p] = utils.strings.parseValue(pValue, data);\n                    }\n                    else if (angular.isArray(pValue)) {\n                        mappedObj[p] = {};\n                        angular.forEach(pValue, populateMappedObj);\n                    }\n                    else if (angular.isObject(pValue)) {\n                        mappedObj[p] = mapObj(pValue, data);\n                    }\n                }\n            }\n            return mappedObj;\n        }\n        return {\n            processData: function (processId, results, params) {\n                var process = processes[processId];\n                if (!process) {\n                    throw new Error(\"Invalid process, '\" + processId + \"'.\");\n                }\n                var data = results.data && angular.isArray(results.data) ? results : { data: [results] };\n                return $q.when(process(data, params));\n            }\n        };\n    }\n    reportsProcess.$inject = [\"$q\", \"DAL\", \"utils\"];\n    angular.module(\"Reports\").factory(\"reportsProcess\", reportsProcess);\n})();\n","(function () {\n    \"use strict\";\n    /**\n     * Service for searching data, for example searching available values in an entity\n     * @param reports\n     * @param DataEntityField\n     * @param Report\n     * @returns {{searchDataEntityField: searchDataEntityField}}\n     */\n    function search(reports, DataEntityField, Report) {\n        function getDataEntityFieldSearchSettings(dataEntityField, labelField) {\n            if (!(dataEntityField instanceof DataEntityField)) {\n                throw new TypeError(\"Invalid data entity field, expected an instance of dataEntityField.\");\n            }\n            if (labelField && !(labelField instanceof DataEntityField)) {\n                throw new TypeError(\"Invalid labelField, expected an instance of dataEntityField.\");\n            }\n            /* jshint validthis: true */\n            return {\n                search: searchDataEntityField.bind(this, dataEntityField.entity.id, dataEntityField.id, labelField && labelField.id, null),\n                placeholder: \"Search \" + dataEntityField.name,\n                resultField: dataEntityField.id,\n                showValueOnSelect: true\n            };\n        }\n        function searchDataEntityField(dataEntityId, dataEntityFieldId, labelFieldId, extraTerms, term) {\n            var report = new Report({\n                endpoint: {\n                    api: \"dataQuery\",\n                    dataQuery: getSearchFieldDataQuery(dataEntityId, dataEntityFieldId, labelFieldId, extraTerms)\n                }, requiredParams: [\"term\"], params: [{\n                        dashboardParam: \"term\", field: \"term\"\n                    }], mock_data: \"user_search\"\n            });\n            return reports.runReport(report, { term: term }).then(function (results) {\n                /**\n                 *\n                 * @type {Array<{normalized_username: string=, label: string=, value: string=}>}\n                 */\n                var tempArray = [];\n                //since the search was changed to \"Start with\" and not \"like\" - no need for this option any more\n                //keeping this code for the case we we change it back to like\n                /*\n                 //add the searched term to the first position at the result array\n                 // - only if it's not exactly the return result\n                 var addSearchLabel = true;\n                 if(results.data.length == 1){\n                 report.endpoint.dataQuery.fields.forEach(function (field) {\n                 if(field.id && results.data[0][field.id] && results.data[0][field.id].toLowerCase() ===\n                  term.toLowerCase()){\n                 addSearchLabel = false;\n                 }\n                 });\n                 }*/\n                var addSearchLabel = false;\n                if (addSearchLabel) {\n                    tempArray[0] = { label: \"Search: \" + term, value: term };\n                }\n                results.data.forEach(function (result) {\n                    tempArray.push(result);\n                });\n                //sanity check to verify display_name and normalized_username are present\n                if (tempArray.length > 0 && tempArray[0].display_name && tempArray[0].normalized_username) {\n                    //check for duplicate display names, if found concatenate the normalized_username\n                    for (var i = 0; i < tempArray.length; i++) {\n                        for (var j = i + 1; j < tempArray.length; j++) {\n                            //if a pair was found, update both and go on to check the next name\n                            if (tempArray[i].display_name === tempArray[j].display_name) {\n                                tempArray[i].display_name += \" (\" + tempArray[i].normalized_username + \")\";\n                                tempArray[j].display_name += \" (\" + tempArray[j].normalized_username + \")\";\n                                break;\n                            }\n                        }\n                    }\n                }\n                return tempArray;\n            }).catch(function (error) {\n                console.error(\"Can't execute field search: \", error);\n            });\n        }\n        /*\n         *   The search if preform using the start with operator define as part of the dataQuery language.\n         *   dataEntityId - The entity on which the search is been perform\n         *   dataEntityFieldId - field used as the return result of the search for the dashboard/widget using the search\n         *   labelFieldId - field used for the search itself\n         *   extraTerms - in the case you need to add additional condition to the search data query\n         */\n        function getSearchFieldDataQuery(dataEntityId, dataEntityFieldId, labelFieldId, extraTerms) {\n            var fields = dataEntityFieldId;\n            //if fields is not an array, make it an array (this test is for legacy purposes)\n            if (!angular.isArray(fields)) {\n                fields = [dataEntityFieldId];\n            }\n            if (labelFieldId) {\n                fields.push(labelFieldId);\n            }\n            var terms = [{\n                    type: \"field\", id: labelFieldId || dataEntityFieldId, operator: \"startsWith\", valueParam: \"term\"\n                }];\n            if (extraTerms) {\n                terms = terms.concat(extraTerms);\n            }\n            return {\n                entity: dataEntityId, fields: fields, conditions: {\n                    operator: \"AND\", terms: terms\n                }, groupBy: fields, sort: labelFieldId || dataEntityFieldId, limit: 10\n            };\n        }\n        return {\n            getDataEntityFieldSearchSettings: getDataEntityFieldSearchSettings,\n            searchDataEntityField: searchDataEntityField\n        };\n    }\n    search.$inject = [\"reports\", \"DataEntityField\", \"Report\"];\n    angular.module(\"Search\", [\"Utils\", \"Reports\", \"DataEntities\"]).factory(\"search\", search);\n})();\n","(function () {\n    \"use strict\";\n    /**\n     * Service for checking the conditions for displaying the popup to potentially prevent the user from running large\n     * queries\n     */\n    function popupConditions(config) {\n        var scoreThreshold = config.scoreThreshold;\n        var daysThreshold = config.daysThreshold;\n        function shouldNotifyPopup(params) {\n            var minScore = 100;\n            var timeStart = 0;\n            var timeEnd = 0;\n            var filter;\n            //sanity - if no control params\n            if (!params) {\n                return \"\";\n            }\n            //if explore screen\n            if (params.filters) {\n                filter = params.filters;\n                minScore = filter[1].value;\n                timeStart = filter[0].value.timeStart;\n                timeEnd = filter[0].value.timeEnd;\n            }\n            else {\n                filter = params.urlParams;\n                //can only be one of these cases, order does not matter\n                if (filter.top_events_dates) {\n                    timeStart = filter.top_events_dates.split(\",\")[0];\n                    timeEnd = filter.top_events_dates.split(\",\")[1];\n                }\n                else if (filter.notifications_events_dates) {\n                    timeStart = filter.notifications_events_dates.split(\",\")[0];\n                    timeEnd = filter.notifications_events_dates.split(\",\")[1];\n                }\n                else if (filter.notifications_events_dates) {\n                    timeStart = filter.high_privileged_accounts_event_dates.split(\",\")[0];\n                    timeEnd = filter.high_privileged_accounts_event_dates.split(\",\")[1];\n                }\n                else if (filter.notifications_events_dates) {\n                    timeStart = filter.sensitive_resources_events_dates.split(\",\")[0];\n                    timeEnd = filter.sensitive_resources_events_dates.split(\",\")[1];\n                }\n                else if (filter.ip_investigation_events_dates) {\n                    timeStart = filter.ip_investigation_events_dates.split(\",\")[0];\n                    timeEnd = filter.ip_investigation_events_dates.split(\",\")[1];\n                }\n                else if (filter.default_filters) {\n                    timeStart = filter.default_filters.split(\":\")[1];\n                    timeEnd = filter.default_filters.split(\":\")[3].split(\",\")[0];\n                }\n                if (filter.filters && filter.filters.indexOf(\"score\") > 0) {\n                    var array = filter.filters.split(\"=\");\n                    minScore = array[array.length - 1];\n                }\n                else if (filter.minscore !== undefined && _.isNumber(filter.minscore)) {\n                    minScore = filter.minscore;\n                }\n            }\n            var daysDiff = (timeEnd - timeStart) / (1000 * 60 * 60 * 24);\n            if (minScore < scoreThreshold) {\n                return config.popupScoreMessage;\n            }\n            if (daysDiff > daysThreshold) {\n                return config.popupDaysMessage;\n            }\n            return \"\";\n        }\n        return {\n            shouldNotifyPopup: shouldNotifyPopup\n        };\n    }\n    popupConditions.$inject = [\"config\"];\n    angular.module(\"PopupConditions\", [])\n        .factory(\"popupConditions\", popupConditions);\n})();\n","angular.module(\"Widgets\", [\"Utils\", \"Conditions\", \"State\", \"EventBus\", \"Controls\"]);\n","(function () {\n    'use strict';\n    var widgetFlags = new Set([\"alignControlsRight\", \"contentsOnly\", \"noBorder\", \"stretchVertically\", \"fullHeight\"]);\n    function WidgetClass($q, $timeout, utils, widgetViews, WidgetView, WidgetButton, Report, conditions, state, ControlList, EventBus) {\n        function validateWidgetReport(config) {\n            if (config.reportId && typeof (config.reportId) !== \"string\") {\n                throw new TypeError(\"Can't create widget, reportId must be a string.\");\n            }\n            if (config.reportId && config.report) {\n                throw new Error(\"A widget cannot have both a 'reportId' and a 'report' properties.\");\n            }\n        }\n        /**\n         Some widgets, e.g. users_dist, need additional data process after the report result gets back from server.\n         in user_dist, we need to merge the results according to their label\n         */\n        function mergeResults(data) {\n            var mergedData = {};\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var line = data_1[_i];\n                if (!mergedData[line.label]) {\n                    mergedData[line.label] = 0;\n                }\n                mergedData[line.label] += line.login_count;\n            }\n            var newMergedData = [];\n            for (var item in mergedData) {\n                if (mergedData.hasOwnProperty(item)) {\n                    newMergedData.push({ \"label\": item, \"login_count\": mergedData[item] });\n                }\n            }\n            return newMergedData;\n        }\n        /**\n         * If the specified widget has a report and it has params, the dashboardParams from the report are added\n         * to the widget's refreshOn map, so it refreshes when those params change.\n         * @param widget\n         */\n        function setWidgetReportRefreshOn(widget) {\n            if (!widget.report || !widget.report.params) {\n                return;\n            }\n            if (!widget.refreshOn) {\n                widget.refreshOn = {};\n            }\n            widget.report.params.forEach(function (reportParam) {\n                widget.refreshOn[reportParam.dashboardParam] = true;\n            });\n        }\n        /**\n         * To avoid infinite recursion when working with widgets, a dashboard can't be set as a property of the widget\n         * i holds\n         * (It's possible, but Angular dies), just the properties required for the widget to work are set as the\n         * parent.\n         * @param parentObj\n         * @returns {{getState: (Function|*|getState)}}\n         */\n        function getNonRecursiveParent(parentObj) {\n            if (parentObj && parentObj.getState) {\n                return {\n                    getState: parentObj.getState.bind(parentObj),\n                    isReady: parentObj.isReady ? parentObj.isReady.bind(parentObj) : function () {\n                        return true;\n                    }\n                };\n            }\n            return null;\n        }\n        // String properties of widgets which are affected by state changes:\n        var parsableProperties = [\"params\", \"title\", \"noDataTitle\", \"loadingTitle\", \"description\", \"noDataMessage\",\n            \"controlsTitle\"];\n        var STATE_CHANGE_EVENT = \"stateChange\";\n        var allWidgets = {};\n        function Widget(config, parent) {\n            if (config instanceof Widget) {\n                config = config._config;\n            }\n            var widget = this;\n            this.validate(config);\n            this._config = config;\n            this.parent = getNonRecursiveParent(parent);\n            this.refreshOn = {};\n            this.id = config.id;\n            this.config = {\n                show: config.show\n            };\n            this.show = true;\n            for (var _i = 0, parsableProperties_1 = parsableProperties; _i < parsableProperties_1.length; _i++) {\n                var parsableProperty = parsableProperties_1[_i];\n                this.config[parsableProperty] = config[parsableProperty];\n            }\n            this.views = config.views.map(function (viewConfig) {\n                return new WidgetView(viewConfig);\n            });\n            this.priority = config.priority || 0;\n            this.hideOnNoData = !!config.hideOnNoData;\n            this.hideOnError = !!config.hideOnError;\n            if (config.forceRefresh) {\n                this.forceRefresh = config.forceRefresh;\n            }\n            else {\n                this.forceRefresh = false;\n            }\n            if (config.exploreBased) {\n                this.exploreBased = config.exploreBased;\n            }\n            if (config.className) {\n                this.className = config.className;\n            }\n            if (config.controls) {\n                this.controlsList = new ControlList(config.controls);\n            }\n            this.setReport(config);\n            this.flags = config.flags;\n            this.loadingDataMessage = config.loadingDataMessage || \"Loading data\";\n            if (config.height) {\n                this.height = config.height;\n            }\n            if (config.buttons) {\n                this.setWidgetButtons(config.buttons);\n            }\n            if (config.mergeResults) {\n                this.mergeResults = config.mergeResults;\n            }\n            if (config.refreshOn) {\n                var refreshOn = config.refreshOn.constructor === Array ? config.refreshOn : [config.refreshOn];\n                refreshOn.forEach(function (param) {\n                    widget.refreshOn[param] = true;\n                });\n            }\n            this.update();\n            this.getData();\n            this._eventBus = EventBus.setToObject(this, [STATE_CHANGE_EVENT]);\n        }\n        /**\n         * Creates a copy of the widget, by first creating another Widget with the same config, then setting the\n         * current properties.\n         * @param widget\n         * @returns {WidgetClass.Widget}\n         */\n        Widget.copy = function (widget) {\n            var newWidget = new Widget(widget._config);\n            for (var p in widget) {\n                if (widget.hasOwnProperty(p)) {\n                    // Views are not copied from widget to widget, they're taken from configuration only.\n                    if (p !== \"views\") {\n                        newWidget[p] = widget[p];\n                    }\n                }\n            }\n            return newWidget;\n        };\n        /**\n         * Returns a copy of this widget\n         * @returns {WidgetClass.Widget}\n         */\n        Widget.prototype.clone = function () {\n            return Widget.copy(this);\n        };\n        /**\n         * Validates the configuration used to build the Widget. Throws error if invalid.\n         * @param config\n         */\n        Widget.prototype.validate = function (config) {\n            if (!config) {\n                return;\n            }\n            if (config.id && typeof (config.id) !== \"string\") {\n                throw new TypeError(\"Invalid ID for widget. Expected a string but got \" + typeof (config.id));\n            }\n            validateWidgetReport(config);\n            if (config.show) {\n                if (!config.show.conditions) {\n                    throw new Error(\"Can't create widget - 'show' exists without conditions.\");\n                }\n            }\n            if (config.priority && typeof (config.priority) !== \"number\") {\n                throw new TypeError(\"Cant' create widget, priority must be a number.\");\n            }\n            if (!config.views) {\n                throw new Error(\"Can't create widget, missing the views array.\");\n            }\n            if (config.views.constructor !== Array) {\n                throw new TypeError(\"Invalid views property for widget, expected an array.\");\n            }\n            for (var _i = 0, _a = config.views; _i < _a.length; _i++) {\n                var view = _a[_i];\n                if (!view.type) {\n                    throw new Error(\"Can't create widget, view has no type.\");\n                }\n                if (typeof (view.type) !== \"string\") {\n                    throw new TypeError(\"Cant' create widget, view type must be a string.\");\n                }\n                if (!widgetViews.viewExists(view.type)) {\n                    throw new Error(\"Unknown view type, '\" + view.type + \"'.\");\n                }\n                widgetViews.validateSettings(view.type, view.settings);\n            }\n            if (config.flags) {\n                for (var flagName in config.flags) {\n                    if (config.flags.hasOwnProperty(flagName)) {\n                        if (!widgetFlags.has(flagName)) {\n                            throw new Error(\"Unknown widget flag, '\" + flagName + \"'.\");\n                        }\n                    }\n                }\n            }\n            if (config.loadingDataMessage && typeof (config.loadingDataMessage) !== \"string\") {\n                throw new TypeError(\"Invalid loadingDataMessage for widget, expected a string but got \" +\n                    config.loadingDataMessage);\n            }\n            if (config.height) {\n                if (typeof (config.height) !== \"number\") {\n                    throw new TypeError(\"Invalid height for widget, expected a number but got \" +\n                        typeof (config.height));\n                }\n                if (config.height < 0) {\n                    throw new Error(\"Invalid height for widget, must be a positive number.\");\n                }\n            }\n            if (config.buttons && config.buttons.constructor !== Array) {\n                throw new TypeError(\"Invalid buttons for Widget, expected an array but got \" + config.buttons);\n            }\n            if (config.refreshOn) {\n                if (config.refreshOn.constructor === Array) {\n                    config.refreshOn.forEach(function (refreshOnItem) {\n                        if (typeof (refreshOnItem) !== \"string\") {\n                            throw new TypeError(\"Invalid refreshOn for widget, expected a string but got \" +\n                                refreshOnItem + \".\");\n                        }\n                    });\n                }\n                else if (typeof (config.refreshOn) !== \"string\") {\n                    throw new TypeError(\"Invalid refreshOn for widget, expected either an array or a string.\");\n                }\n            }\n        };\n        /**\n         * Called when the widget is no longer needed, to clear memory and event handlers.\n         *\n         */\n        Widget.prototype.destroy = function () {\n            this.parent = null;\n            this.show = true;\n            this.rawData = null;\n            this.views.forEach(function (view) {\n                view.destroy();\n            });\n            this.noData = false;\n            this.error = null;\n        };\n        /**\n         * Sets a report to the widget. Must be an object, containing either 'reportId' (string), Object report or a\n         * Report instance.\n         * @param reportConfig\n         */\n        Widget.prototype.setReport = function (reportConfig) {\n            var widget = this;\n            validateWidgetReport(reportConfig);\n            if (reportConfig.reportId) {\n                Report.loadReport(reportConfig).then(function (report) {\n                    widget.report = report;\n                    setWidgetReportRefreshOn(widget);\n                });\n            }\n            else if (reportConfig.report) {\n                if (reportConfig.report instanceof Report) {\n                    this.report = reportConfig.report;\n                }\n                else {\n                    this.report = new Report(utils.objects.copy(reportConfig.report));\n                }\n                setWidgetReportRefreshOn(widget);\n            }\n            return this;\n        };\n        /**\n         * Sets the Widget's buttons and sets the Widget as the widgetButton' parent\n         * @param buttons\n         */\n        Widget.prototype.setWidgetButtons = function (buttons) {\n            this.buttons = buttons.map(function (buttonConfig) {\n                return new WidgetButton(buttonConfig, this);\n            }.bind(this));\n        };\n        /**\n         * Re-runs the widget's data, without using ui cache\n         * @returns {*}\n         */\n        Widget.prototype.refresh = function () {\n            this.getData(true);\n        };\n        /**\n         * Runs the widget's report and sets the data for the widget\n         */\n        Widget.prototype.getData = function (noCache) {\n            if (this.forceRefresh) {\n                state.refresh();\n                return;\n            }\n            if (!this.report || !this.parent || this.parent.isReady() === false) {\n                return;\n            }\n            if (this._widgetReportTimeout) {\n                $timeout.cancel(this._widgetReportTimeout);\n            }\n            var widget = this;\n            widget.isLoading = true;\n            if (widget.loadingTitle) {\n                widget.title = widget.loadingTitle;\n            }\n            this._widgetReportTimeout = $timeout(function () {\n                // We need to run the report in case we plan to show the widget,\n                // or in case we show it only if it has data\n                if (widget.show || widget.hideOnNoData) {\n                    widget.report.run(widget.getState(), widget.priority, noCache).then(function (results) {\n                        widget.noData = results.data && !results.data.length;\n                        var widgetState = widget.getState();\n                        widget.rawData = results.data;\n                        widget.total = results.total;\n                        if (widget.mergeResults) {\n                            widget.rawData = mergeResults(results.data);\n                        }\n                        widget.views.forEach(function (view) {\n                            view.setData(widget.rawData, widgetState);\n                        });\n                        // Add a warning message to the widget if the number of results exceeds the maximum that can be\n                        // displayed\n                        if (widget._config.message && widget._config.message.params &&\n                            widget._config.message.params.maxResults) {\n                            var maxResults = widget._config.message.params.maxResults;\n                            if (widget.total >= maxResults) {\n                                widget.message = \" Too many results, displaying the first \" + maxResults + \".\";\n                            }\n                            else if (widget.message) {\n                                delete widget.message;\n                            }\n                        }\n                    }, function (error) {\n                        widget.error = \"Error loading data\";\n                        console.error(\"Error getting data for widget: \", error);\n                    }).finally(function () {\n                        widget.isLoading = false;\n                        widget.update();\n                    });\n                }\n            }, 40);\n        };\n        /**\n         * Re-runs the widget's data, without using ui cache and also force server not using cache\n         * @returns {*}\n         */\n        Widget.prototype.manualRefresh = function () {\n            if (this.report) {\n                this.report.options = utils.objects.extend({}, this.report.options, { useCache: true });\n            }\n            return this.refresh();\n        };\n        /**\n         * Gets an object containing the params for this widget, including parent's state and app state\n         * @returns object\n         */\n        Widget.prototype.getState = function () {\n            var parentState = this.parent && this.parent.getState && this.parent.getState();\n            return utils.objects.extend({}, state.currentParams, parentState, this.params, this.controlsList && this.controlsList.getParams());\n        };\n        Widget.prototype.setState = function (params) {\n            if (!this.params) {\n                this.params = {};\n            }\n            var prevParams = utils.objects.copy(this.params);\n            utils.objects.extend(this.params, params);\n            if (!utils.objects.areEqual(prevParams, this.params)) {\n                utils.objects.extend(this.params, params);\n                state.setParams(params, true, false);\n                this._eventBus.triggerEvent(STATE_CHANGE_EVENT, { params: params });\n                this.refreshIfRequired(params);\n            }\n        };\n        /**\n         * Updates any parsable properties according to the current widget and application state\n         * Also updates views\n         */\n        Widget.prototype.update = function () {\n            function getParsedValue(parsableProperty) {\n                var propertyConfig = widget.config[parsableProperty];\n                if (!propertyConfig) {\n                    return undefined;\n                }\n                if (Object(propertyConfig) === propertyConfig) {\n                    var parsedValue = {};\n                    for (var p in propertyConfig) {\n                        if (propertyConfig.hasOwnProperty(p)) {\n                            parsedValue[p] = parseStringValue(propertyConfig[p]);\n                        }\n                    }\n                    return parsedValue;\n                }\n                else {\n                    return parseStringValue(propertyConfig);\n                }\n            }\n            function parseStringValue(value) {\n                var widgetData = angular.extend({}, widget.params, { total: widget.total, resultsCount: widget.rawData && widget.rawData.length });\n                return utils.strings.parseValue(value, widgetData, widgetState);\n            }\n            var widgetState = this.getState(), widget = this;\n            for (var _i = 0, parsableProperties_2 = parsableProperties; _i < parsableProperties_2.length; _i++) {\n                var parsableProperty = parsableProperties_2[_i];\n                this[parsableProperty] = getParsedValue(parsableProperty);\n            }\n            if (this.noDataTitle && (this.noData || this.error)) {\n                this.title = this.noDataTitle;\n            }\n            if (!this.noDataMessage) {\n                this.noDataMessage = \"No data to display\";\n            }\n            if (widget.noData && widget.hideOnNoData) {\n                widget.show = false;\n            }\n            else if (!(this.hideOnNoData && this.noData) && this.config.show) {\n                this.show = conditions.validateConditions(this.config.show.conditions, {}, widgetState);\n            }\n            else {\n                this.show = true;\n            }\n            if (this.rawData) {\n                for (var _a = 0, _b = this.views; _a < _b.length; _a++) {\n                    var view = _b[_a];\n                    view.setData(this.rawData, widgetState);\n                }\n            }\n        };\n        /**\n         * Sets the parent object of the Widget, avoids infinite recursion\n         * @param parent\n         */\n        Widget.prototype.setParent = function (parent) {\n            this.parent = getNonRecursiveParent(parent);\n        };\n        Widget.loadWidget = function (config) {\n            function loadWidgetReport(widgetConfig) {\n                if (widgetConfig.reportId) {\n                    return Report.loadReport(utils.objects.extend({}, widgetConfig.report, { reportId: widgetConfig.reportId })).then(function (report) {\n                        widgetConfig.report = report;\n                        delete widgetConfig.reportId;\n                        return widgetConfig;\n                    });\n                }\n                return $q.when(widgetConfig);\n            }\n            if (config instanceof Widget) {\n                return config.clone();\n            }\n            if (config.widgetId) {\n                var widgetId = createWidgetId(config);\n                if (!config.noCache) {\n                    var existingWidget = allWidgets[widgetId];\n                    if (existingWidget) {\n                        return $q.when(existingWidget);\n                    }\n                }\n                return utils.http.wrappedHttpGet(\"data/widgets/\" + config.widgetId.replace(/\\./g, \"/\") +\n                    \".json\").then(function (widgetConfig) {\n                    var fullWidgetConfig = utils.objects.extend({}, widgetConfig, config), widgetId = createWidgetId(fullWidgetConfig);\n                    delete fullWidgetConfig.widgetId;\n                    return loadWidgetReport(fullWidgetConfig).then(function (fullWidgetConfig) {\n                        var widget = new Widget(fullWidgetConfig);\n                        allWidgets[widgetId] = widget;\n                        return widget;\n                    });\n                }, function (error) {\n                    var errorMessage = error.status === 404 ? \"Widget '\" + widgetId + \"' not found.\" :\n                        \"Can't get widget '\" + widgetId + \"'. Error: \" + error.data;\n                    return $q.reject(errorMessage);\n                });\n            }\n            if (config.reportId) {\n                return loadWidgetReport(config).then(function (widgetConfig) {\n                    return new Widget(widgetConfig);\n                });\n            }\n            return new Widget(config);\n        };\n        /**\n         * This function get widgetr id and create an extend of widgetid if needed using the specificId configuration -\n         * for example in graph case\n         * @param config\n         */\n        function createWidgetId(config) {\n            //if specific id is define at the configuration the widget id will be - widgetid+\"_\"+specificId\n            return config.widgetId + (config.specificId ? \"_\" + config.specificId : \"\");\n        }\n        /**\n         * Runs when the app's state changes. If the widget should be updated according to the refreshOn map, it is\n         * refreshed.\n         * @param params\n         */\n        Widget.prototype.refreshIfRequired = function (params) {\n            for (var changedParam in params) {\n                if (params.hasOwnProperty(changedParam)) {\n                    if (this.refreshOn[changedParam]) {\n                        this.refresh();\n                        return this;\n                    }\n                }\n            }\n            return this;\n        };\n        return Widget;\n    }\n    WidgetClass.$inject =\n        [\"$q\", \"$timeout\", \"utils\", \"widgetViews\", \"WidgetView\", \"WidgetButton\", \"Report\", \"conditions\", \"state\",\n            \"ControlList\", \"EventBus\"];\n    angular.module(\"Widgets\").factory(\"Widget\", WidgetClass);\n})();\n","(function () {\n    'use strict';\n    function WidgetViewClass(widgetViews) {\n        /**\n         * Constructor for widget views\n         * @param config\n         * @constructor\n         */\n        function WidgetView(config) {\n            this.type = config.type;\n            this.settings = config.settings;\n            this.templateUrl =\n                'widgets/' + this.type.replace(/\\./g, '/') + '/' + this.type.split('.').pop() + '.view.html';\n        }\n        /**\n         * Sets data to the view, which parses it according to its view type.\n         * @param {Array} data\n         * @param {Object} state\n         */\n        WidgetView.prototype.setData = function (data, state) {\n            var view = this;\n            view.data = null;\n            widgetViews.parseViewData(view, data, state).then(function (viewData) {\n                view.data = viewData;\n            }, function (error) {\n                view.error = error;\n            });\n        };\n        /**\n         * To be called when the view is no longer needed, to free memory, etc.\n         */\n        WidgetView.prototype.destroy = function () {\n            this.data = null;\n            this.error = null;\n        };\n        return WidgetView;\n    }\n    WidgetViewClass.$inject = [\"widgetViews\"];\n    angular.module(\"Widgets\").factory(\"WidgetView\", WidgetViewClass);\n})();\n","(function () {\n    'use strict';\n    function WidgetButtonClass($location, utils) {\n        var supportedButtonTypes = new Set([\"button\", \"multiLink\", \"link\"]);\n        /**\n         * To avoid infinite recursion when working with widgets and widgetButton , a widget can't be set as a property\n         * of the widgetButton i holds\n         * (It's possible, but Angular dies), just the properties required for the widgetButton to work are set as the\n         * parent.\n         * @param parentObj\n         * @returns {{getState: (Function|*|getState)}}\n         */\n        function getNonRecursiveParent(parentObj) {\n            if (parentObj && parentObj.getState) {\n                return {\n                    getState: parentObj.getState.bind(parentObj),\n                    isReady: parentObj.isReady ? parentObj.isReady.bind(parentObj) : function () {\n                        return true;\n                    }\n                };\n            }\n            return null;\n        }\n        function WidgetButton(config, parent) {\n            this.validate(config);\n            if (config.type) {\n                this.type = config.type;\n                this.settings = config.settings;\n            }\n            else {\n                this.type = config.type || \"button\";\n                this._text = config.text;\n                this.icon = config.icon;\n                this.onClick = config.onClick;\n                this.url = config.url;\n                this.title = config.title;\n                this.parent = getNonRecursiveParent(parent);\n                this.text = utils.strings.parseValue(this._text, {}, this.parent.getState());\n            }\n        }\n        WidgetButton.prototype.redirect = function () {\n            $location.url(utils.strings.parseValue(this.url, {}, this.parent.getState()));\n        };\n        /**\n         * update the button text\n         */\n        WidgetButton.prototype.refresh = function () {\n            this.text = utils.strings.parseValue(this._text, {}, this.parent.getState());\n        };\n        WidgetButton.prototype.validate = function (config) {\n            if (config.type) {\n                if (!supportedButtonTypes.has(config.type)) {\n                    throw new Error(\"Unknown widget button type, '\" + config.type + \"'.\");\n                }\n            }\n            else {\n                if (!config.onClick && !config.url) {\n                    throw new Error(\"Can't create WidgetButton, missing onClick.\");\n                }\n                if (!config.onClick && config.url) {\n                    config.onClick = this.redirect;\n                }\n                if (!angular.isFunction(config.onClick)) {\n                    throw new TypeError(\"Invalid onClick for WidgetButton, expected a function but got \" +\n                        config.onClick);\n                }\n                if (!config.text && !config.icon) {\n                    throw new Error(\"Can't create WidgetButton, text or icon is required.\");\n                }\n            }\n        };\n        return WidgetButton;\n    }\n    WidgetButtonClass.$inject = [\"$location\", \"utils\"];\n    angular.module(\"Widgets\").factory(\"WidgetButton\", WidgetButtonClass);\n})();\n","(function () {\n    'use strict';\n    function dashboards($q, DAL, Widget, Dashboard, utils, Report) {\n        function loadWidgets(widgets) {\n            var loadPromises = widgets.map(function (widgetConfig) {\n                return Widget.loadWidget(widgetConfig);\n            });\n            return $q.all(loadPromises);\n        }\n        function loadReports(reports) {\n            var loadPromises = reports.map(function (reportConfig) {\n                return Report.loadReport(reportConfig).then(function (report) {\n                    var loadedConfig = {\n                        report: report\n                    };\n                    return utils.objects.extend({}, reportConfig, loadedConfig);\n                });\n            });\n            return $q.all(loadPromises);\n        }\n        function getColumnWidgets(column) {\n            var promises = [];\n            if (column.widgets) {\n                promises.push(loadWidgets(column.widgets).then(function (widgets) {\n                    column.widgets = prepareDashboardWidgets(widgets);\n                }));\n                column.widgets = [];\n            }\n            if (column.rows) {\n                column.rows.forEach(function (row) {\n                    if (row.widgets) {\n                        promises.push(loadWidgets(row.widgets).then(function (widgets) {\n                            row.widgets = prepareDashboardWidgets(widgets);\n                        }));\n                        row.widgets = [];\n                    }\n                    if (row.columns) {\n                        row.columns.forEach(function (column) {\n                            promises.push(getColumnWidgets(column));\n                        });\n                    }\n                });\n            }\n            return $q.all(promises);\n        }\n        /**\n         * Creates a closure to use for preparing widgets to be placed in a dashboard\n         * @param widgets\n         * @returns {Function}\n         */\n        function prepareDashboardWidgets(widgets) {\n            return widgets.map(function (widget) {\n                return widget.clone();\n            });\n        }\n        function getDashboardWidgets(dashboardConfig) {\n            dashboardConfig = utils.objects.copy(dashboardConfig);\n            var dashboardPromises = [];\n            if (dashboardConfig.widgets) {\n                dashboardPromises.push(loadWidgets(dashboardConfig.widgets).then(function (widgets) {\n                    dashboardConfig.widgets = prepareDashboardWidgets(widgets);\n                }));\n            }\n            if (dashboardConfig.columns) {\n                dashboardConfig.columns.forEach(function (column) {\n                    dashboardPromises.push(getColumnWidgets(column));\n                });\n            }\n            if (dashboardConfig.reports) {\n                dashboardPromises.push(loadReports(dashboardConfig.reports).then(function (reports) {\n                    dashboardConfig.reports = reports;\n                }));\n            }\n            return $q.all(dashboardPromises).then(function () {\n                return new Dashboard(dashboardConfig);\n            });\n        }\n        var cachedDashboardConfigs = {};\n        var methods = {\n            getDashboardById: function (dashboardId, dashboardDataOnly) {\n                if (cachedDashboardConfigs[dashboardId]) {\n                    return getDashboardWidgets(cachedDashboardConfigs[dashboardId]).then(function (dashboard) {\n                        return dashboard;\n                    });\n                }\n                else {\n                    return DAL.dashboards.getDashboardById(dashboardId).then(function (dashboard) {\n                        function getWidgetsAndReturn(dashboardConfig) {\n                            cachedDashboardConfigs[dashboardId] = dashboardConfig;\n                            return getDashboardWidgets(dashboardConfig).then(function (dashboard) {\n                                return dashboard;\n                            });\n                        }\n                        if (dashboard.extends) {\n                            return methods.getDashboardById(dashboard.extends, true).then(function (extendedDashboard) {\n                                var dashboardConfig = utils.objects.extend({}, extendedDashboard, dashboard);\n                                delete dashboardConfig.extends;\n                                return getWidgetsAndReturn(dashboardConfig);\n                            });\n                        }\n                        else {\n                            if (dashboardDataOnly) {\n                                return dashboard;\n                            }\n                            return getWidgetsAndReturn(dashboard);\n                        }\n                    });\n                }\n            },\n            createDashboard: function (settings) {\n                var dashboard = {\n                    id: \"dashboard_\" + new Date().valueOf(),\n                    name: \"Untitled Dashboard\",\n                    columns: [\n                        { widgets: [] }\n                    ]\n                };\n                return angular.extend(dashboard, settings);\n            }\n        };\n        return methods;\n    }\n    dashboards.$inject = [\"$q\", \"DAL\", \"Widget\", \"Dashboard\", \"utils\", \"Report\"];\n    angular.module(\"Widgets\").factory(\"dashboards\", dashboards);\n})();\n","(function () {\n    'use strict';\n    function DashboardClass($q, Widget, WidgetButton, DashboardLayout, utils, conditions, Report, reports, state, ControlList) {\n        // String properties of widgets which are affected by state changes:\n        var parsableProperties = [\"params\", \"title\", \"description\", \"browserTitle\"];\n        function Dashboard(config) {\n            function checkConditions(navItem) {\n                if (navItem.children) {\n                    navItem.children = navItem.children.filter(checkConditions);\n                }\n                return !(navItem.conditions &&\n                    !conditions.validateConditions(navItem.conditions, null, state.currentParams));\n            }\n            this.validate(config);\n            this._config = config;\n            this.id = config.id || config.dashboardId;\n            this.config = {};\n            for (var _i = 0, parsableProperties_1 = parsableProperties; _i < parsableProperties_1.length; _i++) {\n                var parsableProperty = parsableProperties_1[_i];\n                this.config[parsableProperty] = config[parsableProperty];\n            }\n            if (config.controls) {\n                this.controlsList = new ControlList(config.controls);\n            }\n            if (config.navigation) {\n                // TODO: Create a DashboardNavigationClass\n                this.navigation = config.navigation;\n                if (this.navigation.children) {\n                    this.navigation.children = this.navigation.children.filter(checkConditions);\n                }\n            }\n            if (config.className) {\n                this.className = config.className;\n            }\n            // The config.details have to be validated and maybe have a class of their own:\n            if (config.details) {\n                this.details = config.details;\n            }\n            // TODO: Validate and create a class for DashboardMessage\n            if (config.messages) {\n                this.messages = config.messages;\n            }\n            if (config.requiredParams) {\n                this.requiredParams = config.requiredParams;\n                this.checkReady();\n            }\n            else {\n                this.ready = true;\n            }\n            if (config.search) {\n                this.search = config.search;\n            }\n            this.update();\n            if (config.reports) {\n                this.ready = false;\n                this.reports = config.reports.map(function (report) {\n                    return new DashboardReport(report);\n                });\n            }\n            if (config.buttons) {\n                this.setDashboardButtons(config.buttons);\n            }\n            if (config.widgets) {\n                this.setWidgets(config.widgets);\n            }\n            if (config.columns) {\n                this.setColumns(config.columns);\n            }\n            if (config.rows) {\n                this.setRows(config.rows);\n            }\n            this.runReports();\n        }\n        Dashboard.prototype.validate = function (config) {\n            /*\n             if (!config.widgets && !config.columns && !config.rows)\n             throw new Error(\"Can't create Dashboard, missing one of the following: widgets, columns or rows.\");\n             */\n            if (config.name && typeof (config.name) !== \"string\") {\n                throw new TypeError(\"Invalid name for Dashboard, expected a string but got \" +\n                    config.name.constructor.name + \".\");\n            }\n            if (config.reports) {\n                if (config.reports.constructor !== Array) {\n                    throw new TypeError(\"Invalid reports for Dashboard, expected an array but got \" +\n                        config.reports.constructor.name + \".\");\n                }\n                config.reports.forEach(function (reportConfig) {\n                    if (!(reportConfig.report instanceof Report)) {\n                        throw new TypeError(\"Can't create dashboard, report is not an instance of Report: \" +\n                            reportConfig.report + \".\");\n                    }\n                });\n            }\n            if (config.requiredParams) {\n                if (config.requiredParams.constructor !== Array) {\n                    throw new TypeError(\"Invalid requiredParams for Dashboard, expected an Array but got \" +\n                        config.requiredParams.constructor.name + \".\");\n                }\n                config.requiredParams.forEach(function (param) {\n                    if (typeof (param) !== \"string\") {\n                        throw new TypeError(\"Invalid param name. Expected a string but got \" + param + \".\");\n                    }\n                });\n            }\n        };\n        /**\n         * Check if all the dashboard's required params exist, then set the 'ready' property to true/false.\n         * @returns {boolean}\n         */\n        Dashboard.prototype.checkReady = function () {\n            if (!this.requiredParams) {\n                this.ready = true;\n                return true;\n            }\n            var currentState = this.getState();\n            for (var _i = 0, _a = this.requiredParams; _i < _a.length; _i++) {\n                var param = _a[_i];\n                if (!currentState[param]) {\n                    this.ready = false;\n                    return false;\n                }\n            }\n            this.ready = true;\n            return true;\n        };\n        /**\n         * Returns true if all the dashboard's required params are available, false if not.\n         * @returns {boolean|*}\n         */\n        Dashboard.prototype.isReady = function () {\n            return this.ready;\n        };\n        /**\n         * If the dashboard has reports, run them, set the returned data to the dashboard's state, then refresh any\n         * widgets and buttons that need to be refreshed\n         * @returns {Promise}\n         */\n        Dashboard.prototype.runReports = function () {\n            if (!this.reports) {\n                return $q.when();\n            }\n            var dashboard = this, dashboardState = this.getState();\n            var reportPromises = this.reports.map(function (dashboardReport) {\n                return reports.runReport(dashboardReport.report, dashboardState, false).then(function (results) {\n                    if (results.data) {\n                        // replace the userId from the URL (e.g\"55133cede4b0fc25429d9770\") to meaningfull username (e.g\n                        // \"user tag\")\n                        var paramsData = results.data.constructor === Array ? results.data[0] : results.data;\n                        return state.mapParams(dashboardReport.dashboardParams, paramsData);\n                    }\n                });\n            });\n            return $q.all(reportPromises).then(function (reportsParams) {\n                for (var _i = 0, reportsParams_1 = reportsParams; _i < reportsParams_1.length; _i++) {\n                    var params = reportsParams_1[_i];\n                    dashboard.setParams(params);\n                }\n                if (dashboard.checkReady()) {\n                    dashboard.getAllWidgets().forEach(function (widget) {\n                        widget.refreshIfRequired(params);\n                    });\n                    if (dashboard.buttons) {\n                        dashboard.buttons.forEach(function (button) {\n                            button.refresh();\n                        });\n                    }\n                    delete dashboard._messages;\n                    state.setParams(params, false);\n                }\n            });\n        };\n        /**\n         * Extends the dashboard's params with the specified params\n         * @param {Object} params\n         */\n        Dashboard.prototype.setParams = function (params) {\n            if (!this.params) {\n                this.params = {};\n            }\n            utils.objects.extend(this.params, params);\n        };\n        /**\n         * Sets the Dashboard's widgets and sets the Dashboard as the widgets' parent\n         * @param widgets\n         */\n        Dashboard.prototype.setWidgets = function (widgets) {\n            this.widgets = widgets.map(function (widgetConfig) {\n                if (widgetConfig instanceof Widget) {\n                    widgetConfig.setParent(this);\n                    return widgetConfig;\n                }\n                return new Widget(widgetConfig, this);\n            }.bind(this));\n        };\n        /**\n         * Sets the Dashboard's buttons and sets the Dashboard as the widgetButton' parent\n         * @param buttons\n         */\n        Dashboard.prototype.setDashboardButtons = function (buttons) {\n            this.buttons = buttons.map(function (buttonConfig) {\n                return new WidgetButton(buttonConfig, this);\n            }.bind(this));\n        };\n        /**\n         * Sets the Dashboard's columns and sets the Dashboard as the columns' parent\n         * @param columns\n         */\n        Dashboard.prototype.setColumns = function (columns) {\n            this.columns = columns.map(function (columnConfig) {\n                return new DashboardLayout.Column(columnConfig, this);\n            }.bind(this));\n            this.columns = this.columns.filter(function (column) {\n                return column.show;\n            });\n            DashboardLayout.setColumnSpans(this.columns);\n        };\n        /**\n         * Sets the Dashboard's rows and sets the Dashboard as the rows' parent\n         * @param rows\n         */\n        Dashboard.prototype.setRows = function (rows) {\n            this.rows = rows.map(function (rowConfig) {\n                return new DashboardLayout.Row(rowConfig, this);\n            }.bind(this));\n        };\n        /**\n         * Updates any parsable properties according to the current dashboard and application state\n         * Also updates views\n         */\n        Dashboard.prototype.update = function () {\n            function getParsedValue(parsableProperty) {\n                var propertyConfig = dashboard.config[parsableProperty];\n                if (!propertyConfig) {\n                    return undefined;\n                }\n                if (Object(propertyConfig) === propertyConfig) {\n                    var parsedValue = {};\n                    for (var p in propertyConfig) {\n                        if (propertyConfig.hasOwnProperty(p)) {\n                            parsedValue[p] = parseStringValue(propertyConfig[p]);\n                        }\n                    }\n                    return parsedValue;\n                }\n                else {\n                    return parseStringValue(propertyConfig);\n                }\n            }\n            function parseStringValue(value) {\n                return utils.strings.parseValue(value, {}, dashboardState);\n            }\n            var dashboardState = this.getState(), dashboard = this;\n            for (var _i = 0, parsableProperties_2 = parsableProperties; _i < parsableProperties_2.length; _i++) {\n                var parsableProperty = parsableProperties_2[_i];\n                this[parsableProperty] = getParsedValue(parsableProperty);\n            }\n        };\n        /**\n         * Returns all the widgets in the dashboard: in columns, rows and the dashboard itself\n         */\n        Dashboard.prototype.getAllWidgets = function () {\n            var widgets = this.widgets || [];\n            if (this.columns) {\n                for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {\n                    var column = _a[_i];\n                    widgets = widgets.concat(column.getAllWidgets());\n                }\n            }\n            if (this.rows) {\n                for (var _b = 0, _c = this.rows; _b < _c.length; _b++) {\n                    var row = _c[_b];\n                    widgets = widgets.concat(row.getAllWidgets());\n                }\n            }\n            return widgets;\n        };\n        Dashboard.prototype.getState = function () {\n            return utils.objects.extend({}, state.currentParams, this.params, this.controlsList && this.controlsList.getParams());\n        };\n        function DashboardReport(config) {\n            this.report = config.report;\n            this.dashboardParams = config.dashboardParams;\n            this.useFirstIndex = !!config.useFirstIndex;\n        }\n        Dashboard.prototype.getDefaultUrlNavigation = function () {\n            function getNavigationUrl(navItem) {\n                if (navItem.url) {\n                    return navItem.url;\n                }\n                if (navItem.children && navItem.children.length > 0) {\n                    for (var childIndex in navItem.children) {\n                        if (navItem.children.hasOwnProperty(childIndex)) {\n                            var url = getNavigationUrl(navItem.children[childIndex]);\n                            if (url) {\n                                return url;\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.navigation) {\n                return getNavigationUrl(this.navigation);\n            }\n        };\n        return Dashboard;\n    }\n    DashboardClass.$inject =\n        [\"$q\", \"Widget\", \"WidgetButton\", \"DashboardLayout\", \"utils\", \"conditions\", \"Report\", \"reports\", \"state\",\n            \"ControlList\"];\n    angular.module(\"Widgets\").factory(\"Dashboard\", DashboardClass);\n})();\n","(function () {\n    'use strict';\n    function DashboardLayout(Widget, conditions) {\n        var SPAN_SIZE = 15;\n        function DashboardRow(config, dashboard) {\n            this.validate(config);\n            if (config.className) {\n                this.className = config.className;\n            }\n            if (config.show) {\n                this.show = conditions.validateConditions(config.show.conditions, {}, null);\n            }\n            else {\n                this.show = true;\n            }\n            if (this.show) {\n                if (config.widgets) {\n                    this.widgets = config.widgets.map(function (widgetConfig) {\n                        return new Widget(widgetConfig, dashboard);\n                    });\n                }\n                if (config.columns) {\n                    this.columns = config.columns.map(function (rowConfig) {\n                        return new DashboardColumn(rowConfig, dashboard);\n                    });\n                }\n            }\n        }\n        DashboardRow.prototype.validate = function (config) {\n            if (!config.widgets && !config.columns) {\n                throw new Error(\"Can't create DashboardRow, it must have either widgets or columns.\");\n            }\n            if (config.widgets && config.widgets.constructor !== Array) {\n                throw new TypeError(\"Invalid 'widgets' property for DashboardRow, expected an array but got \" +\n                    config.widgets.constructor.name + \".\");\n            }\n            if (config.columns && config.columns.constructor !== Array) {\n                throw new TypeError(\"Invalid 'columns' property for DashboardColumn, expected an array but got \" +\n                    config.rows.constructor.name + \".\");\n            }\n            if (config.weight) {\n                if (typeof (config.weight) !== \"number\") {\n                    throw new TypeError(\"Invalid weight for DashboardRow. Expected a number but got \" + config.weight +\n                        \".\");\n                }\n                if (config.weight <= 0) {\n                    throw new Error(\"Invalid weight for DashboardRow. It must be a positive number.\");\n                }\n            }\n        };\n        /**\n         * Returns all the widgets in the row: Columns in the row and the row itself\n         */\n        DashboardRow.prototype.getAllWidgets = function () {\n            var widgets = this.widgets || [];\n            if (this.columns) {\n                for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {\n                    var column = _a[_i];\n                    widgets = widgets.concat(column.getAllWidgets());\n                }\n            }\n            return widgets;\n        };\n        function DashboardColumn(config, dashboard) {\n            this.validate(config);\n            this.weight = config.weight || 1;\n            this.span = \"span\" + SPAN_SIZE;\n            if (config.show) {\n                this.show = conditions.validateConditions(config.show.conditions, {}, null);\n            }\n            else {\n                this.show = true;\n            }\n            if (config.className) {\n                this.className = config.className;\n            }\n            if (this.show) {\n                if (config.widgets) {\n                    this.widgets = config.widgets.map(function (widgetConfig) {\n                        return new Widget(widgetConfig, dashboard);\n                    });\n                }\n                if (config.rows) {\n                    this.rows = config.rows.map(function (rowConfig) {\n                        return new DashboardRow(rowConfig, dashboard);\n                    });\n                }\n            }\n        }\n        DashboardColumn.prototype.validate = function (config) {\n            if (config.show) {\n                if (!config.show.conditions) {\n                    throw new Error(\"Can't create dashboardLayout - 'show' exists without conditions.\");\n                }\n            }\n            if (!config.widgets && !config.rows) {\n                throw new Error(\"Can't create DashboardColumn, it must have either widgets or rows.\");\n            }\n            if (config.widgets && config.widgets.constructor !== Array) {\n                throw new TypeError(\"Invalid 'widgets' property for DashboardColumn, expected an array but got \" +\n                    config.widgets.constructor.name + \".\");\n            }\n            if (config.rows && config.rows.constructor !== Array) {\n                throw new TypeError(\"Invalid 'rows' property for DashboardColumn, expected an array but got \" +\n                    config.rows.constructor.name + \".\");\n            }\n            if (config.weight) {\n                if (typeof (config.weight) !== \"number\") {\n                    throw new TypeError(\"Invalid weight for DashboardColumn. Expected a number but got \" +\n                        config.weight + \".\");\n                }\n                if (config.weight <= 0) {\n                    throw new Error(\"Invalid weight for DashboardColumn. It must be a positive number.\");\n                }\n            }\n        };\n        /**\n         * Returns all the widget in the column: Rows inside the column and the column itself\n         */\n        DashboardColumn.prototype.getAllWidgets = function () {\n            var widgets = this.widgets || [];\n            if (this.rows) {\n                for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                    var row = _a[_i];\n                    widgets = widgets.concat(row.getAllWidgets());\n                }\n            }\n            return widgets;\n        };\n        /**\n         * Given an array of DashboardColumns, calculates each column's span according to its requested weight and sets\n         * the column's span accordingly.\n         * @param {[DashboardColumn]} columns\n         */\n        function setColumnSpans(columns) {\n            var totalWeight = columns.length === 1 ? columns[0].weight :\n                columns.reduce(function (previousValue, currentValue) {\n                    if (!currentValue.weight) {\n                        throw new Error(\"Can't set column classes, weight not found.\");\n                    }\n                    return (!isNaN(previousValue) ? previousValue : previousValue.weight || 0) + currentValue.weight;\n                });\n            columns.forEach(function (column) {\n                column.span = \"span\" + column.weight * SPAN_SIZE / totalWeight;\n            });\n        }\n        return {\n            Column: DashboardColumn,\n            Row: DashboardRow,\n            setColumnSpans: setColumnSpans\n        };\n    }\n    DashboardLayout.$inject = [\"Widget\", \"conditions\"];\n    angular.module(\"Widgets\").factory(\"DashboardLayout\", DashboardLayout);\n})();\n","(function () {\n    'use strict';\n    function widgetViews($q) {\n        function getView(viewType) {\n            var view = registeredViews[viewType];\n            if (!view) {\n                throw new Error(\"Unknown view, '\" + viewType + \"'.\");\n            }\n            return view;\n        }\n        var registeredViews = {};\n        return {\n            parseViewData: function (_view, data, params, rawData) {\n                var view = getView(_view.type);\n                if (view.dataParser) {\n                    return $q.when(view.dataParser(_view, data, params, rawData));\n                }\n                return $q.when(data);\n            },\n            registerView: function (viewId, view) {\n                if (!view) {\n                    view = {};\n                }\n                if (Object(view) !== view) {\n                    throw new TypeError(\"Can't register view, expected an object but got \" + view);\n                }\n                if (view.dataParser && view.dataParser.constructor !== Function) {\n                    throw new TypeError(\"Can't register view, expected a function for dataParser but got \" +\n                        view.dataParser);\n                }\n                registeredViews[viewId] = view;\n            },\n            validateSettings: function (viewId, settings) {\n                var view = getView(viewId);\n                if (!settings) {\n                    return true;\n                }\n                if (!view.validate) {\n                    return true;\n                }\n                return view.validate(settings);\n            },\n            viewExists: function (viewId) {\n                return !!registeredViews[viewId];\n            }\n        };\n    }\n    widgetViews.$inject = [\"$q\"];\n    angular.module(\"Widgets\").factory(\"widgetViews\", widgetViews);\n})();\n","(function () {\n    'use strict';\n    function widgetDirective(Widget, state, widgets) {\n        function linkFn(scope) {\n            scope.$on(\"$destroy\", function () {\n                scope.widget.destroy();\n                removeWidgetListeners();\n            });\n            scope.$watch(\"widgetModel\", function (value) {\n                if (value && !(value instanceof Widget)) {\n                    throw new TypeError(\"Invalid widgetModel for widget directive, expected an instance of Widget.\");\n                }\n                scope.widget = value;\n                setWidgetListeners(scope.widget);\n            });\n            function setWidgetListeners(widget) {\n                removeWidgetListeners();\n                if (widget) {\n                    if (Object.keys(widget.refreshOn).length) {\n                        state.onStateChange.subscribe(onStateChange);\n                    }\n                }\n                widgets.onRefreshAll.subscribe(onRefreshAll);\n            }\n            function removeWidgetListeners() {\n                state.onStateChange.unsubscribe(onStateChange);\n                widgets.onRefreshAll.unsubscribe(onRefreshAll);\n            }\n            function onStateChange(e, data) {\n                scope.widget.refreshIfRequired(data.params);\n            }\n            function onRefreshAll() {\n                scope.widget.refresh();\n            }\n        }\n        return {\n            templateUrl: \"scripts/modules/widgets/widget.directive/widget.directive.template.html\",\n            restrict: 'E',\n            replace: true,\n            scope: {\n                widgetModel: \"=\"\n            },\n            link: linkFn\n        };\n    }\n    /**\n     * Decorator for the original directive.\n     * @param Widget\n     * @param state\n     * @param widgets\n     * @returns {{templateUrl, restrict, replace, scope, link}|*}\n     */\n    function widgetExploreDirective(Widget, state, widgets) {\n        var origDirective = widgetDirective(Widget, state, widgets);\n        origDirective.templateUrl =\n            'scripts/modules/widgets/widget.directive/widget-explore.directive.template.html';\n        return origDirective;\n    }\n    widgetDirective.$inject = [\"Widget\", \"state\", \"widgets\"];\n    widgetExploreDirective.$inject = [\"Widget\", \"state\", \"widgets\"];\n    angular.module(\"Widgets\").directive(\"widget\", widgetDirective);\n    angular.module(\"Widgets\").directive(\"widgetExplore\", widgetExploreDirective);\n})();\n","angular.module(\"Explore.Filters\", [\"Explore\", \"DataQueries\", \"Search\", \"EventBus\"]);\n","(function () {\n    'use strict';\n    function FilterClass(DataEntityField, QueryOperator, search, FilterValidators) {\n        /**\n         * Constructor for Filter objects, used in the Explore page\n         * @param field\n         * @constructor\n         */\n        function Filter(field) {\n            if (!(field instanceof DataEntityField)) {\n                throw new TypeError(\"Invalid field for filter, expected an instance of DataEntityFilter.\");\n            }\n            this.field = field;\n            this.valueField = null;\n            this.operator = field.type.defaultOperator;\n            this.isDirty = true;\n            this._value = this.defaultValue;\n            this.validObj = {};\n            this.initValidState();\n            this.valueList = field.valueList;\n        }\n        Filter.prototype.copy = function (filter) {\n            if (!(filter instanceof Filter)) {\n                throw new TypeError(\"Can't copy Filter, expected an instance of Filter.\");\n            }\n            this.valueField = filter.valueField;\n            this._operator = filter._operator;\n            this._value = filter.value;\n            this._displayValue = filter.displayValue;\n            this.isDirty = filter.isDirty;\n            this.validObj = filter.validObj;\n            filter.validate(this._value);\n            return this;\n        };\n        Filter.prototype.initValidState = function () {\n            if (this.validObj) {\n                this.validObj.errorMessage = \"\";\n                this.validObj.showErrors = false;\n                this.validObj.isValid = true;\n                // Set isValidOnInit:\n                // If it requires value, and '_value\" and '_displayValue' are not set, set it to false\n                // Else set it to true\n                if (this.operator.requiresValue) {\n                    this.validObj.isValidOnInit =\n                        (angular.isDefined(this._value) || angular.isDefined(this._displayValue));\n                }\n                else {\n                    this.validObj.isValidOnInit = true;\n                }\n            }\n        };\n        Filter.copy = function (filter) {\n            var newFilter = new Filter(filter.field);\n            newFilter.copy(filter);\n            return newFilter;\n        };\n        /**\n         * Compares this filter to another one. Returns true if they are equal or false if they're not.\n         * @param anotherFilter\n         */\n        Filter.prototype.equals = function (anotherFilter) {\n            if (!anotherFilter) {\n                return false;\n            }\n            if (!(anotherFilter instanceof Filter)) {\n                return false;\n            }\n            if (anotherFilter.operator.id !== this.operator.id) {\n                return false;\n            }\n            if (typeof this.value !== typeof anotherFilter.value) {\n                return false;\n            }\n            if (typeof this.displayValue !== typeof anotherFilter.displayValue) {\n                return false;\n            }\n            if ((!!this.valueField).toString() !== (!!anotherFilter.valueField).toString()) {\n                return false;\n            }\n            if (this.valueField && anotherFilter.valueField) {\n                if (this.valueField.id !== anotherFilter.valueField.id ||\n                    this.valueField.entity.id !== anotherFilter.valueField.entity.id) {\n                    return false;\n                }\n            }\n            if (this.field.id !== anotherFilter.field.id) {\n                return false;\n            }\n            if (!angular.isObject(this.value)) {\n                if (this.value !== anotherFilter.value) {\n                    return false;\n                }\n            }\n            else {\n                if (JSON.stringify(this.value) !== JSON.stringify(anotherFilter.value)) {\n                    return false;\n                }\n            }\n            if (!angular.isObject(this.displayValue)) {\n                if (this.displayValue !== anotherFilter.displayValue) {\n                    return false;\n                }\n            }\n            else {\n                if (JSON.stringify(this.displayValue) !== JSON.stringify(anotherFilter.displayValue)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        Filter.prototype.__defineGetter__(\"operator\", function () {\n            return this._operator;\n        });\n        Filter.prototype.__defineSetter__(\"operator\", function (operator) {\n            if (!(operator instanceof QueryOperator)) {\n                throw new TypeError(\"Invalid operator, expected an instance of QueryOperator.\");\n            }\n            this._operator = operator;\n            if (this._value === undefined) {\n                this._value = this.defaultValue;\n            }\n            else {\n                try {\n                    this.validate(this._value);\n                }\n                catch (e) {\n                    this._value = this.defaultValue;\n                }\n            }\n            this.initValidState();\n            this.isDirty = true;\n        });\n        Filter.prototype.validate = function (value, isDisplay) {\n            var validatorsArr = getValidators.call(this, isDisplay) || [];\n            if (this._operator.requiresValue) {\n                validatorsArr.unshift(\"requiredValidator\");\n            }\n            if (validatorsArr.length === 0) {\n                return this;\n            }\n            for (var i = 0; i < validatorsArr.length; i++) {\n                var validator = FilterValidators.getValidator(validatorsArr[i], value); //also sets \"value\" as a member\n                // of Validator.\n                validator.validate();\n            }\n            return this;\n        };\n        //there two sets of validators - one for display values and one for actual values\n        //isDisplay - defines which set to use\n        function getValidators(isDisplay) {\n            /* jshint validthis: true */\n            var validators = this.operator.validators;\n            if (isDisplay) {\n                validators = this.operator.displayValidators;\n            }\n            if (angular.isArray(validators)) {\n                return angular.copy(validators);\n            }\n            return angular.copy(validators[this.field.type.id.toLowerCase()]);\n        }\n        Filter.prototype.__defineGetter__(\"inputTemplate\", function () {\n            var templateName = \"exploreFilter-\";\n            if (!this.operator.inputTemplate) {\n                return null;\n            }\n            if (typeof (this.operator.inputTemplate) === \"string\") {\n                templateName += this.operator.inputTemplate;\n            }\n            else {\n                templateName += this.operator.inputTemplate[this.field.type.id.toLowerCase()];\n            }\n            if (this.field.isSearchable && this.operator.supportsSearch) {\n                templateName += \"-searchable\";\n            }\n            return templateName;\n        });\n        Filter.prototype.__defineGetter__(\"searchSettings\", function () {\n            if (this._searchSettings === undefined) {\n                if (this.field.isSearchable) {\n                    this._searchSettings = search.getDataEntityFieldSearchSettings(this.field);\n                }\n                else {\n                    this._searchSettings = null;\n                }\n            }\n            return this._searchSettings;\n        });\n        Filter.prototype.__defineGetter__(\"defaultValue\", function () {\n            if (this.operator.defaultValue) {\n                return this.operator.defaultValue[this.field.type.id.toLowerCase()];\n            }\n        });\n        /*\n         * The getter and setter mechanism is used for validation and defining the filter as dirty every time you\n         * edit the filter content\n         */\n        Filter.prototype.__defineGetter__(\"value\", function () {\n            return this._value;\n        });\n        Filter.prototype.__defineSetter__(\"value\", function (value) {\n            if (value !== this._value) {\n                try {\n                    this.validate(value);\n                    this.validObj.isValid = true;\n                    this.validObj.showErrors = false;\n                }\n                catch (errorMessage) {\n                    this.validObj.isValid = false;\n                    this.validObj.errorMessage = errorMessage.message;\n                    this.validObj.showErrors = true;\n                }\n                this._value = this.field.type.parseValue(value);\n                this.isDirty = true;\n                this.validObj.isValidOnInit = true;\n            }\n        });\n        Filter.prototype.__defineGetter__(\"displayValue\", function () {\n            return this._displayValue;\n        });\n        Filter.prototype.__defineSetter__(\"displayValue\", function (displayValue) {\n            if (displayValue !== this._displayValue) {\n                try {\n                    this.validate(displayValue, true);\n                    this.validObj.isValid = true;\n                    this.validObj.showErrors = false;\n                }\n                catch (errorMessage) {\n                    this.validObj.isValid = false;\n                    this.validObj.errorMessage = errorMessage.message;\n                    this.validObj.showErrors = true;\n                }\n                this._displayValue = this.field.type.parseValue(displayValue);\n                this.isDirty = true;\n                this.validObj.isValidOnInit = true;\n            }\n        });\n        /**\n         * Returns a string that can be used by state\n         * @returns {string}\n         */\n        Filter.prototype.getParamValue = function () {\n            var valueParam = this.valueField ? \"[\" + this.valueField.entity.id + \".\" + this.valueField.id + \"]\" :\n                this.displayValue || this.value;\n            if (this.operator.valueToParam) {\n                valueParam =\n                    this.operator.valueToParam(valueParam, this.field.type.id.toLowerCase(), this.field.format);\n            }\n            return this.operator.paramOperator + valueParam;\n        };\n        return Filter;\n    }\n    FilterClass.$inject = [\"DataEntityField\", \"QueryOperator\", \"search\", \"FilterValidators\"];\n    angular.module(\"Explore.Filters\").factory(\"Filter\", FilterClass);\n})();\n","(function () {\n    'use strict';\n    function FilterCollectionClass(Filter, queryOperators, filters, EventBus, filtersToDataQueriesAdapter, $rootScope) {\n        /**\n         * Constructor for a collection of filters. Parallel to DataQueryCondition\n         * @constructor\n         */\n        function FilterCollection() {\n            var filters = [];\n            var operator = queryOperators.logicalOperators.AND;\n            var FILTERS_CHANGE_EVENT = \"filtersChange\";\n            var self = this;\n            var eventBus = EventBus.setToObject(this, [FILTERS_CHANGE_EVENT]);\n            this.__defineGetter__(\"filters\", function () {\n                return filters;\n            });\n            this.addFilter = function (filter, index) {\n                if (!(filter instanceof Filter)) {\n                    throw new TypeError(\"Invalid filter to add to FilterCollection, expected an instance of Filter.\");\n                }\n                // Avoid adding duplicate filters:\n                if (this.containsFilter(filter)) {\n                    return this;\n                }\n                this._isDirty = true;\n                if (typeof (index) === \"number\") {\n                    filters.splice(index, 0, filter);\n                }\n                else {\n                    filters.push(filter);\n                }\n                Object.observe(filter.validObj, observeFiltersState);\n                eventBus.triggerEvent(FILTERS_CHANGE_EVENT, { method: \"add\", filter: filter });\n                return this;\n            }.bind(this);\n            this.removeFilter = function (filter) {\n                var filterPosition = filters.indexOf(filter);\n                if (!~filterPosition) {\n                    return false;\n                }\n                this._isDirty = true;\n                filter.validObj.isValid = true;\n                filter.validObj.isValidOnInit = true;\n                Object.unobserve(filter.validObj, observeFiltersState);\n                var removedFilter = filters.splice(filterPosition, 1);\n                eventBus.triggerEvent(FILTERS_CHANGE_EVENT, { method: \"remove\", filter: removedFilter });\n                return this;\n            }.bind(this);\n            /**\n             * Returns true if the collection contains a filter - checked by value, not by pointer!\n             * @type {function(this:FilterCollectionClass.FilterCollection)|*}\n             */\n            this.containsFilter = function (filter) {\n                return filters.some(function (_filter) {\n                    return filter.equals(_filter);\n                });\n            }.bind(this);\n            function observeFiltersState() {\n                $rootScope.$apply(function () {\n                    self._isValid = isAllFiltersValid();\n                });\n            }\n            this.clearFilters = function () {\n                while (filters.length) {\n                    filters.pop();\n                }\n                eventBus.triggerEvent(FILTERS_CHANGE_EVENT, { method: \"clear\" });\n                return this;\n            };\n            this.__defineGetter__(\"operator\", function () {\n                return operator;\n            });\n            this.__defineGetter__(\"isValid\", function () {\n                if (this._isValid === undefined) {\n                    return true;\n                }\n                return this._isValid;\n            });\n            this.__defineSetter__(\"operator\", function (value) {\n                var logicalOperator = queryOperators.logicalOperators[value];\n                if (!logicalOperator) {\n                    throw new Error(\"Invalid operator for FilterCollection, expected either 'AND' or 'OR'\");\n                }\n                this._isDirty = true;\n                operator = logicalOperator;\n            }.bind(this));\n            this.copy = function (filterCollection) {\n                if (!(filterCollection instanceof FilterCollection)) {\n                    throw new TypeError(\"Can't copy FilterCollection, expected an instance of FilterCollection.\");\n                }\n                filters = filterCollection.filters.map(function (filter) {\n                    return Filter.copy(filter);\n                });\n                operator = filterCollection.operator;\n                this._isDirty = filterCollection._isDirty;\n            };\n            this.unDirty = function () {\n                var changedFilters = [];\n                this._isDirty = false;\n                filters.forEach(function (filter) {\n                    if (filter.isDirty) {\n                        filter.isDirty = false;\n                        changedFilters.push(filter);\n                    }\n                });\n                if (changedFilters.length) {\n                    eventBus.triggerEvent(FILTERS_CHANGE_EVENT, { method: \"unDirty\", filters: changedFilters });\n                }\n                return this;\n            };\n            this.hasFilterForField = function (dataEntityField) {\n                return filters.some(function (filter) {\n                    return filter.field === dataEntityField;\n                });\n            };\n            function isAllFiltersValid() {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (!filter.validObj.isValid || !filter.validObj.isValidOnInit) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        FilterCollection.copy = function (filterCollection) {\n            var newFilterCollection = new FilterCollection();\n            newFilterCollection.copy(filterCollection);\n            return newFilterCollection;\n        };\n        FilterCollection.prototype.__defineGetter__(\"isDirty\", function () {\n            if (this._isDirty) {\n                return true;\n            }\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                if (filter.isDirty) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        /**\n         * Returns an object with the collection's filters as an array of name/value objects.\n         * In the future, should send also the operator of the FilterCollection (AND/OR), when it's used.\n         * @returns {*}\n         */\n        FilterCollection.prototype.getParams = function () {\n            return this.filters.map(function (filter) {\n                var obj = {};\n                obj[filter.field.entity.id + \".\" + filter.field.id] = filter.getParamValue();\n                return obj;\n            });\n        };\n        /**\n         * Accepts params and sets the collection's filters accordingly.\n         * @param params\n         * @returns {FilterCollection}\n         */\n        FilterCollection.prototype.setParams = function (params) {\n            this.clearFilters();\n            if (!params) {\n                return this;\n            }\n            var self = this;\n            if (params.constructor !== Array) {\n                params = [params];\n            }\n            var filter;\n            params.forEach(function (paramObj) {\n                for (var paramName in paramObj) {\n                    if (paramObj.hasOwnProperty(paramName)) {\n                        filter = filters.getFilterFromParam(paramName, paramObj[paramName]);\n                        if (filter) {\n                            self.addFilter(filter);\n                        }\n                    }\n                }\n            });\n            return this;\n        };\n        /**\n         *\n         * @returns {*}\n         */\n        FilterCollection.prototype.getDataQuery = function () {\n            if (!this.filters.length) {\n                return {};\n            }\n            return { conditions: filtersToDataQueriesAdapter.filterCollectionToConditionTerm(this) };\n        };\n        return FilterCollection;\n    }\n    FilterCollectionClass.$inject =\n        [\"Filter\", \"queryOperators\", \"filters\", \"EventBus\", \"filtersToDataQueriesAdapter\", \"$rootScope\"];\n    angular.module(\"Explore.Filters\").factory(\"FilterCollection\", FilterCollectionClass);\n})();\n","(function () {\n    'use strict';\n    function filters(Filter, dataEntities, queryOperators) {\n        /**\n         * Given a param name and a param value, returns a new Filter that matches the param\n         * @param paramName\n         * @param paramValue\n         * @returns {*}\n         */\n        function getFilterFromParam(paramName, paramValue) {\n            if (paramValue === null || paramValue === undefined || paramValue === \"_null_\") {\n                return null;\n            }\n            if (typeof (paramValue) !== \"string\") {\n                throw new TypeError(\"Invalid param value, expected a string but got \" + typeof (paramValue));\n            }\n            var entityField = paramName.split(\".\"), dataEntityField = dataEntities.getField(entityField[0], entityField[1]);\n            if (!dataEntityField) {\n                return null;\n            }\n            var filter = new Filter(dataEntityField);\n            var paramOperator = queryOperators.getParamOperator(paramValue), paramValueWithoutOperator = paramValue.replace(paramOperator.paramOperator, \"\");\n            var valueFieldMatch = paramValueWithoutOperator.match(/\\[((\\w+).(\\w+))\\]$/);\n            if (valueFieldMatch) {\n                var valueField = dataEntities.getField(valueFieldMatch[2], valueFieldMatch[3]);\n                if (!valueField) {\n                    console.warn(\"WARNING: Unknown field, '\" + valueFieldMatch[1] + \", treating '\" +\n                        paramValueWithoutOperator + \"' as a string value.\");\n                }\n                filter.valueField = valueField;\n            }\n            else {\n                filter.value = paramOperator.paramToValue ?\n                    paramOperator.paramToValue(paramValueWithoutOperator, filter.field.type.id.toLowerCase()) :\n                    paramValueWithoutOperator;\n                // Use display value only for fields that support it\n                if (paramOperator.paramToDisplayValue) {\n                    filter.displayValue =\n                        paramOperator.paramToDisplayValue(paramValueWithoutOperator, filter.field.type.id.toLowerCase(), filter.field.format);\n                }\n            }\n            filter.operator = paramOperator;\n            return filter;\n        }\n        return {\n            getFilterFromParam: getFilterFromParam\n        };\n    }\n    filters.$inject = [\"Filter\", \"dataEntities\", \"queryOperators\"];\n    angular.module(\"Explore.Filters\").factory(\"filters\", filters);\n})();\n","(function () {\n    'use strict';\n    function filtersToDataQueriesAdapter(queryOperators, Filter) {\n        /**\n         * Converts a Filter object to its parallel DataQueryConditionTerm configuration\n         * @param filterCollection\n         */\n        function filterCollectionToConditionTerm(filterCollection) {\n            if (filterCollection.constructor.name !== \"FilterCollection\") {\n                throw new TypeError(\"Invalid filterCollection, expected an instance of FilterCollection but got \" +\n                    filterCollection);\n            }\n            var conditionTerm = {\n                operator: filterCollection.operator\n            };\n            conditionTerm.terms = filterCollection.filters.map(filterToConditionField);\n            return conditionTerm;\n        }\n        var filterToConditionsMapping = {\n            \"DATE_TIME\": {\n                notEquals: function (filter) {\n                    //filter. value has timeStart and timeEnd\n                    //create 2 conditions: <timeStart and >timeEnd\n                    //return conditionTerm\n                    var startFilter = Filter.copy(filter);\n                    startFilter.operator = queryOperators.operators.get(\"lesserThan\");\n                    startFilter.value = filter.value.timeStart;\n                    var conditionFieldTimeStart = filterToConditionField(startFilter);\n                    var endFilter = Filter.copy(filter);\n                    endFilter.operator = queryOperators.operators.get(\"greaterThan\");\n                    endFilter.value = filter.value.timeEnd;\n                    var conditionFieldTimeEnd = filterToConditionField(endFilter);\n                    var conditionTerm = {\n                        operator: \"OR\",\n                        type: \"term\"\n                    };\n                    conditionTerm.terms = [conditionFieldTimeStart, conditionFieldTimeEnd];\n                    return conditionTerm;\n                },\n                equals: function (filter) {\n                    //filter. value has timeStart and timeEnd\n                    //create range condition\n                    var newFilter = Filter.copy(filter);\n                    newFilter.operator = queryOperators.operators.get(\"dateRange\");\n                    return filterToConditionField(newFilter);\n                }\n            }\n        };\n        /**\n         * Converts a Filter object to its parallel DataQueryConditionField configuration\n         * @param filter\n         * @returns {{type: string, id: *, operator: *, value: *}}\n         */\n        function filterToConditionField(filter) {\n            if (filter.constructor.name !== \"Filter\") {\n                throw new TypeError(\"Invalid filter, expected an instance of Filter but got \" + filter);\n            }\n            if (filterToConditionsMapping[filter.field.type.id] &&\n                filterToConditionsMapping[filter.field.type.id][filter.operator.id]) {\n                //function that translate the filter to several conditions\n                return filterToConditionsMapping[filter.field.type.id][filter.operator.id](filter);\n            }\n            var conditionField = {\n                type: \"field\",\n                id: filter.field.id,\n                operator: filter.operator.id,\n                entity: filter.field.entity.id\n            };\n            if (filter.valueField) {\n                conditionField.valueField = { id: filter.valueField.id, entity: filter.valueField.entity.id };\n            }\n            else {\n                conditionField.value = filter.value;\n            }\n            return conditionField;\n        }\n        return {\n            filterCollectionToConditionTerm: filterCollectionToConditionTerm\n        };\n    }\n    filtersToDataQueriesAdapter.$inject = [\"queryOperators\", \"Filter\"];\n    angular.module(\"Explore.Filters\").factory(\"filtersToDataQueriesAdapter\", filtersToDataQueriesAdapter);\n})();\n","(function () {\n    'use strict';\n    /**\n     * The filters selection for the explore widget\n     * @param Filter\n     * @param FilterCollection\n     * @param dataEntities\n     * @param DataEntity\n     */\n    function exploreFiltersDirective(Filter, FilterCollection, dataEntities, DataEntity) {\n        function linkFn(scope, element, attrs, ngModel) {\n            function init() {\n                filtersCollection = new FilterCollection();\n                scope.filtersCollection = filtersCollection;\n                scope.applyFilters = applyFilters;\n                scope.toggleAddFilter = function () {\n                    scope.showAddFilter = !scope.showAddFilter;\n                };\n                scope.addFilter = addFilter;\n                scope.removeFilter = removeFilter;\n                scope.$watch(\"entity\", function (entity) {\n                    if (entity !== scope.entity) {\n                        scope.entity = entity;\n                        setAvailableFields();\n                    }\n                });\n                scope.$watch(\"excludedFields\", setAvailableFields);\n                if (ngModel) {\n                    ngModel.$render = function () {\n                        if (ngModel.$viewValue) {\n                            filtersCollection = FilterCollection.copy(ngModel.$viewValue);\n                            ngModel.$viewValue.onFiltersChange.subscribe(onModelChange);\n                        }\n                        else {\n                            filtersCollection = new FilterCollection();\n                        }\n                        scope.filtersCollection = filtersCollection;\n                    };\n                }\n            }\n            /**\n             * Get available fields for filters\n             */\n            function setAvailableFields() {\n                if (!scope.entity) {\n                    return;\n                }\n                scope.filterGroups = [getEntityFilterGroup(scope.entity)];\n                if (scope.entity.linkedEntities) {\n                    scope.entity.linkedEntities.forEach(function (linkedEntity) {\n                        scope.filterGroups.push(getEntityFilterGroup(linkedEntity));\n                    });\n                }\n            }\n            function getEntityFilterGroup(linkedEntity) {\n                var entity = linkedEntity instanceof DataEntity ? linkedEntity :\n                    dataEntities.getEntityById(linkedEntity.entity);\n                var availableFields = entity.fieldsArray;\n                // remove internal fields\n                availableFields = availableFields.filter(function (field) {\n                    return !(~field.attributes.indexOf(\"internal\"));\n                });\n                // exclude fields according to ID\n                if (scope.excludedFields) {\n                    availableFields = availableFields.filter(function (field) {\n                        return !~scope.excludedFields.indexOf(field.id);\n                    });\n                }\n                //exclude all fields that specific for users entity\n                if (scope.entity.name !== \"Users\") {\n                    availableFields = availableFields.filter(function (field) {\n                        return !(field.shownForSpecificEntity !== undefined &&\n                            field.entity.id === field.shownForSpecificEntity);\n                    });\n                }\n                return { name: entity.name, fields: availableFields, isOpen: true };\n            }\n            function onModelChange() {\n                scope.filtersCollection = filtersCollection = FilterCollection.copy(ngModel.$viewValue);\n            }\n            function applyFilters() {\n                if (!filtersCollection.isDirty) {\n                    return false;\n                }\n                ngModel.$setViewValue(filtersCollection);\n                if (scope.onFiltersChange) {\n                    scope.onFiltersChange({ filters: filtersCollection });\n                }\n                filtersCollection.unDirty();\n            }\n            function addFilter(dataEntityField) {\n                var newFilter = new Filter(dataEntityField);\n                filtersCollection.addFilter(newFilter);\n                scope.showAddFilter = false;\n            }\n            function removeFilter(filter) {\n                // Remove filter from local collection\n                filtersCollection.removeFilter(filter);\n                if (scope.onFiltersChange) {\n                    // Add a flag indicating filters were removed from this collection\n                    filtersCollection.filtersRemoved = true;\n                    // Update URL and state parameters\n                    scope.onFiltersChange({ filters: filtersCollection });\n                }\n            }\n            var filtersCollection;\n            init();\n        }\n        return {\n            templateUrl: \"scripts/modules/explore/filters/filters.directive/explore.filters.directive.template.html\",\n            restrict: 'E',\n            require: '?ngModel',\n            replace: true,\n            scope: {\n                entity: \"=\",\n                excludedFields: \"=\",\n                onFiltersChange: \"&\"\n            },\n            link: linkFn\n        };\n    }\n    angular.module(\"Explore.Filters\").directive(\"exploreFilters\", [\"Filter\", \"FilterCollection\", \"dataEntities\", \"DataEntity\", exploreFiltersDirective]);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"FilterValidatorsModule\", []).factory(\"FilterValidators\", [\"utils\", function (utils) {\n            function NumberRangeValidator(validationObj) {\n                this.validationObj = validationObj;\n                this.validate = function () {\n                    new RequiredValidator(this.validationObj.fromValue).validate();\n                    new RequiredValidator(this.validationObj.toValue).validate();\n                    var toValueAsNumber = parseFloat(this.validationObj.toValue);\n                    var fromValueAsNumber = parseFloat(this.validationObj.fromValue);\n                    if (toValueAsNumber < fromValueAsNumber) {\n                        throw new Error(\"Low value greater than the high value\");\n                    }\n                    if (this.validationObj.min && fromValueAsNumber < this.validationObj.min) {\n                        throw new Error(\"Minimum value allowed is \" + this.validationObj.min);\n                    }\n                    if (this.validationObj.max && toValueAsNumber > this.validationObj.max) {\n                        throw new Error(\"Minimum value allowed is \" + this.validationObj.max);\n                    }\n                };\n            }\n            function RequiredValidator(val) {\n                this.val = val;\n                this.validate = function () {\n                    if (this.isEmpty(this.val)) {\n                        throw new Error(\"The value is required\");\n                    }\n                };\n                this.isEmpty = function (val) {\n                    return val === undefined || val === null || val === \"\";\n                };\n            }\n            function DateValidator(dateVal) {\n                this.dateVal = dateVal;\n                this.validate = function () {\n                    // momentjs returns a valid object if dateVal is just a literal object! Stupid!\n                    if (angular.isObject(this.dateVal) && this.dateVal.timeStart && this.dateVal.timeEnd) {\n                        if (!utils.date.getMoment(this.dateVal.timeStart).isValid() ||\n                            !utils.date.getMoment(this.dateVal.timeEnd).isValid() ||\n                            utils.date.getDatesSpan(this.dateVal.timeStart, this.dateVal.timeEnd).length !== 0) {\n                            throw new Error(\"Not a valid date\");\n                        }\n                    }\n                    if (!utils.date.getMoment(this.dateVal).isValid()) {\n                        throw new Error(\"Not a valid date\");\n                    }\n                };\n            }\n            function DateRangeValidator(dateVal) {\n                this.dateVal = dateVal;\n                this.validate = function () {\n                    if (angular.isObject(this.dateVal)) {\n                        if (!this.dateVal.timeStart || !this.dateVal.timeEnd) {\n                            throw new ReferenceError(\"Time object must have timeStart and timeEnd\");\n                        }\n                        if (!utils.date.getMoment(this.dateVal.timeStart).isValid() ||\n                            !utils.date.getMoment(this.dateVal.timeEnd).isValid()) {\n                            throw new RangeError(\"Not a valid date range\");\n                        }\n                        return;\n                    }\n                    // dateVal is not an object\n                    if (!utils.date.getMoment(this.dateVal).isValid()) {\n                        throw new RangeError(\"Not a valid date range\");\n                    }\n                };\n            }\n            function IsArrayValidator(val) {\n                this.val = val;\n                this.validate = function () {\n                    if (!angular.isArray(this.val)) {\n                        throw new Error(\"The value must be array\");\n                    }\n                };\n            }\n            function IsDurationValidator(val) {\n                this.val = val;\n                this.validate = function () {\n                    //regexp pattern for duration in the format hh:mm or hh:mm:ss\n                    var pattern = /^(([01]\\d)|(2[0-3]))(:[0-5]\\d){1,2}$/;\n                    if (!pattern.test(val)) {\n                        throw new Error(\"The value is not hh:mm:ss format\");\n                    }\n                };\n            }\n            var validators = {\n                \"numberRangeValidator\": NumberRangeValidator,\n                \"dateRangeValidator\": DateRangeValidator,\n                \"requiredValidator\": RequiredValidator,\n                \"dateValidator\": DateValidator,\n                \"isArrayValidator\": IsArrayValidator,\n                \"isDurationValidator\": IsDurationValidator\n            };\n            return {\n                getValidator: function (validatorName, validatorValue) {\n                    var Validator = validators[validatorName];\n                    return new Validator(validatorValue);\n                }\n            };\n        }]);\n}());\n","angular.module(\"Explore\", [\"Utils\", \"DataEntities\", \"DataQueries\", \"State\", \"Explore.Filters\", \"Explore.DataViews\"]);\n","(function () {\n    \"use strict\";\n    function ExploreClass(appConfig, FilterCollection, DataEntity, TableDataView, state, queryOperators, Filter, graphs, dataViewTypes, Graph, utils) {\n        /**\n         * Gets the default filters collection for the Explore model\n         * @param explore\n         * @param existingFilters Existing filters collection, i.e from params, to use in the default filters. If\n         *     something is missing from the existing filters, it's added here.\n         * @returns {*}\n         */\n        function getDefaultFilters(explore, existingFilters) {\n            if (!explore.dataEntity.performanceField) {\n                return null;\n            }\n            var defaultFilters = existingFilters || new FilterCollection();\n            // The first is for events, the second for sessions:\n            var timeField = explore.dataEntity.fields.get(\"event_time_utc\") ||\n                explore.dataEntity.fields.get(\"session_time_utc\");\n            var eventScoreField = explore.dataEntity.performanceField.field;\n            if (!defaultFilters.hasFilterForField(timeField)) {\n                var timeFilter = new Filter(timeField);\n                var daysAgo = appConfig.getConfigValue('ui.explore', 'daysRange');\n                timeFilter.value = {\n                    timeStart: utils.date.getMoment('-' + daysAgo + 'days').startOf(\"day\").toDate(),\n                    timeEnd: utils.date.getMoment('now').endOf(\"day\").toDate()\n                };\n                timeFilter.operator = queryOperators.operators.get(\"dateRange\");\n                defaultFilters.addFilter(timeFilter, 0);\n            }\n            if (!defaultFilters.hasFilterForField(eventScoreField)) {\n                var scoreFilter = new Filter(eventScoreField);\n                scoreFilter.value = explore.dataEntity.performanceField.value;\n                scoreFilter.operator = queryOperators.operators.get(\"greaterThanOrEquals\");\n                defaultFilters.addFilter(scoreFilter, 1);\n            }\n            //make sure the score filter value is formatted as a number\n            defaultFilters.filters.forEach(function (filter) {\n                if (filter.field.id.indexOf(\"score\") > -1) {\n                    filter.value = Number(filter.value);\n                }\n            });\n            defaultFilters.unDirty();\n            return defaultFilters;\n        }\n        /**\n         * Returns the IDs of fields that are in default filters. To be used by the filters directive, which should\n         * exclude them.\n         * @returns {*|Array}\n         */\n        function getDefaultFilterFieldIds(explore) {\n            var defaultFilterIds = explore.defaultFilters && explore.defaultFilters.filters.map(function (filter) {\n                return filter.field.id;\n            });\n            // TODO: This is a bit ugly, should be replaced to use only event_time.\n            //(hack) The defaultFilterIds is used originally for the default filters, but it is used here for excluding\n            // filters from being manually added.\n            if (defaultFilterIds && ~defaultFilterIds.indexOf(\"event_time_utc\")) {\n                defaultFilterIds.push(\"event_time\");\n            }\n            if (defaultFilterIds && ~defaultFilterIds.indexOf(\"session_time_utc\")) {\n                [\"start_time\", \"start_time_utc\", \"end_time\", \"end_time_utc\"].forEach(function (value) {\n                    defaultFilterIds.push(value);\n                });\n            }\n            return defaultFilterIds;\n        }\n        /**\n         * Since filters are provided in the URL as a single string, there's a need to parse them into an object that\n         * the FilterCollection can read. getFilterParams does just that.\n         * @param filterParams\n         * @returns {*}\n         */\n        function getFilterParams(filterParams) {\n            // no filters\n            if (filterParams === null) {\n                filterParams = [];\n            }\n            // In case we got string instead of array, we need to parse it into an array\n            if (filterParams && typeof (filterParams) === \"string\") {\n                // split the string of the filters to array of filters. The format is:\n                // entity.field=value(,entity.field=value)* Please note that the value might contains commas\n                var filterParamsArr = filterParams.split(\",\");\n                filterParams = [];\n                for (var i = 0; i < filterParamsArr.length; i++) {\n                    var rawFilter = filterParamsArr[i];\n                    if (rawFilter) {\n                        //each filter looks like this: <filter Name>=<filterValue> .the operator is part of filterValue\n                        // (only if different than '=').\n                        var rawFilterParts = rawFilter.match(/^(\\w+\\.\\w+)=(.+)$/);\n                        if (rawFilterParts) {\n                            // add filter part to result\n                            var obj = {};\n                            obj[rawFilterParts[1]] = rawFilterParts[2] === \"_null_\" ? null : rawFilterParts[2];\n                            filterParams[filterParams.length] = obj;\n                        }\n                        else {\n                            // the filter is part of previous filter\n                            if (filterParams.length > 0) {\n                                // add it as part of the value of the previous part\n                                var prevObj = filterParams[filterParams.length - 1];\n                                prevObj[Object.keys(prevObj)[0]] += \",\" + rawFilter;\n                            }\n                            else {\n                                console.warn(\"Invalid filter param, '\" + rawFilter + \"', ignoring.\");\n                            }\n                        }\n                    }\n                }\n            }\n            return filterParams;\n        }\n        function validateSettings(settings) {\n            for (var settingName in settings) {\n                if (settings.hasOwnProperty(settingName)) {\n                    if (!settingProperties.has(settingName)) {\n                        throw new Error(\"Unknown setting for Explore, '\" + settingName + \"'.\");\n                    }\n                }\n            }\n        }\n        function setDataViews(explore) {\n            if (explore.mode === dataViewTypes.types.table) {\n                // table view\n                explore.dataViews = [new TableDataView(explore)];\n            }\n            else {\n                // graphs view\n                if (explore.addedGraphs) {\n                    // go over existing graph and refresh the data\n                    explore.dataViews = explore.addedGraphs.map(function (dataView) {\n                        dataView.updateReport(true);\n                        return dataView;\n                    });\n                }\n                else {\n                    explore.dataViews = [];\n                }\n            }\n        }\n        function getGraphsParams(explore) {\n            var graphIds = explore.addedGraphs && explore.addedGraphs.length ?\n                explore.addedGraphs.map(function (dataView) {\n                    return dataView.graph.id;\n                }).join(\",\") :\n                null;\n            return { graphs: graphIds };\n        }\n        function getGraphsParamsId(explore) {\n            var graphIds = explore.addedGraphs && explore.addedGraphs.length ?\n                explore.addedGraphs.map(function (dataView) {\n                    return dataView.graph.id;\n                }).join(\",\") :\n                null;\n            return graphIds;\n        }\n        function setGraphsParam(explore) {\n            state.setParams(getGraphsParams(explore));\n        }\n        // viewOnly for packages: to remove filtering and export\n        var settingProperties = new Set([\"viewOnly\", \"includeExport\"]);\n        /**\n         * Constructor for Explore model objects\n         * @param dataEntity\n         * @param settings\n         * @param params\n         * @constructor\n         */\n        function Explore(dataEntity, settings, params) {\n            var explore = this;\n            if (dataEntity) {\n                if (!(dataEntity instanceof DataEntity)) {\n                    throw new TypeError(\"Invalid data entity for Explore object. Expected an instance of DataEntity.\");\n                }\n                this.dataEntity = dataEntity;\n                // Do not update URL (setToUrl = false)\n                state.setParams({ \"eventsEntity\": dataEntity.eventsEntity }, false);\n                this._mode = dataViewTypes.types[params.mode || \"table\"];\n                // setting properties\n                this.includeExport = settings.includeExport;\n                this.viewOnly = settings.viewOnly;\n                this.addedGraphs = [];\n                graphs.getGraphsForDataEntity(dataEntity).then(function (entityGraphs) {\n                    explore.graphs = entityGraphs.map(function (graph) {\n                        graph.added = false;\n                        return graph;\n                    });\n                    //This is for adding the graph from the params into the graph list of the explore\n                    if (params.graphs && typeof (params.graphs) === \"string\") {\n                        // calculate if we should move the the graphs tab\n                        var changeViewToGraphs = shouldChangeViewToGraphs(params);\n                        // Add the graphs to the explore (might be hidden)\n                        params.graphs.split(\",\").forEach(function (graphId) {\n                            explore.addGraph(graphId, false, changeViewToGraphs);\n                        });\n                    }\n                });\n            }\n            else {\n                throw new Error(\"Can't create Explore object, missing dataEntityId.\");\n            }\n            this.filters = new FilterCollection();\n            if (settings) {\n                validateSettings(settings);\n            }\n            this.settings = settings || {};\n            this.defaultFilters = getDefaultFilters(this);\n            this.defaultFilterFieldIds = getDefaultFilterFieldIds(this);\n            this.addedAllGraphs = false;\n            /*\n             * First create the data views of the explore page,\n             * then set the page's parameters using setParams\n             * (which recursively sets the child data views' params).\n             */\n            setDataViews(this);\n            if (params) {\n                explore.setParams(params);\n            }\n        }\n        Explore.prototype.__defineGetter__(\"mode\", function () {\n            return this._mode;\n        });\n        Explore.prototype.__defineSetter__(\"mode\", function (mode) {\n            if (mode !== this._mode) {\n                this._mode = mode;\n                setDataViews(this);\n                state.setParams({ mode: mode.id });\n            }\n        });\n        Explore.prototype.getParams = function () {\n            var params = {\n                filters: this.filters.getParams(),\n                graphs: getGraphsParamsId(this)\n            };\n            if (this.defaultFilters) {\n                params.default_filters = this.defaultFilters.getParams();\n            }\n            return params;\n        };\n        Explore.prototype.getState = function () {\n            return state.currentParams;\n        };\n        /**\n         * calculate if we should move the the graphs tab\n         * @param obj the container of the mode\n         * @returns {*|boolean} true if we should use the graphs view\n         */\n        function shouldChangeViewToGraphs(obj) {\n            return obj.mode && (obj.mode === \"graphs\" || obj.mode === dataViewTypes.types.graphs);\n        }\n        Explore.prototype.setParams = function (params) {\n            var filterParams;\n            var defaultFilterParams;\n            if (!params) {\n                return this;\n            }\n            if (params.filters !== undefined) {\n                // Get new filters\n                filterParams = getFilterParams(params.filters);\n            }\n            else if (params.initFilters) {\n                // Reset flag\n                params.initFilters = false;\n                // Empty filters\n                filterParams = [];\n            }\n            // If defined, set new filters\n            if (filterParams) {\n                this.filters.setParams(filterParams);\n            }\n            if (params.default_filters !== undefined) {\n                // Get new default filters\n                defaultFilterParams = getFilterParams(params.default_filters);\n            }\n            else if (params.initDefaultFilters) {\n                // Reset flag\n                params.initDefaultFilters = false;\n                // Empty default filters\n                defaultFilterParams = [];\n            }\n            // If defined, set new default filters\n            if (defaultFilterParams && this.defaultFilters) {\n                this.defaultFilters = getDefaultFilters(this, this.defaultFilters.setParams(defaultFilterParams));\n            }\n            if (this.dataViews) {\n                this.dataViews.forEach(function (dataView) {\n                    if (params.initParams) {\n                        params.initParams = false;\n                        // Override with default parameters\n                        params = dataView.getDefaultParams();\n                    }\n                    var dataViewChanged = dataView.setParams(params);\n                    if (dataViewChanged || filterParams || defaultFilterParams) {\n                        dataView.update();\n                    }\n                });\n            }\n            if (params.graphs && typeof (params.graphs) === \"string\") {\n                var explore = this;\n                // calculate if we should move the the graphs tab\n                var changeViewToGraphs = shouldChangeViewToGraphs(explore);\n                // Add the graphs to the explore (might be hidden)\n                params.graphs.split(\",\").forEach(function (graphId) {\n                    explore.addGraph(graphId, false, changeViewToGraphs);\n                });\n            }\n            return this;\n        };\n        Explore.prototype.unDirty = function () {\n            this.filters.unDirty();\n            if (this.defaultFilters) {\n                this.defaultFilters.unDirty();\n            }\n        };\n        Explore.prototype.updateView = function () {\n            if (this.dataViews) {\n                this.dataViews.forEach(function (dataView) {\n                    dataView.update();\n                });\n            }\n            return this;\n        };\n        /**\n         * Gets the DataQuery config (conditions only) relevant to the filters and default filters of the Explore\n         * object.\n         * @returns {{conditions: (*|Array|string)}}\n         */\n        Explore.prototype.getFiltersDataQuery = function () {\n            var filtersConditions = this.filters.getDataQuery().conditions, defaultFiltersConditions = this.defaultFilters && this.defaultFilters.getDataQuery().conditions;\n            var dataQueryConfig = {\n                conditions: filtersConditions\n            };\n            if (!filtersConditions) {\n                dataQueryConfig.conditions = defaultFiltersConditions;\n            }\n            else if (defaultFiltersConditions) {\n                dataQueryConfig.conditions.terms =\n                    dataQueryConfig.conditions.terms.concat(defaultFiltersConditions.terms);\n            }\n            return dataQueryConfig;\n        };\n        /**\n         * Adds a graph to the dataViews of the Explore object.\n         * @param graph\n         * @param updateParams\n         * @param changeViewToGraphs\n         * @changeViewToGraphs true if we want to change the view to graphs\n         */\n        Explore.prototype.addGraph = function (graph, updateParams, changeViewToGraphs) {\n            if (typeof (graph) === \"string\") {\n                graph = this.getGraphById(graph);\n            }\n            if (!graph) {\n                return this;\n            }\n            if (!(graph instanceof Graph)) {\n                throw new TypeError(\"Can't add graph to explore, expected an instance of Graph.\");\n            }\n            if (graphExistsInExplore(this, graph.id)) {\n                return this;\n            }\n            graph.dataView = graph.getDataView(this);\n            // The default is to change the view (if the changeViewToGraphs is undefined)\n            if (changeViewToGraphs === undefined || changeViewToGraphs) {\n                this.dataViews.splice(0, 0, graph.dataView);\n            }\n            this.addedGraphs.splice(0, 0, graph.dataView);\n            if (this.addedGraphs.length === this.graphs.length) {\n                this.addedAllGraphs = true;\n            }\n            if (updateParams !== false) {\n                setGraphsParam(this);\n            }\n            graph.added = true;\n            return this;\n        };\n        function graphExistsInExplore(explore, graphId) {\n            return explore.addedGraphs.some(function (graphDataView) {\n                return graphDataView.graph.id === graphId;\n            });\n        }\n        /**\n         * Removes a graph that was added to the Explore object\n         * @param graph\n         * @returns {Explore}\n         */\n        Explore.prototype.removeGraph = function (graph) {\n            if (!graph) {\n                return this;\n            }\n            if (!(graph instanceof Graph)) {\n                throw new TypeError(\"Can't add graph to explore, expected an instance of Graph.\");\n            }\n            this.dataViews.splice(this.dataViews.indexOf(graph.dataView), 1);\n            this.addedGraphs.splice(this.addedGraphs.indexOf(graph.dataView), 1);\n            graph.added = false;\n            this.addedAllGraphs = false;\n            setGraphsParam(this);\n            return this;\n        };\n        Explore.prototype.getGraphById = function (graphId) {\n            if (!this.graphs) {\n                return null;\n            }\n            for (var _i = 0, _a = this.graphs; _i < _a.length; _i++) {\n                var graphDataView = _a[_i];\n                if (graphDataView.id === graphId) {\n                    return graphDataView;\n                }\n            }\n            return null;\n        };\n        return Explore;\n    }\n    ExploreClass.$inject =\n        [\"appConfig\", \"FilterCollection\", \"DataEntity\", \"TableDataView\", \"state\", \"queryOperators\", \"Filter\", \"graphs\",\n            \"dataViewTypes\", \"Graph\", \"utils\"];\n    angular.module(\"Explore\").factory(\"Explore\", ExploreClass);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"ExploreWidget\", [\"Explore\", \"Explore.Filters\", \"Widgets\"]).run([\"widgetViews\",\n        function (widgetViews) {\n            widgetViews.registerView(\"explore\");\n        }]);\n}());\n","(function () {\n    'use strict';\n    function ExploreController($scope, $timeout, Explore, dataEntities, state, dataViewTypes, utils, popupConditions) {\n        var vm = this, lockStateOnChange, stateChangeTimeout;\n        function onEntityChange(dataEntity) {\n            // init();\n            window.location.hash = \"#/d/explore/\" + dataEntity.id;\n        }\n        function setDataEntity(dataEntityId) {\n            vm.selectedEntity = dataEntities.getEntityById(dataEntityId);\n            vm.explore = new Explore(vm.selectedEntity, $scope.view.settings, $scope.widget.getState());\n            vm.explore.unDirty();\n            state.__explore__ = vm.explore;\n        }\n        function onFiltersChange(filters) {\n            // Filters were deleted\n            if (filters && filters.filtersRemoved) {\n                // Reset flag\n                filters.filtersRemoved = false;\n            }\n            else {\n                var popupMessage = popupConditions.shouldNotifyPopup(vm.explore.defaultFilters);\n                if (popupMessage !== \"\") {\n                    /* jshint undef:false */\n                    bootbox.confirm({\n                        message: popupMessage,\n                        buttons: {\n                            'cancel': {\n                                label: 'No'\n                            },\n                            'confirm': {\n                                label: 'Yes'\n                            }\n                        },\n                        callback: function (result) {\n                            if (result) {\n                                state.setParams(vm.explore.getParams());\n                            }\n                        }\n                    });\n                }\n                else {\n                    state.setParams(vm.explore.getParams());\n                }\n            }\n        }\n        function applyDefaultFilters() {\n            onFiltersChange();\n            vm.explore.defaultFilters.unDirty();\n        }\n        function onStateChange(e, data) {\n            if (lockStateOnChange) {\n                lockStateOnChange = false;\n            }\n            else {\n                stateChangeTimeout = $timeout(function () {\n                    if (data.params && data.params.entityId) {\n                        setDataEntity(data.params.entityId);\n                    }\n                    if (vm.explore) {\n                        // Reset page number if any kind of filters were changed\n                        if (data.params.filters || data.params.default_filters) {\n                            data.params.tableview_page = 1;\n                        }\n                        vm.explore.setParams(data.params);\n                        vm.explore.unDirty();\n                    }\n                }, 40);\n            }\n        }\n        function init() {\n            var allDataEntities = dataEntities.getAllEntities();\n            vm.dataEntities = [];\n            for (var _i = 0, allDataEntities_1 = allDataEntities; _i < allDataEntities_1.length; _i++) {\n                var entity = allDataEntities_1[_i];\n                if (entity.showInExplore && !entity.isAbstract) {\n                    vm.dataEntities.push(entity);\n                }\n            }\n            vm.onEntityChange = onEntityChange;\n            vm.onFiltersChange = onFiltersChange;\n            vm.applyDefaultFilters = applyDefaultFilters;\n            vm.modes = dataViewTypes.typesArray;\n            state.onStateChange.subscribe(onStateChange);\n            var entityId = $scope.widget.getState().entityId;\n            if (entityId) {\n                setDataEntity(entityId);\n            }\n        }\n        /**\n         * Init\n         */\n        init();\n        /**\n         * Cleanup\n         */\n        $scope.$on(\"$destroy\", function () {\n            $timeout.cancel(stateChangeTimeout);\n            state.onStateChange.unsubscribe(onStateChange);\n        });\n        /*\n         * Update Explore data views upon URL change.\n         */\n        $scope.$on(\"locationChange\", function (event, args) {\n            var callStateChange = false;\n            // Make sure Explore instance exists\n            if (vm && vm.explore) {\n                // Parse params of both URLs\n                var newParams = utils.url.parseUrlParams(args.newUrl);\n                var oldParams = utils.url.parseUrlParams(args.oldUrl);\n                if (Object.keys(newParams).length === 0) {\n                    // Trigger state change if URL has no params, so defaults will be set\n                    callStateChange =\n                        newParams.initParams = newParams.initDefaultFilters = newParams.initFilters = true;\n                }\n                else {\n                    // If default filters were removed, initialize them\n                    if (!newParams.default_filters && oldParams.default_filters) {\n                        callStateChange = newParams.initDefaultFilters = true;\n                    }\n                    // If filters were removed, initialize as well\n                    if (!newParams.filters && oldParams.filters) {\n                        callStateChange = newParams.initFilters = true;\n                    }\n                }\n                if (callStateChange) {\n                    onStateChange(null, { \"params\": newParams });\n                }\n            }\n        });\n    }\n    ExploreController.$inject =\n        [\"$scope\", \"$timeout\", \"Explore\", \"dataEntities\", \"state\", \"dataViewTypes\", \"utils\",\n            \"popupConditions\"];\n    angular.module(\"ExploreWidget\").controller(\"ExploreController\", ExploreController);\n})();\n","angular.module(\"Explore.DataViews\", [\"DataEntities\", \"Widgets\", \"Reports\", \"Utils\", \"Menus\"]);\n","(function () {\n    'use strict';\n    function DataView(Widget, utils) {\n        return {\n            /**\n             * Returns the join property of the dataQuery, if required, otherwise returns null;\n             * @param dataQueryConfig\n             * @param currExplore\n             */\n            getDataQueryJoin: function (dataQueryConfig, currExplore) {\n                //At this case if we have currExplore its mean that we must be consist with him and not with the one\n                // that exist in \"this\" cause he keep the old explore that can be related to other entity\n                if (currExplore) {\n                    this.explore = currExplore;\n                }\n                var dataView = this;\n                var entitiesJoinIndex = {};\n                if (dataView.explore.dataEntity.linkedEntities) {\n                    dataView.explore.dataEntity.linkedEntities.forEach(function (linkedEntity) {\n                        entitiesJoinIndex[linkedEntity.entity] = linkedEntity;\n                    });\n                }\n                if (!Object.keys(entitiesJoinIndex).length) {\n                    return null;\n                }\n                return utils.objects.toArray(entitiesJoinIndex);\n            },\n            getDataQueryReport: function (dataQueryConfig, mockDataName, api) {\n                return {\n                    endpoint: {\n                        api: api || \"dataQuery\",\n                        dataQuery: dataQueryConfig\n                    },\n                    mock_data: \"explore.\" + (mockDataName || dataQueryConfig.entity)\n                };\n            },\n            /**\n             * Given a string, returns the paramName relevant to this DataView, using the DataView's explore ID.\n             * @param param\n             * @returns {*|string}\n             */\n            getParamName: function (param) {\n                var paramName = this.explore.settings.id || \"\";\n                if (paramName) {\n                    paramName += \".\";\n                }\n                paramName += param;\n                return paramName;\n            },\n            getWidgetFlags: function () {\n                return {};\n            },\n            setParams: function () {\n                // Implement this in each view, the view should be updated if the params are relevant to the view.\n            },\n            init: function (explore) {\n                if (explore.constructor.name !== \"Explore\") {\n                    throw new TypeError(\"Can't initialize DataView, expected an instance of Explore.\");\n                }\n                this.explore = explore;\n                this.setParams(explore.getState(), false);\n            },\n            /**\n             * Interface only, should be implemented in objects that use DataView as prototype.\n             */\n            update: function () {\n                throw new Error(\"update is not implemented for this dataView.\");\n            },\n            get widget() {\n                return this._widget;\n            },\n            set widget(widget) {\n                if (!(widget instanceof Widget)) {\n                    throw new TypeError(\"Invalid widget, expected an instance of Widget.\");\n                }\n                this._widget = widget;\n            }\n        };\n    }\n    DataView.$inject = [\"Widget\", \"utils\"];\n    angular.module(\"Explore.DataViews\").factory(\"DataView\", DataView);\n})();\n","(function () {\n    'use strict';\n    function DataViewTypeClass() {\n        function DataViewType(config) {\n            this.name = config.name;\n            this.id = config.id;\n            this.icon = config.icon;\n        }\n        return DataViewType;\n    }\n    angular.module(\"Explore.DataViews\").factory(\"DataViewType\", DataViewTypeClass);\n})();\n","(function () {\n    'use strict';\n    function TableDataViewClass(DataView, Widget, utils, dataEntityFieldTypes, state, menus, dataEntities, Report) {\n        // This next code is scary! We should definitely look into it when we have time, and kick the use of __proto__.\n        // TODO!!\n        /* jshint ignore:start */\n        TableDataView.prototype.__proto__ = DataView;\n        /* jshint ignore:end */\n        var DEFAULT_PAGE_SIZE = 20;\n        var pageSizes = [10, 20, 50, 100];\n        var paramNames = {\n            PAGE: \"tableview_page\",\n            PAGE_SIZE: \"tableview_pagesize\",\n            FIELDS: \"tableview_fields\",\n            SORT_FIELD: \"tableview_sort\",\n            SORT_FIELD_DIR: \"tableview_sort_dir\"\n        };\n        var formatMap = {\n            \"minutes\": \":diffToPrettyTime:minutes\",\n            \"hours\": \":diffToPrettyTime:hours\",\n            \"seconds\": \":diffToPrettyTime:seconds\",\n            \"sizeBytes\": \":bytesCount\",\n            \"sizeBytesForTime\": \":bytesPerSecCount\"\n        };\n        function TableDataView(explore) {\n            this.pageSize = DEFAULT_PAGE_SIZE;\n            this.page = 1;\n            this.init(explore);\n            if (!this.selectedFields) {\n                this.selectedFields = getTableFields(this);\n            }\n            if (!this.sort && explore.dataEntity.defaultSort && explore.dataEntity.defaultSort.length) {\n                this.sort = explore.dataEntity.defaultSort[0];\n            }\n            this.widget = createWidget(this);\n        }\n        TableDataView.prototype.update = function () {\n            if (this.widget) {\n                this.widget.clearEventListeners();\n            }\n            this.widget = createWidget(this);\n        };\n        /**\n         * Gets the table field for displaying the specified DataEntityField\n         * @param dataEntityField\n         * @returns {{name: *, field: *}}\n         */\n        function getTableFieldConfig(dataEntityField) {\n            /* jshint validthis: true */\n            var tableDataView = this;\n            var fieldConfig = {\n                name: dataEntityField.name,\n                field: dataEntityField.id,\n                noValueDisplay: \"N/A\"\n            };\n            var scoreField = dataEntityField.scoreField;\n            if (!scoreField && /_score$/.test(dataEntityField.id)) {\n                scoreField = dataEntityField;\n            }\n            // For fields with score\n            if (scoreField) {\n                // Add icon\n                fieldConfig.icon = {\n                    \"preset\": \"scoreBox\",\n                    \"presetParams\": {\n                        \"value\": scoreField.id\n                    },\n                    \"style\": \"score\",\n                    \"styleParams\": {\n                        \"value\": scoreField.id\n                    }\n                };\n                // add tooltip\n                var suffix = \"Score\";\n                var toolTipText = fieldConfig.name;\n                //if field name does not end with the suffix \"Score\" - add it\n                if (fieldConfig.name.indexOf(suffix, fieldConfig.name.length - suffix.length) === -1) {\n                    toolTipText += \" \" + suffix;\n                }\n                toolTipText += \": {{\" + scoreField.id + \":toFixed:2}}\";\n                fieldConfig.valueTooltip = toolTipText;\n            }\n            // If field format is set, use it\n            if (dataEntityField.format && formatMap[dataEntityField.format]) {\n                fieldConfig.value = \"{{\" + dataEntityField.id + formatMap[dataEntityField.format] + \"}}\";\n                delete fieldConfig.field;\n            }\n            else if (dataEntityField.type === dataEntityFieldTypes.date_time ||\n                dataEntityField.type === dataEntityFieldTypes.timestamp) {\n                fieldConfig.value = \"{{\" + dataEntityField.id + \":date}}\";\n                delete fieldConfig.field;\n            }\n            fieldConfig.sortBy = tableDataView.getFieldTableDataViewId(dataEntityField);\n            if (fieldConfig.sortBy === tableDataView.sort.field) {\n                fieldConfig.sortDirection = tableDataView.sort.direction === \"ASC\" ? 1 : -1;\n            }\n            fieldConfig.menu = {\n                items: [],\n                \"params\": {\n                    \"value\": \"{{\" + dataEntityField.id + \"}}\",\n                    \"displayValue\": \"{{\" + dataEntityField.id + formatMap[dataEntityField.format] + \"}}\",\n                    \"fieldId\": dataEntityField.id,\n                    \"entityId\": dataEntityField.entity.id\n                }\n            };\n            // If not view-only - add the filters to the menu\n            if (!tableDataView.explore.viewOnly) {\n                //when filter exists in default filters we do not add it to the dropdown filters\n                if (tableDataView.explore.defaultFilterFieldIds === null ||\n                    tableDataView.explore.defaultFilterFieldIds.indexOf(dataEntityField.id) < 0) {\n                    //menu items should be treated the same as field items\n                    var valueStr = 'displayValue || value';\n                    if (dataEntityField.type === dataEntityFieldTypes.date_time ||\n                        dataEntityField.type === dataEntityFieldTypes.timestamp) {\n                        valueStr = valueStr + \":date\";\n                    }\n                    fieldConfig.menu.items.push({\n                        text: \"Add filter: \" + dataEntityField.name + \" = '{{\" + valueStr + \"}}'\",\n                        \"onSelect\": {\n                            \"action\": \"setParams\",\n                            \"actionOptions\": {\n                                \"addToParam\": true,\n                                \"updateUrl\": true,\n                                \"params\": {\n                                    \"filters\": \"{{entityId}}.{{fieldId}}={{value}}\"\n                                }\n                            }\n                        }\n                    });\n                    fieldConfig.menu.items.push({\n                        text: \"Clear all filters and create: \" + dataEntityField.name + \" = '{{\" + valueStr + \"}}'\",\n                        \"onSelect\": {\n                            \"action\": \"setParams\",\n                            \"actionOptions\": {\n                                \"updateUrl\": true,\n                                \"params\": {\n                                    \"filters\": \"{{entityId}}.{{fieldId}}={{value}}\"\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n            if (dataEntityField.attributes) {\n                dataEntityField.attributes.forEach(function (attribute) {\n                    menus.getMenuById(attribute).then(function (menu) {\n                        fieldConfig.menu.items = fieldConfig.menu.items.concat(menu.items);\n                    });\n                });\n            }\n            if (dataEntityField.tags) {\n                dataEntityField.tags.forEach(function (tag) {\n                    fieldConfig.tags = { \"name\": tag };\n                });\n            }\n            return fieldConfig;\n        }\n        function getTableSettings(tableDataView) {\n            return {\n                \"sortParam\": tableDataView.getParamName(paramNames.SORT_FIELD),\n                \"fields\": tableDataView.selectedFields.map(getTableFieldConfig.bind(tableDataView))\n            };\n        }\n        /*\n         * Returns the default parameters for a Table Data View.\n         */\n        TableDataView.prototype.getDefaultParams = function () {\n            var defaults = {};\n            // Page number\n            defaults[this.getParamName(paramNames.PAGE)] = 1;\n            // Rows per page\n            defaults[this.getParamName(paramNames.PAGE_SIZE)] = DEFAULT_PAGE_SIZE;\n            // Table columns\n            var tableFields = getTableFields(this);\n            for (var i = 0; i < tableFields.length; i++) {\n                tableFields[i] = this.getFieldTableDataViewId(tableFields[i]);\n            }\n            defaults[this.getParamName(paramNames.FIELDS)] = tableFields.join(\",\");\n            return defaults;\n        };\n        TableDataView.prototype.setParams = function (params, updateOnChange) {\n            function filterFieldIds(field) {\n                /* jshint validthis:true */\n                return ~fieldIds.indexOf(this.getFieldTableDataViewId(field));\n            }\n            var changed = false;\n            var pageSize = params[this.getParamName(paramNames.PAGE_SIZE)], page = params[this.getParamName(paramNames.PAGE)], fieldIds = params[this.getParamName(paramNames.FIELDS)], sortField = params[this.getParamName(paramNames.SORT_FIELD)], sortFieldDir = params[this.getParamName(paramNames.SORT_FIELD_DIR)];\n            if (pageSize !== undefined) {\n                pageSize = Number(pageSize);\n                if (pageSize !== this.pageSize) {\n                    this.pageSize = pageSize;\n                    if (isNaN(this.pageSize)) {\n                        this.pageSize = DEFAULT_PAGE_SIZE;\n                    }\n                    this.resetPaging();\n                    changed = true;\n                }\n            }\n            if (page !== undefined) {\n                page = Number(page);\n                if (this.page !== page) {\n                    this.page = page;\n                    if (isNaN(this.page)) {\n                        this.resetPaging();\n                    }\n                    changed = true;\n                }\n            }\n            if (sortField || sortFieldDir) {\n                if (!this.sort) {\n                    this.sort = {};\n                }\n                if (sortField) {\n                    this.sort.field = sortField;\n                }\n                if (sortFieldDir) {\n                    this.sort.direction = sortFieldDir === -1 || sortFieldDir === \"-1\" ? \"DESC\" : \"ASC\";\n                }\n                changed = true;\n            }\n            if (fieldIds !== undefined) {\n                if (fieldIds === null) {\n                    this.selectedFields = null;\n                }\n                fieldIds = fieldIds ? fieldIds.split(\",\") : [];\n                this.selectedFields = this.explore.dataEntity.fieldsArray.filter(function (field) {\n                    return ~fieldIds.indexOf(this.getFieldTableDataViewId(field));\n                }.bind(this));\n                if (this.selectedFields.length < fieldIds.length && this.explore.dataEntity.linkedEntities) {\n                    for (var linkedEntity, i = 0; i < this.explore.dataEntity.linkedEntities.length &&\n                        this.selectedFields.length < fieldIds.length; i++) {\n                        linkedEntity = dataEntities.getEntityById(this.explore.dataEntity.linkedEntities[i].entity);\n                        this.selectedFields =\n                            this.selectedFields.concat(linkedEntity.fieldsArray.filter(filterFieldIds.bind(this)));\n                    }\n                }\n                if (!this.selectedFields.length) {\n                    this.selectedFields = getTableFields(this);\n                }\n                if (this.widget) {\n                    this.widget.views[0].settings = getTableSettings(this);\n                    this.widget.update();\n                }\n            }\n            if (changed && updateOnChange !== false) {\n                this.update();\n            }\n            return changed;\n        };\n        /**\n         * Gets the ID of a field to use inside the tableDataView, in selected field IDs\n         * If the field is not from the current explore's dataEntity, the ID is the full path (entityId.fieldId),\n         * otherwise the fieldID only is used, for simplicity.\n         * @param dataEntityField\n         */\n        TableDataView.prototype.getFieldTableDataViewId = function (dataEntityField) {\n            if (dataEntityField.entity === this.explore.dataEntity) {\n                return dataEntityField.id;\n            }\n            return dataEntityField.entity.id + \".\" + dataEntityField.id;\n        };\n        TableDataView.prototype.resetPaging = function () {\n            this.page = 1;\n            var pageParam = {};\n            pageParam[this.getParamName(paramNames.PAGE)] = 1;\n            state.setParams(pageParam);\n        };\n        function getControlsTitle(tableDataView) {\n            var firstResultIndex = (tableDataView.page - 1) * tableDataView.pageSize + 1;\n            return \"Displaying \" + firstResultIndex + \" - {{total:min:\" +\n                (tableDataView.page * tableDataView.pageSize) + \"}} of {{total}} results\";\n        }\n        function createWidget(tableDataView) {\n            function onStateChange(e, data) {\n                tableDataView.setParams(data.params, true);\n            }\n            function runExport() {\n                var reportConfig = createReport(tableDataView, \"exportEvents\");\n                var report = new Report(reportConfig);\n                report.openInIframe = true;\n                report.options = {};\n                //in case of using time zone shifting (in the feature we want to able to support UTC and local time )\n                //report.options.timezoneOffsetMins=utils.date.timezone * 60;\n                //for 1.2.0 we don't want to support time zone shifting\n                report.options.timezoneOffsetMins = 0;\n                // In case the user selected specific fields, we want to send them to the server in order to export\n                // only them\n                if (state && state.currentParams && state.currentParams.tableview_fields) {\n                    report.options.returnFields = state.currentParams.tableview_fields;\n                }\n                report.run({});\n            }\n            var widgetConfig = {\n                report: createReport(tableDataView),\n                flags: utils.objects.extend(tableDataView.getWidgetFlags(), {\n                    stretchVertically: true\n                }),\n                title: getControlsTitle(tableDataView),\n                noDataTitle: \"No results found\",\n                loadingTitle: \"Loading Results...\",\n                \"controls\": [\n                    {\n                        \"type\": \"multiSelect\",\n                        \"label\": \"Fields\",\n                        \"param\": tableDataView.getParamName(paramNames.FIELDS),\n                        \"value\": tableDataView.selectedFields.map(function (field) {\n                            return tableDataView.getFieldTableDataViewId(field);\n                        }),\n                        \"autoUpdate\": true,\n                        \"settings\": {\n                            options: getFieldSelectionOptions(tableDataView),\n                            maxLabels: 3,\n                            buttonText: \"Select fields <span class='caret'></span>\"\n                        }\n                    },\n                    {\n                        \"type\": \"select\",\n                        \"label\": \"Rows per page\",\n                        \"param\": tableDataView.getParamName(paramNames.PAGE_SIZE),\n                        \"value\": tableDataView.pageSize ? tableDataView.pageSize.toString() :\n                            state.currentParams[tableDataView.getParamName(paramNames.PAGE_SIZE)] ||\n                                DEFAULT_PAGE_SIZE.toString(),\n                        \"settings\": {\n                            \"options\": pageSizes\n                        },\n                        \"autoUpdate\": true,\n                        \"isRequired\": true\n                    },\n                    {\n                        \"type\": \"simplePagination\",\n                        \"value\": tableDataView.page,\n                        \"settings\": {\n                            \"pageSize\": tableDataView.pageSize\n                        },\n                        \"autoUpdate\": true,\n                        \"param\": tableDataView.getParamName(paramNames.PAGE)\n                    }\n                ],\n                views: [\n                    {\n                        \"type\": \"table\",\n                        \"settings\": getTableSettings(tableDataView)\n                    }\n                ]\n            };\n            if (tableDataView.explore.includeExport) {\n                widgetConfig.buttons = [\n                    {\n                        \"text\": \"Export\",\n                        \"icon\": \"#download-icon\",\n                        \"onClick\": runExport\n                    }\n                ];\n            }\n            var widget = new Widget(widgetConfig, tableDataView.explore);\n            widget.onStateChange.subscribe(onStateChange);\n            widget.clearEventListeners = function () {\n                widget.onStateChange.unsubscribe(onStateChange);\n            };\n            return widget;\n            // clicking on the \"export\" button will send a report to the exportEvent API and download a file into the\n            // iframe\n        }\n        function getFieldSelectionOptions(tableDataView) {\n            var fieldsSelection = tableDataView.explore.dataEntity.fieldsArray\n                .filter(function (field) {\n                // filter out internal fields (according to their attributes)\n                return !(~field.attributes.indexOf(\"internal\"));\n            })\n                .map(getFieldSelection.bind(tableDataView));\n            if (tableDataView.explore.dataEntity.linkedEntities) {\n                tableDataView.explore.dataEntity.linkedEntities.forEach(function (linkedEntity) {\n                    var entity = dataEntities.getEntityById(linkedEntity.entity);\n                    fieldsSelection = fieldsSelection.concat(entity.fieldsArray\n                        .filter(function (field) {\n                        // filter out internal fields (according to their attributes) or if thie mark to be\n                        // oonly shown for linked entity and also field that specific to not the main entity\n                        return !((~field.attributes.indexOf(\"internal\")) ||\n                            (field.shownForSpecificEntity !== undefined &&\n                                field.entity.id === field.shownForSpecificEntity));\n                    })\n                        .map(getFieldSelection.bind(tableDataView)));\n                });\n            }\n            return fieldsSelection;\n        }\n        function getFieldSelection(field) {\n            /* jshint validthis: true */\n            return {\n                value: this.getFieldTableDataViewId(field),\n                label: \"<strong>\" + field.entity.name + \" <i class='icon-angle-right'></i></strong> \" + field.name\n            };\n        }\n        function createReport(tableDataView, api) {\n            var dataQueryConfig = utils.objects.extend({\n                fields: getReportFields(tableDataView),\n                entity: tableDataView.explore.dataEntity.id,\n                limit: tableDataView.pageSize,\n                offset: tableDataView.pageSize * (tableDataView.page - 1),\n                sort: tableDataView.sort || tableDataView.explore.dataEntity.defaultSort\n            }, tableDataView.explore.getFiltersDataQuery());\n            // If a JOIN is required, need to get fields from the joined entities as well:\n            if (!!(dataQueryConfig.entitiesJoin = tableDataView.getDataQueryJoin(dataQueryConfig))) {\n                dataQueryConfig.fields = [\n                    {\n                        entity: tableDataView.explore.dataEntity.id,\n                        allFields: true\n                    }\n                ].concat(dataQueryConfig.entitiesJoin.map(function (entityJoin) {\n                    return {\n                        entity: entityJoin.entity,\n                        allFields: true\n                    };\n                }));\n            }\n            var report = tableDataView.getDataQueryReport(dataQueryConfig, null, api);\n            if (!tableDataView.widget || !tableDataView.report || tableDataView.widget.total === undefined) {\n                report.endpoint.requestTotal = \"true\";\n            }\n            return report;\n        }\n        function getReportFields(tableDataView) {\n            var reportEntitiesIndex = {}, fields = [];\n            tableDataView.selectedFields.forEach(function (field) {\n                reportEntitiesIndex[field.entity.id] = true;\n            });\n            for (var entity in reportEntitiesIndex) {\n                if (reportEntitiesIndex.hasOwnProperty(entity)) {\n                    fields.push({\n                        entity: entity,\n                        allFields: true\n                    });\n                }\n            }\n            return fields;\n        }\n        function getTableFields(tableDataView) {\n            return tableDataView.explore.dataEntity.fieldsArray.filter(function (field) {\n                return field.isDefaultEnabled;\n            });\n        }\n        return TableDataView;\n    }\n    TableDataViewClass.$inject =\n        [\"DataView\", \"Widget\", \"utils\", \"dataEntityFieldTypes\", \"state\", \"menus\", \"dataEntities\", \"Report\"];\n    angular.module(\"Explore.DataViews\").factory(\"TableDataView\", TableDataViewClass);\n})();\n","(function () {\n    \"use strict\";\n    function GraphClass(dataEntities, GraphDataView) {\n        var graphTypesArr = [\n            { id: \"scatterPlot\", icon: \"scatterPlot.svg\", name: \"Scatter Plot\" },\n            { id: \"horizontalBars\", icon: \"vertical_bars.svg\", name: \"Horizontal Bar Chart\" },\n            { id: \"verticalBars\", icon: \"horizontal_bars.svg\", name: \"Vertical Bar Chart\" },\n            { id: \"lines\", icon: \"lines.svg\", name: \"Line Chart\" },\n            { id: \"geo\", icon: \"geo.png\", name: \"Geolocation\" },\n            { id: \"bubbles\", icon: \"bubbles.svg\", name: \"Bubbles\" },\n            { id: \"heatmap\", icon: \"grid.png\", name: \"Heat Map\" }\n        ];\n        var graphTypes = new Map();\n        graphTypesArr.forEach(function (graphType) {\n            graphTypes.set(graphType.id, new GraphType(graphType));\n        });\n        function Graph(config) {\n            this.validate(config);\n            this.id = config.id;\n            this.name = config.name;\n            this.type = graphTypes.get(config.type);\n            // Graph.widget is just the widget's configuration, NOT the widget itself!\n            this.widget = angular.extend(config.widget, { title: this.name, description: config.description });\n            this.dataQuery = config.dataQuery;\n            if (config.hide) {\n                this.hide = config.hide;\n            }\n            //since each graph is defined for a list of entities\n            //make sure each entity the graph is related to is a known entity in the current configuration brought from\n            // the server\n            if (config.entities) {\n                config.entities = config.entities.filter(function (entity) {\n                    return dataEntities.getEntityById(entity);\n                });\n                this.entities = config.entities.map(function (entityId) {\n                    return dataEntities.getEntityById(entityId);\n                });\n            }\n        }\n        Graph.prototype.validate = function (config) {\n            if (!config.id || typeof (config.id) !== \"string\") {\n                throw new Error(\"Can't create Graph, a string 'id' property is required.\");\n            }\n            if (!config.name || typeof (config.name) !== \"string\") {\n                throw new Error(\"Can't create Graph, a string 'name' property is required.\");\n            }\n            if (!config.type || typeof (config.type) !== \"string\") {\n                throw new Error(\"Can't create Graph, a string 'type' property is required.\");\n            }\n            if (!graphTypes.has(config.type)) {\n                throw new Error(\"Unknown graph type, '\" + config.type + \"'.\");\n            }\n            if (!config.widget || Object(config.widget) !== config.widget) {\n                throw new Error(\"Can't create Graph, a 'widget' object is required.\");\n            }\n            if (!config.dataQuery || !angular.isObject(config.dataQuery)) {\n                throw new Error(\"Can't create graph, an object 'dataQuery' property is required.\");\n            }\n            if (config.entities) {\n                if (config.entities.constructor !== Array) {\n                    throw new TypeError(\"Invalid 'entities' property for graph, expected an array but got \" +\n                        config.entities);\n                }\n            }\n        };\n        /**\n         * Returns a new GraphDataView object for the specified Explore object\n         * @param explore\n         * @returns {GraphDataView}\n         */\n        Graph.prototype.getDataView = function (explore) {\n            return new GraphDataView(this, explore);\n        };\n        function GraphType(config) {\n            this.id = config.id;\n            this.icon = \"images/icons/charts/\" + config.icon;\n            this.name = config.name;\n        }\n        return Graph;\n    }\n    GraphClass.$inject = [\"dataEntities\", \"GraphDataView\"];\n    angular.module(\"Explore.DataViews\").factory(\"Graph\", GraphClass);\n})();\n","(function () {\n    'use strict';\n    function GraphDataViewClass(utils, DataView, Widget) {\n        function createReport(graph, explore) {\n            var dataQueryConfig = utils.objects.extend({\n                entity: explore.dataEntity.id\n            }, graph.dataQuery, explore.getFiltersDataQuery());\n            if (!graph.dataView) {\n                graph.dataView = graph.getDataView(explore);\n            }\n            dataQueryConfig.entitiesJoin = graph.dataView.getDataQueryJoin(dataQueryConfig, explore);\n            var report = DataView.getDataQueryReport(dataQueryConfig, \"graphs.\" + graph.id);\n            return { report: report };\n        }\n        function GraphDataView(graph, explore) {\n            var graphDataView = this;\n            this.explore = explore;\n            this.graph = utils.objects.copy(graph);\n            Widget.loadWidget(this.graph.widget).then(function (widget) {\n                graphDataView.widget = Widget.copy(widget);\n                graphDataView.widget.setParent(explore);\n                graphDataView.widget.setReport(createReport(graph, explore)).getData();\n                //the includeExport is used to identify that we are coming from the Explore page - in the future if we\n                // need different condition we can add another flag\n                if (graphDataView.explore.includeExport) {\n                    graphDataView.widget.buttons = [\n                        {\n                            icon: \"#icon-remove\",\n                            title: \"Remove graph\",\n                            onClick: function () {\n                                explore.removeGraph(graph);\n                            }\n                        }\n                    ];\n                }\n            });\n        }\n        // This next code is scary! We should definitely look into it when we have time, and kick the use of __proto__.\n        // TODO!!\n        /* jshint ignore:start */\n        GraphDataView.prototype.__proto__ = DataView;\n        /* jshint ignore:end */\n        /*\n         * Returns the default parameters for a Graph Data View.\n         */\n        GraphDataView.prototype.getDefaultParams = function () {\n            return {};\n        };\n        GraphDataView.prototype.setParams = function (params, updateOnChange) {\n            var needUpdate = false;\n            if (params[this.getParamName(\"filters\")] !== undefined ||\n                params[this.getParamName(\"default_filters\")] !== undefined) {\n                needUpdate = this.updateReport();\n            }\n            if (updateOnChange && needUpdate) {\n                this.update();\n            }\n            return needUpdate;\n        };\n        /**\n         * Updates the dataView's report according to the current graph and explore states.\n         * @param updateOnChange\n         * @returns {boolean}\n         */\n        GraphDataView.prototype.updateReport = function (updateOnChange) {\n            var needUpdate = false;\n            var report = createReport(this.graph, this.explore);\n            if (!utils.objects.areEqual(report, this.lastReport)) {\n                this.widget.setReport(report);\n                this.lastReport = report;\n                needUpdate = true;\n            }\n            if (updateOnChange) {\n                this.update();\n            }\n            return needUpdate;\n        };\n        GraphDataView.prototype.update = function () {\n            this.widget.setParent(this.explore);\n            this.widget.refresh();\n        };\n        return GraphDataView;\n    }\n    GraphDataViewClass.$inject = [\"utils\", \"DataView\", \"Widget\"];\n    angular.module(\"Explore.DataViews\").factory(\"GraphDataView\", GraphDataViewClass);\n})();\n","(function () {\n    \"use strict\";\n    function graphs($q, utils, Graph) {\n        /**\n         * Returns the configuration for all graphs that are available to the specified entity\n         * @param dataEntity\n         */\n        function getGraphsForDataEntity(dataEntity) {\n            return getGraphsConfig()\n                .then(function () {\n                var entityGraphs = [], currentEntity = dataEntity;\n                do {\n                    entityGraphs = (entitiesGraphs[currentEntity.id] || []).concat(entityGraphs);\n                } while (!!(currentEntity = currentEntity.baseEntity));\n                return entityGraphs;\n            });\n        }\n        function getGraphsConfig() {\n            if (!graphsConfig) {\n                return utils.http.wrappedHttpGet(\"data/explore/graphs.json\").then(function (graphsConfigData) {\n                    graphsConfig = {};\n                    entitiesGraphs = {};\n                    var graph, allEntitiesGraphs = [];\n                    function populateEntityGraphs(entity) {\n                        var entityGraphs = entitiesGraphs[entity.id];\n                        if (!entityGraphs) {\n                            entityGraphs = entitiesGraphs[entity.id] = [];\n                        }\n                        entityGraphs.push(graph);\n                    }\n                    for (var graphId in graphsConfigData) {\n                        if (graphsConfigData.hasOwnProperty(graphId)) {\n                            graph = graphsConfig[graphId] = new Graph(graphsConfigData[graphId]);\n                            if (graph.entities) {\n                                graph.entities.forEach(populateEntityGraphs);\n                            }\n                            else {\n                                allEntitiesGraphs.push(graph);\n                            }\n                        }\n                    }\n                    if (allEntitiesGraphs.length) {\n                        for (var entityId in entitiesGraphs) {\n                            if (entitiesGraphs.hasOwnProperty(entityId)) {\n                                entitiesGraphs[entityId] = allEntitiesGraphs.concat(entitiesGraphs[entityId]);\n                            }\n                        }\n                    }\n                    return graphsConfig;\n                });\n            }\n            return $q.when(graphsConfig);\n        }\n        var graphsConfig, entitiesGraphs;\n        return {\n            getGraphsForDataEntity: getGraphsForDataEntity\n        };\n    }\n    graphs.$inject = [\"$q\", \"utils\", \"Graph\"];\n    angular.module(\"Explore.DataViews\").factory(\"graphs\", graphs);\n})();\n","(function () {\n    \"use strict\";\n    function dataViewTypes(DataViewType) {\n        var types = [{ id: \"table\", name: \"Table\", icon: \"#table-icon\" },\n            { id: \"graphs\", name: \"Graphs\", icon: \"#graph-icon\" }].map(function (typeConfig) {\n            return new DataViewType(typeConfig);\n        }), index = {};\n        types.forEach(function (type) {\n            index[type.id] = type;\n        });\n        return {\n            typesArray: types,\n            types: index\n        };\n    }\n    dataViewTypes.$inject = [\"DataViewType\"];\n    angular.module(\"Explore.DataViews\").factory(\"dataViewTypes\", dataViewTypes);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Explore.DataViews\")\n        .filter('unAddedGraphs', function () {\n        return function (graphs) {\n            if (!graphs) {\n                return graphs;\n            }\n            return graphs.filter(function (graph) {\n                return !graph.added;\n            });\n        };\n    })\n        .filter('hideGraphs', function () {\n        return function (graphs) {\n            if (!graphs) {\n                return graphs;\n            }\n            return graphs.filter(function (graph) {\n                return !graph.hide;\n            });\n        };\n    })\n        .filter('addedGraphs', function () {\n        return function (graphs) {\n            if (!graphs) {\n                return graphs;\n            }\n            return graphs.filter(function (graph) {\n                return graph.added;\n            });\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Chart\", [\"Colors\", \"Utils\"]).factory('Chart', [\n        \"$injector\", \"$parse\", \"colors\", \"utils\", \"debounce\", \"config\",\n        function ($injector, $parse, colors, utils, debounce, config) {\n            var constructor;\n            function Chart($rootScope, defaultOptions, draw, $parse, colors, utils) {\n                this.$rootScope = $rootScope;\n                this.$parse = $parse;\n                this.colors = colors;\n                this.utils = utils;\n                this.defaultOptions = defaultOptions || {};\n                this._draw = draw;\n            }\n            Chart.prototype = {\n                timeFormat: {\n                    days: d3.time.format.multi([\n                        [\"%m/%d\", function (d) {\n                                return d.getFullYear() === utils.date.getMoment('now').year();\n                            }],\n                        [\"%m/%d/%y\", function () {\n                                return true;\n                            }]\n                    ]),\n                    \"default\": d3.time.format.multi([\n                        [\".%L\", function (d) {\n                                return d.getMilliseconds();\n                            }],\n                        [\":%S\", function (d) {\n                                return d.getSeconds();\n                            }],\n                        [\"%H:%M\", function (d) {\n                                return d.getMinutes();\n                            }],\n                        [\"%H:00\", function (d) {\n                                return d.getHours();\n                            }],\n                        [\"%a %d\", function (d) {\n                                return d.getDay() && d.getDate() !== 1;\n                            }],\n                        [\"%b %d\", function (d) {\n                                return d.getDate() !== 1;\n                            }],\n                        [\"%B\", function (d) {\n                                return d.getMonth();\n                            }],\n                        [\"%Y\", function () {\n                                return true;\n                            }]\n                    ])\n                },\n                createBrush: function () {\n                    function brushstart() {\n                        self.svg.classed(\"selecting\", true);\n                    }\n                    function brushmove() {\n                        self.$rootScope.$apply(function () {\n                            onBrush(self.scope, { extent: d3.event.target.extent() });\n                        });\n                    }\n                    function brushend() {\n                        self.svg.classed(\"selecting\", !d3.event.target.empty());\n                    }\n                    var self = this, onBrush = this.attrs.onBrush ? this.$parse(this.attrs.onBrush) : null;\n                    this.dataSvg.append(\"g\")\n                        .attr(\"class\", \"brush\")\n                        .call(d3.svg.brush().x(this.scale.x)\n                        .on(\"brushstart\", brushstart)\n                        .on(\"brush\", onBrush ? brushmove : null)\n                        .on(\"brushend\", brushend))\n                        .selectAll(\"rect\")\n                        .attr(\"height\", self.dataHeight);\n                },\n                createScales: function () {\n                    if (this.scale) {\n                        return;\n                    }\n                    var self = this;\n                    this.scale = {};\n                    var d3timeScale = config.alwaysUtc ? d3.time.scale.utc : d3.time.scale;\n                    if (this.settings.scales.x) {\n                        this.scale.x = this.settings.scales.x.type === \"time\" ? d3timeScale() : d3.scale.linear();\n                        this.scale.x.range([0, this.width - this.options.axisWidth]);\n                        if (this.settings.scales.x.domain) {\n                            this.scale.x.domain(this.settings.scales.x.domain);\n                        }\n                        if (this.attrs.graphDomainX) {\n                            this.unwatchers.push(this.scope.$watch(this.attrs.graphDomainX, function (value) {\n                                if (value) {\n                                    if (self.scale.x) {\n                                        self.scale.x.domain(value);\n                                    }\n                                    if (self.onUpdateDomain) {\n                                        self.onUpdateDomain.call(this, { x: value });\n                                    }\n                                    if (self.axes.x) {\n                                        self.axes.x._element.call(self.axes.x);\n                                        self.axes.x._grid.call(self.getGridAxis(\"x\"));\n                                    }\n                                }\n                            }));\n                        }\n                    }\n                    if (this.settings.scales.y) {\n                        this.scale.y = this.settings.scales.y.type === \"time\" ? d3timeScale() : d3.scale.linear();\n                        this.scale.y.range([this.height - this.options.axisWidth, 0]);\n                        this.scale.y.reverseScale =\n                            this.settings.scales.y.type === \"time\" ? d3timeScale() : d3.scale.linear();\n                        this.scale.y.reverseScale.range([0, this.height - this.options.axisWidth]);\n                        if (this.settings.scales.y.domain) {\n                            this.scale.y.domain(this.settings.scales.y.domain);\n                            this.scale.y.reverseScale.domain(this.settings.scales.y.domain);\n                        }\n                        if (this.attrs.graphDomainY) {\n                            this.unwatchers.push(this.scope.$watch(this.attrs.graphDomainY, function (value) {\n                                if (value) {\n                                    if (self.scale.x) {\n                                        self.scale.x.domain(value);\n                                    }\n                                    if (self.onUpdateDomain) {\n                                        self.onUpdateDomain.call(this, { y: value });\n                                    }\n                                }\n                            }));\n                        }\n                    }\n                    this.setScaleRanges = function (ranges) {\n                        if (!ranges) {\n                            return;\n                        }\n                        if (ranges.x && this.scale.x) {\n                            this.scale.x.range(ranges.x);\n                        }\n                        if (ranges.y && this.scale.y) {\n                            this.scale.y.range(ranges.y);\n                            this.scale.y.reverseScale.range([ranges.y[1], ranges.y[0]]);\n                        }\n                    };\n                    this.setScaleDomains = function (domains) {\n                        if (!domains) {\n                            return;\n                        }\n                        if (domains.x && this.scale.x) {\n                            this.scale.x.domain(domains.x);\n                        }\n                        if (domains.y && this.scale.y) {\n                            this.scale.y.domain(domains.y);\n                            this.scale.y.reverseScale.domain(domains.y);\n                        }\n                    };\n                },\n                createAxes: function () {\n                    if (!this.settings.axes) {\n                        return;\n                    }\n                    var self = this;\n                    this.axes = {};\n                    var d3timeFormat = config.alwaysUtc ? d3.time.format.utc : d3.time.format;\n                    var axes = this.svg.append(\"g\").attr(\"class\", \"axes\"), marginLeft = this.options.margins.left + (this.settings.axes.y ? this.options.axisWidth : 0), grids = this.svg.insert(\"g\", \".graph-data\").attr(\"class\", \"grids\");\n                    if (this.settings.axes.x) {\n                        this.axes.x = d3.svg.axis()\n                            .scale(this.scale.x)\n                            .orient(\"bottom\");\n                        if (this.settings.axes.x.ticks) {\n                            this.axes.x.ticks(d3.time[this.settings.axes.x.ticks.unit], this.settings.axes.x.ticks.interval);\n                        }\n                        else {\n                            //When letting D3 create the X-axis ticks automatically,\n                            // we may get duplicate entries. so we remove them.\n                            this.axes.x.tickValues(this.removeDuplicateTicks(this.scale.x.ticks(), this.dateFormatter));\n                        }\n                        if (this.settings.axes.x.tickFormat) {\n                            var xScaleTickFormatter = this.settings.axes.x.type === \"time\" ? d3timeFormat : d3.format, xScaleTickFormat = xScaleTickFormatter(this.settings.axes.x.tickFormat);\n                            this.axes.x.tickFormat(xScaleTickFormat);\n                        }\n                        else if (this.settings.axes.x.type === \"time\") {\n                            var timeFormat = this.timeFormat[this.settings.axes.x.timeFormat] ||\n                                this.timeFormat.default;\n                            this.axes.x.tickFormat(timeFormat);\n                        }\n                        this.axes.x._grid = grids.append(\"g\")\n                            .attr(\"class\", \"grid\")\n                            .attr(\"transform\", \"translate(\" + (marginLeft + 1) + \", \" + this.options.margins.top + \")\")\n                            .call(self.getGridAxis(\"x\"));\n                        this.axes.x._element = axes.append(\"g\")\n                            .attr(\"class\", \"x axis\")\n                            .attr(\"transform\", \"translate(\" + (marginLeft + 1) + \",\" + (this.height - this.options.margins.top) + \")\")\n                            .call(this.axes.x);\n                        if (this.settings.axes.x.label) {\n                            this.axes.x._label = this.axes.x._element.append(\"text\")\n                                .attr(\"class\", \"graph-axis-label\")\n                                .attr(\"x\", this.dataWidth / 2)\n                                .attr(\"dy\", self.options.axisLabelsWidth.x + 10)\n                                .style(\"text-anchor\", \"middle\")\n                                .text(this.settings.axes.x.label || \"\");\n                        }\n                    }\n                    if (this.settings.axes.y) {\n                        var yScaleTickFormatter, yScaleTickFormat;\n                        this.axes.y = d3.svg.axis()\n                            .scale(this.scale.y)\n                            .orient(\"left\")\n                            .ticks(this.settings.axes.y.ticks);\n                        if (this.settings.axes.y.tickFormat) {\n                            if (~this.settings.axes.y.tickFormat.indexOf(\"{{\")) {\n                                var yTickFormat = this.settings.axes.y.tickFormat;\n                                yScaleTickFormat = function (d) {\n                                    return self.utils.strings.parseValue(yTickFormat, { value: d });\n                                };\n                            }\n                            else {\n                                yScaleTickFormatter = this.settings.axes.y.type === \"time\" ? d3timeFormat :\n                                    d3.format;\n                                yScaleTickFormat = yScaleTickFormatter(this.settings.axes.y.tickFormat);\n                            }\n                            this.axes.y.tickFormat(yScaleTickFormat);\n                        }\n                        this.axes.y._grid = grids.append(\"g\")\n                            .attr(\"class\", \"grid\")\n                            .attr(\"transform\", \"translate(\" + marginLeft + \", \" + this.options.margins.top + \")\")\n                            .call(self.getGridAxis(\"y\"));\n                        this.axes.y._element = axes.append(\"g\")\n                            .attr(\"class\", \"y axis\")\n                            .attr(\"transform\", \"translate(\" + marginLeft + \", \" + this.options.margins.top + \")\")\n                            .call(this.axes.y);\n                        if (this.settings.axes.y.label) {\n                            this.axes.y._label = this.axes.y._element.append(\"text\")\n                                .attr(\"class\", \"graph-axis-label\")\n                                .attr(\"transform\", \"rotate(-90)\")\n                                .attr(\"x\", this.dataHeight / -2)\n                                .attr(\"dy\", self.options.axisLabelsWidth.y * -1 - 5)\n                                .style(\"text-anchor\", \"middle\")\n                                .text(this.settings.axes.y.label || \"\");\n                        }\n                    }\n                },\n                _createLegend: function () {\n                    var circleRadius = 8, margin = 12, textMargin = margin + 4;\n                    this.elements.legend = this.svg.append(\"g\")\n                        .attr(\"class\", \"legend\")\n                        .attr(\"transform\", \"translate(0, \" + this.options.margins.top + \")\");\n                    this.elements.legendItems = this.elements.legend.selectAll(\".legend-item\").data(this.legendData)\n                        .enter().append(\"g\")\n                        .attr(\"transform\", function (d, i) {\n                        return \"translate(0, \" + (margin + circleRadius) * 2 * i + \")\";\n                    })\n                        .attr(\"class\", \"legend-item\");\n                    var legendItems = this.elements.legendItems.append(\"g\")\n                        .attr(\"class\", \"legend-item-bullet\")\n                        .style(\"fill\", function (d) {\n                        return d.color;\n                    });\n                    legendItems.append(\"path\").attr(\"d\", function (d) {\n                        return d3.svg.symbol().type(d.symbol).size(circleRadius * 10)();\n                    })\n                        .attr(\"fill\", function (d) {\n                        return d.color || \"steelblue\";\n                    });\n                    this.elements.legendItems.append(\"text\")\n                        .attr(\"class\", \"legend-item-text\")\n                        .text(function (d) {\n                        return d.text;\n                    })\n                        .attr(\"transform\", \"translate(\" + textMargin + \", 0)\")\n                        .attr(\"dy\", \".3em\");\n                    if (this.settings.legend.position === \"right\") {\n                        var legendWidth = this.elements.legend[0][0].getBoundingClientRect().width;\n                        this.elements.legend._width = legendWidth + margin;\n                        this.elements.legend.attr(\"transform\", \"translate(\" + (this.width - this.elements.legend._width) + \", \" +\n                            (this.options.margins.top + margin) + \")\");\n                    }\n                },\n                getGridAxis: function (xy) {\n                    var oppositeScale = this.scale[xy === \"x\" ? \"y\" : \"x\"];\n                    var oppositeRange = oppositeScale && oppositeScale.range() || [0], axis = d3.svg.axis().scale(this.scale[xy]).orient(xy === \"x\" ? \"top\" : \"left\")\n                        .tickSize(-(Math.max.apply(this, oppositeRange)), 0, 0)\n                        .tickFormat(\"\")\n                        .ticks(this.settings.axes[xy].ticks);\n                    if (this.settings.axes[xy] && this.settings.axes[xy].ticks) {\n                        axis.ticks(d3.time[this.settings.axes[xy].ticks.unit], this.settings.scales[xy].interval);\n                    }\n                    return axis;\n                },\n                createTooltip: function () {\n                    var self = this;\n                    var tooltip = this.tooltip = this.svg.append(\"g\")\n                        .attr(\"class\", \"graph-tooltip\")\n                        .attr(\"style\", \"display: none\");\n                    var tooltipBackground = tooltip.append(\"rect\")\n                        .attr(\"width\", 100)\n                        .attr(\"height\", 30)\n                        .attr(\"fill\", \"rgba(0,0,0,.8\")\n                        .attr(\"rx\", 4)\n                        .attr(\"ry\", 4);\n                    var mouseOutTimeout, elementWidth, elementHeight, elementBoundingRect;\n                    if (this.getTooltipText) {\n                        this.element.on(\"mouseover\", \"[data-tooltip]\", function (e) {\n                            var tooltipData = e.target.__data__, tooltipText = self.getTooltipText(tooltipData, $(e.target).closest(\"[data-tooltip]\").attr(\"data-tooltip\"));\n                            if (tooltipText) {\n                                elementBoundingRect = self.svg[0][0].getBoundingClientRect();\n                                elementWidth = elementBoundingRect.width;\n                                elementHeight = elementBoundingRect.height;\n                                setTooltipText(tooltipText);\n                                showTooltip(elementBoundingRect);\n                                window.addEventListener(\"mousemove\", tooltipMoveHandler);\n                            }\n                        });\n                        this.element.on(\"mouseout\", \"[data-tooltip]\", function () {\n                            hideTooltip();\n                        });\n                    }\n                    function setTooltipText(text) {\n                        var tspanTexts = text.split(\"|\");\n                        tooltip.selectAll(\"text\").remove();\n                        var textElement = tooltip.selectAll(\"text\")\n                            .data(tspanTexts)\n                            .enter()\n                            .append(\"text\");\n                        textElement.text(function (d) {\n                            return d;\n                        })\n                            .attr(\"fill\", \"White\")\n                            .attr(\"font-size\", \"14px\")\n                            .attr(\"transform\", function (d, i) {\n                            return \"translate(15, \" + (20 * (i + 1)) + \")\";\n                        });\n                        tooltipBackground.attr(\"width\", textElement[0][0].getBoundingClientRect().width + 30);\n                        tooltipBackground.attr(\"height\", 20 * tspanTexts.length + 10);\n                    }\n                    function hideTooltip() {\n                        tooltip[0][0].style.display = \"none\";\n                    }\n                    function showTooltip() {\n                        clearTimeout(mouseOutTimeout);\n                        tooltip[0][0].style.removeProperty(\"display\");\n                    }\n                    function tooltipMoveHandler(e) {\n                        setTooltipPosition({\n                            x: (e.x || e.clientX) - elementBoundingRect.left,\n                            y: (e.y || e.clientY) - elementBoundingRect.top\n                        });\n                    }\n                    function setTooltipPosition(position) {\n                        var tooltipPositionX = position.x + 5, tooltipPositionY = position.y, tooltipWidth = parseInt(tooltipBackground[0][0].getAttribute(\"width\")), tooltipHeight = parseInt(tooltipBackground[0][0].getAttribute(\"height\"));\n                        if (tooltipPositionX + tooltipWidth > elementWidth) {\n                            tooltipPositionX = position.x - tooltipWidth - 5;\n                            if (tooltipPositionX < 0) {\n                                tooltipPositionX = 0;\n                            }\n                        }\n                        if (tooltipPositionY + tooltipHeight > elementHeight - 20) {\n                            tooltipPositionY = position.y - tooltipHeight - 5;\n                            if (tooltipPositionY < 0) {\n                                tooltipPositionY = 0;\n                            }\n                        }\n                        tooltip.attr(\"transform\", \"translate(\" + tooltipPositionX + \",\" + tooltipPositionY + \")\");\n                    }\n                },\n                draw: function () {\n                    if (this._draw() !== false) {\n                        if (this.settings.axes) {\n                            this.createAxes();\n                        }\n                        if (this.createLegend) {\n                            this.createLegend();\n                        }\n                        this.createTooltip();\n                        if (this.postRender) {\n                            this.postRender();\n                        }\n                    }\n                },\n                getColorScale: function (colorSettings) {\n                    return this.colors.getScale(colorSettings || this.settings.color);\n                },\n                getData: function () {\n                    if (this.graphFilter) {\n                        if (this.filteredData) {\n                            return this.filteredData;\n                        }\n                        this.filteredData = this.graphFilter(this.data);\n                        return this.filteredData;\n                    }\n                    return this.data;\n                },\n                init: function (scope, element, attrs) {\n                    var self = this, defaults = {\n                        axisWidth: 20,\n                        axisLabelsWidth: { y: 25, x: 25 },\n                        margins: { top: 10, left: 20, right: 20, bottom: 10 }\n                    };\n                    this.element = element;\n                    this.scope = scope;\n                    this.attrs = attrs;\n                    this.unwatchers = [];\n                    scope.$on(\"$destroy\", function () {\n                        if (self.dataSvg) {\n                            self.dataSvg.empty();\n                            self.dataSvg.remove();\n                            self.dataSvg = null; // major memory performance improvement.\n                        }\n                        element.off();\n                        element.empty();\n                        self.unwatchers.forEach(function (unwatcher) {\n                            unwatcher();\n                        });\n                        self.unwatchers = [];\n                    });\n                    this.unwatchers.push(scope.$on(\"resize\", this.resize.bind(this)));\n                    if (attrs.graphFilter) {\n                        self.unwatchers.push(scope.$watch(attrs.graphFilter, function (value) {\n                            var previousData = self.data;\n                            self.graphFilter = value;\n                            self.filteredData = null;\n                            self.refresh(previousData);\n                        }));\n                    }\n                    self.unwatchers.push(scope.$watch(attrs.ngModel, function (chartData) {\n                        var previousData = self.data;\n                        self.data = chartData;\n                        if (self.formatData) {\n                            self.formattedData = self.formatData(chartData);\n                        }\n                        self.refresh(previousData);\n                    }));\n                    self.unwatchers.push(scope.$watch(attrs.graphSettings, function (value) {\n                        if (value) {\n                            self.scale = null;\n                            self.settings = value;\n                            self.options = angular.extend({}, defaults, self.defaultOptions, self.settings.options);\n                            self.render();\n                        }\n                    }));\n                },\n                refresh: function (previousData) {\n                    if (this.loaded && this.update) {\n                        this.update(this.getData(), previousData);\n                    }\n                    else {\n                        this.loaded = this.render();\n                    }\n                },\n                render: function () {\n                    var self = this;\n                    this.element.empty();\n                    this.element.off();\n                    this.element.addClass(\"widget-graph\");\n                    if (!this.settings || !this.data || !this._draw) {\n                        return false;\n                    }\n                    this.elements = {};\n                    this.svg = d3.select(this.element[0])\n                        .append(\"svg:svg\")\n                        .attr(\"class\", \"graph\")\n                        .attr(\"width\", this.options.width || \"100%\")\n                        .attr(\"height\", this.options.height || \"100%\");\n                    // The SVG has no height and width if it's hidden, which happens when transitioning widget state\n                    // due to no data and then data. In this case, wait and try again:\n                    if (!this.svg[0][0].clientHeight && !this.svg[0][0].clientWidth) {\n                        if (this.renderRetry === 5) {\n                            this.renderRetry = 0;\n                            return;\n                        }\n                        else {\n                            if (this.renderRetry === undefined) {\n                                this.renderRetry = 0;\n                            }\n                            else {\n                                this.renderRetry++;\n                            }\n                            setTimeout(this.render.bind(this), 50);\n                        }\n                        return;\n                    }\n                    else if (this.renderRetry) {\n                        this.renderRetry = 0;\n                    }\n                    if (this.preRender) {\n                        this.preRender();\n                    }\n                    this.width = this.element.innerWidth();\n                    this.height = this.element.innerHeight();\n                    if (this.settings.legend && this.legendData) {\n                        this._createLegend();\n                        if (this.settings.legend.position === \"right\" || this.settings.legend.position === \"left\") {\n                            var legendWidth = this.elements.legend[0][0].getBoundingClientRect().width;\n                            this.width -= legendWidth;\n                        }\n                    }\n                    if (typeof (this.options.margins) === \"number\") {\n                        this.options.margins = {\n                            top: this.options.margins,\n                            bottom: this.options.margins,\n                            left: this.options.margins,\n                            right: this.options.margins\n                        };\n                    }\n                    this.width -= this.options.margins.left + this.options.margins.right;\n                    this.height -= this.options.margins.top + this.options.margins.bottom;\n                    if (this.settings.axes) {\n                        if (this.settings.axes.y && this.settings.axes.y.label) {\n                            this.width -= this.options.axisLabelsWidth.y;\n                            if (!this.loaded) {\n                                this.options.margins.left += this.options.axisLabelsWidth.y - 5;\n                            }\n                        }\n                        if (this.settings.axes.x && this.settings.axes.x.label) {\n                            this.height -= this.options.axisLabelsWidth.x;\n                        }\n                    }\n                    this.dataWidth = this.width;\n                    this.dataHeight = this.height;\n                    this.dataSvg = this.svg.append(\"g\").attr(\"class\", \"graph-data\");\n                    if (this.settings.axes) {\n                        if (this.settings.axes.x) {\n                            this.dataHeight -= this.options.axisWidth;\n                        }\n                        if (this.settings.axes.y) {\n                            this.dataWidth -= this.options.axisWidth;\n                        }\n                        this.dataSvg.attr(\"transform\", \"translate(\" +\n                            ((this.settings.axes.y ? this.options.axisWidth + 1 : 0) + this.options.margins.left) +\n                            \", \" + this.options.margins.top + \")\");\n                    }\n                    else {\n                        this.dataSvg.attr(\"transform\", \"translate(\" + this.options.margins.left + \", \" + this.options.margins.top + \")\");\n                    }\n                    if (this.settings.shapes && this.settings.shapes.map) {\n                        this.dataHeight -= 20;\n                    }\n                    if (this.settings.scales) {\n                        this.createScales();\n                    }\n                    this.draw();\n                    if (this.settings.onSelect) {\n                        this.element.on(\"click\", \"[data-selectable]\", function (e) {\n                            self.scope.$apply(function () {\n                                var event = angular.copy(self.settings.onSelect);\n                                event.actionOptions.event = e;\n                                event.actionOptions.position = {\n                                    top: e.pageY,\n                                    left: e.pageX\n                                };\n                                self.scope.$emit(\"dashboardEvent\", {\n                                    event: event,\n                                    data: e.target.__data__,\n                                    params: self.scope.widget.getState ? self.scope.widget.getState() :\n                                        self.scope.getWidgetParams()\n                                });\n                            });\n                        });\n                    }\n                    if (this.settings.brush) {\n                        this.createBrush();\n                    }\n                    var selfResize = this.resize.bind(this);\n                    // Debounce the handler to prevent overload\n                    var resizeHandler = debounce(100, function () {\n                        self.$rootScope.safeApply(selfResize);\n                    });\n                    window.addEventListener(\"resize\", resizeHandler);\n                    this.loaded = true;\n                    return true;\n                },\n                resize: function () {\n                    // Make sure the chart is visible\n                    if (!angular.element(this.element).is(':visible')) {\n                        return;\n                    }\n                    var legendWidth = this.elements.legend && this.elements.legend._width;\n                    this.width = this.element.innerWidth();\n                    this.height = this.element.innerHeight();\n                    this.width -= this.options.margins.left + this.options.margins.right;\n                    this.height -= this.options.margins.top + this.options.margins.bottom;\n                    if (this.settings.axes) {\n                        if (this.settings.axes.y && this.settings.axes.y.label) {\n                            this.width -= this.options.axisLabelsWidth.y;\n                        }\n                        if (this.settings.axes.x && this.settings.axes.x.label) {\n                            this.height -= this.options.axisLabelsWidth.x;\n                        }\n                    }\n                    this.dataWidth = this.width;\n                    this.dataHeight = this.height;\n                    if (this.settings.axes) {\n                        if (this.settings.axes.x) {\n                            this.dataHeight -= this.options.axisWidth;\n                        }\n                        if (this.settings.axes.y) {\n                            this.dataWidth -= this.options.axisWidth;\n                        }\n                    }\n                    if (this.settings.scales) {\n                        if (this.settings.scales.x) {\n                            this.scale.x.range([0, this.width - this.options.axisWidth -\n                                    (legendWidth ? legendWidth - this.options.margins.right : 0)]);\n                        }\n                        if (this.settings.scales.y) {\n                            this.scale.y.range([this.height - this.options.axisWidth, 0]);\n                            this.scale.y.reverseScale.range([0, this.height - this.options.axisWidth]);\n                        }\n                    }\n                    if (legendWidth) {\n                        //this.dataWidth -= this.elements.legend._width;\n                        this.elements.legend.attr(\"transform\", \"translate(\" +\n                            (this.svg[0][0].getBoundingClientRect().width - this.elements.legend._width) + \", \" +\n                            (this.options.margins.top + 6) + \")\");\n                        this.dataWidth -= this.elements.legend._width;\n                    }\n                    if (this.onResize) {\n                        this.onResize();\n                    }\n                    if (this.settings.axes) {\n                        var marginLeft = this.options.margins.left +\n                            (this.settings.axes.y ? this.options.axisWidth : 0);\n                        if (this.axes.x) {\n                            this.axes.x._grid.attr(\"transform\", \"translate(\" + marginLeft + \", \" + this.options.margins.top + \")\")\n                                .call(this.getGridAxis(\"x\"));\n                            this.axes.x._element.attr(\"transform\", \"translate(\" + marginLeft + \",\" + (this.height - this.options.margins.top) + \")\")\n                                .call(this.axes.x);\n                            if (this.settings.axes.x.label) {\n                                this.axes.x._label.attr(\"x\", this.dataWidth / 2);\n                            }\n                        }\n                        if (this.axes.y) {\n                            this.axes.y._grid.attr(\"transform\", \"translate(\" + marginLeft + \", \" + this.options.margins.top + \")\")\n                                .call(this.getGridAxis(\"y\"));\n                            this.axes.y._element.attr(\"transform\", \"translate(\" + marginLeft + \", \" + this.options.margins.top + \")\")\n                                .call(this.axes.y);\n                        }\n                    }\n                },\n                get yAxisWidth() {\n                    return 20;\n                },\n                get xAxisHeight() {\n                    return 16;\n                },\n                /**\n                 * remove duplicate entries from the X axis in graphs. this is when we want the ability to change time\n                 * scale and to let the scale change accordingle without creating any duplicates.\n                 * @param ticks\n                 * @param formatter\n                 * @returns array of non-duplicated ticks\n                 */\n                removeDuplicateTicks: function (ticks, formatter) {\n                    if (ticks === undefined || ticks === null || !angular.isArray(ticks)) {\n                        return ticks;\n                    }\n                    var nonDuplicateTickValues = [];\n                    for (var i = 0; i < ticks.length; i++) {\n                        var tickVal = ticks[i];\n                        if (!this.tickAlreadyExists(nonDuplicateTickValues, tickVal, formatter)) {\n                            nonDuplicateTickValues.push(tickVal);\n                        }\n                    }\n                    return nonDuplicateTickValues;\n                },\n                /**\n                 * Helper function that finds wheter an entry already entered into the list of unique entries\n                 * @param nonDuplicateTickValues\n                 * @param tickValIn\n                 * @param formatter\n                 * @returns {boolean}\n                 */\n                tickAlreadyExists: function (nonDuplicateTickValues, tickValIn, formatter) {\n                    for (var i = 0; i < nonDuplicateTickValues.length; i++) {\n                        var t = nonDuplicateTickValues[i];\n                        var formattedTickValIn = formatter(tickValIn);\n                        var formattedTickVal = formatter(t);\n                        if (formattedTickValIn === formattedTickVal) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n                dateFormatter: function (d) {\n                    var d3timeFormat = config.alwaysUtc ? d3.time.format.utc : d3.time.format;\n                    var format = d3timeFormat(\"%d-%b-%y\");\n                    return format(d);\n                }\n            };\n            constructor = function (options, draw) {\n                return $injector.instantiate(Chart, {\n                    defaultOptions: options,\n                    draw: draw,\n                    $parse: $parse,\n                    colors: colors,\n                    utils: utils\n                });\n            };\n            return constructor;\n        }]);\n}());\n","(function () {\n    'use strict';\n    function tableWidget($q, utils, transforms, icons, conditions, menus, tags, widgetViews, TableWidgetConfig) {\n        function tableConfigValidate(settings) {\n            var tableConfig = new TableWidgetConfig(settings);\n            return !!tableConfig;\n        }\n        function tableDataParser(view, data, params) {\n            function getTableData() {\n                var viewData = { rows: [] }, fieldSpans = {}, loadPromises = [], iconParsers = {}, menuIds = {};\n                angular.forEach(tableConfig.fields, function (field, fieldIndex) {\n                    field.__index = fieldIndex;\n                    if (field.icon) {\n                        loadPromises.push(icons.getParseIconFunction(field.icon).then(function (iconParser) {\n                            iconParsers[fieldIndex] = iconParser;\n                        }));\n                    }\n                    if (field.menu && field.menu.id) {\n                        menuIds[field.menu.id] = true;\n                        loadPromises.push(menus.getMenuParser(field.menu).then(function (menuParser) {\n                            field.getMenu = menuParser;\n                        }));\n                    }\n                    loadPromises.push(menus.initMenus(Object.keys(menuIds)));\n                });\n                if (tableConfig.caption) {\n                    viewData.caption = utils.strings.parseValue(tableConfig.caption, data, params);\n                }\n                function getField(row, rowIndex, field) {\n                    var fieldData = {\n                        display: field.value && utils.strings.parseValue(field.value, row, params, rowIndex) || \"\",\n                        field: field\n                    };\n                    if (!fieldData.display && field.field) {\n                        fieldData.display = row[field.field];\n                    }\n                    if (field.transform && field.transform.method) {\n                        fieldData.display =\n                            transforms[field.transform.method](field.field ? row[field.field] : fieldData.display, field.transform.options);\n                    }\n                    if (field.externalLinks) {\n                        fieldData.externalLinks = field.externalLinks;\n                    }\n                    if (fieldData.display !== null && typeof (fieldData.display) !== \"string\") {\n                        fieldData.display = String(fieldData.display);\n                    }\n                    if (field.link) {\n                        fieldData.link = utils.strings.parseValue(field.link, row, params, rowIndex);\n                    }\n                    if (field.valueTooltip) {\n                        if (angular.isString(field.valueTooltip)) {\n                            fieldData.tooltip = utils.strings.parseValue(field.valueTooltip, row, params, rowIndex);\n                        }\n                        else if (field.valueTooltip.transform) {\n                            fieldData.tooltip =\n                                transforms[field.valueTooltip.transform.method](row[field.valueTooltip.field], field.valueTooltip.transform.options);\n                        }\n                    }\n                    if (fieldData.display) {\n                        if (field.map) {\n                            var mapValue = field.map[fieldData.display] || field.map._default;\n                            if (mapValue) {\n                                fieldData.display = utils.strings.parseValue(mapValue, row, params, rowIndex);\n                            }\n                        }\n                    }\n                    else if (field.noValueDisplay) {\n                        fieldData.display = field.noValueDisplay;\n                        fieldData.noValue = true;\n                    }\n                    else if (fieldData.display === \"\") {\n                        fieldData.display = \"N/A\";\n                        fieldData.noValue = true;\n                    }\n                    if (field.icon) {\n                        fieldData.icon = iconParsers[field.__index](row);\n                    }\n                    if (field.renderHeader === false) {\n                        fieldData.renderHeader = false;\n                    }\n                    if (field.events) {\n                        fieldData.id = field.name.replace(/\\s/g, \"_\");\n                    }\n                    if (field.switch) {\n                        for (var i = 0, switchItem; !!(switchItem = field.switch[i]); i++) {\n                            if (!switchItem.conditions ||\n                                conditions.validateConditions(switchItem.conditions, row, params)) {\n                                angular.extend(fieldData, getField(row, rowIndex, switchItem.field));\n                                break;\n                            }\n                        }\n                    }\n                    if (field.tags) {\n                        fieldData.tags = tags.getTagsSync(field.tags, row);\n                    }\n                    if (field.menu) {\n                        if (field.getMenu && (!fieldData.noValue || field.menu.renderForEmptyCell)) {\n                            fieldData.menu = field.getMenu(row, params);\n                        }\n                        else if (!fieldData.noValue) {\n                            fieldData.menu = menus.getMenu(field.menu, row, params);\n                        }\n                    }\n                    if (field.externalLinks) {\n                        fieldData.externalLinks = angular.copy(field.externalLinks);\n                        angular.forEach(fieldData.externalLinks, function (externalLink) {\n                            if (externalLink.pinConditions) {\n                                if (conditions.validateConditions(externalLink.pinConditions, row, params)) {\n                                    externalLink.pinned = true;\n                                    if (externalLink.pinnedTooltip) {\n                                        externalLink.currentTooltip = externalLink.pinnedTooltip;\n                                    }\n                                }\n                            }\n                            if (externalLink.url) {\n                                externalLink.href = utils.strings.parseValue(externalLink.url, row, params);\n                            }\n                            if (externalLink.tooltip) {\n                                externalLink.tooltip = utils.strings.parseValue(externalLink.tooltip, row, params);\n                            }\n                        });\n                    }\n                    return fieldData;\n                }\n                function getRow(row, rowIndex) {\n                    var rowData = { display: [] };\n                    angular.forEach(tableConfig.fields, function (field, fieldIndex) {\n                        var fieldData = getField(row, rowIndex, field);\n                        if (field.spanRowsIfEqual) {\n                            var fieldSpan = fieldSpans[String(fieldIndex)];\n                            if (fieldSpan === undefined) {\n                                fieldData.rowSpan = 1;\n                                fieldSpans[String(fieldIndex)] = fieldData;\n                                rowData.display.push(fieldData);\n                            }\n                            else {\n                                if (fieldSpan.display === fieldData.display) {\n                                    fieldSpan.rowSpan++;\n                                }\n                                else {\n                                    fieldData.rowSpan = 1;\n                                    fieldSpans[String(fieldIndex)] = fieldData;\n                                    rowData.display.push(fieldData);\n                                }\n                            }\n                        }\n                        else {\n                            rowData.display.push(fieldData);\n                        }\n                    });\n                    return rowData;\n                }\n                function doGetData() {\n                    if (tableConfig.dataField) {\n                        if (angular.isArray(data)) {\n                            angular.forEach(data, function (item, itemIndex) {\n                                angular.forEach(item[tableConfig.dataField], function (row, rowIndex) {\n                                    viewData.rows.push(getRow(row, itemIndex + rowIndex + 1));\n                                });\n                            });\n                        }\n                        else {\n                            angular.forEach(data[tableConfig.dataField], function (item, itemIndex) {\n                                viewData.rows.push(getRow(item, itemIndex + 1));\n                            });\n                        }\n                    }\n                    else {\n                        angular.forEach(data, function (item, itemIndex) {\n                            viewData.rows.push(getRow(item, itemIndex + 1));\n                        });\n                    }\n                    return viewData;\n                }\n                return $q.all(loadPromises).then(doGetData);\n            }\n            var tableConfig = new TableWidgetConfig(view.settings);\n            return tags.initTags().then(getTableData);\n        }\n        widgetViews.registerView(\"table\", { dataParser: tableDataParser, validate: tableConfigValidate });\n    }\n    tableWidget.$inject = [\"$q\", \"utils\", \"transforms\", \"icons\", \"conditions\", \"menus\", \"tags\", \"widgetViews\",\n        \"TableWidgetConfig\"];\n    angular.module(\"TableWidget\", [\"Utils\", \"Transforms\", \"Styles\", \"Icons\", \"Conditions\", \"Widgets\"]).run(tableWidget);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"TableWidget\").controller(\"TableWidgetController\", [\"$scope\", \"utils\", \"state\", \"events\", function ($scope, utils, state, events) {\n            var currentSortField, sortDirection = 1, sortByField;\n            $scope.sortTable = function (field) {\n                if (!field.sortBy || field.sortDisabled) {\n                    return;\n                }\n                if (field.sortBy === currentSortField) {\n                    sortDirection *= -1;\n                }\n                else {\n                    sortDirection = field.defaultSortDirection || 1;\n                    currentSortField = field.sortBy;\n                    if (sortByField) {\n                        sortByField.sortDirection = 0;\n                    }\n                    sortByField = field;\n                }\n                field.sortDirection = sortDirection;\n                $scope.$emit(\"tableSort\", { direction: sortDirection, field: currentSortField });\n                $scope.$emit(\"widgetDataSort\", { orderBy: currentSortField, orderByDirection: sortDirection === -1 ? \"DESC\" : \"ASC\" });\n                if ($scope.view.settings.sortParam) {\n                    var sortParams = {};\n                    sortParams[$scope.view.settings.sortParam] = currentSortField;\n                    sortParams[$scope.view.settings.sortParam + \"_dir\"] = sortDirection;\n                    state.setParams(sortParams);\n                }\n            };\n            $scope.tableFieldClick = function ($event, fieldData, fieldIndex, row, rowDataIndex) {\n                var field = fieldData.field, rowData = $scope.widget.rawData[rowDataIndex];\n                $scope.$emit(\"tableClick\", {\n                    $event: $event,\n                    field: field,\n                    data: fieldData,\n                    rawData: rowData[fieldData.field.id],\n                    index: fieldIndex\n                });\n                if (field.events) {\n                    if (field.events.click) {\n                        $event.preventDefault();\n                        if (field.events.click.action) {\n                            events.triggerDashboardEvent(field.events.click, rowData, state.currentParams);\n                        }\n                        return false;\n                    }\n                }\n            };\n            $scope.initFilter = function (field) {\n                if (!field.filter) {\n                    return;\n                }\n                if (field.filter.defaultValue !== undefined) {\n                    $scope.widget.params[field.filter.dashboardParam] = field.filter.value = field.filter.defaultValue;\n                    field.filter.enabled = true;\n                }\n            };\n            $scope.filterTable = function (field) {\n                if (!field.filter) {\n                    return;\n                }\n                $scope.widget.params[field.filter.dashboardParam] = field.filter.value;\n                if (field.filter.value !== undefined) {\n                    field.filter.enabled = true;\n                }\n                field.filter.lastAppliedValue = field.filter.value;\n                if (!$scope.widget.query.options) {\n                    $scope.widget.query.options = {};\n                }\n                $scope.widget.report.options.offset = 0;\n                field.filter.enabled = field.filter.value !== field.filter.noFilterValue;\n                $scope.runWidgetReport($scope.widget, true);\n            };\n            $scope.filterInputKeyDown = function (field, e) {\n                if (e.keyCode === 13) {\n                    $scope.filterTable(field);\n                }\n                else if (e.keyCode === 27) {\n                    $scope.closeFilter(field);\n                }\n            };\n            $scope.toggleFilter = function (field) {\n                if (!!(field.filter.open = !field.filter.open)) {\n                    $scope.currentFilter = field.filter;\n                }\n                else {\n                    $scope.currentFilter = null;\n                }\n            };\n            $scope.closeFilter = function (field) {\n                field.filter.open = false;\n                field.filter.value = field.filter.lastAppliedValue !== undefined ? field.filter.lastAppliedValue :\n                    field.filter.defaultValue;\n                $scope.currentFilter = null;\n                field.filter.enabled = field.filter.value !== field.filter.noFilterValue;\n            };\n            $scope.resetFilterTable = function (field) {\n                if (!field.filter) {\n                    return;\n                }\n                field.filter.lastAppliedValue =\n                    field.filter.value = $scope.widget.params[field.filter.dashboardParam] = field.filter.noFilterValue;\n                field.filter.enabled = false;\n                $scope.widget.report.options.offset = 0;\n                $scope.runWidgetReport($scope.widget, true);\n                field.filter.open = false;\n                $scope.currentFilter = null;\n            };\n            $scope.pageTable = function () {\n                $scope.$emit(\"pageData\", {\n                    page: $scope.tablePagingData.currentPage,\n                    pageSize: $scope.tablePagingData.itemsPerPage,\n                    offset: ($scope.tablePagingData.currentPage - 1) * $scope.tablePagingData.itemsPerPage\n                });\n            };\n            function init() {\n                angular.forEach($scope.view.settings.fields, function (field) {\n                    if (field.sortBy && field.sortDirection) {\n                        sortByField = field;\n                        currentSortField = field.sortBy;\n                        sortDirection = field.sortDirection;\n                    }\n                });\n                if ($scope.view.settings.allowPaging) {\n                    $scope.$watch(\"widget.totalResults\", setPaginationData);\n                    $scope.$watch(\"view.dataTotalResults\", setPaginationData);\n                }\n            }\n            init();\n            function setPaginationData() {\n                if (($scope.widget && $scope.widget.totalResults) || $scope.view.dataTotalResults) {\n                    $scope.tablePagingData = {\n                        itemsPerPage: $scope.view.settings.pageSize,\n                        totalCount: $scope.widget.totalResults || $scope.view.dataTotalResults,\n                        currentPage: $scope.view.settings.page || 1\n                    };\n                }\n                if ($scope.view.settings.onDragStart) {\n                    var onDragStart = $scope.view.settings.onDragStart;\n                    $scope.view.settings.onDragStart = function (event, table) {\n                        onDragStart(event, { data: $scope.view.data.rows[table.rowIndex] });\n                    };\n                }\n            }\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('TableWidget')\n        .directive('tableData', [\"widgets\", \"$compile\", function (widgets, $compile) {\n            return {\n                restrict: 'A',\n                require: \"?ngModel\",\n                link: function postLink(scope, element, attrs) {\n                    var data, settings, table = d3.select(element[0]), classes = {\n                        headerSortEnabled: \"widget-table-sort-visible\"\n                    }, dataUnWatcher, settingsUnWatcher;\n                    scope.$on(\"$destroy\", function () {\n                        element.find(\"*\").addBack().off();\n                        element.off();\n                        dataUnWatcher();\n                        settingsUnWatcher();\n                        element.empty();\n                    });\n                    dataUnWatcher = scope.$watch(attrs.tableData, function (value) {\n                        if (!value) {\n                            element.empty();\n                            element.off();\n                        }\n                        else {\n                            data = value;\n                            render();\n                        }\n                    });\n                    settingsUnWatcher = scope.$watch(attrs.tableSettings, function (value) {\n                        if (value) {\n                            settings = value;\n                            render();\n                        }\n                    });\n                    function render() {\n                        element.empty();\n                        if (!data || !settings) {\n                            return;\n                        }\n                        if (data.caption) {\n                            element.append($(\"<caption></caption>\").text(data.caption));\n                        }\n                        if (data.rows && data.rows.length) {\n                            createHeader();\n                            createBody();\n                        }\n                        $compile(element.contents())(scope);\n                    }\n                    function createHeader() {\n                        var headerRow = table.append(\"thead\").append(\"tr\");\n                        headerRow.selectAll(\"th\").data(settings.fields).enter().append(\"th\")\n                            .attr(\"class\", function (field) {\n                            return field.sortBy ? 'widget-table-header-sortable' : '';\n                        })\n                            .attr(\"colspan\", function (field) {\n                            return field.headerColspan;\n                        })\n                            .style(\"width\", function (field) {\n                            return field.width;\n                        });\n                        headerRow.selectAll(\"th\").each(function (field, fieldIndex) {\n                            var th = d3.select(this);\n                            if (field.sortBy) {\n                                th.append(\"a\")\n                                    .attr(\"class\", \"widget-table-sort-link\" +\n                                    (field.sortDirection && !field.sortDisabled ? \" widget-table-sort-enabled\" : \"\") +\n                                    (field.sortDisabled ? \" sort-disabled\" : \"\"))\n                                    .attr(\"ng-click\", \"sortTable(view.settings.fields[\" + fieldIndex +\n                                    \"], view, getWidgetParams(widget))\")\n                                    .text(field.name)\n                                    .append(getFieldHeaderSort);\n                            }\n                            else {\n                                if (field.headerIcon) {\n                                    th.append(\"i\")\n                                        .attr(\"class\", \"table-widget-header-icon icon-\" + field.headerIcon)\n                                        .attr(\"title\", field.name);\n                                }\n                                else if (field.name) {\n                                    th.text(field.name);\n                                }\n                                if (field.tooltip) {\n                                    th.append(\"i\")\n                                        .attr(\"class\", \"icon-question-sign tooltip-icon\")\n                                        .attr(\"title\", field.tooltip);\n                                }\n                            }\n                        });\n                    }\n                    function createBody() {\n                        if (scope.widget.isLoading) {\n                            return;\n                        }\n                        var rows = table.append(\"tbody\").selectAll(\"tr\").data(data.rows).enter().append(\"tr\");\n                        rows.each(function (rowData, rowIndex) {\n                            var cells = d3.select(this).selectAll(\"td\").data(function (row) {\n                                return row.display;\n                            }).enter().append(\"td\")\n                                .attr(\"class\", function (d, i) {\n                                try {\n                                    return d.noValue ? 'widget-table-cell-no-value' :\n                                        settings.fields[i].className || null;\n                                }\n                                catch (e) {\n                                }\n                            })\n                                .attr(\"rowspan\", function (d) {\n                                return d.rowSpan || null;\n                            })\n                                .attr(\"colspan\", function (d) {\n                                return d.colspan;\n                            });\n                            cells.each(function (cellData, cellIndex) {\n                                var cell = d3.select(this);\n                                cell.append(cellData.link || cellData.field.events && cellData.field.events.click ?\n                                    function (d) {\n                                        return getCellLink(d, rowIndex, cellIndex);\n                                    } : getCellText);\n                                if (cellData.externalLinks) {\n                                    cell.append(function (d) {\n                                        return getCellExternalLinks(d, rowIndex, cellIndex);\n                                    });\n                                }\n                                if (cellData.tags) {\n                                    cell.append(function (d) {\n                                        return getCellTags(d);\n                                    });\n                                }\n                                if (cellData.menu && cellData.menu.items) {\n                                    cell.append(function (d) {\n                                        return getCellMenu(d, rowIndex, cellIndex);\n                                    });\n                                }\n                            });\n                        });\n                    }\n                    function getFieldHeaderSort(field) {\n                        var sort = document.createElement(\"span\"), caretUp = document.createElement(\"i\"), caretDown = document.createElement(\"i\");\n                        sort.className = \"widget-table-sort\";\n                        if (field.sortDirection) {\n                            if (field.sortDirection === 1) {\n                                sort.classList.add(\"widget-table-sort-up\");\n                            }\n                            else if (field.sortDirection === -1) {\n                                sort.classList.add(\"widget-table-sort-down\");\n                            }\n                        }\n                        caretUp.className = \"fa fa-caret-up\";\n                        caretDown.className = \"fa fa-caret-down\";\n                        if (!field.sortDirection) {\n                            caretUp.classList.add(classes.headerSortEnabled);\n                            caretDown.classList.add(classes.headerSortEnabled);\n                        }\n                        else if (field.sortDirection === 1) {\n                            caretUp.classList.add(classes.headerSortEnabled);\n                        }\n                        else if (field.sortDirection === -1) {\n                            caretDown.classList.add(classes.headerSortEnabled);\n                        }\n                        sort.appendChild(caretUp);\n                        sort.appendChild(caretDown);\n                        return sort;\n                    }\n                    function getCellIcon(d) {\n                        var icon = d3.select(document.createElement(\"span\"));\n                        icon.style(d.icon.style)\n                            .attr(\"title\", d.icon.tooltip || d.tooltip);\n                        icon.append(\"i\").attr(\"class\", \"fa fa-\" + d.icon.type);\n                        return icon[0][0];\n                    }\n                    function getCellTags(field) {\n                        var tags = d3.select(document.createElement(\"div\"));\n                        tags.attr(\"class\", \"widget-table-tags\");\n                        tags.selectAll(\".tag\").data(field.tags).enter().append(\"span\")\n                            .attr(\"class\", function (d) {\n                            return \"tag \" + (d.className || \"widget-table-tag\");\n                        })\n                            .attr(\"title\", function (d) {\n                            return d.name;\n                        })\n                            .text(function (d) {\n                            return d.text;\n                        });\n                        return tags[0][0];\n                    }\n                    function getCellText(d) {\n                        var text = document.createElement(\"span\");\n                        if (d.tooltip) {\n                            text.setAttribute(\"title\", d.tooltip);\n                        }\n                        if (d.icon && d.icon.type) {\n                            text.appendChild(getCellIcon(d));\n                        }\n                        text.innerHTML = text.innerHTML + d.display;\n                        return text;\n                    }\n                    function getCellLink(d, rowIndex, cellIndex) {\n                        var link = document.createElement(\"a\");\n                        if (d.style && d.style.color) {\n                            link.style.color = d.style.color;\n                        }\n                        if (settings.dragContents) {\n                            link.classList.add(\"draggable\");\n                        }\n                        if (d.field.events && d.field.events.click) {\n                            link.setAttribute(\"ng-click\", \"tableFieldClick($event, view.data.rows[\" + rowIndex + \"].display[\" + cellIndex +\n                                \"], \" + cellIndex + \", view.data.rows[\" + rowIndex + \"], \" + rowIndex + \")\");\n                        }\n                        else {\n                            link.setAttribute(\"href\", d.link);\n                        }\n                        if (d.tooltip) {\n                            link.setAttribute(\"title\", d.tooltip);\n                        }\n                        if (d.icon && d.icon.type) {\n                            link.appendChild(getCellIcon(d));\n                        }\n                        var linkSpan = document.createElement(\"span\");\n                        linkSpan.innerHTML = d.display;\n                        link.appendChild(linkSpan);\n                        return link;\n                    }\n                    function getCellExternalLinks(d, rowIndex, cellIndex) {\n                        var externalLinksContainer = d3.select(document.createElement(\"span\")), externalLinks = externalLinksContainer.selectAll(\"a\").data(d.externalLinks).enter()\n                            .append(\"a\")\n                            .attr(\"href\", function (externalLink) {\n                            return externalLink.href || externalLink.link;\n                        })\n                            .attr(\"ng-click\", function (externalLink, i) {\n                            return externalLink.href || externalLink.link ? null :\n                                \"externalLinkClick($event, view.data.rows[\" + rowIndex + \"].display[\" + cellIndex +\n                                    \"].externalLinks[\" + i + \"], widget.rawData[\" + rowIndex + \"])\";\n                        })\n                            .attr(\"class\", function (externalLink) {\n                            return \"table-external-link\" +\n                                (externalLink.pinned ? \" table-external-link-pinned\" : \"\");\n                        })\n                            .attr(\"title\", function (externalLink) {\n                            return externalLink.currentTooltip || externalLink.tooltip;\n                        });\n                        externalLinks.each(function (d) {\n                            var linkElement = d3.select(this);\n                            if (d.icon) {\n                                linkElement.append(\"i\")\n                                    .attr(\"class\", \"icon-\" + d.icon);\n                            }\n                            else if (d.text) {\n                                linkElement.append(\"span\").text(d.text);\n                            }\n                        });\n                        return externalLinksContainer[0][0];\n                    }\n                    function getCellMenu(d, rowIndex) {\n                        var menu = $('<menu class=\"dropdown dropdown-directive\"><a class=\"clickable dropdown-toggle ' +\n                            'dropdown-delegate-toggle hidden-phone\"><b class=\"caret\"></a></menu>')[0];\n                        menu.menu = d.menu;\n                        menu.data = scope.widget.rawData[rowIndex];\n                        return menu;\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    function TableWidgetConfigFactory() {\n        function TableConfig(config) {\n            this.validate(config);\n            this.fields = config.fields.map(function (field) {\n                return new TableFieldConfig(field);\n            });\n            this.caption = config.caption;\n            /**\n             * dataField is used for arrays within a data item, to render all the inner rows.\n             */\n            this.dataField = config.dataField;\n            this.sortParam = config.sortParam;\n        }\n        TableConfig.prototype.validate = function (config) {\n            var ERROR_PREFIX = \"Can't create TableConfig, \";\n            if (!config) {\n                throw new Error(ERROR_PREFIX + \"missing the config object.\");\n            }\n            if (Object(config) !== config) {\n                throw new TypeError(ERROR_PREFIX + \"config isn't an object.\");\n            }\n            if (!config.fields) {\n                throw new Error(ERROR_PREFIX + \"missing the fields property.\");\n            }\n            if (config.fields.constructor !== Array) {\n                throw new TypeError(ERROR_PREFIX + \"fields must be an array.\");\n            }\n            if (config.caption && typeof (config.caption) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"invalid caption field. Expected string but got \" +\n                    typeof (config.caption));\n            }\n            if (config.dataField && typeof (config.dataField) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"invalid dataField field. Expected string but got \" +\n                    typeof (config.dataField));\n            }\n        };\n        function TableFieldConfig(config) {\n            this.validate(config);\n            this.name = config.name;\n            this.field = config.field;\n            this.value = config.value;\n            this.link = config.link;\n            this.noValueDisplay = config.noValueDisplay;\n            this.spanRowsIfEqual = config.spanRowsIfEqual;\n            this.menu = config.menu;\n            this.tags = config.tags; // TODO: Create a tags class and use it here.\n            this.icon = config.icon; // TODO: Create an Icon class and use it here.\n            this.valueTooltip = config.valueTooltip;\n            this.map = config.map; // TODO: validate this\n            this.renderHeader = config.renderHeader !== false;\n            this.sortBy = config.sortBy;\n            this.sortDirection = config.sortDirection;\n            this.externalLinks = config.externalLinks;\n        }\n        TableFieldConfig.prototype.validate = function (config) {\n            var ERROR_PREFIX = \"Invalid field for table, \";\n            if (!config) {\n                throw new Error(ERROR_PREFIX + \"no configuration specified.\");\n            }\n            if (Object(config) !== config) {\n                throw new TypeError(ERROR_PREFIX + \"config isn't an object.\");\n            }\n            if (!config.name || typeof (config.name) !== \"string\") {\n                throw new Error(ERROR_PREFIX + \"expected a string field 'name' but got \" + String(config.name));\n            }\n            if (!config.field && !config.value) {\n                throw new Error(ERROR_PREFIX + \"missing a 'field' or 'value' property.\");\n            }\n            if (config.field && typeof (config.field) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"expected a string 'field' property, but got \" +\n                    typeof (config.field));\n            }\n            if (config.value && typeof (config.value) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"expected a string 'value' property, but got \" +\n                    typeof (config.value));\n            }\n            if (config.link && typeof (config.link) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"expected a string 'link' property, but got \" + typeof (config.link));\n            }\n            if (config.noValueDisplay && typeof (config.noValueDisplay) !== \"string\") {\n                throw new TypeError(ERROR_PREFIX + \"expected a string 'noValueDisplay' property, but got \" +\n                    typeof (config.noValueDisplay));\n            }\n            if (config.spanRowsIfEqual && typeof (config.spanRowsIfEqual) !== \"boolean\") {\n                throw new TypeError(ERROR_PREFIX + \"expected a boolean 'spanRowsIfEqual' property, but got \" +\n                    typeof (config.spanRowsIfEqual));\n            }\n        };\n        return TableConfig;\n    }\n    angular.module(\"TableWidget\").factory(\"TableWidgetConfig\", TableWidgetConfigFactory);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"BubblesWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"utils\", \"widgetViews\",\n        function (utils, widgetViews) {\n            /**\n             *\n             * @param {{settings: {noValueLabel, childIdField}}} view\n             * @param data\n             * @param params\n             * @returns {{children: Array}}\n             */\n            function bubblesDataParser(view, data, params) {\n                var parsedData = [], itemsIndex = {}, membersIndex = {}, membersCount = 0;\n                angular.forEach(data, function (item) {\n                    var itemName = utils.strings.parseValue(view.settings.label, item, params) ||\n                        view.settings.noValueLabel || \"N/A\", indexedItem = itemsIndex[itemName];\n                    if (!indexedItem) {\n                        indexedItem = itemsIndex[itemName] = { name: itemName, membersIndex: {}, members: [], value: 0 };\n                        if (view.settings.highlight && indexedItem.name === view.settings.highlight) {\n                            indexedItem.highlight = true;\n                        }\n                    }\n                    if (view.settings.childIdField) {\n                        var childId = item[view.settings.childIdField];\n                        if (!indexedItem.membersIndex[childId]) {\n                            indexedItem.membersIndex[childId] = item;\n                            if (!membersIndex[childId]) {\n                                membersIndex[childId] = true;\n                                membersCount++;\n                            }\n                        }\n                    }\n                    else {\n                        membersCount += view.settings.value ? item[view.settings.value] : 0;\n                    }\n                    indexedItem.value += view.settings.value ? item[view.settings.value] : 1;\n                });\n                var item;\n                for (var itemName in itemsIndex) {\n                    if (itemsIndex.hasOwnProperty(itemName)) {\n                        item = itemsIndex[itemName];\n                        for (var childId in item.membersIndex) {\n                            if (item.membersIndex.hasOwnProperty(childId)) {\n                                item.members.push(item.membersIndex[childId]);\n                            }\n                        }\n                        delete item.membersIndex;\n                        parsedData.push(itemsIndex[itemName]);\n                        item._percent = 100 * (item.members.length || item.value) / membersCount;\n                    }\n                }\n                return { children: parsedData };\n            }\n            widgetViews.registerView(\"bubbles\", { dataParser: bubblesDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('BubblesWidget')\n        .directive('bubbles', [\"Chart\", \"utils\", function (Chart, utils) {\n            return {\n                template: '<div class=\"widget-bubbles\"></div>',\n                restrict: 'E',\n                require: \"?ngModel\",\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    /* jshint validthis: true */\n                    function draw() {\n                        var self = this, svg = this.dataSvg, diameter = Math.min(this.dataWidth, this.dataHeight);\n                        this.svg.attr(\"width\", diameter);\n                        var bubble = d3.layout.pack()\n                            .sort(null)\n                            .size([diameter - this.options.margins.left - this.options.margins.right,\n                            diameter - this.options.margins.top - this.options.margins.bottom])\n                            .padding(1.5);\n                        this.elements.nodes = svg.selectAll(\".node\")\n                            .data(bubble.nodes(self.data).filter(function (d) {\n                            return !d.children;\n                        }))\n                            .enter()\n                            .append(\"g\")\n                            .attr(\"class\", \"node\")\n                            .attr(\"data-tooltip\", \"\")\n                            .attr(\"transform\", function (d) {\n                            return \"translate(\" + d.x + \",\" + d.y + \")\";\n                        })\n                            .attr(\"data-selectable\", this.settings.onSelect ? \"\" : null);\n                        this.elements.circles = this.elements.nodes.append(\"circle\")\n                            .attr(\"r\", function (d) {\n                            return d.r;\n                        });\n                        this.elements.circles = this.elements.nodes.append(\"text\")\n                            .attr(\"dy\", \".3em\")\n                            .style(\"text-anchor\", \"middle\")\n                            .attr(\"font-family\", \"Roboto, sans-serif\")\n                            .attr(\"font-size\", \"14px\")\n                            .attr(\"font-weight\", \"bold\")\n                            .text(function (d) {\n                            return d.name.substring(0, d.r / 4.5);\n                        });\n                    }\n                    var defaultOptions = {\n                        circleStrokeWidth: 2\n                    }, graph = new Chart(defaultOptions, draw);\n                    element.css(\"height\", \"100%\");\n                    graph.getTooltipText = function (d) {\n                        return graph.settings.tooltipText ? utils.strings.parseValue(graph.settings.tooltipText, d) :\n                            d.data[graph.settings.label] + \": \" + d.data[graph.settings.value] + \" (\" +\n                                Math.round(d.data._percent) + \"%)\";\n                    };\n                    graph.init(scope, element, attrs);\n                    scope.$on(\"$destroy\", function () {\n                        element.off();\n                        element.empty();\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"HeatMapWidget\", [\"Utils\", \"Colors\", \"Widgets\"]).run([\"utils\", \"widgetViews\",\n        function (utils, widgetViews) {\n            /**\n             * Return the items of the legend from the widget settings\n             * @param view\n             * @returns {*|Array}\n             */\n            function getLegendItems(view) {\n                return view.settings.legend || [];\n            }\n            function heatMapDataParser(view, data, params) {\n                var allColumnsArr = getColumnsObj(view, data, params);\n                verifyThatAllHoursExists(view, allColumnsArr, data);\n                var rowsArr = getRowsArr(view, data, params, allColumnsArr);\n                return {\n                    columns: allColumnsArr,\n                    rows: rowsArr,\n                    columnsOnePercentValue: getColumnsPercentValue(allColumnsArr, view.settings.behavior.columns.percentCalculationMethod),\n                    legend: {\n                        items: getLegendItems(view)\n                    }\n                };\n            }\n            /**\n             * This function creates an array of columns by the data that being retrieved from the DB\n             * This array is being used for building the columns, and a copy of the array is being\n             * created in each of the row object\n             * @param view\n             * @param data\n             * @param params\n             * @returns {Array}\n             */\n            function getColumnsObj(view, data, params) {\n                var columnsObj = {}, arrToReturn = [];\n                for (var i = 0; i < data.length; i++) {\n                    var item = data[i];\n                    var columnName = utils.strings.parseValue(view.settings.column, item, params);\n                    if (!columnsObj[columnName]) {\n                        // we do this only to check that we are not repeating ourselves\n                        columnsObj[columnName] = { name: columnName || \"Unknown\", value: 0, valueSum: 0, count: 0 };\n                        arrToReturn.push(columnsObj[columnName]);\n                    }\n                }\n                return arrToReturn;\n            }\n            /**\n             * This function creates the array of rows by using the data that being retrieved from the DB\n             * @param view\n             * @param data\n             * @param params\n             * @param allColumnsArr\n             * @returns {Array}\n             */\n            function getRowsArr(view, data, params, allColumnsArr) {\n                var rowsArr = [], rowsObj = {};\n                angular.forEach(data, function (item) {\n                    if (typeof view.settings.row === \"object\") {\n                        // we don't specifically declare the row labels, every object in the json object which is not\n                        // label is a row\n                        angular.forEach(item, function (value, key) {\n                            if (view.settings.row[key]) {\n                                var rowItem = {\n                                    key: key,\n                                    name: view.settings.row[key],\n                                    count: 0,\n                                    columns: angular.copy(allColumnsArr)\n                                };\n                                var columnName = utils.strings.parseValue(view.settings.column, item, params);\n                                if (!rowsObj[rowItem.name]) {\n                                    rowsObj[rowItem.name] = true;\n                                    setColumnsValue(view, rowItem, columnName, item, allColumnsArr);\n                                    rowsArr.push(rowItem);\n                                }\n                                else {\n                                    var rowToChange = rowsArr.filter(function (row) {\n                                        return row.name === rowItem.name;\n                                    })[0];\n                                    setColumnsValue(view, rowToChange, columnName, item, allColumnsArr);\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        //This mean we specifically declare the value of the rows\n                        // like this feature was designed in the first time\n                        // we building the row item and adding a copy of the \"all columns object\" to it\n                        var rowItem = {\n                            name: utils.strings.parseValue(view.settings.row, item, params),\n                            count: 0,\n                            columns: angular.copy(allColumnsArr)\n                        };\n                        // we use the current column name  and send it to the setColumnsValue()\n                        var columnName = utils.strings.parseValue(view.settings.column, item, params);\n                        if (!rowsObj[rowItem.name]) {\n                            rowsObj[rowItem.name] = true;\n                            setColumnsValue(view, rowItem, columnName, item, allColumnsArr);\n                            rowsArr.push(rowItem);\n                        }\n                        else {\n                            var rowToChange = rowsArr.filter(function (row) {\n                                return row.name === rowItem.name;\n                            })[0];\n                            setColumnsValue(view, rowToChange, columnName, item, allColumnsArr);\n                        }\n                    }\n                });\n                return rowsArr;\n            }\n            /**\n             * This function used the row and mark the values of the heat in each row.columns[n]\n             * when there is no value it will mark 1, the idea is that the colors spectrum will be\n             * from 0-1.\n             * @param view\n             * @param rowItem\n             * @param columnName\n             * @param dataItem\n             * @param allColumnsArr\n             */\n            function setColumnsValue(view, rowItem, columnName, dataItem, allColumnsArr) {\n                rowItem.columns.map(function (column) {\n                    if (column.name === columnName) {\n                        var value;\n                        if (typeof view.settings.row === \"object\") {\n                            value = dataItem[rowItem.key];\n                        }\n                        else {\n                            value = utils.strings.parseValue(view.settings.value, dataItem);\n                        }\n                        rowItem.count++;\n                        if (value !== \"\") {\n                            column.value = Number(value);\n                        }\n                        else {\n                            column.value = 1;\n                        }\n                        if (column.value > 0) {\n                            // we updating the value in the main column object\n                            allColumnsArr.map(function (c) {\n                                if (c.name === columnName) {\n                                    c.count++;\n                                    c.valueSum += column.value;\n                                }\n                            });\n                        }\n                    }\n                    column.rowName = rowItem.name;\n                });\n            }\n            /**\n             * When defined at the settings, we calculate the percent of each column and\n             * return it's value\n             * @param allColumnsArr\n             * @param percentCalculationMethod\n             * @returns {number}\n             */\n            function getColumnsPercentValue(allColumnsArr, percentCalculationMethod) {\n                var sum = 0;\n                angular.forEach(allColumnsArr, function (c) {\n                    sum += c[percentCalculationMethod];\n                });\n                return Math.round(100 / sum);\n            }\n            /**\n             * This function related to vpn hours display only,\n             * It basically add columns of hours where there are non to make the board (heat map) look like\n             * a 24 hours board instead of dependency over the data.\n             * @param view\n             * @param columns\n             */\n            function verifyThatAllHoursExists(view, columns) {\n                if (view.settings.showHours === true) {\n                    var hours = {\n                        \"00:00\": 0, \"01:00\": 0, \"02:00\": 0, \"03:00\": 0, \"04:00\": 0, \"05:00\": 0,\n                        \"06:00\": 0, \"07:00\": 0, \"08:00\": 0, \"09:00\": 0, \"10:00\": 0, \"11:00\": 0,\n                        \"12:00\": 0, \"13:00\": 0, \"14:00\": 0, \"15:00\": 0, \"16:00\": 0, \"17:00\": 0,\n                        \"18:00\": 0, \"19:00\": 0, \"20:00\": 0, \"21:00\": 0, \"22:00\": 0, \"23:00\": 0\n                    };\n                    angular.forEach(columns, function (c) {\n                        hours[c.name] = 1;\n                    });\n                    var count = 0;\n                    angular.forEach(hours, function (value, key) {\n                        if (value === 0) {\n                            var column = {\n                                count: 0,\n                                name: key,\n                                value: 0,\n                                valueSum: 0\n                            };\n                            columns.splice(count, 0, column);\n                        }\n                        count++;\n                    });\n                }\n            }\n            widgetViews.registerView(\"heatMap\", { dataParser: heatMapDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('HeatMapWidget')\n        .directive('heatMap', [\"utils\", \"colors\", \"Chart\", function (utils, colors, Chart) {\n            return {\n                template: '<div class=\"widget-heat-map chart\"></div>',\n                restrict: 'E',\n                require: \"?ngModel\",\n                replace: true,\n                link: function postLink(scope, element, attrs, ngModel) {\n                    /**\n                     * This function draw the heat map table\n                     */\n                    function draw() {\n                        //Start scrolling handling\n                        /**\n                         * Add scrolling SVG item\n                         * graphHeight - The  height of the graph - include the labels and all cells\n                         */\n                        function setScrolling(graphHeight) {\n                            //Add rect item to SVG for scrolling, and set the location to be marings.top\n                            //and other parameters\n                            graph.scroll = { position: 0, scrollBarPosition: graph.options.margins.top };\n                            graph.scroll.container = graph.svg.append(\"svg:g\")\n                                .attr(\"class\", \"scrollbar scrollbar-v\")\n                                .attr(\"transform\", \"translate(\" + (element.width() - graph.options.margins.right) + \", \" +\n                                graph.options.margins.top + \")\");\n                            graph.scroll.scrollBar = graph.scroll.container.append(\"rect\")\n                                .attr(\"class\", \"scrollbar\")\n                                .attr(\"x\", \"-20px\")\n                                .attr(\"y\", graph.options.margins.top)\n                                .attr(\"rx\", \"4px\")\n                                .attr(\"width\", graph.options.scrollBarWidth = 8)\n                                .attr(\"height\", graph.scroll.scrollBarHeight = 60);\n                            //Event listener to dragging the rect item which represent the scroller\n                            var scrollDrag = d3.behavior.drag().on(\"drag\", function () {\n                                scrollDragMove(d3.event.dy);\n                            });\n                            //Event listener of scrolling with mouse wheel\n                            graph.svg.on(\"mousewheel\", function () {\n                                var deltaY = Math.ceil(d3.event.wheelDelta / -80);\n                                d3.event.preventDefault();\n                                graph.scroll.scrollBar.attr(\"y\", graph.scroll.scrollBarPosition += deltaY);\n                                scrollDragMove(deltaY);\n                            });\n                            graph.scroll.scrollBar.call(scrollDrag);\n                            //The scroll length is function of the ration and minScrollBarPosition\n                            //Scroll bar possition should be equals to the chart height\n                            graph.scroll.ratio = -0.66;\n                            graph.scroll.minScrollBarPosition =\n                                // (graph.height  - graph.scroll.scrollBarHeight - graph.options.margins.top -\n                                // graph.options.margins.bottom/2 )*10;\n                                graphHeight - graph.scroll.scrollBarHeight - graph.options.margins.bottom;\n                            graph.scroll.scrollBarPosition = graph.options.margins.top;\n                            //This function move the location of scroller rect and change the visible part of the\n                            // SVG component\n                            function scrollDragMove(deltaY) {\n                                graph.scroll.scrollBarPosition = Math.max(0, Math.min(graph.scroll.minScrollBarPosition, graph.scroll.scrollBarPosition + deltaY));\n                                graph.scroll.scrollBar.attr(\"y\", graph.scroll.scrollBarPosition);\n                                graph.scroll.position = graph.scroll.scrollBarPosition * graph.scroll.ratio;\n                                rootScrollableContainer.attr(\"transform\", \"translate(0,\" + graph.scroll.position + \")\");\n                            }\n                        }\n                        function removeScrolling() {\n                            //Currently don't do nothing\n                        }\n                        element.css(\"width\", \"100%\");\n                        element.css(\"height\", \"100%\");\n                        //Set max page size\n                        //The internal height of window with 'px'\n                        var maxHeight = element.closest('.widget-view-wrap').css('height');\n                        //Convert to number\n                        maxHeight = Number(maxHeight.substring(0, maxHeight.length - 2));\n                        /* jshint validthis: true */\n                        if (this.height < 100) {\n                            element.empty();\n                            element.off();\n                            graph.init(scope, element, attrs);\n                        }\n                        else {\n                            var self = this, maxCellSize = element.width() / 35, data = angular.copy(graph.data), colorSettings = scope.view.settings.behavior.color || { domain: getValuesExtent(data) }, maxLabelSize = 25, gapBetweenCells = 1, animationDuration = 1500, columnLabelPosition = scope.view.settings.behavior.columns.position || \"top\";\n                            var margin = getMargin(data, self, maxLabelSize, gapBetweenCells, columnLabelPosition);\n                            self.scaleX = d3.scale.linear()\n                                .domain([0, data.columns.length])\n                                .range([0, self.width - (margin.right + margin.left)]);\n                            var cellSize = self.scaleX(1);\n                            cellSize = (cellSize < maxCellSize) ? cellSize : maxCellSize;\n                            var fontScale = d3.scale.linear()\n                                .domain([0, maxCellSize])\n                                .range([0.9, 0.9]);\n                            self.heatMapProperties = {\n                                margin: margin,\n                                cellSize: cellSize,\n                                colorScale: colors.getScale(colorSettings),\n                                fontSize: fontScale(cellSize),\n                                gapBeweenCells: gapBetweenCells,\n                                columnLabelPosition: columnLabelPosition,\n                                animationDuration: animationDuration\n                            };\n                            var realGraphHeight = graph.heatMapProperties.margin.top +\n                                graph.heatMapProperties.margin.bottom + (cellSize * (graph.data.rows.length + 1));\n                            //End scrolling handling\n                            graph.data = createJsonArr();\n                            buildHeatMapForTheFirstTime(graph.data);\n                            var newHeight = Math.min(maxHeight, realGraphHeight);\n                            //If the graph size + the mergin bigger then maxHeight (the white space) we should add\n                            // scrolling\n                            var graphHeight = (cellSize * (graph.data.rows.length + 1)) + maxLabelSize +\n                                graph.heatMapProperties.margin.top;\n                            if (graphHeight > maxHeight) {\n                                setScrolling(maxHeight - graph.options.margins.bottom);\n                            }\n                            else {\n                                removeScrolling();\n                            }\n                            element.css(\"height\", newHeight + \"px\");\n                            $(element).parents(\".widget-view-container\").css(\"height\", \"inherit\");\n                            var legendX = calculateCenter() +\n                                (cellSize + graph.heatMapProperties.gapBeweenCells) * (graph.data.columns.length) +\n                                graph.heatMapProperties.margin.left / 2;\n                            var legendHeight = (cellSize + graph.heatMapProperties.gapBeweenCells) *\n                                graph.data.rows.length;\n                            legendHeight = (legendHeight < 200) ? legendHeight : 150;\n                            addLegend(legendX, graph.heatMapProperties.margin.top, 10, legendHeight, getValuesExtent(data), scope.view.settings.legend, scope.view.settings.behavior.color || \"range\");\n                        }\n                    }\n                    var defaultOptions = {\n                        direction: \"vertical\"\n                    }, graph = new Chart(defaultOptions, draw);\n                    element.css(\"height\", \"100%\");\n                    element.css(\"width\", \"100%\");\n                    scope.$watch(element, function () {\n                        graph.init(scope, element, attrs);\n                    });\n                    element.parents(\".dataView\").addClass(\"heatMapView\");\n                    var lastItemNameClicked;\n                    var rootScrollableContainer;\n                    /**\n                     * This function sort the rows of the heatmap when the user click on the head of a column\n                     * @param column\n                     */\n                    function sortByColumn(column) {\n                        if (column.name !== lastItemNameClicked) {\n                            lastItemNameClicked = column.name;\n                            var myData = d3.values(angular.copy(graph.data));\n                            myData[1].sort(function (a, b) {\n                                var aVal = a.columns.filter(function (col) {\n                                    if (col.name === column.name) {\n                                        col.lastSortedItem = true;\n                                    }\n                                    return col.name === column.name;\n                                });\n                                var bVal = b.columns.filter(function (col) {\n                                    return col.name === column.name;\n                                });\n                                if (aVal[0].value < bVal[0].value) {\n                                    return 1;\n                                }\n                                else {\n                                    return -1;\n                                }\n                            });\n                            graph.data.rows = (graph.heatMapProperties.columnLabelPosition === \"top\") ? myData[1] :\n                                myData[1].reverse();\n                            animateHeatmap();\n                        }\n                    }\n                    /**\n                     * This function sorts the columns of the heatmap when the user click on a row\n                     * It basically sorts all columns objects that belong to the rows so there will be similarity\n                     * Process:\n                     * 1. sort the columns of the row object that was clicked\n                     * 2. according to the this creates new array of columns object to each one of the rows\n                     * 3. sort the rows by similarity to create the best heatmap that the user can learn something from\n                     *\n                     * @param row\n                     */\n                    function sortByRow(row) {\n                        if (row.name !== lastItemNameClicked) {\n                            lastItemNameClicked = row.name;\n                            var myData = d3.values(angular.copy(graph.data)), \n                            //first we are sorting the selected row;\n                            selectedRowArr = row.columns.sort(function (a, b) {\n                                if (a.value < b.value) {\n                                    return 1;\n                                }\n                                else {\n                                    return -1;\n                                }\n                                //return d3.descending(b.value);\n                            });\n                            // then we create rowObjects for each existing row and we sort it\n                            angular.forEach(myData[1], function (r) {\n                                var newArr = [];\n                                angular.forEach(selectedRowArr, function (sra) {\n                                    var myColumn = r.columns.filter(function (obj) {\n                                        return obj.name === sra.name;\n                                    })[0];\n                                    var newRow = {\n                                        name: sra.name,\n                                        value: myColumn.value,\n                                        id: myColumn.id,\n                                        x: myColumn.x,\n                                        y: myColumn.y\n                                    };\n                                    newArr.push(newRow);\n                                });\n                                r.columns = angular.copy(newArr);\n                            });\n                            row.lastSortedItem = true; // adding true will show the selected row\n                            row.columns = setColumnsValue(row.columns);\n                            graph.data.columns = angular.copy(row.columns);\n                            graph.data.rows = myData[1];\n                            animateHeatmap();\n                        }\n                    }\n                    /**\n                     * Run over all columns of a row in order to return the value\n                     * @param columns\n                     * @returns {*}\n                     */\n                    function setColumnsValue(columns) {\n                        angular.forEach(graph.data.columns, function (col) {\n                            columns.map(function (c) {\n                                if (c.name === col.name) {\n                                    c.valueSum = col.valueSum;\n                                    c.count = col.count;\n                                }\n                            });\n                        });\n                        return columns;\n                    }\n                    graph.getTooltipText = function (d, attrValue) {\n                        return attrValue ? utils.strings.parseValue(attrValue, d) : \"\";\n                    };\n                    /**\n                     * This function related to the colors' gradient of the heat map.\n                     * since we should define the gradient according to the lowest and highest minimum value\n                     * we check the poles of the data and send it to the ColorService\n                     * @param data\n                     * @returns {*[]}\n                     */\n                    function getValuesExtent(data) {\n                        var myExt = [null, 0];\n                        angular.forEach(data.rows, function (d) {\n                            var ext = d3.extent(d.columns, function (e) {\n                                return e.value;\n                            });\n                            myExt[0] = Math.min(ext[0], myExt[0] || ext[0]);\n                            myExt[1] = Math.max(ext[1], myExt[1]);\n                        });\n                        // in case that the min and max are equals keep the min lower\n                        if (myExt[0] === myExt[1]) {\n                            myExt[0] = 0;\n                        }\n                        return myExt;\n                    }\n                    function calculateCenter() {\n                        var mapWidth = (graph.heatMapProperties.cellSize + graph.heatMapProperties.gapBeweenCells) *\n                            graph.data.columns.length + graph.heatMapProperties.margin.left, left = (graph.width - mapWidth) / 2;\n                        return (left < graph.heatMapProperties.margin.left) ? graph.heatMapProperties.margin.left :\n                            left;\n                    }\n                    function buildHeatMapForTheFirstTime(data) {\n                        var container = graph.dataSvg.append(\"g\")\n                            .attr(\"transform\", \"translate(\" + calculateCenter() + \",\" + graph.heatMapProperties.margin.top + \")\");\n                        //This is the area that we wish to scroll, if scroll required\n                        rootScrollableContainer = container.append(\"g\");\n                        rootScrollableContainer.append(\"g\")\n                            .selectAll(\".rowLabel\")\n                            .data(data.rows)\n                            .enter()\n                            .append(\"text\")\n                            .text(function (d) {\n                            return d.name;\n                        })\n                            .style(\"font-size\", graph.heatMapProperties.fontSize + \"em\")\n                            .attr(\"x\", function (d) {\n                            return d.x;\n                        })\n                            .attr(\"y\", function (d) {\n                            return d.y;\n                        })\n                            .style(\"text-anchor\", \"end\")\n                            .attr(\"data-tooltip\", scope.view.settings.behavior.rows.tooltip)\n                            .attr(\"transform\", function () {\n                            return \" translate(-10,0)\";\n                        })\n                            .attr(\"rowIndex\", function (d, i) {\n                            return i;\n                        })\n                            .attr(\"class\", function (d) {\n                            return \"rowLabel mono \" + d.headerId;\n                        })\n                            .on(\"mouseover\", function () {\n                            d3.select(this).classed(\"text-hover\", true);\n                        })\n                            .on(\"mouseout\", function () {\n                            d3.select(this).classed(\"text-hover\", false);\n                        })\n                            .on(\"click\", function (row) {\n                            if (scope.view.settings.behavior.rows.isSortingEnabled === null ||\n                                scope.view.settings.behavior.rows.isSortingEnabled !== false) {\n                                sortByRow(row);\n                            }\n                        });\n                        rootScrollableContainer.append(\"g\")\n                            .selectAll(\".colLabel\")\n                            .data(data.columns)\n                            .enter()\n                            .append(\"text\")\n                            .text(function (d) {\n                            return d.name;\n                        })\n                            .attr(\"x\", 0)\n                            .attr(\"y\", function (d) {\n                            return d.x;\n                        })\n                            .style(\"font-size\", graph.heatMapProperties.fontSize + \"em\")\n                            .style(\"text-anchor\", \"left\")\n                            .attr(\"transform\", function (d) {\n                            return \" translate(0,\" + d.translateY + \") rotate (-90)\";\n                        })\n                            .attr(\"text-anchor\", function (d) {\n                            return d.textAnchor;\n                        })\n                            .attr(\"data-tooltip\", scope.view.settings.behavior.columns.tooltip)\n                            .attr(\"class\", function (d, i) {\n                            return \"colLabel mono c\" + i + \" \" + d.headerId;\n                        })\n                            .on(\"click\", function (column) {\n                            sortByColumn(column);\n                        })\n                            .on(\"mouseover\", function () {\n                            d3.select(this).classed(\"text-hover\", true);\n                        })\n                            .on(\"mouseout\", function () {\n                            d3.select(this).classed(\"text-hover\", false);\n                        });\n                        var row = rootScrollableContainer.append(\"g\").attr(\"class\", \"g3\")\n                            .selectAll(\".cellsGroup\")\n                            .data(data.rows)\n                            .enter()\n                            .append(\"g\")\n                            .attr(\"class\", \"row\")\n                            .attr(\"index\", function (d, i) {\n                            return i.toString();\n                        });\n                        row\n                            .selectAll(\"rect\")\n                            .data(function (d) {\n                            return d.columns;\n                        })\n                            .enter()\n                            .append(\"rect\")\n                            .attr(\"x\", function (d) {\n                            return d.x;\n                        })\n                            .attr(\"y\", function (d) {\n                            return d.y;\n                        })\n                            .attr(\"rowIndedx\", function () {\n                            return this.parentNode.attributes.index.value;\n                        })\n                            .attr(\"class\", function (d) {\n                            return d.id;\n                        })\n                            .attr(\"width\", graph.heatMapProperties.cellSize)\n                            .attr(\"height\", graph.heatMapProperties.cellSize)\n                            .attr(\"data-tooltip\", function (d) {\n                            if (d.value > 0) {\n                                return scope.view.settings.behavior.cell.tooltip;\n                            }\n                        })\n                            .style(\"fill\", function (d) {\n                            return graph.heatMapProperties.colorScale(d.value);\n                        })\n                            .on(\"mouseover\", function (d) {\n                            //highlight text\n                            d3.select(this).classed(\"cell-hover\", true);\n                            var _this = this;\n                            d3.selectAll(\".rowLabel\").classed(\"text-highlight\", function () {\n                                return this.attributes.rowIndex.value === _this.parentNode.attributes.index.value;\n                            });\n                            d3.selectAll(\".colLabel\").classed(\"text-highlight\", function (c) {\n                                return c.name === (d.name);\n                            });\n                        })\n                            .on(\"mouseout\", function () {\n                            d3.select(this).classed(\"cell-hover\", false);\n                            d3.selectAll(\".rowLabel\").classed(\"text-highlight\", false);\n                            d3.selectAll(\".colLabel\").classed(\"text-highlight\", false);\n                        });\n                    }\n                    function createJsonArr() {\n                        var myData = angular.copy(graph.data);\n                        angular.forEach(myData.columns, function (column, i) {\n                            if (!column.headerId) {\n                                column.headerId = \"header-\" + i;\n                            }\n                            delete column.x;\n                            delete column.y;\n                            delete column.translateY;\n                            column.translateY = (graph.heatMapProperties.columnLabelPosition === \"top\") ? -10 :\n                                (graph.heatMapProperties.cellSize + graph.heatMapProperties.gapBeweenCells) *\n                                    graph.data.rows.length + 10;\n                            column.textAnchor =\n                                (graph.heatMapProperties.columnLabelPosition === \"top\") ? \"start\" : \"end\";\n                            column.y = 0;\n                            column.x = (graph.heatMapProperties.cellSize + graph.heatMapProperties.gapBeweenCells) * i;\n                            //fix to middle\n                            column.x += graph.heatMapProperties.cellSize / 1.8;\n                        });\n                        angular.forEach(myData.rows, function (row, i) {\n                            row.x = 0;\n                            row.y = graph.heatMapProperties.cellSize * i + (i * graph.heatMapProperties.gapBeweenCells);\n                            //fixiToMiddle\n                            row.y += graph.heatMapProperties.cellSize / 1.5;\n                            if (!row.headerId) {\n                                row.headerId = \"row-\" + i;\n                            }\n                            angular.forEach(row.columns, function (column, j) {\n                                if (!column.id) {\n                                    column.id = \"heatmap\" + i + \"-\" + j;\n                                    column.headerId = \"header-\" + j;\n                                }\n                                column.x =\n                                    graph.heatMapProperties.cellSize * j + (j * graph.heatMapProperties.gapBeweenCells);\n                                column.y =\n                                    graph.heatMapProperties.cellSize * i + (i * graph.heatMapProperties.gapBeweenCells);\n                            });\n                        });\n                        return myData;\n                    }\n                    function animateHeatmap() {\n                        var myData = createJsonArr();\n                        var t = graph.dataSvg.transition().duration(graph.heatMapProperties.animationDuration);\n                        angular.forEach(myData.columns, function (column) {\n                            t.selectAll(\".\" + column.headerId)\n                                .attr(\"y\", function () {\n                                return column.x;\n                            })\n                                .attr(\"x\", 0);\n                        });\n                        angular.forEach(myData.rows, function (row) {\n                            angular.forEach(row.columns, function (column) {\n                                t.selectAll(\".\" + column.id)\n                                    .attr(\"y\", function () {\n                                    return column.y;\n                                })\n                                    .attr(\"x\", function () {\n                                    return column.x;\n                                });\n                            });\n                            t.selectAll(\".\" + row.headerId)\n                                .attr(\"y\", function () {\n                                return row.y;\n                            })\n                                .attr(\"x\", 0);\n                        });\n                    }\n                    function getMargin(data, self, maxLebelSize, gapBetweenCels, columnLabelPosition) {\n                        var rowsMaxLabelSize = 0;\n                        var columnsMaxLabelSize = 0;\n                        var margin = { top: 0, right: 0, bottom: 100, left: 0 };\n                        angular.forEach(data.rows, function (row) {\n                            if (!rowsMaxLabelSize) {\n                                rowsMaxLabelSize = row.name.length;\n                            }\n                            else {\n                                rowsMaxLabelSize = Math.max(row.name.length, rowsMaxLabelSize);\n                            }\n                        });\n                        angular.forEach(data.columns, function (column) {\n                            if (!columnsMaxLabelSize) {\n                                columnsMaxLabelSize = column.name.length;\n                            }\n                            else {\n                                columnsMaxLabelSize = Math.max(column.name.length, columnsMaxLabelSize);\n                            }\n                        });\n                        columnsMaxLabelSize = (columnsMaxLabelSize > maxLebelSize) ? maxLebelSize : columnsMaxLabelSize;\n                        rowsMaxLabelSize = (rowsMaxLabelSize > maxLebelSize) ? maxLebelSize : rowsMaxLabelSize;\n                        var labelWidthScale = d3.scale.linear()\n                            .domain([0, self.width])\n                            .range([0, maxLebelSize]);\n                        margin.left = labelWidthScale(rowsMaxLabelSize) * self.width / 3;\n                        var labelHeightScale = d3.scale.linear()\n                            .domain([0, self.height])\n                            .range([0, maxLebelSize]);\n                        var marginForColumnsLabel = labelHeightScale(columnsMaxLabelSize) * self.height / 2;\n                        margin.top = (columnLabelPosition === \"top\") ? marginForColumnsLabel : 30;\n                        margin.bottom = (columnLabelPosition === \"top\") ? 100 : marginForColumnsLabel;\n                        margin.right = (scope.view.settings.legend) ?\n                            (graph.width + gapBetweenCels * graph.data.columns.length) / 10 : 0;\n                        return margin;\n                    }\n                    function createColorDef(legend) {\n                        var colorStopCount = legend.items.length;\n                        var legendColors = colors.getColors(\"scale\");\n                        var gradient = graph.dataSvg.append(\"defs\").append(\"linearGradient\")\n                            .attr(\"id\", \"legendGradientHeatMap\")\n                            .attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 1).attr(\"y2\", 0);\n                        gradient.selectAll(\"stop\")\n                            .data(legendColors)\n                            .enter().append(\"stop\")\n                            .attr(\"stop-color\", function (d) {\n                            return d;\n                        })\n                            .attr(\"offset\", function (d, i) {\n                            return (100 * i / colorStopCount) + \"%\";\n                        });\n                    }\n                    function addLegend(x, y, width, height, extent, legendObject, colorsType) {\n                        var dataExtent = extent, legendWidth = width, rectHeight = height, legend = graph.dataSvg.append(\"g\")\n                            .attr(\"class\", \"legend\")\n                            .attr(\"transform\", \"translate(\" + (x + legendWidth / 2) + \", \" + y + \")\");\n                        function addGradientLegend() {\n                            createColorDef(legendObject);\n                            legend.append(\"rect\")\n                                .attr(\"fill\", \"url(#legendGradientHeatMap)\")\n                                .attr(\"width\", legendWidth)\n                                .attr(\"height\", rectHeight);\n                            legend.append(\"text\")\n                                .text(dataExtent[1])\n                                .attr(\"data-tooltip\", legendObject.items[1].value)\n                                .attr(\"transform\", \"translate(\" + (width / 2) + \", \" + (-10) + \")\")\n                                .attr(\"text-anchor\", \"middle\");\n                            if (dataExtent[0] !== dataExtent[1]) {\n                                legend.append(\"text\")\n                                    .attr(\"data-tooltip\", legendObject.items[0].value)\n                                    .text(dataExtent[0])\n                                    .attr(\"transform\", \"translate(\" + (width / 2) + \", \" + (rectHeight + 20) + \")\")\n                                    .attr(\"text-anchor\", \"middle\");\n                            }\n                        }\n                        function addTopicsLegend() {\n                            var legendColors = colors.getColors(colorsType);\n                            var itemGroup = legend\n                                .selectAll(\"g\")\n                                .data(legendObject.items)\n                                .enter()\n                                .append(\"g\")\n                                .attr(\"class\", \"legend\")\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + ((width + 10) * i) + \")\";\n                            });\n                            itemGroup.append(\"rect\")\n                                .attr(\"width\", width)\n                                .attr(\"height\", width)\n                                .style(\"fill\", function (d) {\n                                return legendColors[d.color] || legendColors[1]; // if binary we return the colored\n                                // value\n                            });\n                            itemGroup.append(\"text\")\n                                .text(function (d) {\n                                return d.value;\n                            })\n                                .attr(\"text-anchor\", \"left\")\n                                .attr(\"transform\", function () {\n                                return \"translate(\" + (width + 5) + \", \" + (width) + \")\";\n                            });\n                        }\n                        switch (legendObject.items.length) {\n                            case 2:\n                                addGradientLegend();\n                                break;\n                            default:\n                                addTopicsLegend();\n                                break;\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"BarsChartWidget\", [\"Utils\", \"ChartWidgets\", \"Widgets\"]).run([\"chartWidgetsData\", \"widgetViews\",\n        function (chartWidgetsData, widgetViews) {\n            widgetViews.registerView(\"barsChart\", { dataParser: chartWidgetsData.getData });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"BarsChartWidget\").directive(\"yoxigenBarChart\", [\"$parse\", \"$timeout\", function ($parse, $timeout) {\n            return {\n                template: \"<div class='chart yoxigen-bar-chart' style='width: 100%; height: 100%'></div>\",\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    var data, settings;\n                    var resizeEventListenerEnabled;\n                    var selectedBarGroup = null;\n                    var labelTexts, labelBoxes;\n                    var selectItem;\n                    var tooltip, tooltipText, tooltipRect;\n                    var defaultOptions = {\n                        height: \"200px\",\n                        width: \"100%\",\n                        spacing: { min: 0, max: 40 },\n                        padding: { top: 10, right: 50, left: 50, bottom: 0 },\n                        selectable: false,\n                        highlightSelectedItem: true,\n                        barLabels: {\n                            height: 30,\n                            margin: 11\n                        },\n                        barLabelsFont: {\n                            color: \"#000000\",\n                            size: 14,\n                            weight: \"bold\",\n                            family: \"sans-serif\"\n                        },\n                        borderWidth: 1,\n                        labels: {\n                            height: 32,\n                            margin: 12,\n                            handleEvents: true\n                        },\n                        labelsFont: {\n                            color: \"#000000\",\n                            size: \"14px\",\n                            weight: \"bold\",\n                            family: \"sans-serif\"\n                        },\n                        selectionBar: {\n                            barHeight: 5,\n                            arrowHeight: 10,\n                            arrowWidth: 21,\n                            margin: 8,\n                            defaultColor: \"#333\"\n                        },\n                        gridSize: 13,\n                        barsHandleEvents: true,\n                        colors: [\"#98A3AC\", \"#7a92a3\"],\n                        minHeight: 100,\n                        maxWidth: 200,\n                        createAxes: false,\n                        createLabels: true,\n                        selectLabels: true,\n                        showSelectionBar: false,\n                        refreshOnResize: true,\n                        tooltip: \"{{seriesLabel}}'s {{barLabel}} score: {{barValue}}\"\n                    }, options;\n                    var renderTimeoutPromise;\n                    scope.$watch(attrs.ngModel, function (chartData) {\n                        if (chartData) {\n                            $timeout.cancel(renderTimeoutPromise);\n                            renderTimeoutPromise = $timeout(function () {\n                                data = chartData;\n                                drawChart();\n                            }, 40);\n                        }\n                    });\n                    scope.$watch(attrs.settings, function (value) {\n                        settings = value;\n                        options = angular.extend({}, defaultOptions, settings.options);\n                        if (settings.selectedIndex !== undefined) {\n                            selectedBarGroup = settings.selectedIndex;\n                        }\n                        drawChart();\n                        if (options.refreshOnResize && !resizeEventListenerEnabled) {\n                            window.addEventListener(\"resize\", function () {\n                                drawChart(false);\n                            });\n                        }\n                        else if (!options.refreshOnResize && resizeEventListenerEnabled) {\n                            window.removeEventListener(\"resize\", drawChart);\n                        }\n                        if (settings.events) {\n                            angular.forEach(settings.events, function (eventSettings) {\n                                element.on(eventSettings.eventName, \".handle-events\", function (e) {\n                                    scope.$apply(function () {\n                                        scope.$emit(\"widgetEvent\", { event: eventSettings, data: e.currentTarget.__data__, widget: scope.widget });\n                                    });\n                                });\n                            });\n                        }\n                        element.on(\"mouseover\", \".vertical-bar\", function (e) {\n                            setTooltipText(getTooltipText(e.target));\n                            showTooltip();\n                            window.addEventListener(\"mousemove\", tooltipMoveHandler);\n                        });\n                        element.on(\"mouseout\", \".vertical-bar\", function () {\n                            hideTooltip();\n                            window.removeEventListener(\"mousemove\", tooltipMoveHandler);\n                        });\n                        if (options.selectable && !element.clickHandlerAdded) {\n                            element.on(\"click\", \".handle-events\", function (e) {\n                                var targetData = e.currentTarget.__data__, targetIndex = data.indexOf(targetData);\n                                if ((targetIndex !== selectedBarGroup) && selectItem) {\n                                    selectItem(targetData, targetIndex);\n                                }\n                            });\n                            element.clickHandlerAdded = true;\n                        }\n                    });\n                    scope.$on(\"$destroy\", function () {\n                        $timeout.cancel(renderTimeoutPromise);\n                        $timeout.cancel(showTimeoutPromise);\n                        element.empty();\n                        element.off();\n                    });\n                    function getBarIndexForSelection(dataSelection) {\n                        for (var i = 0; i < data.length; i++) {\n                            if (dataMemberMatchesSelection(dataSelection, data[i])) {\n                                return i;\n                            }\n                        }\n                        if (settings.selectedIndex !== undefined) {\n                            return settings.selectedIndex;\n                        }\n                        return null;\n                    }\n                    function dataMemberMatchesSelection(dataSelection, dataMember) {\n                        for (var property in dataSelection) {\n                            if (dataSelection.hasOwnProperty(property)) {\n                                if (String(dataMember[property]) !== dataSelection[property]) {\n                                    return false;\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    function getTooltipText(barElement) {\n                        var series = settings.series[parseInt(barElement.getAttribute(\"data-seriesIndex\"))], barLabel = data[parseInt(barElement.getAttribute(\"data-index\"))]._label, barValue = barElement.__data__[series.field];\n                        return options.tooltip\n                            .replace(\"{{seriesLabel}}\", series._label)\n                            .replace(\"{{barLabel}}\", barLabel)\n                            .replace(\"{{barValue}}\", barValue);\n                    }\n                    function getMinValue() {\n                        return d3.min(data, function (d) {\n                            var fields = [];\n                            angular.forEach(settings.series, function (series) {\n                                fields.push(d[series.field]);\n                            });\n                            return d3.min(fields);\n                        });\n                    }\n                    function getMaxValue() {\n                        return d3.max(data, function (d) {\n                            var fields = [];\n                            angular.forEach(settings.series, function (series) {\n                                fields.push(d[series.field]);\n                            });\n                            return d3.max(fields);\n                        });\n                    }\n                    function tooltipMoveHandler(e) {\n                        var boundingClientRect = element[0].getBoundingClientRect();\n                        setTooltipPosition({\n                            x: (e.x || e.clientX) - boundingClientRect.left,\n                            y: (e.y || e.clientY) - boundingClientRect.top\n                        });\n                    }\n                    function setTooltipText(text) {\n                        tooltipText.text(text);\n                        var textClientRect = tooltipText[0][0].getBoundingClientRect();\n                        tooltipRect.attr(\"width\", textClientRect.width + 20);\n                        tooltipRect.attr(\"height\", textClientRect.height + 10);\n                    }\n                    var hideTooltipTimeout;\n                    function hideTooltip() {\n                        clearTimeout(hideTooltipTimeout);\n                        hideTooltipTimeout = setTimeout(function () {\n                            tooltip[0][0].style.display = \"none\";\n                        }, 50);\n                    }\n                    function showTooltip() {\n                        clearTimeout(hideTooltipTimeout);\n                        tooltip[0][0].style.removeProperty(\"display\");\n                    }\n                    function setTooltipPosition(position) {\n                        var tooltipPositionX = position.x + 10, tooltipWidth = parseInt(tooltipRect[0][0].getAttribute(\"width\"));\n                        if (tooltipPositionX + tooltipWidth > element[0].clientWidth) {\n                            tooltipPositionX = position.x - 10 - tooltipWidth;\n                        }\n                        tooltipRect\n                            .attr(\"x\", tooltipPositionX)\n                            .attr(\"y\", position.y);\n                        tooltipText\n                            .attr(\"x\", tooltipPositionX + 10)\n                            .attr(\"y\", position.y + 20);\n                    }\n                    function setLabelFill(labelData, labelIndex) {\n                        if (labelIndex === selectedBarGroup) {\n                            return \"White\";\n                        }\n                        if (!labelData) {\n                            return options.labelsFont.color;\n                        }\n                        var color = labelData._style && labelData._style[settings.labels.styleField] &&\n                            labelData._style[settings.labels.styleField].color;\n                        return color || options.labelsFont.color;\n                    }\n                    function getSelectionBarColor(itemData) {\n                        var color = itemData && itemData._style && itemData._style[settings.selectionBar.styleField] &&\n                            itemData._style[settings.selectionBar.styleField].color;\n                        return color || options.selectable.defaultColor;\n                    }\n                    var showTimeoutPromise;\n                    scope.$on(\"show\", function () {\n                        $timeout.cancel(showTimeoutPromise);\n                        showTimeoutPromise = $timeout(function () {\n                            drawChart(false);\n                        });\n                    });\n                    function drawChart(selectBar) {\n                        if (!data || !settings) {\n                            return;\n                        }\n                        element.css({\n                            height: options.height,\n                            width: \"100%\"\n                        });\n                        element[0].innerHTML = \"\";\n                        var domainMinMax = options.values || {};\n                        if (domainMinMax.min === undefined) {\n                            domainMinMax.min = getMinValue();\n                        }\n                        if (domainMinMax.max === undefined) {\n                            domainMinMax.max = getMaxValue();\n                        }\n                        var scale = d3.scale.linear()\n                            .domain([domainMinMax.min, domainMinMax.max]);\n                        var patterns = {};\n                        if (settings.selectedData) {\n                            selectedBarGroup = getBarIndexForSelection(settings.selectedData);\n                        }\n                        if (selectedBarGroup === \"last\") {\n                            selectedBarGroup = data.length - 1;\n                        }\n                        var width = element.width(), height = element.height(), gridSize = options.gridSize, leftPadding = options.padding.left, rightPadding = options.padding.right, selectionBarTotalHeight = options.showSelectionBar ?\n                            options.selectionBar.barHeight + options.selectionBar.arrowHeight +\n                                options.selectionBar.margin : 0, bottomReservedSpace = options.padding.bottom +\n                            (options.createLabels ? options.labels.height + options.labels.margin : 0) +\n                            selectionBarTotalHeight, barsSpacing = (width / data.length) / (data.length - 1), barsArea = {\n                            width: width - 2 * options.borderWidth,\n                            height: height - bottomReservedSpace - options.borderWidth * 2\n                        }, heightGridRemainder = barsArea.height % gridSize, widthGridRemainder = barsArea.width % gridSize, selectionBar, selectionBarArrow;\n                        if (heightGridRemainder) {\n                            barsArea.height += (gridSize - heightGridRemainder);\n                            bottomReservedSpace -= heightGridRemainder;\n                        }\n                        if (widthGridRemainder) {\n                            barsArea.width -= widthGridRemainder;\n                            leftPadding += Math.floor(widthGridRemainder / 2);\n                            rightPadding += Math.floor(widthGridRemainder / 2);\n                        }\n                        barsSpacing = Math.max(barsSpacing, options.spacing.min);\n                        barsSpacing = Math.min(barsSpacing, options.spacing.max);\n                        scale.range([10, barsArea.height - options.barLabels.height - options.barLabels.margin]);\n                        var svg = d3.select(element[0])\n                            .append(\"svg\")\n                            .attr(\"height\", \"100%\")\n                            .attr(\"width\", \"100%\");\n                        var defs = svg.append('svg:defs');\n                        var totalRectWidth = Math.min((width - leftPadding - rightPadding + barsSpacing) / data.length, options.maxWidth * settings.series.length), rectWidth = (totalRectWidth - barsSpacing) / settings.series.length, barRemainder = rectWidth % gridSize;\n                        if (options.highlightSelectedItem) {\n                            selectItem = function (itemData, itemIndex) {\n                                var color = getSelectionBarColor(itemData), previousSelectedIndex = selectedBarGroup;\n                                if (labelBoxes) {\n                                    d3.select(labelBoxes[0][selectedBarGroup]).classed(\"selected\", false);\n                                }\n                                selectedBarGroup = itemIndex;\n                                if (labelBoxes && options.selectLabels) {\n                                    d3.select(labelTexts[0][selectedBarGroup]).attr(\"fill\", setLabelFill(itemData, selectedBarGroup));\n                                    d3.select(labelTexts[0][previousSelectedIndex]).attr(\"fill\", setLabelFill(data[previousSelectedIndex], previousSelectedIndex));\n                                    d3.select(labelBoxes[0][selectedBarGroup]).classed(\"selected\", true);\n                                }\n                                if (selectionBar) {\n                                    selectionBar.attr(\"fill\", color);\n                                    selectionBarArrow.attr(\"fill\", color);\n                                    moveSelectionBarArrowTo(itemIndex * totalRectWidth + leftPadding +\n                                        (totalRectWidth - barsSpacing) / 2);\n                                }\n                            };\n                        }\n                        if (barRemainder) {\n                            var halfGrid = Math.floor(gridSize / 2);\n                            if (barRemainder < halfGrid) {\n                                rectWidth -= barRemainder;\n                            }\n                            else {\n                                rectWidth += gridSize - barRemainder;\n                            }\n                        }\n                        var xScale = d3.scale.linear()\n                            .domain([0, data.length])\n                            .range([0, totalRectWidth * data.length]);\n                        function createAxes() {\n                            var xAxis = d3.svg.axis()\n                                .scale(xScale)\n                                .orient(\"bottom\");\n                            svg.append(\"g\")\n                                .attr(\"class\", \"axis\")\n                                .attr(\"transform\", \"translate(\" + leftPadding + \",\" + (height - options.padding.top) + \")\")\n                                .call(xAxis);\n                            var yAxis = d3.svg.axis()\n                                .scale(scale)\n                                .orient(\"left\");\n                            //Create Y axis\n                            svg.append(\"g\")\n                                .attr(\"class\", \"axis\")\n                                .attr(\"transform\", \"translate(\" + options.padding.top + \",0)\")\n                                .call(yAxis);\n                        }\n                        function createTooltip() {\n                            tooltip = svg.append(\"g\")\n                                .attr(\"style\", \"display: none\");\n                            tooltipRect = tooltip.append(\"rect\")\n                                .attr(\"width\", 100)\n                                .attr(\"height\", 50)\n                                .attr(\"fill\", \"#333333\")\n                                .attr(\"x\", 0).attr(\"y\", 0);\n                            tooltipText = tooltip.append(\"text\")\n                                .attr(\"fill\", \"White\")\n                                .attr(\"font-size\", \"16px\")\n                                .attr(\"x\", 0).attr(\"y\", 0);\n                        }\n                        function getPatternFill(backgroundColor) {\n                            var patternId = \"pattern-\" + backgroundColor.match(/[^\\(\\)\\.#]/g).join(\"\").replace(/\\,/g, \"_\");\n                            if (!patterns[patternId]) {\n                                var pattern = defs.append('svg:pattern')\n                                    .attr('id', patternId)\n                                    .attr('width', gridSize)\n                                    .attr('height', gridSize)\n                                    .attr('patternUnits', 'userSpaceOnUse');\n                                pattern\n                                    .append('svg:rect')\n                                    .attr('width', gridSize)\n                                    .attr('height', gridSize)\n                                    .attr('fill', backgroundColor)\n                                    .attr(\"stroke\", \"rgba(0,0,0,0.2)\")\n                                    .attr(\"stroke-dasharray\", (gridSize * 2) + \"px, \" + (gridSize * 2) + \"px\");\n                                patterns[patternId] = \"url(#\" + patternId + \")\";\n                            }\n                            return patterns[patternId];\n                        }\n                        function createBackground() {\n                            svg.append(\"svg:rect\")\n                                .attr(\"width\", barsArea.width)\n                                .attr(\"height\", barsArea.height)\n                                .attr(\"x\", 0)\n                                .attr(\"y\", 0)\n                                .attr(\"fill\", \"rgba(0,0,0,0)\")\n                                .attr(\"stroke\", \"#ddd\")\n                                .attr(\"class\", \"crisp\")\n                                .attr(\"stroke-width\", \"1px\");\n                            svg.append(\"svg:rect\")\n                                .attr(\"width\", barsArea.width - options.borderWidth * 2)\n                                .attr(\"height\", barsArea.height)\n                                .attr(\"x\", options.borderWidth)\n                                .attr(\"y\", options.borderWidth)\n                                .attr(\"fill\", getPatternFill(\"rgba(0,0,0,0)\"));\n                        }\n                        function moveSelectionBarArrowTo(horizontalPosition) {\n                            selectionBarArrow.attr(\"d\", [\n                                \"M\" + horizontalPosition,\n                                height - options.selectionBar.barHeight - options.selectionBar.arrowHeight,\n                                \"L\" + (horizontalPosition - options.selectionBar.arrowWidth / 2),\n                                height - options.selectionBar.barHeight,\n                                \"L\" + (horizontalPosition + options.selectionBar.arrowWidth / 2),\n                                height - options.selectionBar.barHeight,\n                                \"Z\"\n                            ].join(\" \"));\n                        }\n                        function createSelectionBar() {\n                            selectionBar = svg.append(\"svg:rect\")\n                                .attr(\"width\", width)\n                                .attr(\"height\", options.selectionBar.barHeight)\n                                .attr(\"x\", 0)\n                                .attr(\"y\", height - options.selectionBar.barHeight);\n                            selectionBarArrow = svg.append(\"svg:path\");\n                        }\n                        function fitToGrid(size) {\n                            var gridRemainder = size % gridSize;\n                            if (gridRemainder) {\n                                return size - gridRemainder;\n                            }\n                            return size;\n                        }\n                        function createSeries(series, seriesIndex) {\n                            var rects = svg.selectAll(\"rect.series_\" + seriesIndex)\n                                .data(data)\n                                .enter()\n                                .append(\"rect\")\n                                .attr(\"class\", \"crisp bars vertical-bar series_\" + seriesIndex +\n                                (options.barsHandleEvents ? \" handle-events\" : \"\"));\n                            function getDataColor(d) {\n                                return d._style && d._style[series.field] && d._style[series.field].color;\n                            }\n                            rects\n                                .attr(\"width\", Math.max(0, rectWidth))\n                                .attr(\"height\", function (d) {\n                                var value = d[series.field];\n                                if (value === null) {\n                                    return 0;\n                                }\n                                return Math.max(gridSize, fitToGrid(scale(value)));\n                            })\n                                .attr(\"x\", function (d, i) {\n                                return fitToGrid(i * totalRectWidth + leftPadding + seriesIndex * rectWidth +\n                                    options.borderWidth);\n                            })\n                                .attr(\"y\", function (d) {\n                                var value = d[series.field], height;\n                                height = value === null ? 0 : Math.max(gridSize, fitToGrid(scale(value)));\n                                return barsArea.height + options.borderWidth - height;\n                            })\n                                .attr(\"fill\", function (d) {\n                                return getPatternFill(getDataColor(d) || series.color || options.colors[seriesIndex]);\n                            })\n                                .attr(\"data-seriesIndex\", seriesIndex)\n                                .attr(\"data-index\", function (d, i) {\n                                return i;\n                            });\n                            if (series.nullDisplay) {\n                                angular.forEach(data, function (item, itemIndex) {\n                                    if (item[series.field] === null) {\n                                        svg.append(\"text\")\n                                            .text(series.nullDisplay)\n                                            .attr(\"x\", fitToGrid(itemIndex * totalRectWidth + leftPadding) +\n                                            (totalRectWidth - barsSpacing) / 2)\n                                            .attr(\"y\", barsArea.height + options.borderWidth - gridSize - 2)\n                                            .attr(\"font-family\", options.barLabelsFont.family)\n                                            .attr(\"font-size\", \"14px\")\n                                            .attr(\"font-weight\", options.barLabelsFont.weight)\n                                            .attr(\"fill\", \"#666666\")\n                                            .attr(\"text-anchor\", \"middle\");\n                                    }\n                                });\n                            }\n                            var textMargins = 4, fontSize = Math.max(10, Math.min(rectWidth - textMargins * 2, options.barLabelsFont.size)) +\n                                \"px\";\n                            svg.selectAll(\"text.series_\" + seriesIndex)\n                                .data(data)\n                                .enter()\n                                .append(\"text\")\n                                .attr(\"class\", \"series_\" + seriesIndex + (options.barsHandleEvents ? \" handle-events\" : \"\"))\n                                .text(function (d) {\n                                return d[series.field];\n                            })\n                                .attr(\"x\", function (d, i) {\n                                return fitToGrid(i * totalRectWidth + leftPadding) + rectWidth / 2 +\n                                    seriesIndex * rectWidth;\n                            })\n                                .attr(\"y\", function (d) {\n                                return barsArea.height + options.borderWidth -\n                                    Math.max(gridSize, fitToGrid(scale(d[series.field]))) - gridSize;\n                            })\n                                .attr(\"font-family\", options.barLabelsFont.family)\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-weight\", options.barLabelsFont.weight)\n                                .attr(\"fill\", function (d) {\n                                return getDataColor(d) || series.barLabelsColor || options.barLabelsFont.color;\n                            })\n                                .attr(\"text-anchor\", \"middle\");\n                        }\n                        function createLabels() {\n                            var handleEventsClass = options.labels.handleEvents ? \" handle-events\" : \"\", labelWidth = totalRectWidth - barsSpacing;\n                            if (labelWidth <= 0) {\n                                return;\n                            }\n                            labelBoxes = svg.selectAll(\"rect.label-box\" + handleEventsClass)\n                                .data(data)\n                                .enter()\n                                .append(\"rect\")\n                                .attr(\"class\", \"label-box\" + handleEventsClass)\n                                .attr(\"width\", totalRectWidth - barsSpacing)\n                                .attr(\"height\", options.labels.height)\n                                .attr(\"x\", function (d, i) {\n                                return i * totalRectWidth + leftPadding;\n                            })\n                                .attr(\"rx\", Math.floor(options.labels.height / 2) + \"px\")\n                                .attr(\"y\", height - options.labels.height - selectionBarTotalHeight)\n                                .attr(\"fill\", function (d) {\n                                var color = d._style && d._style[settings.labels.styleField] &&\n                                    d._style[settings.labels.styleField].color;\n                                return color || options.labelsFont.color;\n                            });\n                            labelTexts = svg.selectAll(\"text.labels\" + handleEventsClass)\n                                .data(data)\n                                .enter()\n                                .append(\"text\")\n                                .attr(\"class\", \"labels\" + handleEventsClass)\n                                .text(function (d) {\n                                return d._label;\n                            })\n                                .attr(\"x\", function (d, i) {\n                                return (i + 0.5) * totalRectWidth + leftPadding - barsSpacing / 2;\n                            })\n                                .attr(\"y\", height - options.labels.height - selectionBarTotalHeight +\n                                parseInt(options.labelsFont.size, 10) + 1)\n                                .attr(\"font-family\", options.labelsFont.family)\n                                .attr(\"font-size\", options.labelsFont.size)\n                                .attr(\"font-weight\", options.labelsFont.weight)\n                                .attr(\"fill\", setLabelFill)\n                                .attr(\"text-anchor\", \"middle\");\n                        }\n                        createBackground();\n                        angular.forEach(settings.series, createSeries);\n                        if (options.createAxes) {\n                            createAxes();\n                        }\n                        if (options.createLabels) {\n                            createLabels();\n                        }\n                        if (options.showSelectionBar) {\n                            createSelectionBar();\n                        }\n                        if (selectedBarGroup !== undefined && selectItem) {\n                            selectItem(data[selectedBarGroup], selectedBarGroup);\n                            if (settings.selectedIndex && selectBar !== false) {\n                                angular.forEach(settings.events, function (eventSettings) {\n                                    var eventSettingsCopy = angular.copy(eventSettings);\n                                    if (eventSettingsCopy.actionOptions) {\n                                        eventSettingsCopy.actionOptions.updateUrl = false;\n                                    }\n                                    if (eventSettings.eventName === \"click\") {\n                                        scope.$emit(\"widgetEvent\", { event: eventSettingsCopy, data: data[selectedBarGroup], widget: scope.widget });\n                                    }\n                                });\n                            }\n                        }\n                        createTooltip();\n                        if (options.selectFirstOnLoad && selectItem) {\n                            selectItem(data[0], 0);\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"PercentChartWidget\", [\"Utils\", \"ChartWidgets\", \"Widgets\"]).run([\"chartWidgetsData\", \"widgetViews\",\n        function (chartWidgetsData, widgetViews) {\n            widgetViews.registerView(\"percentChart\", { dataParser: chartWidgetsData.getData });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"PercentChartWidget\").directive(\"yoxigenPercentChart\", [\"$rootScope\", function ($rootScope) {\n            return {\n                template: \"<div class='chart yoxigen-percent-chart' style='width: 100%; height: 100%'></div>\",\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    var data, settings;\n                    var resizeEventListenerEnabled;\n                    var selectedBarGroup = null;\n                    var labelTexts, labelBoxes;\n                    var selectItem;\n                    var rects;\n                    var selectedOnLoad;\n                    var defaultOptions = {\n                        selectable: false,\n                        labels: {\n                            height: 32,\n                            margin: 12,\n                            handleEvents: true\n                        },\n                        labelsFont: {\n                            color: \"#000000\",\n                            size: \"14px\",\n                            weight: \"bold\",\n                            family: \"sans-serif\"\n                        },\n                        selectionBar: {\n                            barHeight: 5,\n                            arrowHeight: 10,\n                            arrowWidth: 21,\n                            margin: 8,\n                            defaultColor: \"#333\"\n                        },\n                        borderWidth: 1,\n                        gridSize: 13,\n                        minGridSize: 8,\n                        maxGridSize: 16,\n                        barsHandleEvents: true,\n                        colors: [\"#0b62a4\", \"#7a92a3\"],\n                        createLabels: true,\n                        showSelectionBar: false,\n                        refreshOnResize: true\n                    }, options;\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                    scope.$watch(attrs.ngModel, function (chartData) {\n                        data = chartData;\n                        drawChart();\n                    });\n                    scope.$watch(attrs.settings, function (value) {\n                        settings = value;\n                        options = angular.extend({}, defaultOptions, settings.options);\n                        if (settings.selectedIndex !== undefined) {\n                            selectedBarGroup = settings.selectedIndex;\n                        }\n                        drawChart();\n                        if (options.refreshOnResize && !resizeEventListenerEnabled) {\n                            window.addEventListener(\"resize\", drawChart);\n                        }\n                        else if (!options.refreshOnResize && resizeEventListenerEnabled) {\n                            window.removeEventListener(\"resize\", drawChart);\n                        }\n                        if (settings.events) {\n                            angular.forEach(settings.events, function (eventSettings) {\n                                element.on(eventSettings.eventName, \".handle-events\", function (e) {\n                                    scope.safeApply(function () {\n                                        scope.$emit(\"widgetEvent\", { event: eventSettings, data: e.currentTarget.__data__, widget: scope.widget });\n                                    });\n                                });\n                            });\n                        }\n                        if (options.selectable) {\n                            element.on(\"click\", \".handle-events\", function (e) {\n                                var targetData = e.currentTarget.__data__, targetIndex = data.indexOf(targetData);\n                                if ((targetIndex !== selectedBarGroup) && selectItem) {\n                                    selectItem(targetData, targetIndex);\n                                }\n                            });\n                        }\n                    });\n                    function removeEmptyData(data) {\n                        var copiedData = angular.copy(data);\n                        for (var i = copiedData.length - 1; i >= 0; i--) {\n                            if (!copiedData[i][settings.series[0].field]) {\n                                copiedData.splice(i, 1);\n                            }\n                        }\n                        return copiedData;\n                    }\n                    function setLabelFill(labelData, labelIndex) {\n                        if (labelIndex === selectedBarGroup) {\n                            return \"White\";\n                        }\n                        var color = labelData._style && labelData._style[settings.labels.styleField] &&\n                            labelData._style[settings.labels.styleField].color;\n                        return color || options.labelsFont.color;\n                    }\n                    function getSelectionBarColor(itemData) {\n                        var color = itemData._style && itemData._style[settings.selectionBar.styleField] &&\n                            itemData._style[settings.selectionBar.styleField].color;\n                        return color || options.selectable.defaultColor;\n                    }\n                    function drawChart() {\n                        function getBarWidth(barIndex) {\n                            var barWidth = barsWidth[barIndex];\n                            if (barWidth !== undefined) {\n                                return barWidth;\n                            }\n                            barWidth = fitToGrid(scale(data[barIndex][settings.series[0].field]));\n                            barsWidth[barIndex] = barWidth;\n                            return barWidth;\n                        }\n                        function getPatternFill(backgroundColor) {\n                            var patternId = \"pattern-\" + backgroundColor.match(/[^\\(\\)\\.#]/g).join(\"\").replace(/\\,/g, \"_\");\n                            if (!patterns[patternId]) {\n                                var pattern = defs.append('svg:pattern')\n                                    .attr('id', patternId)\n                                    .attr('width', gridSize)\n                                    .attr('height', gridSize)\n                                    .attr('patternUnits', 'userSpaceOnUse');\n                                pattern\n                                    .append('svg:rect')\n                                    .attr('width', gridSize)\n                                    .attr('height', gridSize)\n                                    .attr('fill', backgroundColor)\n                                    .attr(\"stroke\", \"rgba(0,0,0,0.2)\")\n                                    .attr(\"stroke-dasharray\", (gridSize * 2) + \"px, \" + (gridSize * 2) + \"px\");\n                                patterns[patternId] = \"url(#\" + patternId + \")\";\n                            }\n                            return patterns[patternId];\n                        }\n                        function createBackground() {\n                            svg.append(\"svg:rect\")\n                                .attr(\"class\", \"crisp\")\n                                .attr(\"width\", barsArea.width + 2 * gridSize - 2 * options.borderWidth)\n                                .attr(\"height\", barsArea.height + 2 * gridSize)\n                                .attr(\"x\", 0)\n                                .attr(\"y\", 0)\n                                .attr(\"stroke\", \"rgb(204,204,204)\")\n                                .attr(\"fill\", getPatternFill(\"#ffffff\"));\n                        }\n                        function moveSelectionBarArrowTo(itemIndex) {\n                            var arrowPosition = leftPadding, itemWidth;\n                            for (var i = 0; i < itemIndex; i++) {\n                                itemWidth = getBarWidth(i);\n                                arrowPosition += itemWidth + gridSize;\n                            }\n                            arrowPosition += getBarWidth(itemIndex) / 2;\n                            selectionBarArrow.attr(\"d\", [\n                                \"M\" + arrowPosition,\n                                height - options.selectionBar.barHeight - options.selectionBar.arrowHeight,\n                                \"L\" + (arrowPosition - options.selectionBar.arrowWidth / 2),\n                                height - options.selectionBar.barHeight,\n                                \"L\" + (arrowPosition + options.selectionBar.arrowWidth / 2),\n                                height - options.selectionBar.barHeight,\n                                \"Z\"\n                            ].join(\" \"));\n                        }\n                        function createSelectionBar() {\n                            selectionBar = svg.append(\"svg:rect\")\n                                .attr(\"width\", width)\n                                .attr(\"height\", options.selectionBar.barHeight)\n                                .attr(\"x\", 0)\n                                .attr(\"y\", height - options.selectionBar.barHeight);\n                            selectionBarArrow = svg.append(\"svg:path\");\n                        }\n                        function fitToGrid(size) {\n                            if (size < gridSize) {\n                                return gridSize;\n                            }\n                            var gridRemainder = size % gridSize;\n                            if (gridRemainder) {\n                                return size - gridRemainder;\n                            }\n                            return size;\n                        }\n                        function createBars(series) {\n                            rects = svg.selectAll(\"rect.bars\")\n                                .data(data)\n                                .enter()\n                                .append(\"rect\")\n                                .attr(\"class\", \"crisp bars percent-bars\" + (options.barsHandleEvents ? \" handle-events\" : \"\"));\n                            var totalWidth = leftPadding;\n                            function getDataColor(d) {\n                                return d._style && d._style[series.field] && d._style[series.field].color;\n                            }\n                            rects\n                                .attr(\"x\", function (d, i) {\n                                var currentTotalWidth = totalWidth;\n                                totalWidth += getBarWidth(i) + gridSize;\n                                return currentTotalWidth;\n                            })\n                                .attr(\"width\", function (d, i) {\n                                return getBarWidth(i);\n                            })\n                                .attr(\"height\", barsArea.height + \"px\")\n                                .attr(\"y\", gridSize)\n                                .attr(\"fill\", function (d, i) {\n                                return getPatternFill(getDataColor(d) || series.color || options.colors[i]);\n                            })\n                                .append(\"title\").text(function (d) {\n                                return d.tooltip;\n                            });\n                        }\n                        function createLabels() {\n                            var handleEventsClass = options.labels.handleEvents ? \" handle-events\" : \"\", totalWidth = leftPadding;\n                            labelBoxes = svg.selectAll(\"rect.label-box\" + handleEventsClass)\n                                .data(data)\n                                .enter()\n                                .append(\"rect\")\n                                .attr(\"class\", \"label-box\" + handleEventsClass)\n                                .attr(\"height\", options.labels.height)\n                                .attr(\"rx\", \"16px\")\n                                .attr(\"y\", height - options.labels.height - selectionBarTotalHeight)\n                                .attr(\"fill\", function (d) {\n                                var color = d._style && d._style[settings.labels.styleField] &&\n                                    d._style[settings.labels.styleField].color;\n                                return color || options.labelsFont.color;\n                            });\n                            labelTexts = svg.selectAll(\"text.labels\" + handleEventsClass)\n                                .data(data)\n                                .enter()\n                                .append(\"text\")\n                                .attr(\"class\", \"labels\" + handleEventsClass)\n                                .text(function (d) {\n                                return (d._percent < 1 ? \"< 1\" : Math.round(d._percent)) + \"%\";\n                            })\n                                .attr(\"x\", function (d, i) {\n                                var currentItemWidth = getBarWidth(i), currentTotalWidth = totalWidth;\n                                totalWidth += currentItemWidth + gridSize;\n                                return currentTotalWidth + currentItemWidth / 2;\n                            })\n                                .attr(\"y\", height - 10 - selectionBarTotalHeight)\n                                .attr(\"font-family\", options.labelsFont.family)\n                                .attr(\"font-size\", options.labelsFont.size)\n                                .attr(\"font-weight\", options.labelsFont.weight)\n                                .attr(\"fill\", setLabelFill)\n                                .attr(\"text-anchor\", \"middle\");\n                            totalWidth = leftPadding;\n                            labelBoxes\n                                .attr(\"width\", function (d, i) {\n                                return labelTexts[0][i].clientWidth + 10;\n                            })\n                                .attr(\"x\", function (d, i) {\n                                var currentTotalWidth = totalWidth, itemWidth = getBarWidth(i);\n                                totalWidth += getBarWidth(i) + gridSize;\n                                return Math.max(0, currentTotalWidth + (itemWidth - this.getBoundingClientRect().width) / 2);\n                            });\n                        }\n                        if (!data || !settings) {\n                            return;\n                        }\n                        element.css({\n                            height: options.height,\n                            width: \"100%\"\n                        });\n                        element[0].innerHTML = \"\";\n                        data = removeEmptyData(data);\n                        var valueField = settings.series[0].field, scale = d3.scale.linear()\n                            .domain([0, d3.sum(data, function (d) {\n                                return d[valueField];\n                            })]);\n                        var patterns = {};\n                        var width = element.width(), height = element.height(), gridSize = options.gridSize, leftPadding = gridSize, leftMargin = 0, selectionBarTotalHeight = options.showSelectionBar ?\n                            options.selectionBar.barHeight + options.selectionBar.arrowHeight +\n                                options.selectionBar.margin : 0, bottomReservedSpace = (options.createLabels ? options.labels.height + options.labels.margin :\n                            0) + selectionBarTotalHeight, barsArea = { width: width - 2 * gridSize, height: height - gridSize * 2 - bottomReservedSpace }, heightGridRemainder = barsArea.height % gridSize, widthGridRemainder = barsArea.width % gridSize, selectionBar, selectionBarArrow, barsWidth = [];\n                        if (heightGridRemainder) {\n                            barsArea.height += (gridSize - heightGridRemainder);\n                            bottomReservedSpace -= heightGridRemainder;\n                        }\n                        if (widthGridRemainder) {\n                            leftMargin = widthGridRemainder / 2;\n                            barsArea.width -= widthGridRemainder;\n                        }\n                        scale.range([0, barsArea.width - gridSize]);\n                        var svg = d3.select(element[0])\n                            .append(\"svg\")\n                            .attr(\"height\", \"100%\")\n                            .attr(\"width\", \"100%\");\n                        var defs = svg.append('svg:defs');\n                        selectItem = function (itemData, itemIndex) {\n                            var color = getSelectionBarColor(itemData), previousSelectedIndex = selectedBarGroup;\n                            d3.select(labelBoxes[0][selectedBarGroup]).classed(\"selected\", false);\n                            selectedBarGroup = itemIndex;\n                            d3.select(labelTexts[0][selectedBarGroup]).attr(\"fill\", setLabelFill(itemData, selectedBarGroup));\n                            if (previousSelectedIndex !== null) {\n                                d3.select(labelTexts[0][previousSelectedIndex]).attr(\"fill\", setLabelFill(data[previousSelectedIndex], previousSelectedIndex));\n                            }\n                            d3.select(labelBoxes[0][selectedBarGroup]).classed(\"selected\", true);\n                            selectionBar.attr(\"fill\", color);\n                            selectionBarArrow.attr(\"fill\", color);\n                            moveSelectionBarArrowTo(itemIndex);\n                        };\n                        createBackground();\n                        createBars(settings.series[0]);\n                        if (options.createLabels) {\n                            createLabels();\n                        }\n                        if (options.showSelectionBar) {\n                            createSelectionBar();\n                        }\n                        if (selectedBarGroup !== null && selectedBarGroup !== undefined && selectItem) {\n                            selectItem(data[selectedBarGroup], selectedBarGroup);\n                        }\n                        if (!selectedOnLoad && options.selectFirstOnLoad && selectItem) {\n                            setTimeout(function () {\n                                $rootScope.$apply(function () {\n                                    jQuery(rects[0][0]).click();\n                                });\n                            });\n                            selectedOnLoad = true;\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"PropertiesWidget\", [\"Utils\", \"Format\", \"Icons\", \"Transforms\", \"Widgets\"]).run([\"$q\", \"utils\",\n        \"format\", \"icons\", \"transforms\", \"menus\", \"widgetViews\",\n        function ($q, utils, format, icons, transforms, menus, widgetViews) {\n            var defaultListItemDisplayCount = 5; // The default number of items to display initially in a list.\n            function propertiesDataParser(view, data, params) {\n                var viewData = [], promises = [], iconParserPromises = [], iconParsers = {};\n                angular.forEach(view.settings.properties, function (property, propertyIndex) {\n                    if (property.icon) {\n                        iconParserPromises.push(icons.getParseIconFunction(property.icon).then(function (iconParser) {\n                            iconParsers[propertyIndex] = iconParser;\n                        }));\n                    }\n                });\n                function doGetData() {\n                    angular.forEach(data, function (item, itemIndex) {\n                        var itemData = [];\n                        var arrayValues;\n                        angular.forEach(view.settings.properties, function (property, propertyIndex) {\n                            var itemDataObj = {}, i;\n                            if (property.array) {\n                                arrayValues = [];\n                                angular.forEach(item[property.array], function (member, memberIndex) {\n                                    var memberValue = {\n                                        value: utils.strings.parseValue(property.value, member, params, memberIndex)\n                                    };\n                                    if (memberValue.value) {\n                                        if (property.link) {\n                                            memberValue.link =\n                                                utils.strings.parseValue(property.link, member, params, itemIndex);\n                                        }\n                                        arrayValues.push(memberValue);\n                                    }\n                                });\n                            }\n                            if (property.menu) {\n                                if (property.menu.id) {\n                                    promises.push(menus.getMenu(property.menu, item, params).then(function (menu) {\n                                        if (menu) {\n                                            itemDataObj.menu = angular.extend(menu, property.menu);\n                                        }\n                                    }));\n                                }\n                                else {\n                                    itemDataObj.menu = {\n                                        items: []\n                                    };\n                                    property.menu.items.forEach(function (menuItem, i) {\n                                        var itemCopy = angular.copy(menuItem);\n                                        itemCopy.text = utils.strings.parseValue(menuItem.text, item, params, i);\n                                        itemDataObj.menu.items.push(itemCopy);\n                                    });\n                                }\n                            }\n                            var icon = iconParsers[propertyIndex](property.icon);\n                            if (property.value) {\n                                var itemValue = property.value && !arrayValues &&\n                                    utils.strings.parseValue(property.value, item, params, itemIndex);\n                                if (itemValue || (arrayValues && arrayValues.length)) {\n                                    angular.extend(itemDataObj, {\n                                        icon: icon,\n                                        tooltip: utils.strings.parseValue(property.tooltip, item, params, itemIndex)\n                                    });\n                                    if (arrayValues) {\n                                        itemDataObj.list = arrayValues;\n                                        if (arrayValues.length > defaultListItemDisplayCount) {\n                                            itemDataObj.enableShowAll = true;\n                                            for (i = 0; i < defaultListItemDisplayCount; i++) {\n                                                itemDataObj.list[i].enabled = true;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        itemDataObj.value = format.formatItem(property, itemValue);\n                                        if (property.transform) {\n                                            itemDataObj.value =\n                                                transforms.transformValue(itemDataObj.value, property.transform);\n                                        }\n                                        if (property.link) {\n                                            itemDataObj.link =\n                                                utils.strings.parseValue(property.link, item, params, itemIndex);\n                                        }\n                                    }\n                                    itemData.push(itemDataObj);\n                                }\n                            }\n                            else if (property.list) {\n                                angular.extend(itemDataObj, {\n                                    icon: icon,\n                                    tooltip: utils.strings.parseValue(property.tooltip, item, params, itemIndex),\n                                    list: []\n                                });\n                                angular.forEach(property.list, function (listItem, listItemIndex) {\n                                    var listItemValue = utils.strings.parseValue(listItem.value, item, params, listItemIndex), listItemObj;\n                                    if (listItemValue) {\n                                        if (listItem.transform) {\n                                            listItemValue =\n                                                transforms.transformValue(listItemValue, listItem.transform);\n                                        }\n                                        if (listItem.link) {\n                                            listItemValue = \"<a href='\" +\n                                                utils.strings.parseValue(listItem.link, item, params, listItemIndex) +\n                                                \"'>\" + listItemValue + \"</a>\";\n                                        }\n                                        listItemObj = {\n                                            value: (listItem.label ? \"<strong>\" +\n                                                utils.strings.parseValue(listItem.label, item, params, listItemIndex) +\n                                                \"</strong> \" : \"\") + listItemValue\n                                        };\n                                        if (listItem.className) {\n                                            listItemObj.className = listItem.className;\n                                        }\n                                        itemDataObj.list.push(listItemObj);\n                                    }\n                                });\n                                if (itemDataObj.list.length > defaultListItemDisplayCount) {\n                                    itemDataObj.enableShowAll = true;\n                                    for (i = 0; i < defaultListItemDisplayCount; i++) {\n                                        itemDataObj.list[i].enabled = true;\n                                    }\n                                }\n                                itemData.push(itemDataObj);\n                            }\n                            else if (property.booleanList) {\n                                var listItems = [];\n                                angular.forEach(property.booleanList, function (member) {\n                                    if (item[member.show]) {\n                                        var boolItem = { value: member.label };\n                                        if (member.link) {\n                                            boolItem.link =\n                                                utils.strings.parseValue(member.link, item, params, itemIndex);\n                                        }\n                                        listItems.push(boolItem);\n                                    }\n                                });\n                                if (listItems.length) {\n                                    itemData.push({\n                                        icon: icon,\n                                        tooltip: utils.strings.parseValue(property.tooltip, item, params, itemIndex),\n                                        list: listItems\n                                    });\n                                }\n                            }\n                        });\n                        viewData.push(itemData);\n                    });\n                    return viewData;\n                }\n                return $q.all(iconParserPromises).then(doGetData);\n            }\n            widgetViews.registerView(\"properties\", { dataParser: propertiesDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"ForceChartWidget\", [\"Utils\", \"Widgets\", \"Events\"]).run([\"utils\", \"widgetViews\",\n        function (utils, widgetViews) {\n            function forceDataParser(view, data, params) {\n                var settings = view.settings;\n                var newData = {\n                    nodes: [],\n                    links: []\n                }, nodeIndexes = {};\n                function getRowNodes(row) {\n                    var nodeName, nodeLabel, nodeIndex, rowNodeIndexes = [], rowLinkKeys = {};\n                    for (var i = 0, nodeSettings; !!(nodeSettings = settings.nodes[i]); i++) {\n                        nodeName = row[nodeSettings.name];\n                        nodeLabel =\n                            nodeSettings.label ? utils.strings.parseValue(nodeSettings.label, row, params) : nodeName;\n                        nodeIndex = nodeIndexes[nodeSettings.group + \"_\" + nodeLabel];\n                        if (nodeIndex === undefined) {\n                            nodeIndex = nodeIndexes[nodeSettings.group + \"_\" + nodeLabel] = newData.nodes.length;\n                            newData.nodes.push({\n                                name: nodeName,\n                                count: parseInt(row[nodeSettings.size], 10),\n                                group: nodeSettings.group,\n                                weight: 0,\n                                \"userCount\": true,\n                                \"label\": nodeLabel,\n                                unique: [nodeSettings.group, nodeLabel].join(\":\"),\n                                isCurrentlyFocused: false,\n                                field: nodeSettings.name,\n                                custom: nodeSettings.custom\n                            });\n                        }\n                        rowNodeIndexes.push(nodeIndex);\n                    }\n                    var currentLinkIndex, currentSubLinkIndex, linkKey, sourceNodeIndex, targetNodeIndex;\n                    for (currentLinkIndex = 0; currentLinkIndex < rowNodeIndexes.length - 1; currentLinkIndex++) {\n                        for (currentSubLinkIndex = currentLinkIndex + 1; currentSubLinkIndex < rowNodeIndexes.length; currentSubLinkIndex++) {\n                            linkKey = [rowNodeIndexes[currentLinkIndex], rowNodeIndexes[currentSubLinkIndex]].join(\"_\");\n                            if (!rowLinkKeys[linkKey]) {\n                                sourceNodeIndex = rowNodeIndexes[currentLinkIndex];\n                                targetNodeIndex = rowNodeIndexes[currentSubLinkIndex];\n                                newData.links.push({\n                                    depth: 1,\n                                    unique: [newData.nodes[sourceNodeIndex].unique,\n                                        newData.nodes[targetNodeIndex].unique].join(\"_\"),\n                                    source: sourceNodeIndex,\n                                    target: targetNodeIndex\n                                });\n                                rowLinkKeys[linkKey] = true;\n                                newData.nodes[rowNodeIndexes[currentLinkIndex]].weight++;\n                                newData.nodes[rowNodeIndexes[currentSubLinkIndex]].weight++;\n                            }\n                        }\n                    }\n                }\n                angular.forEach(data, getRowNodes);\n                return newData;\n            }\n            widgetViews.registerView(\"forceChart\", { dataParser: forceDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('ForceChartWidget')\n        .directive('forceChart', [\"events\", function (eventsService) {\n            return {\n                template: '<div class=\"widget-force-chart\"></div>',\n                restrict: 'E',\n                require: \"?ngModel\",\n                replace: true,\n                link: function postLink(scope, element, attrs, ngModel) {\n                    var defaultOptions = {\n                        \"radius\": 2.5,\n                        \"fontSize\": 9,\n                        \"labelFontSize\": 9,\n                        \"gravity\": 0,\n                        \"height\": 800,\n                        \"nodeFocusColor\": \"black\",\n                        \"nodeFocusRadius\": 25,\n                        \"nodeFocus\": true,\n                        \"linkDistance\": 1250,\n                        \"charge\": 0,\n                        \"nodeResize\": \"weight\",\n                        \"linkName\": \"tag\",\n                        \"minRadius\": 3,\n                        \"maxRadius\": 15,\n                        \"minScale\": 1,\n                        \"maxScale\": 3\n                    }, data, dataChanged, events, settings, graphOptions, nodeClickInProgress, nodeClickTimeout, nodesData, linksData, selectedNodes = [];\n                    // Load the Visualization API and the piechart package.\n                    //google.load('visualization', '1.0', {'packages':['corechart']});\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                    scope.$watch(attrs.ngModel, function (chartData) {\n                        data = chartData;\n                        dataChanged = true;\n                        drawChart();\n                    });\n                    scope.$watch(attrs.graphSettings, function (value) {\n                        events = value.events;\n                        settings = value;\n                        graphOptions = angular.extend({}, defaultOptions, settings.graphOptions);\n                        drawChart();\n                    });\n                    function drawChart() {\n                        element[0].innerHTML = \"\";\n                        if (!settings || !data || !data.nodes || !data.nodes.length || !dataChanged) {\n                            return;\n                        }\n                        function addLinks() {\n                            linksData = data.links.filter(function (d) {\n                                return d.source.group !== d.target.group;\n                            });\n                            if (selectedNodes.length) {\n                                linksData = linksData.filter(function (d) {\n                                    return d.source.selected || d.target.selected;\n                                });\n                            }\n                            force.links(linksData);\n                            link = svg.selectAll(\"line.link\")\n                                .data(linksData, function (d) {\n                                return d.unique;\n                            });\n                            link.enter().insert(\"svg:line\", \".node\").attr(\"class\", \"link\");\n                            link.exit().remove();\n                        }\n                        function addNodes() {\n                            nodesData = [];\n                            if (selectedNodes.length) {\n                                selectedNodes.forEach(function (node) {\n                                    nodesData.push(node);\n                                });\n                                linksData.forEach(function (d) {\n                                    if (!~nodesData.indexOf(d.source)) {\n                                        nodesData.push(d.source);\n                                    }\n                                    if (!~nodesData.indexOf(d.target)) {\n                                        nodesData.push(d.target);\n                                    }\n                                });\n                            }\n                            else {\n                                nodesData = data.nodes;\n                            }\n                            force.nodes(nodesData);\n                            node = svg.selectAll(\".node\")\n                                .data(nodesData, function (d) {\n                                return d.unique;\n                            });\n                            node.enter().append(\"svg:g\")\n                                .attr(\"class\", \"node\")\n                                .on(\"click\", function (d) {\n                                if (d3.event.defaultPrevented) {\n                                    return;\n                                }\n                                if (nodeClickInProgress) {\n                                    nodeClickInProgress = false;\n                                    clearTimeout(nodeClickTimeout);\n                                    onDblClick(d);\n                                }\n                                else {\n                                    nodeClickInProgress = true;\n                                    nodeClickTimeout = setTimeout(function () {\n                                        onClick(d);\n                                        nodeClickInProgress = false;\n                                    }, 200);\n                                }\n                            })\n                                .call(drag);\n                            if (settings.icons) {\n                                node.append(\"svg:image\")\n                                    .attr(\"xlink:href\", function (d) {\n                                    return settings.icons[d.group];\n                                })\n                                    .attr(\"width\", 25)\n                                    .attr(\"height\", 25)\n                                    .attr(\"x\", -8)\n                                    .attr(\"y\", -10)\n                                    .style(\"fill\", function (d) {\n                                    return color(d.group);\n                                });\n                            }\n                            else {\n                                node.append(\"svg:circle\")\n                                    .attr(\"class\", \"node\")\n                                    .style(\"fill\", function (d) {\n                                    return color(d.group);\n                                })\n                                    .attr(\"r\", function (d) {\n                                    return Math.min(scale(d.weight), graphOptions.maxRadius);\n                                });\n                            }\n                            node.append(\"text\")\n                                .attr(\"dx\", 12)\n                                .attr(\"dy\", \".35em\")\n                                .text(function (d) {\n                                return d.label;\n                            });\n                            node.append(\"title\")\n                                .text(function (d) {\n                                return d.label;\n                            });\n                            node.exit().remove();\n                        }\n                        function onClick(d) {\n                            if (d.selected) {\n                                selectedNodes.splice(selectedNodes.indexOf(d), 1);\n                            }\n                            else {\n                                selectedNodes.push(d);\n                            }\n                            d.selected = !d.selected;\n                            addLinks();\n                            addNodes();\n                            force.resume();\n                        }\n                        function onDblClick(d) {\n                            if (graphOptions.onDblClick) {\n                                eventsService.triggerDashboardEvent(graphOptions.onDblClick, d);\n                            }\n                        }\n                        function dragstart(d) {\n                            /* jshint validthis: true */\n                            d3.select(this).classed(\"fixed\", d.fixed = true);\n                        }\n                        function tick() {\n                            link.attr(\"x1\", function (d) {\n                                return d.source.x;\n                            })\n                                .attr(\"y1\", function (d) {\n                                return Math.min(height - 10, Math.max(10, d.source.y));\n                            })\n                                .attr(\"x2\", function (d) {\n                                return d.target.x;\n                            })\n                                .attr(\"y2\", function (d) {\n                                return Math.max(10, d.target.y);\n                            });\n                            node.attr(\"transform\", function (d) {\n                                return \"translate(\" + d.x + \",\" + Math.min(height - 10, Math.max(10, d.y)) + \")\";\n                            });\n                        }\n                        var width = element.innerWidth() - 30, height = graphOptions.height;\n                        var link, node;\n                        var scale = d3.scale.linear()\n                            .range(settings.icons ? [graphOptions.minScale, graphOptions.maxScale] :\n                            [graphOptions.minRadius, graphOptions.maxRadius])\n                            .domain([1, 30]);\n                        var color = d3.scale.category10();\n                        var svg = d3.select(element[0])\n                            .append(\"svg:svg\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", height);\n                        d3.scale.linear().range([-120, 0]).domain([0, 10]);\n                        d3.scale.linear().range([40, 300]).domain([0, 100]);\n                        var force = d3.layout.force()\n                            .linkDistance(60)\n                            .charge(-220)\n                            .gravity(0.02)\n                            .size([width, height])\n                            .nodes(data.nodes)\n                            .links(data.links)\n                            .on(\"tick\", tick)\n                            .start();\n                        var drag = force.drag()\n                            .on(\"dragstart\", dragstart);\n                        addLinks();\n                        addNodes();\n                        force.on(\"tick\", tick);\n                        force.tick();\n                    }\n                }\n            };\n        }]);\n}());\n","angular.module(\"ScatterPlotWidget\", [\"Utils\", \"ChartWidgets\", \"Widgets\"])\n    .run([\"utils\", \"widgetViews\", function (utils, widgetViews) {\n        'use strict';\n        function scatterPlotDataParser(view, data, params) {\n            var timeField = view.settings.timeField;\n            if (timeField) {\n                var hourFieldName = view.settings.timeFieldHour = timeField + \"_hour\";\n                data.forEach(function (row) {\n                    var timeValue = row[timeField];\n                    var timeMoment;\n                    if (timeValue) {\n                        timeMoment = utils.date.getMoment(timeValue);\n                        // Update time value to be a Date value\n                        row[timeField] = timeMoment.isValid() ? timeMoment.toDate() : null;\n                        // Add an hour value\n                        row[hourFieldName] = timeMoment.hours() + (timeMoment.minutes() / 60);\n                    }\n                });\n            }\n            return data;\n        }\n        widgetViews.registerView(\"scatterPlot\", {\n            dataParser: scatterPlotDataParser\n        });\n    }]);\n","(function () {\n    'use strict';\n    angular.module(\"ScatterPlotWidget\").directive(\"scatterPlot\", [\"$rootScope\", \"utils\", \"fsHighChartService\", \"SCORE_COLOR_META_DATA\",\n        function ($rootScope, utils, fsHighChartService, SCORE_COLOR_META_DATA) {\n            //Constants Decleration\n            var MIN_NUMBER_OF_DAYS = 7;\n            var MILISECONDS_IN_DAY = 24 * 3600 * 1000;\n            var symbols = [{\n                    \"shape\": 'circle',\n                    \"color\": '#DE07CC'\n                },\n                {\n                    \"shape\": 'square',\n                    \"color\": '#07874D'\n                },\n                {\n                    \"shape\": 'triangle',\n                    \"color\": '#3DDDF2'\n                }, {\n                    \"shape\": 'triangle-down',\n                    \"color\": '#000000'\n                }, {\n                    \"shape\": 'diamond',\n                    \"color\": '#1E25E8'\n                }];\n            /**\n             * Note for the directive:\n             *    Currently we are not using HIGHCHART-NG http://ngmodules.org/modules/highcharts-ng\n             *    If you need extra watchers and data binding, or any other funcenelity consider using highcharts-ng\n             *    instead of extending this code.\n             */\n            return {\n                template: '<div class=\"highchart-chart-container\" ></div>',\n                restrict: 'E',\n                scope: {\n                    model: '=',\n                    graphSettings: '='\n                },\n                //Link function update the UI elements\n                controller: function ($scope) {\n                    /**\n                     *\n                     * @returns {boolean} true axis X look only on the date part in a day resolution and ingore\n                     *     hour/minute/second\n                     */\n                    var ctrl = this;\n                    this.xAxisIgnoreHours = function () {\n                        return !$scope.graphSettings.yField;\n                    };\n                    //Change the first and last days according to the data\n                    this.rescaleXaxis = function (chartData, xField) {\n                        var domain = d3.extent(chartData, function (d) {\n                            return d[xField];\n                        });\n                        var m1 = utils.date.getMoment(domain[0]).startOf('day'), m2 = utils.date.getMoment(domain[1]).endOf('day'), diff = Math.abs(m1.diff(m2, \"days\"));\n                        if (diff < MIN_NUMBER_OF_DAYS) {\n                            var daysToAdd = Math.floor((MIN_NUMBER_OF_DAYS - diff) / 2);\n                            m1.subtract(daysToAdd, \"days\");\n                            m2.add(daysToAdd, \"days\");\n                        }\n                        domain[0] = m1.valueOf();\n                        domain[1] = m2.valueOf();\n                        $scope.chart.xAxis[0].update({\n                            min: domain[0],\n                            max: domain[1]\n                        });\n                    };\n                    /**\n                     * Iterate the array of SCORE_COLOR_META_DATA and return the name of the SCORE COLOR (LOW,\n                     * MEDIUM, ETC...) which the given store match\n                     * @param score\n                     * @returns {string}\n                     * @throws InternalError if given score is out of range\n                     */\n                    this.getRiskKeyByScore = function (score) {\n                        for (var propertyName in SCORE_COLOR_META_DATA) {\n                            if (SCORE_COLOR_META_DATA.hasOwnProperty(propertyName)) {\n                                var scoreColorMetaData = SCORE_COLOR_META_DATA[propertyName];\n                                if (score >= scoreColorMetaData.minScore &&\n                                    score < scoreColorMetaData.maxScore) {\n                                    return propertyName;\n                                }\n                            }\n                        }\n                        //If nothing match, throw error\n                        throw new RangeError(\"Score must be 0-100\");\n                    };\n                    /**\n                     *\n                     * @param data - array of point (x,y) for highchart\n                     * @param color - the required color for the series - affect legend and points\n                     * @param name - the name of the series- affect the legend\n                     * @param markerSymbol - the symbole for the point\n                     * @param seriesIndex - order of the series in the chart & legend. Start with 0.\n                     */\n                    this.addOrUpdateSeries = function (data, color, name, markerSymbol, seriesIndex) {\n                        //Create the series object\n                        var highchartSeriesObject = {\n                            \"data\": data,\n                            \"color\": color,\n                            \"name\": name,\n                            \"marker\": {\n                                \"symbol\": markerSymbol\n                            }\n                        };\n                        if ($scope.chart.series && $scope.chart.series[seriesIndex]) {\n                            //Update series if series with the same index already exists\n                            $scope.chart.series[seriesIndex].update(highchartSeriesObject);\n                        }\n                        else {\n                            //Add new series if the index is not exists\n                            $scope.chart.addSeries(highchartSeriesObject);\n                        }\n                    };\n                    this.refreshData = function (chartData) {\n                        function populateEntityTypePoints(point) {\n                            entityTypePoints.push(point);\n                        }\n                        if (chartData && chartData.length > 0) {\n                            /**\n                             * xField, yField, colorField - column names which contain the name of columns which\n                             * have the relevant data for each dimension\n                             */\n                            var xField = $scope.graphSettings.timeField;\n                            var yField = $scope.graphSettings.yField || $scope.graphSettings.timeFieldHour;\n                            var colorField = $scope.graphSettings.colorField;\n                            //catagorizedData - The manipulated data will be stores in catagorizedData object.\n                            // \t\t\t\t\tThe structure of the data should be:\n                            // catagorizedData.entityType[priority] When entityType is VPN Session, SSH, etc... and\n                            // priority is 0..3 when 0 is critical and 3 is low\n                            var catagorizedData = this._getDataCatagorized(chartData, xField, yField, colorField);\n                            //Add / Update the series data\n                            var entityTypesArr = Object.keys(catagorizedData);\n                            var riskTypesArr = Object.keys(SCORE_COLOR_META_DATA);\n                            var isMultiSeries = entityTypesArr.length > 1;\n                            var i;\n                            var data, color, name, symbol;\n                            if (!isMultiSeries) {\n                                //Case 1- single series (single data source)\n                                //Get the all the risk series on the single data source\n                                var entityTypeDataPerRisk = catagorizedData[entityTypesArr[0]];\n                                for (i = 0; i < riskTypesArr.length; i++) {\n                                    var riskName = [riskTypesArr[i]];\n                                    data = entityTypeDataPerRisk[riskName];\n                                    color = SCORE_COLOR_META_DATA[riskName].color;\n                                    name = utils.strings.capitalize(SCORE_COLOR_META_DATA[riskName].name);\n                                    symbol = symbols[0].shape;\n                                    this.addOrUpdateSeries(data, color, name, symbol, i);\n                                }\n                            }\n                            else {\n                                //Case 2 - multi series (multi data source)\n                                for (i = 0; i < entityTypesArr.length; i++) {\n                                    var entityType = [entityTypesArr[i]];\n                                    var entityTypePoints = [];\n                                    //Aggregate all risk series into single array of the data source\n                                    for (var j = 0; j < riskTypesArr.length; j++) {\n                                        catagorizedData[entityType][riskTypesArr[j]]\n                                            .forEach(populateEntityTypePoints);\n                                    }\n                                    data = entityTypePoints;\n                                    color = symbols[i].color;\n                                    name = entityType;\n                                    symbol = symbols[i].shape;\n                                    this.addOrUpdateSeries(data, color, name, symbol, i);\n                                }\n                            }\n                            this.rescaleXaxis(chartData, xField);\n                            $scope.chart.redraw(); //Redraw required because axis x' length changed and I need to\n                        }\n                    };\n                    /**\n                     * This method convert the data into two dimmensions array [entityName][riskLevel]\n                     * name\n                     * @param chartData - array of data objects\n                     * @param xField - the name of field for Axis X\n                     * @param yField - the name of field for Axis Y\n                     * @param colorField - the name of field for the color\n                     * @private\n                     * @return {} two dimensions array [entityName][riskLevel]\n                     */\n                    this._getDataCatagorized = function (chartData, xField, yField, colorField) {\n                        var catagorizedData = {};\n                        //For each data in the original array, manipulate the data in \"point\" variable, and add the\n                        // point to catagorizedData. entry - represents entry of original data from the original\n                        // array\n                        chartData.forEach(function (entry) {\n                            //Get the x value, calculated from Date object.\n                            var timeValue;\n                            if (ctrl.xAxisIgnoreHours()) {\n                                //Normalize the time to date only, in resolution of one day\n                                timeValue = utils.date.getMoment(entry[xField]).startOf('day').toDate();\n                            }\n                            else {\n                                timeValue = entry[xField];\n                            }\n                            var point = {\n                                x: timeValue.valueOf(),\n                                y: entry[yField] ? entry[yField] : 0,\n                                entry: entry\n                            };\n                            var riskTypesArr = Object.keys(SCORE_COLOR_META_DATA);\n                            //Add the point to the temporal array catagorizedData- split the data between the\n                            // buckets [entity name][critical / high/  medium/low]\n                            if (!catagorizedData[entry.type]) {\n                                catagorizedData[entry.type] = {};\n                                //Init catagorizedData[entry.type][riskTypesArr[i]] as empty array\n                                for (var i = 0; i < riskTypesArr.length; i++) {\n                                    catagorizedData[entry.type][riskTypesArr[i]] = [];\n                                }\n                            }\n                            var riskKeys = ctrl.getRiskKeyByScore(entry[colorField]);\n                            catagorizedData[entry.type][riskKeys].push(point);\n                        });\n                        return catagorizedData;\n                    };\n                },\n                link: function postLink(scope, element, attrs, ctrl) {\n                    //Set unique ID for the div, Highchart need it.\n                    var chartId = Math.random().toString(36).slice(2);\n                    //Set unique ID on the root element of the template\n                    element.children('.highchart-chart-container').attr('id', chartId);\n                    if (scope.graphSettings.height) {\n                        element.css('height', scope.graphSettings.height + \"px\");\n                    }\n                    //Prepare configurations for chartConfig:\n                    var calculatedMinHeight = scope.graphSettings.scales.y.domain ?\n                        scope.graphSettings.scales.y.domain[0] : scope.graphSettings.scales.y.minValue;\n                    var calculatedMaxHeight = scope.graphSettings.scales.y.domain ?\n                        scope.graphSettings.scales.y.domain[1] : undefined;\n                    var calculatedYAxistickInterval = scope.graphSettings.scales.y.ticks ?\n                        scope.graphSettings.scales.y.ticks.interval : undefined;\n                    var calculatedXAxistickInterval = ctrl.xAxisIgnoreHours() ? MILISECONDS_IN_DAY : undefined;\n                    //Create the configuration chart for the scatterPlot;\n                    var chartConfig = {\n                        \"chart\": {\n                            \"renderTo\": chartId,\n                            \"type\": \"scatter\",\n                            \"zoomType\": 'xy',\n                            \"height\": scope.graphSettings.height,\n                            events: {\n                                load: function () {\n                                    //The default behviour for highchart is so the tooltip displayed on hover.\n                                    //I have to change it to be onclick only, therefore I have to override the\n                                    // default tooltip after page rendered.\n                                    this.myTooltip = new Highcharts.Tooltip(this, this.options.tooltip);\n                                }\n                            }\n                        },\n                        rangeSelector: {\n                            selected: 1\n                        },\n                        legend: {\n                            enabled: true,\n                            layout: 'vertical',\n                            align: 'right',\n                            verticalAlign: 'top',\n                            x: 10,\n                            y: 40,\n                            borderWidth: 0\n                        },\n                        \"plotOptions\": {\n                            scatter: {\n                                lineWidth: 0\n                            },\n                            area: {\n                                marker: {\n                                    enabled: false\n                                },\n                                cursor: 'Pointer',\n                                stacking: 'normal'\n                            },\n                            series: {\n                                stickyTracking: false,\n                                cursor: 'pointer',\n                                events: {\n                                    //The default behvioud for highchart is so the tooltip displayed on hover.\n                                    //I have to change it to be onclick only. I add to add events on all series\n                                    // that catch click on item, and mouseout on item\n                                    click: function (evt) {\n                                        this.chart.myTooltip.refresh(evt.point, evt);\n                                    },\n                                    mouseOut: function () {\n                                        this.chart.myTooltip.hide();\n                                    }\n                                }\n                            }\n                        },\n                        yAxis: {\n                            title: {\n                                text: '<b>' + scope.graphSettings.axes.y.label + '</b>'\n                            },\n                            //The min value might come from y.domain[0] or y.minValue. Depend on configuratin\n                            min: calculatedMinHeight,\n                            //Max value not always given.\n                            max: calculatedMaxHeight,\n                            tickInterval: calculatedYAxistickInterval\n                        },\n                        xAxis: {\n                            title: {\n                                enabled: true,\n                                text: '<b>' + scope.graphSettings.axes.x.label + '</b>'\n                            },\n                            type: 'datetime',\n                            tickInterval: calculatedXAxistickInterval,\n                            gridLineWidth: 0.5,\n                            gridLineColor: \"#E2E3E1\"\n                        },\n                        tooltip: {\n                            useHTML: true,\n                            //Function which generate the tooltip as HTML\n                            formatter: function () {\n                                var entry = this.point.entry; //All the data of the point\n                                var tooltipHtml = '<table>';\n                                var toolTipFields = scope.graphSettings.onSelect.actionOptions.table.rows;\n                                // Create a Set to prevent field duplications\n                                var toolTipSet = _.indexBy(toolTipFields, 'label');\n                                //For each field given in the tooltip descriptor, we add a line to tooltip with\n                                // \"label: value\". We are using utils.strings.parseValue to evaluate the label and\n                                // value from the given string.\n                                _.each(toolTipSet, function (toolTipLine) {\n                                    var label = utils.strings.parseValue(toolTipLine.label, entry);\n                                    var value = '<b>' + utils.strings.parseValue(toolTipLine.value, entry) + '</b>';\n                                    tooltipHtml =\n                                        tooltipHtml + '<tr><td>' + label + ': </td><td>' + value + '</td></tr>';\n                                });\n                                tooltipHtml += \"</table>\";\n                                return tooltipHtml;\n                            }\n                        }\n                    };\n                    $.extend(true, chartConfig, fsHighChartService.getBasicChartConfiguration());\n                    //Create the chart object and save it on the scope\n                    scope.$applyAsync(function () {\n                        scope.chart = new Highcharts.Chart(chartConfig);\n                    });\n                    //The data of the chart mostly updated after the chart was rendered, and when clicking refresh.\n                    //We are using watch to identify data changes.\n                    scope.$watch('model', function (chartData) {\n                        ctrl.refreshData(chartData);\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"ScatterPlotWidget\").controller(\"ScatterPlotWidgetController\", [\"$scope\", \"colors\", function ($scope, colors) {\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"SecurityFeed\", [\"Utils\", \"Transforms\", \"Styles\", \"Icons\", \"Widgets\", \"State\"]).run([\"$q\", \"utils\",\n        \"transforms\", \"styles\", \"icons\", \"widgetViews\",\n        function ($q, utils, transforms, styles, icons, widgetViews) {\n            function securityFeedDataParser(view, data, params) {\n                var deferred = $q.defer(), viewData = [], promises = [];\n                angular.forEach(data, function (item) {\n                    //an addition for adding the investigate url to the username accordign to the investigate generator\n                    item.investigateLink = typeLinks[item.generator_name] ?\n                        utils.strings.parseValue(typeLinks[item.generator_name].url, item) :\n                        utils.strings.parseValue(\"#/user/{{fsId}}/user_overview\".url, item);\n                    if (view.settings.dataField) {\n                        angular.forEach(item[view.settings.dataField], addItem);\n                    }\n                    else {\n                        addItem(item);\n                    }\n                });\n                function addItem(item) {\n                    var itemObj = {}, text = \"\";\n                    //dynamicText deals with the case of nested {{ }}. example: {{expression with {{something}} inside\n                    // }}\n                    var dynamicText;\n                    if (view.settings.link) {\n                        var links = [];\n                        if (item.aggregated) {\n                            angular.forEach(item.aggregated, function (entity) {\n                                if (!view.settings.linkIfExists || entity[view.settings.linkIfExists]) {\n                                    if (view.settings.link.customUrl && view.settings.link.customUrl.map &&\n                                        view.settings.link.customUrl.map[item.generator_name]) {\n                                        links.push(\"<a href='\" +\n                                            utils.strings.parseValue(view.settings.link.customUrl\n                                                .map[item.generator_name], entity, params) + \"'>\" +\n                                            utils.strings.parseValue(view.settings.link.text, entity, params) + \"</a>\");\n                                    }\n                                    else {\n                                        links.push(\"<a href='\" +\n                                            utils.strings.parseValue(view.settings.link.url, entity, params) + \"'>\" +\n                                            utils.strings.parseValue(view.settings.link.text, entity, params) + \"</a>\");\n                                    }\n                                }\n                                else {\n                                    links.push(utils.strings.parseValue(view.settings.link.text, entity, params));\n                                }\n                            });\n                            if (item.aggregated.length > 3) {\n                                itemObj.linksHtml = utils.arrays.toSentence(links);\n                                var multipleName = typeLinks[item.generator_name] &&\n                                    typeLinks[item.generator_name].aggregatedObjectName || view.settings.link.name;\n                                itemObj.collapsedLinksText = item.aggregated.length + \" \" + multipleName;\n                            }\n                            else {\n                                text += utils.arrays.toSentence(links);\n                            }\n                        }\n                        else {\n                            if (!view.settings.linkIfExists || item[view.settings.linkIfExists]) {\n                                if (view.settings.link.customUrl && view.settings.link.customUrl.map &&\n                                    view.settings.link.customUrl.map[item.generator_name]) {\n                                    links.push(\"<a href='\" +\n                                        utils.strings.parseValue(view.settings.link.customUrl.map[item.generator_name], item, params) + \"'>\" +\n                                        utils.strings.parseValue(view.settings.link.text, item, params) + \"</a>\");\n                                }\n                                else {\n                                    links.push(\"<a href='\" +\n                                        utils.strings.parseValue(view.settings.link.url, item, params) + \"'>\" +\n                                        utils.strings.parseValue(view.settings.link.text, item, params) + \"</a>\");\n                                }\n                            }\n                            else {\n                                links.push(utils.strings.parseValue(view.settings.link.text, item, params));\n                            }\n                            text += utils.arrays.toSentence(links);\n                        }\n                    }\n                    //remove the outer set of curly brackets, so parseValue could deal with the inner curly brackets\n                    dynamicText =\n                        view.settings.textWithVariables ? item[view.settings.textWithVariables] : view.settings.text;\n                    text += utils.strings.parseValue(dynamicText, item, params);\n                    //attributeMatches parse the parts with single curly brackets '{something}', which usually comes\n                    // from 'cause' in mongo\n                    var attributeMatches = text.match(/\\{([^\\}]+)\\}/g);\n                    if (attributeMatches) {\n                        angular.forEach(attributeMatches, function (attributeMatch) {\n                            var property = attributeMatch.match(/^\\{([^\\}]+)/)[1], propertyAttributes, html = [], \n                            //logical '&&' returns the first falsy var (or just the latest one is they all truthy)\n                            itemAttributes = item.aggregated && item.aggAttributes || item.attributes;\n                            if (itemAttributes) {\n                                propertyAttributes = [];\n                                angular.forEach(itemAttributes[property], function (attribute) {\n                                    if (!~propertyAttributes.indexOf(attribute)) {\n                                        propertyAttributes.push(attribute);\n                                    }\n                                });\n                                var url;\n                                if (view.settings.attributes && view.settings.attributes.url) {\n                                    url = view.settings.attributes.url.map ?\n                                        view.settings.attributes.url.map[item.generator_name] :\n                                        view.settings.attributes.url;\n                                }\n                                if (url) {\n                                    angular.forEach(propertyAttributes, function (attribute) {\n                                        html.push(\"<a href='\" +\n                                            utils.strings.parseValue(url, { attribute: attribute }, params) + \"'>\" +\n                                            attribute + \"</a>\");\n                                    });\n                                }\n                                else {\n                                    angular.forEach(propertyAttributes, function (attribute) {\n                                        html.push(\"<span>\" + attribute + \"</span>\");\n                                    });\n                                }\n                            }\n                            text = text.replace(attributeMatch, utils.arrays.toSentence(html));\n                        });\n                    }\n                    itemObj.id = item.id;\n                    itemObj.text = text.replace(/([^\\.])$/, \"$1.\");\n                    itemObj.dismissed = item.dismissed;\n                    itemObj.flag = item.flag;\n                    if (view.settings.note) {\n                        itemObj.note = utils.strings.parseValue(view.settings.note, item, params);\n                    }\n                    if (view.settings.icon) {\n                        promises.push(icons.getIcon(view.settings.icon, item).then(function (icon) {\n                            itemObj.icon = icon;\n                        }));\n                    }\n                    if (view.settings.allowComments) {\n                        itemObj.commentsCount = item.commentsCount;\n                        itemObj.comments = item.comments;\n                        itemObj.loadedComments = false;\n                    }\n                    if (!item.aggregated || !typeLinks[item.generator_name] ||\n                        typeLinks[item.generator_name].allowAggregated !== false) {\n                        if (!!(itemObj.link = angular.copy(typeLinks[item.generator_name]))) {\n                            var linkData = angular.copy(item);\n                            if (item.aggregated) {\n                                linkData.fsId = [];\n                                linkData.displayName = [];\n                                linkData.userCount = 0;\n                                item.aggregated.forEach(function (user) {\n                                    // Update array of fsIds\n                                    if (linkData.fsId.indexOf(user.fsId) < 0) {\n                                        linkData.fsId.push(user.fsId);\n                                        // Increment number of users\n                                        linkData.userCount++;\n                                    }\n                                    // Update array of displayNames\n                                    if (linkData.displayName.indexOf(user.displayName) < 0) {\n                                        linkData.displayName.push(user.displayName);\n                                    }\n                                });\n                                // Concatenate fsIds\n                                linkData.fsId = linkData.fsId.join(\",\");\n                                // Concatenate displayNames\n                                linkData.displayName = linkData.displayName.join(\",\");\n                                // User count is not needed if there's only 1 user\n                                if (linkData.userCount === 1) {\n                                    delete linkData.userCount;\n                                }\n                            }\n                            itemObj.link.href = utils.strings.parseValue(itemObj.link.url, linkData, params);\n                            itemObj.link.text = utils.strings.parseValue(itemObj.link.text, linkData, params);\n                        }\n                    }\n                    viewData.push(itemObj);\n                }\n                if (promises.length) {\n                    $q.all(promises).then(function () {\n                        deferred.resolve(viewData);\n                    });\n                    return deferred.promise;\n                }\n                return viewData;\n            }\n            var typeLinks = {\n                VpnGeoHoppingNotificationGenerator: {\n                    url: \"#/packages/geo_hopping?user={{fsId}}&user_label={{displayName}}&start=\" +\n                        \"{{:sinceNow:valueOf:-14d}}&end={{:sinceNow:valueOf}}&user_count={{userCount}}\",\n                    text: \"Go to Geo-Hopping package\"\n                },\n                VPNBruteForce: {\n                    \"text\": \"Investigate {{displayName}}'s VPN events\"\n                },\n                UserCreatedEnabledDeletedGenerator: {\n                    \"url\": \"#/d/explore/users?filters=users.id%3D{{fsId}}\",\n                    \"text\": \"Investigate user {{displayName}}\",\n                    \"allowAggregated\": false,\n                    \"notification_ts\": \"{{ts:date}}\"\n                },\n                AboutToExpireGenerator: {\n                    \"url\": \"#/d/explore/users?filters=users.id%3D{{fsId}}\",\n                    \"text\": \"Investigate user {{displayName}}\",\n                    \"allowAggregated\": false,\n                    \"notification_ts\": \"{{ts:date}}\"\n                },\n                ScoreShotUpGenerator: {\n                    \"url\": \"#/d/explore/users?filters=users.id%3D{{fsId}}\",\n                    \"text\": \"Investigate user {{displayName}}\",\n                    \"allowAggregated\": false,\n                    \"notification_ts\": \"{{ts:date}}\"\n                },\n                UserHasNewAdminGroupGenerator: {\n                    \"url\": \"#/d/explore/users?filters=users.id%3D{{fsId}}\",\n                    \"text\": \"Investigate user {{displayName}}\",\n                    \"allowAggregated\": false,\n                    \"notification_ts\": \"{{ts:date}}\"\n                },\n                VpnOverlapNotification: {\n                    \"url\": \"#/d/explore/vpn_session?filters=vpn_session.username%3D{{attributes.username}},\" +\n                        \"vpn_session.country%3DReserved%20Range&default_filters=vpn_session.session_time_utc%3D:\" +\n                        \"{{attributes.start_date::date:unixtimestamp}}::{{attributes.end_date::date:unixtimestamp}},\" +\n                        \"vpn_session.session_score%3D%3E%3D0&tableview_fields=username,source_ip,start_time,end_time,\" +\n                        \"country,city,read_bytes,write_bytes,duration,session_score\",\n                    \"text\": \"Investigate user {{displayName}}\",\n                    \"allowAggregated\": false,\n                    \"notification_ts\": \"{{ts:date}}\"\n                }\n            };\n            widgetViews.registerView(\"securityFeed\", { dataParser: securityFeedDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"SecurityFeed\").controller(\"SecurityFeedController\", [\"$scope\", \"securityFeed\", \"eventBus\", \"state\", \"utils\",\n        function ($scope, securityFeed, eventBus, state, utils) {\n            function onParamsChange(e, params) {\n                var availableParams = [\"start\", \"end\", \"userId\", \"userName\", \"showDismissed\", \"type\"];\n                setParams(params);\n                for (var paramName in params) {\n                    if (params.hasOwnProperty(paramName)) {\n                        if (~availableParams.indexOf(paramName)) {\n                            $scope.widget.refresh();\n                            return;\n                        }\n                    }\n                }\n            }\n            function setParams(params) {\n                if (params.userId !== undefined && params.userName !== undefined) {\n                    $scope.userFilter =\n                        params.userId && params.userName ? { value: params.userId, label: params.userName } : null;\n                }\n                if (params.start !== undefined) {\n                    $scope.startDate =\n                        params.start ? utils.date.getMoment(params.start).format(\"YYYY-MM-DD\") : null;\n                }\n                if (params.end !== undefined) {\n                    $scope.endDate = params.end ? utils.date.getMoment(params.end).format(\"YYYY-MM-DD\") : null;\n                }\n                if (params.showDismissed !== undefined) {\n                    $scope.showDismissed = !!params.showDismissed;\n                }\n                if (params.type !== undefined) {\n                    $scope.typeFilter = params.type;\n                }\n            }\n            function init() {\n                setParams(state.currentParams);\n            }\n            $scope.startDate = null;\n            $scope.endDate = null;\n            $scope.generatorTypes = securityFeed.generatorTypes;\n            $scope.typeFilter = $scope.generatorTypes[0].id;\n            $scope.showDismissed = false;\n            // The optional names and their display names\n            $scope.flagsName = { \"FP\": \"Not Interesting\", \"TP\": \"Nailed it!\" };\n            // options for flags drop-down\n            $scope.flagOptions = [\n                {\n                    \"value\": \"FP\",\n                    \"label\": $scope.flagsName.FP\n                },\n                {\n                    \"value\": \"TP\",\n                    \"label\": $scope.flagsName.TP\n                }\n            ];\n            // options for drop down, including remove-flag option\n            $scope.flagOptionsWithRemove =\n                [{\n                        \"value\": \"\",\n                        \"label\": \"Remove Flag\"\n                    }].concat($scope.flagOptions);\n            $scope.$on(\"$destroy\", function () {\n                eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n            });\n            $scope.showComments = function (item) {\n                if (!item.loadedComments) {\n                    item.showComments = true;\n                    securityFeed.setNotificationComments(item);\n                }\n                else {\n                    item.showComments = !item.showComments;\n                }\n            };\n            // Show/Hide the flags drop down\n            $scope.showFlags = function (item) {\n                item.showFlags = !item.showFlags;\n            };\n            $scope.saveNewComment = function (notification, replyTo) {\n                if (notification.newComment) {\n                    securityFeed.addComment(notification, replyTo, notification.newComment).then(function (comment) {\n                        notification.newComment = null;\n                        notification.comments.splice(0, 0, comment);\n                        notification.commentsCount++;\n                    });\n                }\n            };\n            $scope.saveComment = function (notification, message, comment) {\n                securityFeed.addComment(notification, comment.id, message).then(function (savedComment) {\n                    if (!comment.children) {\n                        comment.children = [];\n                    }\n                    comment.children.splice(0, 0, savedComment);\n                    comment.reply = null;\n                    comment.showReply = null;\n                    notification.commentsCount++;\n                });\n            };\n            // Send request (using the service) to save the flag in the server\n            $scope.saveFlag = function (notification) {\n                // send request to server\n                securityFeed.saveFlag(notification, notification.flag)\n                    .then(function () {\n                    // hide drop down\n                    notification.showFlags = false;\n                });\n            };\n            $scope.dismiss = function (notification) {\n                if (confirm(\"Are you sure you wish to dismiss this notification?\")) {\n                    securityFeed.dismiss(notification).then(function () {\n                        $scope.view.data.splice($scope.view.data.indexOf(notification), 1);\n                        $scope.widget.totalResults--;\n                    });\n                }\n            };\n            $scope.undismiss = function (notification) {\n                securityFeed.undismiss(notification).then(function () {\n                    notification.dismissed = false;\n                });\n            };\n            $scope.onTypeSelect = function (type) {\n                $scope.setParams({ type: type, page: null });\n            };\n            $scope.onStartDateChange = function (date) {\n                $scope.setParams({ start: date ? Math.floor(date.valueOf() / 1000) : null, page: null });\n            };\n            $scope.clearStartDate = function () {\n                $scope.setParams({ start: null });\n                $scope.startDate = null;\n            };\n            $scope.onEndDateChange = function (date) {\n                $scope.setParams({ end: date ? Math.floor(date / 1000) : null, page: null });\n            };\n            $scope.clearEndDate = function () {\n                $scope.setParams({ end: null });\n                $scope.endDate = null;\n            };\n            $scope.setUserFilter = function (userId, userDisplayName) {\n                $scope.userFilter = { value: userId, label: userDisplayName };\n                $scope.setParams({ userId: userId, userName: userDisplayName, page: null });\n            };\n            $scope.clearUser = function () {\n                $scope.userFilter = null;\n                $scope.setParams({ userId: null, userName: null });\n            };\n            $scope.changeShowDismissed = function () {\n                $scope.setParams({ showDismissed: !$scope.showDismissed ? 1 : null, page: null });\n            };\n            $scope.userSearchSettings = securityFeed.userSearchSettings();\n            eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"SecurityFeed\").factory(\"securityFeed\", [\"reports\", \"comments\", \"utils\", function (reports, comments, utils) {\n            return {\n                addComment: function (notification, replyTo, message) {\n                    return reports.runReport(\"notifications.addComment\", {\n                        notificationId: notification.id,\n                        message: message,\n                        replyTo: replyTo\n                    }).then(function (results) {\n                        return results.data[0].comments.pop();\n                    });\n                },\n                saveFlag: function (notification, flag) {\n                    return reports.runReport(\"notifications.flag_notification\", {\n                        notificationId: notification.id,\n                        flag: flag\n                    }).then(function (results) {\n                        return results;\n                    });\n                },\n                getNotifications: function (options) {\n                    var reportParams = {};\n                    if (options.after) {\n                        reportParams.start = utils.date.toUnixTimestamp(options.after);\n                    }\n                    if (options.before) {\n                        var beforeDate = utils.date.getMoment(options.before).toDate();\n                        if (!beforeDate.getHours() && !beforeDate.getMinutes()) {\n                            beforeDate.setDate(beforeDate.getDate() + 1);\n                        }\n                        reportParams.end = utils.date.toUnixTimestamp(beforeDate);\n                    }\n                    reportParams.notifications_events_dates =\n                        (reportParams.start || \"null\") + \",\" + (reportParams.end || \"null\");\n                    if (options.userIds) {\n                        reportParams.userId =\n                            angular.isArray(options.userIds) ? options.userIds.join(\",\") : options.userIds;\n                    }\n                    reportParams.showDismissed = options.showDismissed;\n                    if (options.types) {\n                        reportParams.type = angular.isArray(options.types) ? options.types.join(\",\") : options.types;\n                    }\n                    reportParams.size = options.maxResults ? options.maxResults : 9999;\n                    if (options.page) {\n                        reportParams.page = options.page;\n                    }\n                    return reports.runReportById(\"notifications\", reportParams, true).then(function (results) {\n                        return results.data;\n                    });\n                },\n                dismiss: function (notification) {\n                    return reports.runReport(\"notifications.dismiss_notification\", {\n                        notificationId: notification.id\n                    });\n                },\n                undismiss: function (notification) {\n                    return reports.runReport(\"notifications.undismiss_notification\", {\n                        notificationId: notification.id\n                    });\n                },\n                get generatorTypes() {\n                    return [\n                        { name: \"(Show all)\", id: null },\n                        { name: \"Geo-hopping VPN sessions\", \"id\": \"VpnGeoHoppingNotificationGenerator\" },\n                        { name: \"New VPN source country\", \"id\": \"NewCountryInVPNGenerator\" },\n                        { name: \"User score shot up\", \"id\": \"ScoreShotUpGenerator\" },\n                        { name: \"User status changed\", \"id\": \"UserCreatedEnabledDeletedGenerator\" },\n                        { name: \"VPN brute force\", \"id\": \"VPNBruteForce\" }\n                    ];\n                },\n                userSearchSettings: function () {\n                    return {\n                        \"reports\": [\n                            {\n                                \"dataSource\": \"api\",\n                                \"endpoint\": {\n                                    \"entity\": \"user\",\n                                    \"method\": \"search\"\n                                },\n                                \"options\": {\n                                    \"count\": 10\n                                },\n                                \"fields\": {\n                                    \"name\": { \"type\": \"string\" },\n                                    \"id\": { \"type\": \"string\" }\n                                },\n                                \"params\": [\n                                    {\n                                        \"field\": \"prefix\",\n                                        \"type\": \"string\",\n                                        \"dashboardParam\": \"term\"\n                                    }\n                                ],\n                                mock_data: \"user_search\"\n                            }\n                        ],\n                        \"search\": {\n                            \"dataEntity\": \"users\",\n                            \"dataEntityField\": \"id\",\n                            \"labelField\": \"display_name\"\n                        },\n                        \"resultField\": \"name\",\n                        \"value\": \"{{id}}\",\n                        \"showValueOnSelect\": true,\n                        \"placeholder\": \"Filter by user\"\n                    };\n                },\n                setNotificationComments: function (notification) {\n                    return reports.runReport(\"notifications.notification\", { notificationId: notification.id }).then(function (result) {\n                        var notificationData = result.data[0];\n                        notification.comments = comments.listToTree(notificationData.comments);\n                        notification.loadedComments = true;\n                        return notification;\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TagsWidget\", [\"Tags\", \"Widgets\"]).run([\"tags\", \"widgetViews\", function (tags, widgetViews) {\n            function tagsDataParser(view, data, params) {\n                if (!data || !data.length) {\n                    return null;\n                }\n                return tags.getTags(view.settings.tags, data[0]);\n            }\n            widgetViews.registerView(\"tags\", { dataParser: tagsDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TimelineWidget\", [\"Utils\", \"ChartWidgets\", \"Widgets\", \"Events\"]).run([\"widgetViews\",\n        function (widgetViews) {\n            function timelineDataParser(view, data) {\n                var viewData = data;\n                if (view.settings.legend) {\n                    viewData.legend = view.settings.legend;\n                }\n                return viewData;\n            }\n            widgetViews.registerView(\"timeline\", { dataParser: timelineDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TimelineWidget\").directive(\"timeline\", [\"$rootScope\", \"$window\", \"utils\", \"$parse\", \"events\", \"config\",\n        function ($rootScope, $window, utils, $parse, events, config) {\n            return {\n                template: \"<div class='timeline' style='width: 100%; height: 100%'></div>\",\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    var data, settings, options, defaultOptions = {\n                        height: 300,\n                        tooltipLineHeight: 20\n                    }, isInit, axisHeight = 23, rectHeight = 18, seriesMargin = 4, seriesHeight = rectHeight + seriesMargin * 2, currentPage = 1, pageFunc = attrs.page ? $parse(attrs.page) : null, isPaging, timespanMaxWidth = 0.5, TIME_DISPLAY_HEIGHT = 15;\n                    var svg, margin = { top: 0, right: 20, bottom: 0, left: 0 }, width, height, chartWidth, svgHeight, lastRefreshTime = new Date(), lastRefreshTimeLine, tooltip, tooltipRect, timeDisplay, timeDisplayText, timeDisplayVisible, hoveredDot, labelsWidth, labelsContainer, x, xAxis, xAxisElement, selectedTimespan, dataContainer, timeMinMax, seriesWidth, timeDiff, firstTimespanPosition, earliestTimespanDate, xField1, xField2, colorField, totalSeriesHeight, zoomBehavior, seriesBackground;\n                    function drawChart() {\n                        function onMouseLeave() {\n                            element.off(\"mousemove.timeDisplay\", onMouseMove);\n                            element.off(\"mouseleave.timeDisplay\", onMouseLeave);\n                            timeDisplay[0][0].style.display = \"none\";\n                            timeDisplayVisible = false;\n                        }\n                        function onMouseMove(e) {\n                            if (e.offsetX < labelsWidth) {\n                                if (timeDisplayVisible) {\n                                    timeDisplayVisible = false;\n                                    timeDisplay[0][0].style.display = \"none\";\n                                }\n                            }\n                            else if (e.target.nodeName !== \"text\") {\n                                if (!timeDisplayVisible) {\n                                    timeDisplay[0][0].style.removeProperty(\"display\");\n                                    timeDisplayVisible = true;\n                                }\n                                timeDisplay.attr(\"transform\", \"translate(\" + e.offsetX + \", 0)\");\n                                timeDisplayText.text(utils.date.getMoment(x.invert(e.offsetX -\n                                    labelsWidth)).format(\"MMM DD, HH:mm:ss\"));\n                            }\n                        }\n                        function zoom() {\n                            var translateX = d3.event.translate[0];\n                            dataContainer.attr(\"transform\", \"translate(\" + translateX + \", 0) scale(\" + d3.event.scale + \", 1)\");\n                            var timeDiffScaled = timeDiff / d3.event.scale, timeStart = +timeMinMax[0] - timeDiff * (translateX / seriesWidth / d3.event.scale);\n                            x.domain([\n                                utils.date.getMoment(timeStart).toDate(),\n                                utils.date.getMoment(timeStart + timeDiffScaled).toDate()\n                            ]);\n                            xAxisElement.call(xAxis);\n                            lastRefreshTimeLine.attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\");\n                            if (!isPaging && translateX / d3.event.scale * -1 < firstTimespanPosition) {\n                                loadPage();\n                            }\n                        }\n                        function setLastRefreshTime() {\n                            lastRefreshTime = new Date();\n                            lastRefreshTimeLine.attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\");\n                        }\n                        function loadPage() {\n                            isPaging = true;\n                            pageFunc(scope, { $firstTime: earliestTimespanDate });\n                        }\n                        function createSeries() {\n                            dataContainer = svg.insert(\"g\", \".axis\")\n                                .attr(\"class\", \"timespans-container\")\n                                .attr(\"transform\", \"translate(\" + labelsWidth + \", 0)\");\n                            lastRefreshTimeLine = dataContainer.append(\"line\")\n                                .attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\")\n                                .attr(\"x1\", 0)\n                                .attr(\"x2\", 0)\n                                .attr(\"y1\", 0)\n                                .attr(\"y2\", totalSeriesHeight)\n                                .attr(\"stroke\", \"#ddd\")\n                                .attr(\"stroke-width\", 2);\n                            var lines = svg.append(\"g\");\n                            seriesBackground = dataContainer.append(\"g\")\n                                .attr(\"clip-path\", \"url(#seriesClipPath)\")\n                                .call(zoomBehavior = d3.behavior.zoom().scaleExtent([0.1, 60])\n                                .on(\"zoom\", zoom));\n                            seriesBackground.append(\"rect\")\n                                .attr(\"height\", totalSeriesHeight)\n                                .attr(\"width\", \"100%\")\n                                .attr(\"fill\", \"Transparent\")\n                                .attr(\"class\", \"zoom-area\");\n                            dataContainer = seriesBackground.append(\"g\");\n                            dataContainer.selectAll(\"g\")\n                                .data(data).enter()\n                                .append(\"g\")\n                                .attr(\"class\", function (d, i) {\n                                return \"series_\" + i;\n                            })\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + (i * seriesHeight) + \")\";\n                            });\n                            lines.selectAll(\"line\").data(data)\n                                .enter().append(\"line\")\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + (i * seriesHeight) + \")\";\n                            })\n                                .attr(\"x1\", 0)\n                                .attr(\"x2\", \"100%\")\n                                .attr(\"y1\", 0)\n                                .attr(\"y2\", 0)\n                                .attr(\"stroke-width\", \"1\")\n                                .attr(\"stroke\", \"#ddd\");\n                            addTimespans(data);\n                        }\n                        function addTimespans(data) {\n                            angular.forEach(data, function (series, i) {\n                                var seriesContainer = dataContainer.selectAll(\".series_\" + i);\n                                seriesContainer[0][0].innerHTML = \"\";\n                                var timespansData;\n                                if (settings.series.timeSpansSeries) {\n                                    timespansData = [];\n                                    angular.forEach(series[settings.series.timeSpansSeries], function (timeSpansArrayObject) {\n                                        angular.forEach(timeSpansArrayObject[settings.series.timeSpans], function (timespan) {\n                                            timespan._groupName =\n                                                timeSpansArrayObject[settings.series\n                                                    .timeSpansSeriesGroupName];\n                                            timespansData.push(timespan);\n                                        });\n                                    });\n                                }\n                                else if (settings.series.timeSpans) {\n                                    timespansData = series[settings.series.timeSpans];\n                                }\n                                else if (settings.series.isSingleSeries) {\n                                    timespansData = series._timespans;\n                                }\n                                else {\n                                    timespansData = [series];\n                                }\n                                seriesContainer.selectAll(\".timespan\")\n                                    .data(timespansData)\n                                    .enter().append(\"rect\")\n                                    .attr(\"class\", \"eventRect\")\n                                    .attr(\"height\", rectHeight)\n                                    .attr(\"width\", function (d) {\n                                    if (!d[xField2] || !d[xField1]) {\n                                        return timespanMaxWidth;\n                                    }\n                                    return Math.max(timespanMaxWidth, x(utils.date.getMoment(d[xField2]).toDate()) -\n                                        x(utils.date.getMoment(d[xField1]).toDate()));\n                                })\n                                    .attr(\"transform\", function (d) {\n                                    var position = x(utils.date.getMoment(d[xField1]).toDate());\n                                    if (firstTimespanPosition === undefined ||\n                                        position < firstTimespanPosition) {\n                                        firstTimespanPosition = position;\n                                    }\n                                    return \"translate(\" + position + \", \" + seriesMargin + \")\";\n                                })\n                                    .attr(\"fill\", function (d) {\n                                    if (!d[xField2] && settings.colorMap._missingData) {\n                                        return settings.colorMap._missingData;\n                                    }\n                                    return settings.colorMap && colorField &&\n                                        settings.colorMap[d[colorField]] || settings.colorMap._default;\n                                });\n                            });\n                            currentPage++;\n                        }\n                        // Get the relevant timeSpans\n                        function getTimeSpanSeriesName(settings) {\n                            if (settings.series.timeSpansSeries) {\n                                return settings.series.timeSpansSeries;\n                            }\n                            return settings.series.timeSpans || \"_timespans\";\n                        }\n                        function getEarliestTimespanDate() {\n                            if (settings.series.timeSpansSeries || settings.series.timeSpans ||\n                                settings.series.isSingleSeries) {\n                                var timeSpanSeriesName = getTimeSpanSeriesName(settings);\n                                earliestTimespanDate = d3.min(data, function (d) {\n                                    var timeSpansData = d[timeSpanSeriesName];\n                                    return d3.min(timeSpansData, function (d2) {\n                                        if (settings.series.timeSpansSeries) {\n                                            return d3.min(d2[settings.series.timeSpans], function (d3) {\n                                                return utils.date.getMoment(d3[xField1]).toDate();\n                                            });\n                                        }\n                                        else {\n                                            return utils.date.getMoment(d2[xField1]).toDate();\n                                        }\n                                    });\n                                });\n                            }\n                            else {\n                                earliestTimespanDate = d3.min(data, function (d) {\n                                    return utils.date.getMoment(d[xField1]).toDate();\n                                });\n                            }\n                            return earliestTimespanDate;\n                        }\n                        function createAxes() {\n                            labelsContainer = svg.append(\"g\");\n                            labelsContainer.selectAll(\".seriesLabel\")\n                                .data(data)\n                                .enter().append(\"text\")\n                                .attr(\"class\", \"seriesLabel\")\n                                .text(function (d) {\n                                return d[settings.series.name];\n                            })\n                                .attr(\"text-anchor\", \"end\")\n                                .attr(\"height\", seriesHeight)\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + ((0.5 + i) * seriesHeight + 4) + \")\";\n                            });\n                            labelsWidth = d3.max(labelsContainer.selectAll(\".seriesLabel\")[0], function (node) {\n                                return node.clientWidth;\n                            });\n                            labelsContainer.attr(\"transform\", \"translate(\" + labelsWidth + \", 0)\");\n                            labelsWidth += 10; // Padding for labels\n                            var d3timeScale = config.alwaysUtc ? d3.time.scale.utc : d3.time.scale;\n                            x = d3timeScale()\n                                .range([0, seriesWidth = chartWidth - labelsWidth + margin.left + margin.right]);\n                            xAxis = d3.svg.axis()\n                                .scale(x)\n                                .orient(\"bottom\")\n                                .tickSize(6, 0);\n                            var xDomain1 = getEarliestTimespanDate(), xDomain2;\n                            if (settings.series.timeSpansSeries || settings.series.timeSpans ||\n                                settings.series.isSingleSeries) {\n                                var timeSpanSeriesName = getTimeSpanSeriesName(settings);\n                                if (settings.useLastRefreshTimeForX) {\n                                    xDomain2 = utils.date.getMoment('1hours').toDate();\n                                }\n                                else {\n                                    xDomain2 = d3.max(data, function (d) {\n                                        return d3.max(d[timeSpanSeriesName], function (d2) {\n                                            if (settings.series.timeSpansSeries) {\n                                                return d3.max(d2[settings.series.timeSpans], function (d3) {\n                                                    return utils.date.getMoment(d3[xField2] ||\n                                                        d3[xField1]).toDate();\n                                                });\n                                            }\n                                            else {\n                                                return utils.date.getMoment(d2[xField2] || d2[xField1]).toDate();\n                                            }\n                                        });\n                                    });\n                                }\n                            }\n                            else {\n                                xDomain2 = d3.max(data, function (d) {\n                                    return utils.date.getMoment(d[xField2] || d[xField1]).toDate();\n                                });\n                            }\n                            x.domain(timeMinMax = [xDomain1, xDomain2]);\n                            timeDiff = xDomain2 - xDomain1;\n                            xAxisElement = svg.append(\"g\")\n                                .attr(\"class\", \"x axis\")\n                                .attr(\"transform\", \"translate(\" + labelsWidth + \",\" + (totalSeriesHeight + TIME_DISPLAY_HEIGHT - 15) +\n                                \")\")\n                                .call(xAxis);\n                            xAxisElement\n                                .append(\"text\")\n                                .attr(\"class\", \"label\")\n                                .attr(\"x\", chartWidth)\n                                .attr(\"y\", -6)\n                                .style(\"text-anchor\", \"end\");\n                        }\n                        function createTooltip() {\n                            tooltip = svg.append(\"g\")\n                                .attr(\"style\", \"display: none\");\n                            tooltipRect = tooltip.append(\"rect\")\n                                .attr(\"width\", 100)\n                                .attr(\"height\", 50)\n                                .attr(\"fill\", \"#333333\")\n                                .attr(\"opacity\", \"0.8\");\n                            element.on(\"mouseover\", \".eventRect\", function (e) {\n                                var dot = e.target;\n                                if (dot !== hoveredDot) {\n                                    if (hoveredDot) {\n                                        hoveredDot.style.fill = hoveredDot.color;\n                                    }\n                                    hoveredDot = dot;\n                                    hoveredDot.color = hoveredDot.style.fill;\n                                    hoveredDot.style.fill = \"#333333\";\n                                }\n                                setTooltipText(getTooltipText(dot));\n                                showTooltip();\n                                window.addEventListener(\"mousemove\", tooltipMoveHandler);\n                            });\n                            element.on(\"mouseout\", \".eventRect\", function (e) {\n                                cancelSelection(e.target.__data__);\n                            });\n                        }\n                        function createTimeDisplay() {\n                            timeDisplay = svg.append(\"g\").attr(\"style\", \"display: none\");\n                            timeDisplayText = timeDisplay.append(\"text\")\n                                .attr(\"fill\", \"#333\")\n                                .attr(\"text-anchor\", \"middle\")\n                                .attr(\"transform\", \"translate(0, -5)\");\n                            timeDisplay.append(\"line\")\n                                .attr(\"x1\", \"0\")\n                                .attr(\"x2\", \"0\")\n                                .attr(\"y1\", \"0\")\n                                .attr(\"y2\", totalSeriesHeight)\n                                .attr(\"stroke\", \"#ccc\")\n                                .attr(\"stroke-width\", 1);\n                        }\n                        function cancelSelection() {\n                            hideTooltip();\n                        }\n                        function getTooltipText(dot) {\n                            var dotData = dot.__data__;\n                            return utils.strings.parseValue(settings.tooltip, dotData);\n                        }\n                        function setTooltipText(text) {\n                            var tspanTexts = text.split(\"|\");\n                            tooltip.selectAll(\"text\").remove();\n                            tooltip.selectAll(\"text\")\n                                .data(tspanTexts)\n                                .enter()\n                                .append(\"text\")\n                                .text(function (d) {\n                                return d;\n                            })\n                                .attr(\"fill\", \"White\")\n                                .attr(\"font-size\", \"14px\")\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(15, \" + (20 + options.tooltipLineHeight * i) + \")\";\n                            });\n                            tooltipRect.attr(\"width\", d3.max(tooltip[0][0].childNodes, function (d) {\n                                return d.clientWidth;\n                            }) + 30);\n                            tooltipRect.attr(\"height\", options.tooltipLineHeight * tspanTexts.length + 15);\n                        }\n                        function hideTooltip() {\n                            tooltip[0][0].style.display = \"none\";\n                            hoveredDot.style.fill = hoveredDot.color;\n                            hoveredDot = null;\n                        }\n                        function showTooltip() {\n                            clearTimeout(mouseOutTimeout);\n                            tooltip[0][0].style.removeProperty(\"display\");\n                        }\n                        function tooltipMoveHandler(e) {\n                            var boundingClientRect = element[0].getBoundingClientRect();\n                            setTooltipPosition({\n                                x: (e.x || e.clientX) - boundingClientRect.left,\n                                y: (e.y || e.clientY) - boundingClientRect.top\n                            });\n                        }\n                        function setTooltipPosition(position) {\n                            var tooltipPositionX = position.x + 5, tooltipPositionY = position.y - TIME_DISPLAY_HEIGHT, tooltipWidth = parseInt(tooltipRect[0][0].getAttribute(\"width\")), tooltipHeight = parseInt(tooltipRect[0][0].getAttribute(\"height\"));\n                            if (tooltipPositionX + tooltipWidth > element[0].clientWidth) {\n                                tooltipPositionX = position.x - tooltipWidth - 5;\n                                if (tooltipPositionX < 0) {\n                                    tooltipPositionX = 0;\n                                }\n                            }\n                            if (tooltipPositionY + tooltipHeight > element[0].clientHeight - 20) {\n                                tooltipPositionY = position.y - tooltipHeight - 5;\n                                if (tooltipPositionY < 0) {\n                                    tooltipPositionY = 0;\n                                }\n                            }\n                            tooltip.attr(\"transform\", \"translate(\" + tooltipPositionX + \",\" + tooltipPositionY + \")\");\n                        }\n                        var mouseOutTimeout;\n                        if (!data || !settings) {\n                            return;\n                        }\n                        if (settings.series.isSingleSeries) {\n                            data = [{ _timespans: data }];\n                        }\n                        if (isInit) {\n                            var previousEarliestTimespanDate = earliestTimespanDate;\n                            x.domain(timeMinMax);\n                            addTimespans(data);\n                            getEarliestTimespanDate();\n                            if (earliestTimespanDate.valueOf() !== previousEarliestTimespanDate.valueOf()) {\n                                isPaging = false;\n                            }\n                            setLastRefreshTime();\n                            zoomBehavior.event(seriesBackground);\n                            return;\n                        }\n                        if (settings.data) {\n                            if (angular.isArray(data)) {\n                                data = data[0][settings.data];\n                            }\n                            else {\n                                data = data[settings.data];\n                            }\n                        }\n                        element.css({\n                            width: \"auto\"\n                        });\n                        element.css({\n                            width: element.width() - 20\n                        });\n                        totalSeriesHeight = seriesHeight * data.length;\n                        if (!element.height()) {\n                            element.css(\"height\", totalSeriesHeight + axisHeight + TIME_DISPLAY_HEIGHT);\n                        }\n                        width = element.width();\n                        height = element.height();\n                        chartWidth = width - margin.left - margin.right;\n                        svgHeight = height - margin.top - margin.bottom;\n                        element.empty();\n                        element.off();\n                        svg = d3.select(element[0]).append(\"svg\")\n                            .attr(\"width\", chartWidth + margin.left + margin.right)\n                            .attr(\"height\", svgHeight);\n                        svg.append('svg:defs').append('svg:clipPath')\n                            .attr(\"id\", \"seriesClipPath\")\n                            .append(\"rect\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", totalSeriesHeight);\n                        svg = svg.append(\"g\")\n                            .attr(\"transform\", \"translate(\" + margin.left + \",\" + TIME_DISPLAY_HEIGHT + \")\");\n                        xField1 = settings.series.timeStart;\n                        xField2 = settings.series.timeEnd;\n                        colorField = settings.color;\n                        createTimeDisplay();\n                        createAxes();\n                        createSeries();\n                        createTooltip();\n                        svg[0][0].appendChild(labelsContainer[0][0]);\n                        if (settings.onSelect) {\n                            element.on(\"click\", \".eventRect\", function (e) {\n                                events.triggerDashboardEvent(settings.onSelect, e.target.__data__);\n                                if (selectedTimespan) {\n                                    selectedTimespan.classList.remove(\"selected\");\n                                }\n                                selectedTimespan = e.target;\n                                selectedTimespan.classList.add(\"selected\");\n                            });\n                        }\n                        element.on(\"mouseenter.timeDisplay\", function (e) {\n                            if (e.offsetX < labelsWidth) {\n                                timeDisplay[0][0].style.removeProperty(\"display\");\n                                timeDisplayVisible = true;\n                            }\n                            element.on(\"mouseleave.timeDisplay\", onMouseLeave)\n                                .on(\"mousemove.timeDisplay\", onMouseMove);\n                        });\n                        if (!isInit) {\n                            isInit = true;\n                        }\n                    }\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                    scope.$watch(attrs.ngModel, function (chartData) {\n                        data = chartData;\n                        drawChart();\n                    });\n                    scope.$watch(attrs.settings, function (value) {\n                        settings = value;\n                        options = angular.extend({}, defaultOptions, settings.options);\n                        drawChart();\n                    });\n                    $window.addEventListener(\"resize\", drawChart);\n                    scope.$on(\"resize\", drawChart);\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TimelineWidget\").directive(\"timelinePoints\", [\"$rootScope\", \"$window\", \"utils\", \"$parse\", \"events\", \"config\",\n        function ($rootScope, $window, utils, $parse, events, config) {\n            return {\n                template: \"<div class='timeline' style='width: 100%; height: 100%'></div>\",\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    var data, settings, options, defaultOptions = {\n                        height: 300,\n                        tooltipLineHeight: 20\n                    }, isInit, axisHeight = 23, rectHeight = 18, seriesMargin = 4, seriesHeight = rectHeight + seriesMargin * 2, currentPage = 1, pageFunc = attrs.page ? $parse(attrs.page) : null, isPaging, TIME_DISPLAY_HEIGHT = 15, LEGEND_MARGIN = 10, LEGEND_HEIGHT = 20, LEGEND_ITEM_PADDING = 20;\n                    var svg, mask, margin = { top: 0, right: 20, bottom: 30, left: 0 }, width, height, chartWidth, svgHeight, lastRefreshTime = new Date(), lastRefreshTimeLine, timeDisplay, timeDisplayText, timeDisplayVisible, labelsWidth, labelsContainer, x, xAxis, xAxisElement, lineElements, selectedTimespan, dataContainer, timeMinMax, seriesWidth, timeDiff, firstTimespanPosition, earliestTimespanDate, xField, colorField, totalSeriesHeight, points, color, typesCount = {};\n                    function onResize() {\n                        svg.attr(\"width\", \"100%\");\n                        //element.css(\"width\", \"100%\");\n                        width = element.width();\n                        height =\n                            totalSeriesHeight + axisHeight + TIME_DISPLAY_HEIGHT + margin.bottom + LEGEND_MARGIN +\n                                LEGEND_HEIGHT;\n                        chartWidth = width - margin.left - margin.right;\n                        x.range([0, seriesWidth = chartWidth - labelsWidth + margin.left + margin.right]);\n                        svg.attr(\"width\", width);\n                        mask.attr(\"width\", width);\n                        points.attr(\"transform\", function (d) {\n                            return \"translate(\" + x(utils.date.getMoment(d[xField]).toDate()) + \", \" +\n                                seriesHeight / 2 + \")\";\n                        });\n                        xAxisElement.call(xAxis);\n                        xAxisElement.attr(\"x\", chartWidth);\n                        lineElements.attr(\"x2\", width);\n                    }\n                    function getColorScale(scaleName) {\n                        if (scaleName && angular.isObject(scaleName) && scaleName.map) {\n                            var defaultColor = scaleName.map._default || \"#000000\", field = scaleName.field, map = scaleName.map;\n                            return function (d) {\n                                var value = d[field], mapValue = map[value];\n                                if (!value || !mapValue) {\n                                    return defaultColor;\n                                }\n                                return mapValue;\n                            };\n                        }\n                        if (scaleName) {\n                            if (scaleName === \"score\") {\n                                return d3.scale.linear().domain([0, 50, 51, 80, 90, 100]).range(['#80BFF0',\n                                    '#80BFF0', '#F1CC37', '#F59925', '#D77576', '#D77576']);\n                            }\n                            var d3Scale = d3.scale[scaleName];\n                            if (d3Scale) {\n                                return d3Scale();\n                            }\n                        }\n                        return d3.scale.category20c();\n                    }\n                    function drawChart() {\n                        function onMouseLeave() {\n                            element.off(\"mousemove.timeDisplay\", onMouseMove);\n                            element.off(\"mouseleave.timeDisplay\", onMouseLeave);\n                            timeDisplay[0][0].style.display = \"none\";\n                            timeDisplayVisible = false;\n                        }\n                        function onMouseMove(e) {\n                            if (e.offsetX < labelsWidth) {\n                                if (timeDisplayVisible) {\n                                    timeDisplayVisible = false;\n                                    timeDisplay[0][0].style.display = \"none\";\n                                }\n                            }\n                            else if (e.target.nodeName !== \"text\") {\n                                if (!timeDisplayVisible) {\n                                    timeDisplay[0][0].style.removeProperty(\"display\");\n                                    timeDisplayVisible = true;\n                                }\n                                timeDisplay.attr(\"transform\", \"translate(\" + e.offsetX + \", 0)\");\n                                timeDisplayText.text(utils.date.getMoment(x.invert(e.offsetX -\n                                    labelsWidth)).format(\"MMM DD, HH:mm:ss\"));\n                            }\n                        }\n                        function zoom() {\n                            var translateX = d3.event.translate[0];\n                            points.attr(\"transform\", function (d) {\n                                return \"translate(\" + x(utils.date.getMoment(d[xField]).toDate()) + \", \" +\n                                    seriesHeight / 2 + \")\";\n                            });\n                            var timeDiffScaled = timeDiff / d3.event.scale, timeStart = +timeMinMax[0] - timeDiff * (translateX / seriesWidth / d3.event.scale);\n                            x.domain([\n                                utils.date.getMoment(timeStart).toDate(),\n                                utils.date.getMoment(timeStart + timeDiffScaled).toDate()\n                            ]);\n                            xAxisElement.call(xAxis);\n                            lastRefreshTimeLine.attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\");\n                            if (!isPaging && translateX / d3.event.scale * -1 < firstTimespanPosition) {\n                                loadPage();\n                            }\n                        }\n                        function setLastRefreshTime() {\n                            lastRefreshTime = new Date();\n                            lastRefreshTimeLine.attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\");\n                        }\n                        function loadPage() {\n                            isPaging = true;\n                            pageFunc(scope, { $firstTime: earliestTimespanDate });\n                        }\n                        function createSeries() {\n                            dataContainer = svg.append(\"g\")\n                                .attr(\"transform\", \"translate(\" + labelsWidth + \", 0)\");\n                            var lines = svg.append(\"g\");\n                            var seriesBackground = dataContainer.append(\"g\")\n                                .attr(\"clip-path\", \"url(#seriesClipPath)\")\n                                .call(d3.behavior.zoom().x(x).scaleExtent([0.1, 60])\n                                .on(\"zoom\", zoom));\n                            seriesBackground.append(\"rect\")\n                                .attr(\"height\", totalSeriesHeight)\n                                .attr(\"width\", \"100%\")\n                                .attr(\"fill\", \"Transparent\")\n                                .attr(\"class\", \"zoom-area\");\n                            dataContainer = seriesBackground.append(\"g\");\n                            dataContainer.selectAll(\"g\")\n                                .data(data).enter()\n                                .append(\"g\")\n                                .attr(\"class\", function (d, i) {\n                                return \"series_\" + i;\n                            })\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + (i * seriesHeight) + \")\";\n                            });\n                            lineElements = lines.selectAll(\"line\").data(data)\n                                .enter().append(\"line\")\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + (i * seriesHeight) + \")\";\n                            })\n                                .attr(\"x1\", 0)\n                                .attr(\"x2\", width)\n                                .attr(\"y1\", 0)\n                                .attr(\"y2\", 0)\n                                .attr(\"stroke-width\", \"1\")\n                                .attr(\"stroke\", \"#ddd\");\n                            lastRefreshTimeLine = lines.append(\"line\")\n                                .attr(\"transform\", \"translate(\" + x(lastRefreshTime) + \", 0)\")\n                                .attr(\"x1\", 0)\n                                .attr(\"x2\", 0)\n                                .attr(\"y1\", 0)\n                                .attr(\"y2\", totalSeriesHeight)\n                                .attr(\"stroke\", \"#ddd\")\n                                .attr(\"stroke-width\", 2);\n                            addTimespans(data);\n                        }\n                        function getTypeSymbol(type) {\n                            var symbolType = settings.symbolMap[type] || \"circle\";\n                            return d3.svg.symbol().type(symbolType).size(rectHeight * 5)();\n                        }\n                        function addTimespans(data) {\n                            angular.forEach(data, function (series, i) {\n                                var seriesContainer = dataContainer.selectAll(\".series_\" + i);\n                                seriesContainer[0][0].innerHTML = \"\";\n                                var timespansData;\n                                if (settings.series.timeSpansSeries) {\n                                    timespansData = [];\n                                    angular.forEach(series[settings.series.timeSpansSeries], function (timeSpansArrayObject) {\n                                        angular.forEach(timeSpansArrayObject[settings.series.timeSpans], function (timespan) {\n                                            timespan._groupName =\n                                                timeSpansArrayObject[settings.series\n                                                    .timeSpansSeriesGroupName];\n                                            timespansData.push(timespan);\n                                        });\n                                    });\n                                }\n                                else if (settings.series.timeSpans) {\n                                    timespansData = series[settings.series.timeSpans];\n                                }\n                                else if (settings.series.isSingleSeries) {\n                                    timespansData = series._timespans;\n                                }\n                                else {\n                                    timespansData = [series];\n                                }\n                                points = seriesContainer.selectAll(\".timespan\")\n                                    .data(timespansData)\n                                    .enter().append(\"path\")\n                                    .attr(\"class\", \"timespan\")\n                                    .attr(\"d\", function (d) {\n                                    var typeCount = typesCount[d[typeField]];\n                                    if (typeCount === undefined) {\n                                        typesCount[d[typeField]] = 1;\n                                    }\n                                    else {\n                                        typesCount[d[typeField]]++;\n                                    }\n                                    return getTypeSymbol(d[typeField]);\n                                })\n                                    .attr(\"transform\", function (d) {\n                                    var position = x(utils.date.getMoment(d[xField]).toDate());\n                                    if (firstTimespanPosition === undefined ||\n                                        position < firstTimespanPosition) {\n                                        firstTimespanPosition = position;\n                                    }\n                                    return \"translate(\" + position + \", \" + seriesHeight / 2 + \")\";\n                                })\n                                    .attr(\"fill\", \"White\")\n                                    .attr(\"stroke-width\", 1.5)\n                                    .attr(\"stroke\", function (d) {\n                                    return color(d);\n                                });\n                            });\n                            currentPage++;\n                        }\n                        // Get the relevant timeSpans\n                        function getTimeSpanSeriesName(settings) {\n                            if (settings.series.timeSpansSeries) {\n                                return settings.series.timeSpansSeries;\n                            }\n                            return settings.series.timeSpans || \"_timespans\";\n                        }\n                        function getEarliestTimespanDate() {\n                            if (settings.series.timeSpansSeries || settings.series.timeSpans ||\n                                settings.series.isSingleSeries) {\n                                var timeSpanSeriesName = getTimeSpanSeriesName(settings);\n                                earliestTimespanDate = d3.min(data, function (d) {\n                                    var timeSpansData = d[timeSpanSeriesName];\n                                    return d3.min(timeSpansData, function (d2) {\n                                        if (settings.series.timeSpansSeries) {\n                                            return d3.min(d2[settings.series.timeSpans], function (d3) {\n                                                return utils.date.getMoment(d3[xField]).toDate();\n                                            });\n                                        }\n                                        else {\n                                            return utils.date.getMoment(d2[xField]).toDate();\n                                        }\n                                    });\n                                });\n                            }\n                            else {\n                                earliestTimespanDate = d3.min(data, function (d) {\n                                    return utils.date.getMoment(d[xField]).toDate();\n                                });\n                            }\n                            return earliestTimespanDate;\n                        }\n                        function createAxes() {\n                            labelsContainer = svg.append(\"g\");\n                            labelsContainer.selectAll(\".seriesLabel\")\n                                .data(data)\n                                .enter().append(\"text\")\n                                .attr(\"class\", \"seriesLabel\")\n                                .text(function (d) {\n                                return d[settings.series.name];\n                            })\n                                .attr(\"text-anchor\", \"end\")\n                                .attr(\"height\", seriesHeight)\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + ((0.5 + i) * seriesHeight + 4) + \")\";\n                            });\n                            labelsWidth = d3.max(labelsContainer.selectAll(\".seriesLabel\")[0], function (node) {\n                                return node.clientWidth;\n                            });\n                            labelsContainer.attr(\"transform\", \"translate(\" + labelsWidth + \", 0)\");\n                            labelsWidth += 10; // Padding for labels\n                            var d3timeScale = config.alwaysUtc ? d3.time.scale.utc : d3.time.scale;\n                            x = d3timeScale()\n                                .range([0, seriesWidth = chartWidth - labelsWidth + margin.left + margin.right]);\n                            xAxis = d3.svg.axis()\n                                .scale(x)\n                                .orient(\"bottom\")\n                                .tickSize(6, 0);\n                            var xDomain1 = getEarliestTimespanDate(), xDomain2;\n                            if (settings.series.timeSpansSeries || settings.series.timeSpans ||\n                                settings.series.isSingleSeries) {\n                                var timeSpanSeriesName = getTimeSpanSeriesName(settings);\n                                if (settings.useLastRefreshTimeForX) {\n                                    xDomain2 = utils.date.getMoment('1hours').toDate();\n                                }\n                                else {\n                                    xDomain2 = d3.max(data, function (d) {\n                                        return d3.max(d[timeSpanSeriesName], function (d2) {\n                                            if (settings.series.timeSpansSeries) {\n                                                return d3.max(d2[settings.series.timeSpans], function (d3) {\n                                                    return utils.date.getMoment(d3[xField]).toDate();\n                                                });\n                                            }\n                                            else {\n                                                return utils.date.getMoment(d2[xField]).toDate();\n                                            }\n                                        });\n                                    });\n                                }\n                            }\n                            else {\n                                xDomain2 = d3.max(data, function (d) {\n                                    return utils.date.getMoment(d[xField]).toDate();\n                                });\n                            }\n                            x.domain(timeMinMax = [xDomain1, xDomain2]);\n                            timeDiff = xDomain2 - xDomain1;\n                            xAxisElement = svg.append(\"g\")\n                                .attr(\"class\", \"x axis\")\n                                .attr(\"transform\", \"translate(\" + labelsWidth + \",\" + (totalSeriesHeight + TIME_DISPLAY_HEIGHT - 15) +\n                                \")\")\n                                .call(xAxis);\n                            xAxisElement\n                                .append(\"text\")\n                                .attr(\"class\", \"label\")\n                                .attr(\"x\", chartWidth)\n                                .attr(\"y\", -6)\n                                .style(\"text-anchor\", \"end\");\n                        }\n                        function createTimeDisplay() {\n                            timeDisplay = svg.append(\"g\").attr(\"style\", \"display: none\");\n                            timeDisplayText = timeDisplay.append(\"text\")\n                                .attr(\"fill\", \"#333\")\n                                .attr(\"text-anchor\", \"middle\")\n                                .attr(\"transform\", \"translate(0, -5)\");\n                            timeDisplay.append(\"line\")\n                                .attr(\"x1\", \"0\")\n                                .attr(\"x2\", \"0\")\n                                .attr(\"y1\", \"0\")\n                                .attr(\"y2\", totalSeriesHeight)\n                                .attr(\"stroke\", \"#ccc\")\n                                .attr(\"stroke-width\", 1);\n                        }\n                        function createLegend() {\n                            var legend = svg.append(\"g\"), symbols = [], widths = [], totalWidth = 0;\n                            for (var type in settings.symbolMap) {\n                                if (settings.symbolMap.hasOwnProperty(type)) {\n                                    if (typesCount[type]) {\n                                        symbols.push({\n                                            value: type,\n                                            symbol: settings.symbolMap[type],\n                                            color: color(type)\n                                        });\n                                    }\n                                }\n                            }\n                            var items = legend.selectAll(\".legendItem\").data(symbols)\n                                .enter().append(\"g\")\n                                .attr(\"class\", \"legendItem\")\n                                .attr(\"data-type\", function (d) {\n                                return d.symbol;\n                            });\n                            items.append(\"path\").attr(\"d\", function (d) {\n                                return d3.svg.symbol().type(d.symbol).size(rectHeight * 5)();\n                            })\n                                .attr(\"fill\", \"White\")\n                                .attr(\"stroke-width\", 1.5)\n                                .attr(\"stroke\", function (d) {\n                                return d.color;\n                            });\n                            items.append(\"text\")\n                                .attr(\"transform\", \"translate(10, 4)\")\n                                .text(function (d) {\n                                return d.value + \" (\" + (typesCount[d.value] || 0) + \")\";\n                            });\n                            legend.selectAll(\".legendItem\")[0].forEach(function (item) {\n                                var itemWidth = item.getBBox().width;\n                                widths.push(itemWidth);\n                                totalWidth += itemWidth;\n                            });\n                            items.attr(\"transform\", function (d, i) {\n                                var translateX = 0;\n                                for (var widthIndex = 0; widthIndex < i; widthIndex++) {\n                                    translateX += widths[widthIndex] + LEGEND_ITEM_PADDING;\n                                }\n                                return \"translate(\" + translateX + \", 0)\";\n                            });\n                            legend.attr(\"transform\", \"translate(\" + (width - totalWidth) / 2 + \", \" +\n                                (totalSeriesHeight + axisHeight + TIME_DISPLAY_HEIGHT + LEGEND_MARGIN) + \")\");\n                        }\n                        if (!data || !settings) {\n                            return;\n                        }\n                        var typeField = settings.series.type || \"type\";\n                        if (settings.series.isSingleSeries) {\n                            data = [{ _timespans: data }];\n                        }\n                        if (isInit) {\n                            var previousEarliestTimespanDate = earliestTimespanDate;\n                            x.domain(timeMinMax);\n                            addTimespans(data);\n                            getEarliestTimespanDate();\n                            if (earliestTimespanDate.valueOf() !== previousEarliestTimespanDate.valueOf()) {\n                                isPaging = false;\n                            }\n                            setLastRefreshTime();\n                            return;\n                        }\n                        if (settings.data) {\n                            if (angular.isArray(data)) {\n                                data = data[0][settings.data];\n                            }\n                            else {\n                                data = data[settings.data];\n                            }\n                        }\n                        element.css({\n                            width: \"100%\"\n                        });\n                        totalSeriesHeight = seriesHeight * data.length;\n                        //if (!element.height())\n                        //element.css(\"height\", totalSeriesHeight + axisHeight + TIME_DISPLAY_HEIGHT);\n                        width = element.width();\n                        height =\n                            totalSeriesHeight + axisHeight + TIME_DISPLAY_HEIGHT + margin.bottom + LEGEND_MARGIN +\n                                LEGEND_HEIGHT;\n                        chartWidth = width - margin.left - margin.right;\n                        svgHeight = height;\n                        element.empty();\n                        element.off();\n                        svg = d3.select(element[0]).append(\"svg\")\n                            .attr(\"width\", chartWidth + margin.left + margin.right)\n                            .attr(\"height\", svgHeight);\n                        mask = svg.append('svg:defs').append('svg:clipPath')\n                            .attr(\"id\", \"seriesClipPath\")\n                            .append(\"rect\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", totalSeriesHeight);\n                        svg = svg.append(\"g\")\n                            .attr(\"transform\", \"translate(\" + margin.left + \",\" + TIME_DISPLAY_HEIGHT + \")\");\n                        xField = settings.series.time;\n                        colorField = settings.color;\n                        createTimeDisplay();\n                        createAxes();\n                        createSeries();\n                        createLegend();\n                        //createTooltip();\n                        svg[0][0].appendChild(labelsContainer[0][0]);\n                        if (settings.onSelect) {\n                            element.on(\"click\", \".timespan\", function (e) {\n                                scope.$apply(function () {\n                                    var eventCopy = angular.copy(settings.onSelect);\n                                    eventCopy.actionOptions.position = { top: e.clientY, left: e.clientX };\n                                    events.triggerDashboardEvent(eventCopy, angular.extend({}, e.target.__data__.properties, e.target.__data__));\n                                });\n                                if (selectedTimespan) {\n                                    selectedTimespan.classList.remove(\"selected\");\n                                }\n                                selectedTimespan = e.target;\n                                selectedTimespan.classList.add(\"selected\");\n                            });\n                        }\n                        element.on(\"mouseenter.timeDisplay\", function (e) {\n                            if (e.offsetX < labelsWidth) {\n                                timeDisplay[0][0].style.removeProperty(\"display\");\n                                timeDisplayVisible = true;\n                            }\n                            element.on(\"mouseleave.timeDisplay\", onMouseLeave)\n                                .on(\"mousemove.timeDisplay\", onMouseMove);\n                        });\n                        if (!isInit) {\n                            isInit = true;\n                        }\n                    }\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                    scope.$watch(attrs.ngModel, function (chartData) {\n                        data = chartData;\n                        drawChart();\n                    });\n                    scope.$watch(attrs.settings, function (value) {\n                        settings = value;\n                        options = angular.extend({}, defaultOptions, settings.options);\n                        color = getColorScale(settings.colorMap);\n                        drawChart();\n                    });\n                    $window.addEventListener(\"resize\", onResize);\n                    //scope.$on(\"resize\", drawChart);\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TimelineWidget\").factory(\"timelineService\", [\"$q\", \"reports\", function ($q, reports) {\n            return {\n                getEarlierData: function (settings, params, currentData) {\n                    var deferred = $q.defer(), newData = angular.copy(currentData);\n                    reports.runReport(settings.getPageReport, params, true).then(function (results) {\n                        angular.forEach(results.data, function (series) {\n                            var existingSeries = getSeriesByName(series[settings.series.name]);\n                            if (!existingSeries) {\n                                newData.push(series);\n                            }\n                            else {\n                                var timeSpansArray = existingSeries[settings.series.timeSpansSeries];\n                                angular.forEach(series[settings.series.timeSpansSeries], function (timeSpanSeriesGroup) {\n                                    if (settings.series.timeSpansSeriesGroupName) {\n                                        var existingGroup = getGroupByName(timeSpansArray, timeSpanSeriesGroup[settings.series.timeSpansSeriesGroupName]);\n                                        if (!existingGroup) {\n                                            timeSpansArray.push(timeSpanSeriesGroup);\n                                        }\n                                        else {\n                                            existingGroup[settings.series.timeSpans] =\n                                                timeSpanSeriesGroup[settings.series.timeSpans]\n                                                    .concat(existingGroup[settings.series.timeSpans]);\n                                        }\n                                    }\n                                });\n                            }\n                        });\n                        deferred.resolve(newData);\n                    }, deferred.reject);\n                    function getSeriesByName(seriesName) {\n                        for (var i = 0, series; !!(series = newData[i]); i++) {\n                            if (series[settings.series.name] === seriesName) {\n                                return series;\n                            }\n                        }\n                        return null;\n                    }\n                    function getGroupByName(groupsArray, groupName) {\n                        for (var i = 0, group; !!(group = groupsArray[i]); i++) {\n                            if (group[settings.series.timeSpansSeriesGroupName] === groupName) {\n                                return group;\n                            }\n                        }\n                        return null;\n                    }\n                    return deferred.promise;\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TimelineWidget\").controller(\"TimelineController\", [\"$scope\", \"timelineService\", function ($scope, timelineService) {\n            if ($scope.view.settings.getPageReport) {\n                $scope.getPage = function (firstTime) {\n                    timelineService.getEarlierData($scope.view.settings, { timestamp: firstTime.valueOf() }, $scope.view.data).then(function (data) {\n                        data.legend = $scope.view.data.legend;\n                        $scope.view.data = data;\n                    });\n                };\n            }\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"MapWidget\", [\"Utils\", \"Chart\", \"Widgets\", \"Events\"]).run([\"widgetViews\", function (widgetViews) {\n            widgetViews.registerView(\"map\");\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('MapWidget')\n        .directive('map', [\"fsHighChartService\", \"COLORS_RANGE_BLUE\", function (fsHighChartService, COLORS_RANGE_BLUE) {\n            return {\n                template: '<div class=\"highchart-chart-container\"></div>',\n                restrict: 'E',\n                scope: {\n                    model: '=',\n                    graphSettings: '='\n                },\n                controller: function ($scope) {\n                    var ctrl = this;\n                    /**\n                     * This method triggered when data changed\n                     * @param chartData\n                     */\n                    this.refreshData = function (chartData) {\n                        if (chartData) {\n                            //Get all countries from server in a map, which the key is the country code\n                            var chartDataIndexedByCountriesCode = this._indexBy(chartData, \"code\");\n                            //Get the original list of countries, into updated data\n                            var countriesListForUpdate = ctrl.countriesList;\n                            //maxCounter used to rescale the legend / color\n                            var maxCounted = 0;\n                            //For each country in the countries list (dataPoint) -\n                            //check if this country arrived in the data from server, and if so - set the relevant count\n                            // to the country\n                            countriesListForUpdate.forEach(function (dataPoint) {\n                                var countryCode = dataPoint.properties['iso-a2'];\n                                var chartDataEntry = chartDataIndexedByCountriesCode[countryCode];\n                                //Country has data from server:\n                                if (chartDataEntry) {\n                                    var counted = chartDataEntry.event_count;\n                                    dataPoint.value = counted;\n                                    maxCounted = Math.max(maxCounted, counted);\n                                }\n                                else {\n                                    //Country doesn't has data. Init the countries value to zero, in case it's derty\n                                    // from previous refresh\n                                    dataPoint.value = 0;\n                                }\n                            });\n                            //Destroy and recreate the chart.\n                            //I would prefer to update the colorAxis instead, but because of bug\n                            // \"https://github.com/highslide-software/highcharts.com/issues/3207\" Highchart is not\n                            // updating the legend with the new colors.\n                            $scope.chart.destroy();\n                            $scope.chartConfig.colorAxis = this._getColorAxis(maxCounted);\n                            $scope.chart = new Highcharts.Map($scope.chartConfig);\n                            $scope.chart.addSeries(ctrl._getSeries(countriesListForUpdate));\n                        }\n                    };\n                    /**\n                     * Get an array and convert it to map object.\n                     * Each key of the map, is property of the objects in the array, according to the 'property' param\n                     * If we have 2 objects in the array with the same value in object.property, one of them will\n                     * override the other.\n                     *\n                     * @param chartData - list objects\n                     * @param property - the name of the property which will be used to as the new object key.\n                     * @return {{}} - map object, each attribute contain an object from the original array.\n                     * @private\n                     */\n                    this._indexBy = function (chartData, property) {\n                        var indexedMap = {};\n                        chartData.forEach(function (entry) {\n                            indexedMap[entry[property]] = entry;\n                        });\n                        return indexedMap;\n                    };\n                    /**\n                     * This function use to split the data into buccets, each bucket will have different color.\n                     * For now, all buckets are in the same value (maxCount /5), but we consdiering to change the\n                     * algorithm. See https://fortscale.atlassian.net/browse/FV-7103 also count = 0 has different\n                     * color.\n                     * @param maxCountValue - the maximum count for a country\n                     * @return {} the color axis {dataClassColor: 'category', \tdataClasses: categoriesArray}\n                     }\n                     */\n                    this._getColorAxis = function (maxCountValue) {\n                        if (maxCountValue < 0) {\n                            throw new RangeError('Score must be positive or zero');\n                        }\n                        var space; //= MaxValue - MinValue for each bucket\n                        var categoriesArray = [{ to: 1 }]; //For all cases\n                        var roundedMaximumValue;\n                        var i;\n                        if (maxCountValue <= 5) {\n                            space = 1;\n                        }\n                        else {\n                            //maxCount value greate then 5, and categories ranges should be calucated manually.\n                            //Numbers will be rounded to : less then 15 --> 15. less then 25 --> 25. other will be\n                            // rounded to the nears Multiplier of 10. The same with less then 150 to 150, less then 250\n                            // --> 250, other will be rounded to the nears Multiplier of 10. and the same to 1000+\n                            if (maxCountValue >= 10) {\n                                var countNumberOfDigits = maxCountValue.toString().length;\n                                var nearest10pow = Math.pow(10, countNumberOfDigits);\n                                //Percntage- the given maximum as part of the next pow of ten.\n                                var maxCountValueAsPercentage = maxCountValue / nearest10pow;\n                                var STEPS_PERCENTAGE_ARRAY = [15, 25, 30, 40, 50, 60, 70, 80, 90];\n                                for (i = 0; i < STEPS_PERCENTAGE_ARRAY.length && !roundedMaximumValue; i++) {\n                                    if (maxCountValueAsPercentage < (STEPS_PERCENTAGE_ARRAY[i] / 100)) {\n                                        roundedMaximumValue = STEPS_PERCENTAGE_ARRAY[i] / 100 * nearest10pow;\n                                    }\n                                }\n                                if (!roundedMaximumValue) {\n                                    roundedMaximumValue = nearest10pow;\n                                }\n                            }\n                            else {\n                                roundedMaximumValue = 10;\n                            }\n                            space = roundedMaximumValue / 5;\n                            categoriesArray.push({\n                                from: 1,\n                                to: space\n                            });\n                        }\n                        for (i = 1; i < 5; i++) {\n                            categoriesArray.push({\n                                from: space * i,\n                                to: space * (i + 1)\n                            });\n                        }\n                        return {\n                            dataClassColor: 'category',\n                            dataClasses: categoriesArray\n                        };\n                    };\n                    /**\n                     * Get high chart series of data.\n                     * @param data  -data for series\n                     * @return {{data: *, name: string, dataLabels: {enabled: boolean, format: string}, states: {hover:\n                     *     {color: string}}}}\n                     */\n                    this._getSeries = function (data) {\n                        return {\n                            data: data,\n                            name: 'World',\n                            dataLabels: {\n                                enabled: true,\n                                format: '{point.properties.name}'\n                            },\n                            states: {\n                                hover: {\n                                    color: '#BADA55'\n                                }\n                            }\n                        };\n                    };\n                },\n                link: function postLink(scope, element, attrs, ctrl) {\n                    //Set unique ID for the div, Highchart need it.\n                    var chartId = Math.random().toString(36).slice(2);\n                    //Set unique ID on the root element of the template\n                    element.children('.highchart-chart-container').attr('id', chartId);\n                    ctrl.countriesList = Highcharts.geojson(Highcharts.maps['custom/world']);\n                    //Set default data - each point will have value of 0, and the flag will be the country code\n                    ctrl.countriesList.forEach(function (dataPoint) {\n                        dataPoint.value = 0;\n                        dataPoint.flag = dataPoint.properties[\"hc-key\"];\n                    });\n                    scope.chartConfig = {\n                        chart: {\n                            \"renderTo\": chartId\n                        },\n                        colors: COLORS_RANGE_BLUE,\n                        //On small screen- use default legend, else set the legend location to right\n                        legend: $('.highchart-chart-container').width() < 400 ? {} : {\n                            layout: 'vertical',\n                            align: 'right',\n                            verticalAlign: 'middle',\n                            valueDecimals: 0,\n                            title: {\n                                text: 'Events per Country'\n                            }\n                        },\n                        //Tooltip will display country name, country value and flag.\n                        //The tooltip always be on the left side\n                        tooltip: {\n                            backgroundColor: 'none',\n                            borderWidth: 0,\n                            shadow: false,\n                            useHTML: true,\n                            padding: 0,\n                            enabled: true,\n                            positioner: function () {\n                                return { x: 0, y: 250 };\n                            },\n                            pointFormat: '<span class=\"f32\"><span class=\"flag {point.flag}\"></span></span>' +\n                                ' {point.name}: <b>{point.value}</b>'\n                        },\n                        colorAxis: ctrl._getColorAxis(0),\n                        mapNavigation: {\n                            enabled: true,\n                            buttonOptions: {\n                                verticalAlign: 'bottom'\n                            }\n                        },\n                        plotOptions: {\n                            map: {\n                                states: {\n                                    hover: {\n                                        color: '#EEDD66'\n                                    }\n                                }\n                            }\n                        },\n                        series: [ctrl._getSeries(ctrl.countriesList)]\n                    };\n                    scope.chartConfig =\n                        $.extend(true, fsHighChartService.getBasicChartConfiguration(), scope.chartConfig);\n                    //Create the chart object and save it on the scope\n                    scope.$applyAsync(function () {\n                        scope.chart = new Highcharts.Map(scope.chartConfig);\n                    });\n                    scope.$watch('model', function (chartData) {\n                        ctrl.refreshData(chartData);\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"PieWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"widgetViews\", function (widgetViews) {\n            function pieDataParser(view, data) {\n                var total = 0;\n                data.forEach(function (item) {\n                    var labelValue = item[view.settings.label];\n                    if ((!labelValue || labelValue === \"null\") && labelValue !== 0 && view.settings.emptyLabelDisplay) {\n                        item[view.settings.label] = view.settings.emptyLabelDisplay;\n                    }\n                    total += item[view.settings.value] || 0;\n                });\n                data.forEach(function (item) {\n                    item._percent = 100 * item[view.settings.value] / total;\n                });\n                return data;\n            }\n            widgetViews.registerView(\"pie\", { dataParser: pieDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('PieWidget')\n        .directive('pie', [\"Chart\", \"utils\", function (Chart, utils) {\n            return {\n                template: '<div class=\"widget-pie\"></div>',\n                restrict: 'E',\n                require: \"?ngModel\",\n                replace: true,\n                link: function postLink(scope, element, attrs, ngModel) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var self = this, color = this.settings.color ? this.getColorScale(this.settings.color) :\n                            d3.scale.ordinal().range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\",\n                                \"#d0743c\", \"#ff8c00\"]), svg = this.dataSvg, r = this.options.radius, arc = d3.svg.arc().outerRadius(r).innerRadius(0), pie = d3.layout.pie()\n                            .sort(function (a, b) {\n                            var aVal = a[self.settings.value], bVal = b[self.settings.value];\n                            if (aVal === bVal) {\n                                return 0;\n                            }\n                            return aVal < bVal ? 1 : -1;\n                        })\n                            .value(function (d) {\n                            return d[self.settings.value];\n                        }), lines, pieData = pie(this.data), largeItemsData = pieData.filter(function (item) {\n                            return item.data._percent > 4;\n                        }); // Only items with value > 4%\n                        var vis = svg.append(\"svg:g\")\n                            .attr(\"transform\", \"translate(\" + this.width / 2 + \", \" + this.height / 2 + \")\");\n                        //draw lines to connect label to pie triangle\n                        lines = vis.selectAll(\"line\").data(largeItemsData);\n                        lines.enter().append(\"svg:line\")\n                            .attr(\"x1\", 0)\n                            .attr(\"x2\", 0)\n                            .attr(\"y1\", -r - 1)\n                            .attr(\"y2\", -r - 8)\n                            .attr(\"stroke\", \"gray\")\n                            .attr(\"transform\", function (d) {\n                            return \"rotate(\" + (d.startAngle + d.endAngle) / 2 * (180 / Math.PI) + \")\";\n                        });\n                        lines.exit().remove();\n                        //draw slices\n                        var arcs = vis.selectAll(\"g.slice\")\n                            .data(pieData).enter()\n                            .append(\"svg:g\")\n                            .attr(\"class\", \"slice\")\n                            .attr(\"data-tooltip\", \"\");\n                        //set the color for each slice\n                        arcs.append(\"svg:path\")\n                            .attr(\"fill\", function (d, i) {\n                            return color(self.settings.color ? d.data : i);\n                        })\n                            .attr(\"d\", arc);\n                        var flipPoint = 1.9 * Math.PI;\n                        //draw labels\n                        var labels = arcs.append(\"svg:text\")\n                            .attr(\"class\", function (d) {\n                            return d.data._percent <= 4 ? \"hidden\" : \"\";\n                        })\n                            .attr(\"transform\", function (d) {\n                            var offset = self.options.labelsOffset;\n                            return \"translate(\" +\n                                Math.cos(((d.startAngle + d.endAngle - Math.PI) / 2)) * (r + offset) + \",\" +\n                                Math.sin((d.startAngle + d.endAngle - Math.PI) / 2) * (r + offset) + \")\";\n                        })\n                            .attr(\"dy\", function (d) {\n                            if ((d.startAngle + d.endAngle) / 2 > Math.PI / 2 &&\n                                (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5) {\n                                return 5;\n                            }\n                            else {\n                                return -7;\n                            }\n                        })\n                            .attr(\"text-anchor\", function (d) {\n                            var middleAngle = (d.startAngle + d.endAngle) / 2;\n                            if (middleAngle < Math.PI || (middleAngle > flipPoint && middleAngle < 2 * Math.PI)) {\n                                return \"beginning\";\n                            }\n                            else {\n                                return \"end\";\n                            }\n                        })\n                            .text(function (d) {\n                            return d.data[self.settings.label] + \": \" + d.data[self.settings.value] + \" (\" +\n                                Math.round(d.data._percent) + \"%)\";\n                        });\n                        var prevbb;\n                        labels.each(function (d, i) {\n                            var thisbb = this.getBoundingClientRect();\n                            if (i > 0) {\n                                // move if they overlap\n                                if (!(thisbb.right < prevbb.left ||\n                                    thisbb.left > prevbb.right ||\n                                    thisbb.bottom < prevbb.top ||\n                                    thisbb.top > prevbb.bottom)) {\n                                    this.classList.add(\"hidden\");\n                                }\n                            }\n                            prevbb = thisbb;\n                        });\n                    }\n                    var defaultOptions = {\n                        radius: 100,\n                        labelsOffset: 10\n                    }, graph = new Chart(defaultOptions, draw);\n                    element.css(\"height\", \"100%\");\n                    graph.getTooltipText = function (d) {\n                        if (graph.settings.tooltipText) {\n                            return utils.strings.parseValue(graph.settings.tooltipText, d.data);\n                        }\n                        return d.data[graph.settings.label] + \": \" + d.data[graph.settings.value] + \" (\" +\n                            Math.round(d.data._percent) + \"%)\";\n                    };\n                    graph.init(scope, element, attrs);\n                    scope.$on(\"$destroy\", function () {\n                        element.off();\n                        element.empty();\n                    });\n                    //this is called from Charts.js where the svg is appended to the HTML\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"BarsWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"widgetViews\", function (widgetViews) {\n            function barsDataParser(view, data) {\n                if (view.settings.calculatePercentage) {\n                    var total = 0;\n                    data.forEach(function (row) {\n                        total += row[view.settings.value];\n                    });\n                    data.forEach(function (row) {\n                        row.label = row.label ? row.label : \"Unknown\";\n                        row._percent = (row[view.settings.value] / total) * 100;\n                    });\n                }\n                return data;\n            }\n            widgetViews.registerView(\"bars\", { dataParser: barsDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('BarsWidget').directive('bars', [\"utils\", \"fsHighChartService\", 'SCORE_COLOR_META_DATA',\n        function (utils, fsHighChartService, SCORE_COLOR_META_DATA) {\n            //The chart height will be FIXED_SERIES_HEIGHT_IN_PIXEL * number of users / computers\n            var FIXED_SERIES_HEIGHT_IN_PIXEL = '45';\n            return {\n                template: '<div class=\"highchart-bar-chart-container-parent\">' +\n                    '<div class=\"highchart-bar-chart-container\"></div></div>',\n                restrict: 'E', scope: {\n                    model: '=', graphSettings: '='\n                }, controller: function ($scope) {\n                    var ctrl = this;\n                    this.refreshData = function (chartData) {\n                        if (chartData && chartData.length > 0) {\n                            //userOrComputerData - map which the key is name of user or computer,\n                            // and for each user his count for each severity\n                            var userOrComputerData = this._getPointByUserAndSeverity(chartData);\n                            var dataForChart = this._prepareDataForChart(userOrComputerData);\n                            //We need to re-calculate the hight depened on data.\n                            //So we have to remove the chart, reset the container size, and re-create the cahrt\n                            //Destroy current chart and handle contain height\n                            var chartContainerDivId = $scope.chart.renderTo.id;\n                            var chartContainer = $(\"#\" + chartContainerDivId);\n                            var chartAreaSizeStrWithPX = chartContainer.parent().css('height');\n                            chartAreaSizeStrWithPX =\n                                chartAreaSizeStrWithPX.slice(0, chartAreaSizeStrWithPX.length - 2);\n                            var containerSize = Math.max(chartData.length * FIXED_SERIES_HEIGHT_IN_PIXEL, Number(chartAreaSizeStrWithPX));\n                            chartContainer.css('height', containerSize);\n                            //Save which sevirities to show, before destroy and rebuild chart\n                            for (var i = 0; i < $scope.chartConfig.series.length; i++) {\n                                $scope.chartConfig.series[i].visible = $scope.chart.series[i].visible;\n                            }\n                            $scope.chart.destroy();\n                            //Re-Create the chart object and save it on the scope\n                            $scope.chart = new Highcharts.Chart($scope.chartConfig);\n                            $scope.chart.xAxis[0].setCategories(dataForChart.categories);\n                            $scope.chart.series[0]\n                                .update({ data: dataForChart.series[SCORE_COLOR_META_DATA.critical.name] });\n                            $scope.chart.series[1]\n                                .update({ data: dataForChart.series[SCORE_COLOR_META_DATA.high.name] });\n                            $scope.chart.series[2]\n                                .update({ data: dataForChart.series[SCORE_COLOR_META_DATA.medium.name] });\n                            $scope.chart.series[3]\n                                .update({ data: dataForChart.series[SCORE_COLOR_META_DATA.low.name] });\n                        }\n                    };\n                    /*\n                     This method prepare the categories and the data for each series in the chart.\n                     @param userOrComputerData - object of the form - [user or coomputer name][seveiry] = counts\n\n                     @return - {\n                     categories - array of user or computer names\n                     series - array of 4 series, one per serviriy (low, medium, high, critical).\n                     each series contains array of counts\n                     }\n                     */\n                    this._prepareDataForChart = function (userOrComputerData) {\n                        var categories = [];\n                        var dataForChartSeries = {};\n                        dataForChartSeries[SCORE_COLOR_META_DATA.critical.name] = []; //Critical\n                        dataForChartSeries[SCORE_COLOR_META_DATA.high.name] = []; //High\n                        dataForChartSeries[SCORE_COLOR_META_DATA.medium.name] = []; //Medium\n                        dataForChartSeries[SCORE_COLOR_META_DATA.low.name] = []; //Low\n                        angular.forEach(userOrComputerData, function (sevirityAndCount, key) {\n                            categories.push(key);\n                            ctrl._pushPointForChartSeries(SCORE_COLOR_META_DATA.critical.name, sevirityAndCount, dataForChartSeries);\n                            ctrl._pushPointForChartSeries(SCORE_COLOR_META_DATA.high.name, sevirityAndCount, dataForChartSeries);\n                            ctrl._pushPointForChartSeries(SCORE_COLOR_META_DATA.medium.name, sevirityAndCount, dataForChartSeries);\n                            ctrl._pushPointForChartSeries(SCORE_COLOR_META_DATA.low.name, sevirityAndCount, dataForChartSeries);\n                        });\n                        return {\n                            categories: categories, series: dataForChartSeries\n                        };\n                    };\n                    this._pushPointForChartSeries = function (seriesName, sourceArray, destArray) {\n                        //Set the point data if exists, or zero if not exists\n                        var point = sourceArray[seriesName] ? sourceArray[seriesName] : { y: 0, percentage: \"0\" };\n                        destArray[seriesName].push(point);\n                    };\n                    /**\n                     * @param chartData - array of data objects\n                     * @return {} two dimensions array [user or coomputer name][seveiry] = counts\n                     */\n                    this._getPointByUserAndSeverity = function (chartData) {\n                        var catagorizedData = {};\n                        //For each user or computer - create and point with the value and percentage.\n                        //entry - represents entry of original data from the original array\n                        chartData.forEach(function (entry) {\n                            //Add the point to the temporal array catagorizedData- split the data between the\n                            // buckets [entity name][critical / high/  medium/low]\n                            if (!catagorizedData[entry.label]) {\n                                catagorizedData[entry.label] = {};\n                            }\n                            var percentage = (Math.round(entry._percent * 100) / 100).toFixed(2); //Truncate 2\n                            // places after\n                            // comma\n                            catagorizedData[entry.label][entry.severity.toLowerCase()] =\n                                { y: entry.event_count, percentage: percentage };\n                        });\n                        return catagorizedData;\n                    };\n                }, link: function postLink(scope, element, attrs, ctrl) {\n                    //Set unique ID for the div, Highchart need it.\n                    var chartId = Math.random().toString(36).slice(2);\n                    //Set unique ID on the root element of the template\n                    element.children().children('.highchart-bar-chart-container').attr('id', chartId);\n                    scope.chartConfig = {\n                        \"chart\": {\n                            \"renderTo\": chartId, \"type\": \"bar\"\n                        },\n                        legend: {\n                            enabled: true,\n                            layout: 'vertical',\n                            align: 'right',\n                            verticalAlign: 'top',\n                            x: 10,\n                            y: 40,\n                            borderWidth: 0\n                        }, \"plotOptions\": {\n                            bar: {\n                                minPointLength: 5, dataLabels: {\n                                    enabled: true, formatter: function () {\n                                        if (!this.point.percentage) {\n                                            this.point.percentage = \"0.00\";\n                                        }\n                                        return this.point.y + \" (\" + this.point.percentage + \"%)\";\n                                    }, style: {\n                                        fontWeight: 'bold'\n                                    }, x: 0, y: 0, align: 'right'\n                                }\n                            }\n                        }, scrollbar: {\n                            enabled: true\n                        }, yAxis: {\n                            min: 0, maxPadding: 0, gridLineWidth: 0, title: {\n                                text: '', align: 'high'\n                            }, labels: {\n                                overflow: 'justify', enabled: false\n                            }, minTickInterval: 1, tickInterval: 1, endOnTick: true, minRange: 1\n                        }, xAxis: {\n                            categories: [], title: {\n                                text: null\n                            }\n                        },\n                        series: [{\n                                name: utils.strings.capitalize(SCORE_COLOR_META_DATA.critical.name),\n                                data: [],\n                                color: SCORE_COLOR_META_DATA.critical.color\n                            }, {\n                                name: utils.strings.capitalize(SCORE_COLOR_META_DATA.high.name),\n                                data: [],\n                                color: SCORE_COLOR_META_DATA.high.color\n                            }, {\n                                name: utils.strings.capitalize(SCORE_COLOR_META_DATA.medium.name),\n                                data: [],\n                                color: SCORE_COLOR_META_DATA.medium.color,\n                                visible: false\n                            }, {\n                                name: utils.strings.capitalize(SCORE_COLOR_META_DATA.low.name),\n                                data: [],\n                                color: SCORE_COLOR_META_DATA.low.color,\n                                visible: false\n                            }]\n                    };\n                    $.extend(true, scope.chartConfig, fsHighChartService.getBasicChartConfiguration());\n                    //Create the chart object and save it on the scope\n                    scope.$applyAsync(function () {\n                        scope.chart = new Highcharts.Chart(scope.chartConfig);\n                    });\n                    scope.$watch('model', function (chartData) {\n                        ctrl.refreshData(chartData);\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"StackedBarsWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"utils\", \"widgetViews\",\n        function (utils, widgetViews) {\n            function stackedBarsDataParser(view, data) {\n                var seriesIndex = {}, series = [], labels = {}, labelTotals;\n                if (view.settings.calculatePercentage) {\n                    labelTotals = {};\n                    data.forEach(function (row) {\n                        var label = row[view.settings.label];\n                        if (labelTotals[label] === undefined) {\n                            labelTotals[label] = row[view.settings.value];\n                        }\n                        else {\n                            labelTotals[label] += row[view.settings.value];\n                        }\n                    });\n                    data.forEach(function (row) {\n                        var label = row[view.settings.label];\n                        row._percent = 100 * row[view.settings.value] / labelTotals[label];\n                    });\n                }\n                data.forEach(function (row) {\n                    var seriesName = row[view.settings.series], seriesValues = seriesIndex[seriesName], rowLabel = row[view.settings.label];\n                    if (!seriesValues) {\n                        seriesValues = seriesIndex[seriesName] = { dataIndex: {}, name: seriesName };\n                    }\n                    seriesValues.dataIndex[rowLabel] = {\n                        label: rowLabel,\n                        value: view.settings.calculatePercentage ? row._percent : row[view.settings.value],\n                        rawData: row\n                    };\n                    labels[rowLabel] = true;\n                });\n                var seriesValues, label;\n                var seriesName;\n                // Add missing labels, with value=0:\n                for (label in labels) {\n                    if (labels.hasOwnProperty(label)) {\n                        for (seriesName in seriesIndex) {\n                            if (seriesIndex.hasOwnProperty(seriesName)) {\n                                seriesValues = seriesIndex[seriesName];\n                                if (!seriesValues.dataIndex[label]) {\n                                    seriesValues.dataIndex[label] = { label: label, value: 0, rawData: null };\n                                }\n                            }\n                        }\n                    }\n                }\n                for (seriesName in seriesIndex) {\n                    if (seriesIndex.hasOwnProperty(seriesName)) {\n                        seriesValues = seriesIndex[seriesName];\n                        seriesValues.data = utils.objects.toArray(seriesValues.dataIndex);\n                        delete seriesValues.dataIndex;\n                        seriesValues.data.sort(function (a, b) {\n                            return a.label > b.label ? 1 : -1;\n                        });\n                    }\n                }\n                if (view.settings.seriesOrder) {\n                    view.settings.seriesOrder.forEach(function (seriesName) {\n                        var s = seriesIndex[seriesName];\n                        if (s) {\n                            s.name = seriesName;\n                            series.push(s);\n                        }\n                    });\n                }\n                else {\n                    series = utils.objects.toArray(seriesIndex, function (seriesName, d) {\n                        d.name = seriesName;\n                        return d;\n                    });\n                }\n                return series;\n            }\n            widgetViews.registerView(\"stackedBars\", { dataParser: stackedBarsDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('StackedBarsWidget')\n        .directive('stackedBars', [\"Chart\", \"utils\", function (Chart, utils) {\n            return {\n                template: '<div class=\"chart widget-bars\"></div>',\n                restrict: 'E',\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var self = this, labelsContainer, labels, labelsWidth, color = this.getColorScale(this.settings.color);\n                        function createLabels() {\n                            //var series = self.data.map(function (d) {\n                            //        return d.name;\n                            //    }),\n                            var labelsData = labelsContainer.selectAll(\".label\").data(labels);\n                            labelsData.enter().append(\"svg:text\")\n                                .text(function (d) {\n                                var text = d;\n                                if (text.length > 50) {\n                                    text = text.substr(0, 50) + \"...\";\n                                }\n                                return text;\n                            })\n                                .attr(\"text-anchor\", \"end\")\n                                .attr(\"y\", function (d, i) {\n                                return yScale(d) + self.options.barHeight / 2;\n                            })\n                                .attr(\"dy\", \".3em\")\n                                .attr(\"transform\", isHorizontal ? \"rotate(-90)\" : null);\n                            labelsData.exit().remove();\n                            labelsWidth = labelsContainer[0][0].getBoundingClientRect().width;\n                            labelsContainer.attr(\"transform\", \"translate(\" + (isHorizontal ?\n                                \"0, \" + (self.height - labelsWidth) : labelsWidth + \", 0\") + \")\");\n                        }\n                        function createScales() {\n                            var xMax = d3.max(data, function (group) {\n                                return d3.max(group, function (d) {\n                                    return d.x + d.x0;\n                                });\n                            }), domain = [0, xMax];\n                            xScale = d3.scale.linear()\n                                .domain([0, xMax])\n                                .rangeRound([0, self.width - labelsWidth - labelsBarsDistance]);\n                            var seriesBarWidths = {};\n                            graph.data.forEach(function (series) {\n                                series.data.forEach(function (bar) {\n                                    if (!bar.value) {\n                                        return true;\n                                    }\n                                    var scaledValue = xScale(bar.value);\n                                    if (graph.options.minBarWidth > scaledValue) {\n                                        scaledValue -= graph.options.minBarWidth - scaledValue;\n                                    }\n                                    if (seriesBarWidths[bar.label] === undefined) {\n                                        seriesBarWidths[bar.label] = scaledValue;\n                                    }\n                                    else {\n                                        seriesBarWidths[bar.label] += scaledValue;\n                                    }\n                                });\n                            });\n                            for (var label in seriesBarWidths) {\n                                if (seriesBarWidths.hasOwnProperty(label)) {\n                                    xScales[label] = d3.scale.linear()\n                                        .domain(domain)\n                                        .rangeRound([0, seriesBarWidths[label]]);\n                                }\n                            }\n                        }\n                        function createBars() {\n                            barsMargin = labelsWidth + labelsBarsDistance;\n                            barsWidth = (isHorizontal ? self.height : self.width) - barsMargin;\n                            barsContainer.attr(\"transform\", \"translate(\" + barsMargin + \", 0)\");\n                            d3.scale.category10();\n                            var groups = barsContainer.selectAll('g')\n                                .data(data)\n                                .enter()\n                                .append('g');\n                            createScales();\n                            graph.elements.rects = groups.selectAll('rect')\n                                .data(function (d) {\n                                return d;\n                            })\n                                .enter()\n                                .append('rect')\n                                .attr(\"class\", \"stacked-bar\")\n                                .attr('x', function (d, i) {\n                                return xScales[d.y](d.x0);\n                            })\n                                .attr(\"data-tooltip\", graph.settings.tooltipText ? \"\" : null)\n                                .attr('y', function (d, i) {\n                                return yScale(d.y);\n                            })\n                                .style(\"fill\", function (d) {\n                                return color(d.series);\n                            })\n                                .attr('height', self.options.barHeight)\n                                .attr('width', function (d) {\n                                var value = d.x;\n                                if (!value) {\n                                    return 0;\n                                }\n                                var width = Math.max(xScales[d.y](value) - graph.options.rectMargin, graph.options.minBarWidth);\n                                /*\n                                 if (width < self.options.minBarWidth){\n                                 var y = this.y.baseVal.valueAsString;\n                                 if (overflowWidth[y] === undefined)\n                                 overflowWidth[y] = 0;\n\n                                 overflowWidth[y] += self.options.minBarWidth - width;\n                                 width = self.options.minBarWidth;\n                                 }\n                                 */\n                                return width;\n                            });\n                            /*\n                             graph.elements.rects.each(function(){\n                             var currentWidth = this.width.baseVal.value,\n                             y = this.y.baseVal.valueAsString;\n\n                             if (currentWidth > overflowWidth[y]){\n                             this.setAttribute(\"width\", (currentWidth - overflowWidth[y]) + \"px\");\n                             }\n                             });\n\n                             graph.elements.rects.each(function(){\n                             var currentX = this.x.baseVal.value,\n                             y = this.y.baseVal.valueAsString;\n\n                             if (currentWidth > overflowWidth[y]){\n                             this.setAttribute(\"width\", (currentWidth - overflowWidth[y]) + \"px\");\n                             }\n                             });\n                             */\n                        }\n                        graph.barsAndLabelsContainer = this.dataSvg.append(\"svg:g\");\n                        labelsContainer = graph.barsAndLabelsContainer.append(\"g\").attr(\"class\", \"labels\");\n                        barsContainer = graph.barsAndLabelsContainer.append(\"g\").attr(\"class\", \"bars\");\n                        data = self.data.map(function (d) {\n                            return d.data.map(function (o, i) {\n                                // Structure it so that your numeric\n                                // axis (the stacked amount) is y\n                                return {\n                                    y: o.value,\n                                    x: o.label,\n                                    series: d.name,\n                                    rawData: o.rawData\n                                };\n                            });\n                        });\n                        stack(data);\n                        data = data.map(function (group) {\n                            return group.map(function (d) {\n                                // Invert the x and y values, and y0 becomes x0\n                                return {\n                                    x: d.y,\n                                    y: d.x,\n                                    x0: d.y0,\n                                    series: d.series,\n                                    rawData: d.rawData\n                                };\n                            });\n                        });\n                        labels = data[0].map(function (d) {\n                            return d.y;\n                        });\n                        yScale = function (d) {\n                            return labels.indexOf(d) * (self.options.barHeight + self.options.barMargin);\n                        };\n                        createLabels();\n                        createBars();\n                        setSvgHeight();\n                    }\n                    function setSvgHeight() {\n                        graph.svg.attr(\"height\", (barsContainer[0][0].getBoundingClientRect().height + graph.options.margins.top +\n                            graph.options.margins.bottom) + \"px\");\n                    }\n                    var defaultOptions = {\n                        barHeight: 30,\n                        barMargin: 10,\n                        barsPadding: 20,\n                        scrollBarWidth: 8,\n                        rectMargin: 2,\n                        minBarWidth: 3\n                    }, labelsBarsDistance = 7, barsMargin, barsWidth, graph = new Chart(defaultOptions, draw), isHorizontal, yScale, barsContainer, stack = d3.layout.stack(), data, xScale, xScales = {};\n                    graph.getTooltipText = function (d) {\n                        if (this.settings.tooltipText) {\n                            return utils.strings.parseValue(this.settings.tooltipText, d.rawData);\n                        }\n                        return d.rawData[this.settings.label] + \" (\" + d.rawData[this.settings.value] + \")\";\n                    };\n                    graph.init(scope, element, attrs);\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"MultiLineWidget\", [\"Utils\", \"Chart\", \"Widgets\"])\n        .run([\"utils\", \"widgetViews\", \"config\",\n        function (utils, widgetViews, config) {\n            function multiLineDataParser(view, data) {\n                function getParser(parser) {\n                    if (parser.type === \"date\") {\n                        if (parser.format) {\n                            var d3timeFormat = config.alwaysUtc ? d3.time.format.utc : d3.time.format;\n                            var parseDate = d3timeFormat(parser.format).parse;\n                            if (parser.startOfDay) {\n                                return function (str) {\n                                    var date = parseDate(str);\n                                    date.setSeconds(0);\n                                    date.setMinutes(0);\n                                    date.setHours(0);\n                                };\n                            }\n                            else {\n                                return function (str) {\n                                    if (!str) {\n                                        return null;\n                                    }\n                                    if (typeof str === \"number\") {\n                                        return utils.date.getMoment(str).toDate();\n                                    }\n                                    return parseDate(str);\n                                };\n                            }\n                        }\n                        else {\n                            return function (value) {\n                                var m = utils.date.getMoment(value);\n                                if (m.isValid()) {\n                                    if (parser.startOfDay) {\n                                        m.startOf(\"day\");\n                                    }\n                                    return m.toDate();\n                                }\n                                return null;\n                            };\n                        }\n                    }\n                    return null;\n                }\n                var seriesIndex = {}, xField = view.settings.x;\n                if (view.settings.xType) {\n                    var xParser = getParser(view.settings.xType);\n                }\n                data.forEach(function (item) {\n                    if (xParser) {\n                        item[\"_\" + xField] = item[xField];\n                        item[xField] = xParser(item[xField]);\n                    }\n                    var seriesName = item[view.settings.series], series = seriesIndex[seriesName];\n                    if (!series) {\n                        series = seriesIndex[seriesName] = { name: seriesName, values: [] };\n                    }\n                    series.values.push(item);\n                });\n                function sortIndex(a, b) {\n                    var aVal = a[xField], bVal = b[xField];\n                    if (aVal === bVal) {\n                        return 0;\n                    }\n                    return aVal > bVal ? 1 : -1;\n                }\n                for (var seriesName in seriesIndex) {\n                    if (seriesIndex.hasOwnProperty(seriesName)) {\n                        seriesIndex[seriesName].values.sort(sortIndex);\n                    }\n                }\n                return utils.objects.toArray(seriesIndex);\n            }\n            widgetViews.registerView(\"multiLine\", { dataParser: multiLineDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('MultiLineWidget')\n        .directive('multiLine', [\"Chart\", \"utils\", function (Chart, utils) {\n            return {\n                template: '<div class=\"chart multiline\"></div>',\n                restrict: 'E',\n                require: \"?ngModel\",\n                replace: true,\n                link: function postLink(scope, element, attrs, ngModel) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var self = this, svg = this.dataSvg;\n                        line = d3.svg.line()\n                            .interpolate(graph.settings.interpolate || \"linear\")\n                            .x(function (d) {\n                            return graph.scale.x(d[graph.settings.x]);\n                        })\n                            .y(function (d) {\n                            return graph.scale.y(d[graph.settings.y]);\n                        });\n                        var settingsMinXValue = graph.settings.minXValue || graph.settings.minDefaultXValue;\n                        var settingsMaxXValue = graph.settings.maxXValue || graph.settings.maxDefaultXValue;\n                        var minXValue = getXAxisValue(settingsMinXValue, graph.settings.xType.type);\n                        var maxXValue = getXAxisValue(settingsMaxXValue, graph.settings.xType.type);\n                        graph.scale.x.domain(getDomain(\"x\", minXValue, maxXValue));\n                        graph.scale.y.domain(getDomain(\"y\", graph.settings.minYValue, graph.settings.maxYValue));\n                        graph.elements.series = svg.selectAll(\".series\")\n                            .data(self.data)\n                            .enter().append(\"g\")\n                            .attr(\"class\", \"series pointsGroup\")\n                            .on(\"mouseover\", function () {\n                            var thisGroup = d3.select(this), parent = $(thisGroup[0]).parent();\n                            putChildOnTopOfSvgItem(thisGroup, parent);\n                            thisGroup.classed(\"onLine\", true);\n                        })\n                            .on(\"mouseout\", function () {\n                            d3.select(this).classed(\"onLine\", false);\n                        });\n                        graph.elements.series.append(\"path\")\n                            .attr(\"class\", \"line\")\n                            .attr(\"d\", function (d) {\n                            return line(d.values);\n                        })\n                            .style(\"stroke\", function (d) {\n                            return color(d.name);\n                        });\n                        graph.elements.series.each(function (series, i) {\n                            d3.select(graph.elements.series[0][i]).selectAll(\".point\").data(series.values)\n                                .enter().append(\"circle\")\n                                .attr(\"class\", \"point\")\n                                .attr(\"r\", graph.options.circleRadius)\n                                .attr(\"cx\", function (d) {\n                                return graph.options.circleRadius / 4 + graph.scale.x(d[graph.settings.x]);\n                            })\n                                .attr(\"cy\", function (d) {\n                                return graph.scale.y(d[graph.settings.y]);\n                            })\n                                .attr(\"data-tooltip\", graph.settings.tooltipText ? \"\" : null)\n                                .attr(\"data-selectable\", graph.settings.onSelect ? \"\" : null)\n                                .style(\"fill\", function () {\n                                return color(series.name);\n                            });\n                        });\n                        //When the user will mouseover the legend item the path will be outlined and move to top\n                        $(element).find(\".legend\").on(\"mouseover\", \".legend-item\", function () {\n                            var pointsGroup = getThePointsGroupRelatedToTheLegend(this);\n                            var thisClass = $(pointsGroup).attr(\"class\");\n                            (pointsGroup).attr(\"class\", thisClass + \" onLine\");\n                            putChildOnTopOfSvgItem(pointsGroup, pointsGroup.parent());\n                        });\n                        $(element).find(\".legend\").on(\"mouseout\", \".legend-item\", function () {\n                            var pointsGroup = getThePointsGroupRelatedToTheLegend(this);\n                            var thisClass = $(pointsGroup).attr(\"class\");\n                            $(pointsGroup).attr(\"class\", thisClass.replace(\"onLine\", \"\"));\n                        });\n                    }\n                    var defaultOptions = {\n                        circleRadius: 4\n                    }, graph = new Chart(defaultOptions, draw), line, color;\n                    element.css(\"height\", \"100%\");\n                    graph.getTooltipText = function (d) {\n                        return utils.strings.parseValue(graph.settings.tooltipText, d);\n                    };\n                    graph.preRender = function () {\n                        color = graph.getColorScale(graph.settings.color ||\n                            (graph.data.length <= 10 ? \"category10\" : \"category20\"));\n                        graph.legendData = graph.data.map(function (d) {\n                            return { text: d.name, color: color(d.name) };\n                        });\n                    };\n                    graph.init(scope, element, attrs);\n                    scope.$on(\"$destroy\", function () {\n                        element.off();\n                        element.empty();\n                    });\n                    function getXAxisValue(val, type) {\n                        var returnVal;\n                        var params;\n                        if (val && angular.isString(val)) {\n                            params = scope.widget.getState ? scope.widget.getState() : scope.getWidgetParams();\n                            returnVal = Number(utils.strings.parseValue(val, {}, params));\n                            if (type === \"date\") {\n                                return utils.date.getMoment(returnVal).startOf('day');\n                            }\n                            return returnVal;\n                        }\n                        return val;\n                    }\n                    function putChildOnTopOfSvgItem(child, parent) {\n                        child.remove();\n                        $(parent).append(child[0]);\n                    }\n                    function getThePointsGroupRelatedToTheLegend(legendItem) {\n                        var fillStyleColor = $(legendItem).find(\".legend-item-bullet\").attr(\"style\");\n                        fillStyleColor =\n                            fillStyleColor.substring(fillStyleColor.indexOf(\":\") + 1, fillStyleColor.length - 1);\n                        fillStyleColor = $.trim(fillStyleColor);\n                        return $(element).find(\"g.pointsGroup>path[style*='\" + fillStyleColor + \"']\").parent();\n                    }\n                    function getDomain(axis, minValue, maxValue) {\n                        var min, max, property = graph.settings[axis];\n                        graph.data.forEach(function (series) {\n                            series.values.forEach(function (item) {\n                                var value = item[property];\n                                if (minValue === undefined) {\n                                    if (min === undefined || value < min) {\n                                        min = value;\n                                    }\n                                }\n                                if (maxValue === undefined) {\n                                    if (max === undefined || value > max) {\n                                        max = value;\n                                    }\n                                }\n                            });\n                        });\n                        return [min || minValue, max || maxValue];\n                    }\n                }\n            };\n        }]);\n}());\n","angular.module(\"SpanBarsWidget\", [\"Utils\", \"Chart\"]);\n","(function () {\n    'use strict';\n    angular.module('SpanBarsWidget')\n        .directive('spanBars', [\"Chart\", function (Chart) {\n            return {\n                template: '<div class=\"chart widget-span-bars\"></div>',\n                restrict: 'E',\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var self = this, svg = this.dataSvg;\n                        if (this.settings.setDomainByData) {\n                            this.setScaleDomains({\n                                x: self.settings.setDomainByData.x ? [\n                                    d3.min(self.data, function (d) {\n                                        return d.start;\n                                    }),\n                                    d3.max(self.data, function (d) {\n                                        return d.end;\n                                    })\n                                ] : null,\n                                y: self.settings.setDomainByData.y ? [0, d3.max(self.data, function (d) {\n                                        return d.value;\n                                    })] : null\n                            });\n                        }\n                        function createBars() {\n                            var bars = svg.selectAll(\".span\").data(self.data, function (d) {\n                                return [+d.start, +d.end].join(\":\");\n                            });\n                            graph.elements.bars = bars.enter().append(\"rect\")\n                                .attr(\"class\", \"span\")\n                                .attr(\"width\", function (d) {\n                                return Math.max(0, self.scale.x(d.end) - self.scale.x(d.start));\n                            })\n                                .attr(\"height\", function (d) {\n                                return Math.max(0, self.scale.y.reverseScale(d.value));\n                            })\n                                .attr(\"x\", function (d) {\n                                return self.scale.x(d.start);\n                            })\n                                .attr(\"y\", function (d) {\n                                return self.scale.y(d.value);\n                            })\n                                .attr(\"fill\", \"steelblue\")\n                                .attr(\"data-tooltip\", graph.settings.tooltip ? \"\" : null);\n                            bars.exit().remove();\n                        }\n                        createBars();\n                    }\n                    var defaultOptions = {\n                        padding: 20\n                    }, graph = new Chart(defaultOptions, draw);\n                    element.css(\"height\", \"100%\");\n                    graph.init(scope, element, attrs);\n                    graph.onResize = function () {\n                        var self = this;\n                        graph.elements.bars.attr(\"width\", function (d) {\n                            return Math.max(0, self.scale.x(d.end) - self.scale.x(d.start));\n                        })\n                            .attr(\"height\", function (d) {\n                            return Math.max(0, self.scale.y.reverseScale(d.value));\n                        })\n                            .attr(\"x\", function (d) {\n                            return self.scale.x(d.start);\n                        })\n                            .attr(\"y\", function (d) {\n                            return self.scale.y(d.value);\n                        });\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"LinksWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"utils\", \"widgetViews\",\n        function (utils, widgetViews) {\n            function linksDataParser(view, data, params) {\n                var settings = view.settings;\n                var newData = {\n                    nodes: [],\n                    links: []\n                }, nodeIndexes = {}, rowLinkKeys = {}, linksData = view.settings.getLinksData ? {} : null;\n                function getRowNodes(row) {\n                    var nodeName, nodeLabel, existingNode, nodeUnique, rowNodeIndexes = [], node;\n                    for (var i = 0, nodeSettings; !!(nodeSettings = settings.nodes[i]); i++) {\n                        nodeName = row[nodeSettings.name];\n                        nodeLabel =\n                            nodeSettings.label ? utils.strings.parseValue(nodeSettings.label, row, params) : nodeName;\n                        nodeUnique = [nodeSettings.group, nodeLabel].join(\":\");\n                        existingNode = nodeIndexes[nodeUnique];\n                        if (existingNode === undefined) {\n                            node = {\n                                name: nodeName,\n                                group: nodeSettings.group,\n                                weight: 0,\n                                index: newData.nodes.length,\n                                label: nodeLabel,\n                                unique: nodeUnique,\n                                isCurrentlyFocused: false,\n                                field: nodeSettings.name,\n                                custom: nodeSettings.custom\n                            };\n                            if (settings.centerNodeName && settings.centerNodeName === nodeName) {\n                                node.centered = true;\n                                node.fixed = true;\n                                node.group = settings.centerMachineGroup || \"Center\";\n                            }\n                            newData.nodes.push(node);\n                            existingNode = nodeIndexes[nodeUnique] = node;\n                        }\n                        rowNodeIndexes.push(existingNode.index);\n                    }\n                    var currentLinkIndex, currentSubLinkIndex, linkKey, link, sourceNodeIndex, targetNodeIndex, currentSourceNode, currentTargetNode;\n                    for (currentLinkIndex = 0; currentLinkIndex < rowNodeIndexes.length - 1; currentLinkIndex++) {\n                        for (currentSubLinkIndex = currentLinkIndex + 1; currentSubLinkIndex < rowNodeIndexes.length; currentSubLinkIndex++) {\n                            linkKey = [rowNodeIndexes[currentLinkIndex], rowNodeIndexes[currentSubLinkIndex]].join(\"_\");\n                            if (!rowLinkKeys[linkKey]) {\n                                sourceNodeIndex = rowNodeIndexes[currentLinkIndex];\n                                targetNodeIndex = rowNodeIndexes[currentSubLinkIndex];\n                                currentSourceNode = newData.nodes[rowNodeIndexes[currentLinkIndex]];\n                                currentTargetNode = newData.nodes[rowNodeIndexes[currentSubLinkIndex]];\n                                if (view.settings.connectSameGroup !== false ||\n                                    currentSourceNode.group !== currentTargetNode.group) {\n                                    link = {\n                                        depth: 1,\n                                        unique: [currentSourceNode.unique, currentTargetNode.unique].join(\"_\"),\n                                        source: currentSourceNode,\n                                        target: currentTargetNode\n                                    };\n                                    if (linksData) {\n                                        linksData[linkKey] = link.data = [row];\n                                    }\n                                    newData.links.push(link);\n                                    rowLinkKeys[linkKey] = true;\n                                    currentSourceNode.weight++;\n                                    currentTargetNode.weight++;\n                                }\n                            }\n                            else if (linksData) {\n                                linksData[linkKey].push(row);\n                            }\n                        }\n                    }\n                }\n                data.forEach(getRowNodes);\n                return newData;\n            }\n            widgetViews.registerView(\"links\", { dataParser: linksDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('LinksWidget')\n        .directive('links', [\"Chart\", \"$parse\", \"utils\", function (Chart, $parse, utils) {\n            return {\n                template: '<div class=\"chart widget-links\"></div>',\n                restrict: 'E',\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    function draw() {\n                        /* jshint validthis:true */\n                        var data = this.getData();\n                        if (!data.nodes || !data.links) {\n                            return false;\n                        }\n                        graphDataWidth = this.width;\n                        graph.params = {\n                            colors: colorbrewer.Set2[Math.max(3, graph.settings.legend ? graph.settings.legend.length : graph.settings.nodes.length)],\n                            categories: {}\n                        };\n                        if (graph.settings.legend) {\n                            graph.settings.legend.forEach(function (d) {\n                                graph.params.categories[d] = { group: d };\n                            });\n                        }\n                        else {\n                            data.nodes.forEach(function (d) {\n                                graph.params.categories[d.group] = d;\n                            });\n                        }\n                        graph.params.categoryKeys = d3.keys(graph.params.categories);\n                        angular.extend(graph.params, {\n                            strokeColor: getColorScale(0.7),\n                            fillColor: getColorScale(-0.1)\n                        });\n                        addDefsAndFilters();\n                        createLegend();\n                        graph.force = d3.layout.force()\n                            .nodes(data.nodes)\n                            .links(data.links)\n                            .linkStrength(1)\n                            .size([graphDataWidth, graph.height])\n                            .linkDistance(this.options.linkDistance)\n                            .charge(this.options.charge)\n                            .gravity(this.options.gravity)\n                            .on('tick', tick);\n                        graphDataWidth -= legendWidth + 10;\n                        this.dataSvg.attr(\"transform\", \"translate(\" + (legendWidth + 10) + \", \" + this.options.margins.top + \")\");\n                        setBoundaries();\n                        setDrag();\n                        createLinks();\n                        createNodes();\n                        initForce();\n                        if (graph.settings.linkTooltip) {\n                            graph.getTooltipText = function (d) {\n                                return utils.strings.parseValue(graph.settings.linkTooltip, d);\n                            };\n                        }\n                        drawed = true;\n                    }\n                    var defaultOptions = {\n                        \"linkDistance\": 130,\n                        \"charge\": -400,\n                        \"gravity\": 0.01,\n                        \"height\": 800,\n                        \"numColors\": 12,\n                        \"labelPadding\": {\n                            \"left\": 3,\n                            \"right\": 3,\n                            \"top\": 2,\n                            \"bottom\": 2\n                        },\n                        \"labelMargin\": { \"left\": 3, \"right\": 3, \"top\": 2, \"bottom\": 2 },\n                        \"ticksWithoutCollisions\": 150,\n                        \"renderArrows\": false,\n                        \"legendMargin\": 20,\n                        \"keepNodePositionsOnUpdate\": false,\n                        // remain fixed in their current position,\n                        \"fixNodesOnDrag\": false\n                    }, graph = new Chart(defaultOptions, draw), mouseoutTimeout, highlighted, legendWidth = 0, graphDataWidth, boundaries, drawed, onSelect = attrs.onSelect ? $parse(attrs.onSelect) : null, onSelectLink = attrs.onSelectLink ? $parse(attrs.onSelectLink) : null, getHighlights = attrs.getHighlights ? $parse(attrs.getHighlights) : null, maxLineChars = 26, wrapChars = ' /_-.'.split('');\n                    element.css(\"height\", \"100%\");\n                    graph.init(scope, element, attrs);\n                    graph.update = function (newData, oldData) {\n                        if (!newData.nodes) {\n                            drawed = false;\n                            return;\n                        }\n                        if (!drawed) {\n                            draw.call(this);\n                        }\n                        else {\n                            if (this.options.keepNodePositionsOnUpdate) {\n                                graph.force.stop();\n                                if (newData.nodes && oldData && oldData.nodes) {\n                                    newData.nodes.forEach(function (newNode) {\n                                        var isNew = true;\n                                        for (var i = 0, oldNode; !!(oldNode = oldData.nodes[i]); i++) {\n                                            if (oldNode.unique === newNode.unique) {\n                                                newNode.x = oldNode.x;\n                                                newNode.y = oldNode.y;\n                                                newNode.fixed = true;\n                                                isNew = false;\n                                                break;\n                                            }\n                                        }\n                                        newNode.isNewNode = isNew;\n                                    });\n                                }\n                            }\n                            graph\n                                .force.nodes(newData.nodes || [])\n                                .links(newData.links || []);\n                            createNodes();\n                            createLinks();\n                            graph.force.on(\"end\", unFixNodes);\n                            initForce();\n                        }\n                    };\n                    graph.onResize = function () {\n                        graphDataWidth = this.width;\n                        graph.force.size([graphDataWidth, graph.height]);\n                        graphDataWidth -= legendWidth + 10;\n                        this.dataSvg.attr(\"transform\", \"translate(\" + (legendWidth + 10) + \", \" + this.options.margins.top + \")\");\n                        setBoundaries();\n                        this.force.resume();\n                    };\n                    graph.highlightNodes = function (selectedNode) {\n                        if (highlighted !== selectedNode) {\n                            var highlightedNodes = getHighlights ?\n                                getHighlights(scope, { links: graph.getData().links, selectedNode: selectedNode }) :\n                                getConnections(selectedNode);\n                            highlightSelectedNodes(highlightedNodes);\n                            highlighted = selectedNode;\n                        }\n                    };\n                    function unFixNodes() {\n                        graph.getData().nodes.forEach(function (d) {\n                            if (!d.centered) {\n                                d.fixed = false;\n                            }\n                        });\n                        graph.force.on(\"end\", null);\n                    }\n                    function initForce() {\n                        if (!graph.force.nodes().length) {\n                            return;\n                        }\n                        setTimeout(function () {\n                            graph.elements.nodes.each(function (d) {\n                                var node = d3.select(this), text = node.selectAll('text'), bounds = {}, first = true;\n                                text.each(function () {\n                                    var box = this.getBBox();\n                                    if (first || box.x < bounds.x1) {\n                                        bounds.x1 = box.x;\n                                    }\n                                    if (first || box.y < bounds.y1) {\n                                        bounds.y1 = box.y;\n                                    }\n                                    if (first || box.x + box.width > bounds.x2) {\n                                        bounds.x2 = box.x + box.width;\n                                    }\n                                    if (first || box.y + box.height > bounds.y2) {\n                                        bounds.y2 = box.y + box.height;\n                                    }\n                                    first = false;\n                                }).attr('text-anchor', 'middle');\n                                var padding = graph.options.labelPadding, margin = graph.options.labelMargin, oldWidth = bounds.x2 - bounds.x1;\n                                if (d.isNewNode === undefined || d.isNewNode) {\n                                    bounds.x1 -= oldWidth / 2;\n                                    bounds.x2 -= oldWidth / 2;\n                                }\n                                bounds.x1 -= padding.left;\n                                bounds.y1 -= padding.top;\n                                bounds.x2 += padding.left + padding.right;\n                                bounds.y2 += padding.top + padding.bottom;\n                                node.select('rect')\n                                    .attr('x', bounds.x1)\n                                    .attr('y', bounds.y1)\n                                    .attr('width', bounds.x2 - bounds.x1)\n                                    .attr('height', bounds.y2 - bounds.y1);\n                                d.extent = {\n                                    left: bounds.x1 - margin.left,\n                                    right: bounds.x2 + margin.left + margin.right,\n                                    top: bounds.y1 - margin.top,\n                                    bottom: bounds.y2 + margin.top + margin.bottom\n                                };\n                                d.edge = {\n                                    left: new geo.LineSegment(bounds.x1, bounds.y1, bounds.x1, bounds.y2),\n                                    right: new geo.LineSegment(bounds.x2, bounds.y1, bounds.x2, bounds.y2),\n                                    top: new geo.LineSegment(bounds.x1, bounds.y1, bounds.x2, bounds.y1),\n                                    bottom: new geo.LineSegment(bounds.x1, bounds.y2, bounds.x2, bounds.y2)\n                                };\n                            });\n                            graph.params.numTicks = 0;\n                            graph.params.preventCollisions = true;\n                            graph.force.start();\n                            for (var i = 0; i < graph.options.ticksWithoutCollisions; i++) {\n                                graph.force.tick();\n                            }\n                            graph.dataSvg.style(\"visibility\", \"visible\");\n                        }, 1);\n                    }\n                    function createNodes() {\n                        function getNodeFillColor(d) {\n                            return graph.params.fillColor(d.group);\n                        }\n                        function getNodeStrokeColor(d) {\n                            return graph.params.strokeColor(d.group);\n                        }\n                        var nodesData = graph.dataSvg.selectAll('.node')\n                            .data(graph.force.nodes(), function (d) {\n                            return d.unique;\n                        });\n                        graph.elements.nodes = nodesData.enter().append('g')\n                            .attr('class', \"node\")\n                            .call(graph.drag)\n                            .on('mouseover', function (d) {\n                            if (mouseoutTimeout) {\n                                clearTimeout(mouseoutTimeout);\n                                mouseoutTimeout = null;\n                            }\n                            graph.highlightNodes(d);\n                        })\n                            .on('mouseout', function () {\n                            if (mouseoutTimeout) {\n                                clearTimeout(mouseoutTimeout);\n                                mouseoutTimeout = null;\n                            }\n                            mouseoutTimeout = setTimeout(clearHighlight, 300);\n                        });\n                        if (onSelect) {\n                            graph.elements.nodes.on(\"click\", function (d) {\n                                if (d3.event.defaultPrevented) {\n                                    return;\n                                } // ignore drag\n                                var nodeElement = d3.event.currentTarget;\n                                onSelect(scope, { node: d, element: d3.event.currentTarget }).then(function (response) {\n                                    if (angular.isObject(response)) {\n                                        angular.extend(d, response);\n                                        if (response.group) {\n                                            d3.select(nodeElement).selectAll(\"rect\")\n                                                .attr('stroke', getNodeStrokeColor)\n                                                .attr('fill', getNodeFillColor);\n                                        }\n                                    }\n                                });\n                            });\n                        }\n                        graph.elements.nodeRect = graph.elements.nodes.append('rect')\n                            .attr('rx', 5)\n                            .attr('ry', 5)\n                            .attr('stroke', getNodeStrokeColor)\n                            .attr('fill', getNodeFillColor)\n                            .attr('width', 120)\n                            .attr('height', 30);\n                        graph.elements.nodes.each(function (d) {\n                            var node = d3.select(this), lines = wrap(d.label), ddy = 1.1, dy = -ddy * lines.length / 2 + 0.5;\n                            lines.forEach(function (line) {\n                                node.append('text')\n                                    .text(line)\n                                    .attr('dy', dy + 'em');\n                                dy += ddy;\n                            });\n                        });\n                        nodesData.exit().remove();\n                        graph.elements.nodes = graph.dataSvg.selectAll('.node');\n                    }\n                    function createLinks() {\n                        var linksData = graph.dataSvg.selectAll('.link')\n                            .data(graph.force.links(), function (d) {\n                            return d.unique;\n                        });\n                        graph.elements.links = linksData\n                            .enter().insert('line', \".node\")\n                            .attr('class', 'link' + (graph.options.renderArrows ? \" arrow\" : \"\") +\n                            (onSelectLink ? \" selectable\" : \"\"));\n                        if (onSelectLink) {\n                            graph.elements.links.on(\"click\", function (d) {\n                                if (d3.event.defaultPrevented) {\n                                    return;\n                                } // ignore drag\n                                onSelectLink(scope, { $event: d3.event, link: d });\n                            });\n                        }\n                        if (graph.settings.linkTooltip) {\n                            graph.elements.links.attr(\"data-tooltip\", \"\");\n                        }\n                        linksData.exit().remove();\n                        graph.elements.links = graph.dataSvg.selectAll('.link');\n                    }\n                    function createLegend() {\n                        if (!graph.elements.legend) {\n                            graph.elements.legend = graph.svg.append('g')\n                                .attr('class', 'legend')\n                                .attr(\"transform\", \"translate(\" + graph.options.margins.left + \", \" + graph.options.margins.top + \")\");\n                            graph.params.legendConfig = {\n                                rectWidth: 12,\n                                rectHeight: 12,\n                                xOffset: 0,\n                                yOffset: 30,\n                                xOffsetText: 20,\n                                yOffsetText: 10,\n                                lineHeight: 20\n                            };\n                            graph.params.legendConfig.xOffsetText += graph.params.legendConfig.xOffset;\n                            graph.params.legendConfig.yOffsetText += graph.params.legendConfig.yOffset;\n                        }\n                        var legendCategories = graph.elements.legend.selectAll('.legend-category')\n                            .data(d3.values(graph.params.categories))\n                            .enter().append('g')\n                            .attr('class', 'legend-category');\n                        legendCategories.append('rect')\n                            .attr('x', graph.params.legendConfig.xOffset)\n                            .attr('y', function (d, i) {\n                            return graph.params.legendConfig.yOffset + i * graph.params.legendConfig.lineHeight;\n                        })\n                            .attr('height', graph.params.legendConfig.rectHeight)\n                            .attr('width', graph.params.legendConfig.rectWidth)\n                            .attr('fill', function (d) {\n                            return graph.params.fillColor(d.group);\n                        })\n                            .attr('stroke', function (d) {\n                            return graph.params.strokeColor(d.group);\n                        });\n                        legendCategories.append('text')\n                            .attr('x', graph.params.legendConfig.xOffsetText)\n                            .attr('y', function (d, i) {\n                            return graph.params.legendConfig.yOffsetText + i * graph.params.legendConfig.lineHeight;\n                        })\n                            .text(function (d) {\n                            return d.group;\n                        });\n                        element.on('scroll', function () {\n                            graph.elements.legend.attr('transform', 'translate(' + graph.options.margins.left + \",\" +\n                                (graph.options.margins.top + $(this).scrollTop()) + ')');\n                        });\n                        legendWidth = graph.elements.legend[0][0].getBoundingClientRect().width;\n                    }\n                    function setBoundaries() {\n                        var margin = 5;\n                        boundaries = {\n                            top: graph.options.labelPadding.top + margin,\n                            bottom: graph.height - graph.options.labelMargin.bottom -\n                                graph.options.labelPadding.bottom - margin,\n                            left: graph.options.labelMargin.left + graph.options.labelPadding.left + margin,\n                            right: graphDataWidth - graph.options.labelMargin.right - graph.options.labelPadding.right -\n                                margin\n                        };\n                        boundaries.center = {\n                            x: (boundaries.right - boundaries.left) / 2 + boundaries.left,\n                            y: (boundaries.bottom - boundaries.top) / 2 + boundaries.top\n                        };\n                    }\n                    function setDrag() {\n                        graph.params.draggedThreshold = d3.scale.linear()\n                            .domain([0, 0.1])\n                            .range([5, 20])\n                            .clamp(true);\n                        function dragged(d) {\n                            var threshold = graph.params.draggedThreshold(graph.force.alpha()), dx = d.oldX - d.px, dy = d.oldY - d.py;\n                            if (Math.abs(dx) >= threshold || Math.abs(dy) >= threshold) {\n                                d.dragged = true;\n                            }\n                            return d.dragged;\n                        }\n                        graph.drag = d3.behavior.drag()\n                            .origin(function (d) {\n                            return d;\n                        })\n                            .on('dragstart', function (d) {\n                            d.oldX = d.x;\n                            d.oldY = d.y;\n                            d.dragged = false;\n                            d.fixed = true;\n                        })\n                            .on('drag', function (d) {\n                            d.px = d3.event.x;\n                            d.py = d3.event.y;\n                            if (dragged(d)) {\n                                graph.params.numTicks = 0;\n                                if (!graph.force.alpha()) {\n                                    graph.force.alpha(0.025);\n                                }\n                            }\n                        })\n                            .on('dragend', function (d) {\n                            d.fixed = graph.options.fixNodesOnDrag;\n                        });\n                    }\n                    function addDefsAndFilters() {\n                        graph.svg.insert('defs', \".graph-data\").selectAll('marker')\n                            .data(['end'])\n                            .enter().append('marker')\n                            .attr('id', String)\n                            .attr('viewBox', '0 -5 10 10')\n                            .attr('refX', 10)\n                            .attr('refY', 0)\n                            .attr('markerWidth', 6)\n                            .attr('markerHeight', 6)\n                            .attr('orient', 'auto')\n                            .append('path')\n                            .attr('d', 'M0,-5L10,0L0,5');\n                        // adapted from http://stackoverflow.com/questions/9630008\n                        // and http://stackoverflow.com/questions/17883655\n                        var glow = graph.svg.insert('filter', \".graph-data\")\n                            .attr('x', '-50%')\n                            .attr('y', '-50%')\n                            .attr('width', '200%')\n                            .attr('height', '200%')\n                            .attr('id', 'blue-glow');\n                        glow.append('feColorMatrix')\n                            .attr('type', 'matrix')\n                            .attr('values', '0 0 0 0  0 ' +\n                            '0 0 0 0  0 ' +\n                            '0 0 0 0  .7 ' +\n                            '0 0 0 1  0 ');\n                        glow.append('feGaussianBlur')\n                            .attr('stdDeviation', 3)\n                            .attr('result', 'coloredBlur');\n                        glow.append('feMerge').selectAll('feMergeNode')\n                            .data(['coloredBlur', 'SourceGraphic'])\n                            .enter().append('feMergeNode')\n                            .attr('in', String);\n                    }\n                    function getColorScale(darkness) {\n                        return d3.scale.ordinal()\n                            .domain(graph.params.categoryKeys)\n                            .range(graph.params.colors.map(function (c) {\n                            return d3.hsl(c).darker(darkness).toString();\n                        }));\n                    }\n                    function tick(e) {\n                        graph.params.numTicks++;\n                        if (graph.params.preventCollisions) {\n                            preventCollisions(e.alpha);\n                        }\n                        graph.elements.links\n                            .attr('x1', function (d) {\n                            return d.source.x;\n                        })\n                            .attr('y1', function (d) {\n                            return d.source.y;\n                        })\n                            .each(function (d) {\n                            var x = d.target.x, y = d.target.y;\n                            if (d.source.x === x && d.source.y === y) {\n                                return true;\n                            }\n                            var line = new geo.LineSegment(d.source.x, d.source.y, x, y);\n                            for (var e in d.target.edge) {\n                                if (d.target.edge.hasOwnProperty(e)) {\n                                    var ix = line.intersect(d.target.edge[e].offset(x, y));\n                                    if (ix.in1 && ix.in2) {\n                                        x = ix.x;\n                                        y = ix.y;\n                                        break;\n                                    }\n                                }\n                            }\n                            d3.select(this)\n                                .attr('x2', x)\n                                .attr('y2', y);\n                        });\n                        graph.elements.nodes\n                            .attr('transform', function (d) {\n                            return 'translate(' + d.x + ',' + d.y + ')';\n                        });\n                    }\n                    function preventCollisions() {\n                        var data = graph.getData(), quadtree = d3.geom.quadtree(data.nodes);\n                        data.nodes.forEach(function (obj) {\n                            if (obj.centered) {\n                                obj.y = boundaries.center.y;\n                                obj.x = boundaries.center.x;\n                                return true;\n                            }\n                            var ox1 = obj.x + obj.extent.left, ox2 = obj.x + obj.extent.right, oy1 = obj.y + obj.extent.top, oy2 = obj.y + obj.extent.bottom;\n                            quadtree.visit(function (quad) {\n                                if (quad.point && quad.point !== obj) {\n                                    // Check if the rectangles intersect\n                                    var p = quad.point, px1 = p.x + p.extent.left, px2 = p.x + p.extent.right, py1 = p.y + p.extent.top, py2 = p.y + p.extent.bottom, ix = (px1 <= ox2 && ox1 <= px2 && py1 <= oy2 && oy1 <= py2);\n                                    if (ix) {\n                                        var xa1 = ox2 - px1, // shift obj left , p right\n                                        xa2 = px2 - ox1, // shift obj right, p left\n                                        ya1 = oy2 - py1, // shift obj up   , p down\n                                        ya2 = py2 - oy1, // shift obj down , p up\n                                        adj = Math.min(xa1, xa2, ya1, ya2);\n                                        if (adj === xa1) {\n                                            obj.x -= adj / 2;\n                                            p.x += adj / 2;\n                                        }\n                                        else if (adj === xa2) {\n                                            obj.x += adj / 2;\n                                            p.x -= adj / 2;\n                                        }\n                                        else if (adj === ya1) {\n                                            obj.y -= adj / 2;\n                                            p.y += adj / 2;\n                                        }\n                                        else if (adj === ya2) {\n                                            obj.y += adj / 2;\n                                            p.y -= adj / 2;\n                                        }\n                                    }\n                                    return ix;\n                                }\n                            });\n                            if (oy1 < boundaries.top) {\n                                obj.y += 1;\n                            }\n                            else if (oy2 > boundaries.bottom - obj.extent.bottom + obj.extent.top) {\n                                obj.y -= 1;\n                            }\n                            if (ox1 < boundaries.left) {\n                                obj.x += 1;\n                            }\n                            else if (ox2 > boundaries.right - obj.extent.right + obj.extent.left) {\n                                obj.x -= 1;\n                            }\n                        });\n                    }\n                    function wrap(text) {\n                        if (text.length <= maxLineChars) {\n                            return [text];\n                        }\n                        else {\n                            for (var k = 0; k < wrapChars.length; k++) {\n                                var c = wrapChars[k];\n                                for (var i = maxLineChars; i >= 0; i--) {\n                                    if (text.charAt(i) === c) {\n                                        var line = text.substring(0, i + 1);\n                                        return [line].concat(wrap(text.substring(i + 1)));\n                                    }\n                                }\n                            }\n                            return [text.substring(0, maxLineChars)]\n                                .concat(wrap(text.substring(maxLineChars)));\n                        }\n                    }\n                    function clearHighlight() {\n                        graph.elements.nodes.classed('inactive', false);\n                        graph.elements.links.classed('inactive', false);\n                        highlighted = null;\n                    }\n                    function highlightSelectedNodes(selectedNodes) {\n                        graph.elements.nodes.classed('inactive', function (d) {\n                            return !selectedNodes[d.unique];\n                        });\n                        graph.elements.links.classed('inactive', function (d) {\n                            return (!selectedNodes[d.source.unique] || !selectedNodes[d.target.unique]);\n                        });\n                    }\n                    function getConnections(node) {\n                        var connections = {};\n                        connections[node.unique] = true;\n                        graph.getData().links.forEach(function (link) {\n                            if (link.source === node) {\n                                connections[link.target.unique] = true;\n                            }\n                            else if (link.target === node) {\n                                connections[link.source.unique] = true;\n                            }\n                        });\n                        return connections;\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"MultiTimelineWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"widgetViews\", function (widgetViews) {\n            widgetViews.registerView(\"multiTimeline\");\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('MultiTimelineWidget')\n        .directive('multiTimeline', [\"Chart\", \"$parse\", \"utils\", \"$timeout\",\n        function (Chart, $parse, utils, $timeout) {\n            return {\n                template: '<div class=\"chart widget-multiTimeline\"></div>',\n                restrict: 'E',\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var self = this, svg = this.dataSvg, seriesContainer = svg.append(\"g\").attr(\"class\", \"series-container\"), labelsContainer = svg.append(\"g\").attr(\"class\", \"labels-container\");\n                        function createLabels() {\n                            graph.elements.labels =\n                                labelsContainer.selectAll(\".label\").data(self.data, function (d) {\n                                    return d[graph.settings.unique];\n                                });\n                            graph.elements.labels.enter().append(\"svg:text\")\n                                .text(function (d) {\n                                return d[self.settings.label];\n                            })\n                                .attr(\"text-anchor\", \"end\")\n                                .attr(\"y\", function (d, i) {\n                                return (i + 0.5) * graph.options.seriesHeight;\n                            })\n                                .attr(\"dy\", \".3em\");\n                            graph.elements.labels.exit().remove();\n                            labelsWidth = labelsContainer[0][0].getBoundingClientRect().width;\n                            labelsContainer.attr(\"transform\", \"translate(\" + labelsWidth + \", 0)\");\n                        }\n                        function createSeries() {\n                            graph.elements.series =\n                                seriesContainer.selectAll(\".series\").data(self.data, function (d) {\n                                    return d[graph.settings.unique];\n                                });\n                            var series = graph.elements.series.enter().append(\"svg:g\")\n                                .attr(\"class\", \"series\" + (onSeriesClick ? \" selectable\" : \"\"))\n                                .attr(\"transform\", function (d, i) {\n                                return \"translate(0, \" + i * graph.options.seriesHeight + \")\";\n                            });\n                            series.append(\"svg:rect\")\n                                .attr(\"class\", \"series-background\")\n                                .attr(\"width\", \"100%\")\n                                .attr(\"height\", graph.options.seriesHeight);\n                            series.append(\"svg:line\")\n                                .attr(\"class\", \"series-divider\")\n                                .attr(\"x1\", 0)\n                                .attr(\"x2\", \"100%\")\n                                .attr(\"y1\", 0)\n                                .attr(\"y2\", 0);\n                            series.append(\"svg:rect\")\n                                .attr(\"class\", \"series-session\")\n                                .attr(\"x\", function (series) {\n                                return d3.min(series.events, function (d) {\n                                    return graph.scale.x(d[graph.settings.value]);\n                                });\n                            })\n                                .attr(\"y\", (graph.options.seriesHeight - graph.options.sessionHeight) / 2)\n                                .attr(\"width\", function (series) {\n                                return d3.max(series.events, function (d) {\n                                    return graph.scale.x(d[graph.settings.value]);\n                                }) - d3.min(series.events, function (d) {\n                                    return graph.scale.x(d[graph.settings.value]);\n                                });\n                            })\n                                .attr(\"height\", graph.options.sessionHeight);\n                            series.selectAll(\".series-event\")\n                                .data(function (series) {\n                                return series.events;\n                            }, function (d) {\n                                return d.id;\n                            })\n                                .enter().append(\"svg:circle\")\n                                .attr(\"class\", \"series-event\")\n                                .attr(\"r\", graph.options.eventRadius)\n                                .attr(\"cx\", function (d) {\n                                return graph.scale.x(d[graph.settings.value]);\n                            })\n                                .attr(\"cy\", graph.options.seriesHeight / 2)\n                                .attr(\"data-tooltip\", graph.settings.eventTooltip ? \"eventTooltip\" : null);\n                            graph.elements.series.exit().remove();\n                        }\n                        function addEvents() {\n                            if (onSeriesHover) {\n                                element.on(\"mouseenter\", \".series\", function (e) {\n                                    $timeout.cancel(seriesMouseOutTimeout);\n                                    scope.$apply(function () {\n                                        onSeriesHover(scope, { series: e.currentTarget.__data__ });\n                                    });\n                                });\n                            }\n                            if (onSeriesMouseOut) {\n                                element.on(\"mouseleave\", \".series\", function () {\n                                    seriesMouseOutTimeout = $timeout(function () {\n                                        scope.$apply(function () {\n                                            onSeriesMouseOut(scope, { series: selectedSeries && selectedSeries.__data__ });\n                                        });\n                                    }, 40);\n                                });\n                            }\n                            if (onSeriesClick) {\n                                element.on(\"click\", \".series\", function (e) {\n                                    if (selectedSeries) {\n                                        selectedSeries.classList.remove(\"selected\");\n                                        if (selectedSeries === e.currentTarget) {\n                                            scope.$apply(function () {\n                                                onSeriesClick(scope, { series: selectedSeries = null });\n                                            });\n                                        }\n                                        else {\n                                            selectSeries(e.currentTarget);\n                                        }\n                                    }\n                                    else {\n                                        selectSeries(e.currentTarget);\n                                    }\n                                });\n                            }\n                            function selectSeries(seriesElement) {\n                                scope.$apply(function () {\n                                    selectedSeries = seriesElement;\n                                    seriesElement.classList.add(\"selected\");\n                                    onSeriesClick(scope, { series: seriesElement.__data__ });\n                                });\n                            }\n                        }\n                        createLabels();\n                        this.setScaleRanges({\n                            x: [labelsWidth + this.options.seriesMargin + this.options.margins.left, this.width]\n                        });\n                        var domainExtent = {\n                            x: [\n                                d3.min(self.data, function (series) {\n                                    return d3.min(series.events, function (d) {\n                                        return d[graph.settings.value];\n                                    });\n                                }),\n                                d3.max(self.data, function (series) {\n                                    return d3.max(series.events, function (d) {\n                                        return d[graph.settings.value];\n                                    });\n                                })\n                            ]\n                        };\n                        if (domainExtent.x[0] === domainExtent.x[1]) {\n                            var extentDate = domainExtent.x[0];\n                            domainExtent.x[0] = utils.date.getMoment(extentDate).subtract(1, \"days\").toDate();\n                            domainExtent.x[1] = utils.date.getMoment(extentDate).add(1, \"days\").toDate();\n                        }\n                        this.setScaleDomains(domainExtent);\n                        this.color = this.getColorScale();\n                        createSeries();\n                        addEvents();\n                    }\n                    var defaultOptions = {\n                        seriesHeight: 35,\n                        sessionHeight: 3,\n                        seriesMargin: 10,\n                        eventRadius: 3\n                    }, graph = new Chart(defaultOptions, draw), labelsWidth, onSeriesHover = attrs.onSeriesHover ? $parse(attrs.onSeriesHover) : null, onSeriesMouseOut = attrs.onSeriesMouseOut ? $parse(attrs.onSeriesMouseOut) : null, onSeriesClick = attrs.onSeriesClick ? $parse(attrs.onSeriesClick) : null, selectedSeries, seriesMouseOutTimeout;\n                    graph.init(scope, element, attrs);\n                    graph.onResize = function () {\n                    };\n                    graph.postRender = function () {\n                        this.axes.x._element.attr(\"transform\", \"translate(\" + this.options.margins.left + \", \" +\n                            (this.data.length * this.options.seriesHeight + this.options.margins.top) + \")\");\n                        this.axes.x._grid.attr(\"transform\", \"translate(\" + this.options.margins.left + \", \" +\n                            (this.data.length * this.options.seriesHeight + this.options.margins.top) + \")\");\n                        this.axes.x._label.attr(\"transform\", \"translate(\" + labelsWidth / 2 + \", 0)\");\n                    };\n                    graph.preRender = function () {\n                        element.css(\"height\", this.data.length * this.options.seriesHeight + this.xAxisHeight +\n                            this.options.margins.top + this.options.margins.bottom +\n                            this.options.axisLabelsWidth.x);\n                    };\n                    graph.getTooltipText = function (d, type) {\n                        return utils.strings.parseValue(graph.settings[type], d);\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TreeWidget\", [\"Utils\", \"Chart\", \"Widgets\"]).run([\"widgetViews\", function (widgetViews) {\n            function treeDataParser(view, data) {\n                function createLinksIndex() {\n                    data.forEach(function (row) {\n                        var node = linksIndex[row[linkParam]];\n                        if (!node) {\n                            node = linksIndex[row[linkParam]] = {};\n                        }\n                        var child = node[row[nameParam]];\n                        if (!child) {\n                            child = node[row[nameParam]] = [];\n                        }\n                        child.push(row);\n                    });\n                }\n                function getNodeChildren(node) {\n                    var nodeLinks = linksIndex[node.name], newNode;\n                    if (nodeLinks) {\n                        node.children = [];\n                        for (var childName in nodeLinks) {\n                            if (nodeLinks.hasOwnProperty(childName)) {\n                                newNode = createNode(node.unique, childName, nodeLinks[childName]);\n                                node.children.push(newNode);\n                                getNodeChildren(newNode);\n                            }\n                        }\n                    }\n                }\n                function createNode(parentUnique, nodeName, nodeData) {\n                    var node = { name: nodeName, data: nodeData, unique: [parentUnique, nodeName].join(\":\"), size: 1 };\n                    if (view.settings.expandNode) {\n                        node = angular.extend(node, view.settings.expandNode(node));\n                    }\n                    return node;\n                }\n                var root = view.settings.root, linksIndex = {}, linkParam = view.settings.link, nameParam = view.settings.nodeName;\n                root.unique = root.unique || \"__ROOT__\";\n                createLinksIndex();\n                getNodeChildren(root);\n                return root;\n            }\n            widgetViews.registerView(\"tree\", { dataParser: treeDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('TreeWidget')\n        .directive('tree', [\"Chart\", \"$parse\", \"utils\", function (Chart, $parse, utils) {\n            return {\n                restrict: 'E',\n                template: \"<div class='chart widget-tree'></div>\",\n                replace: true,\n                link: function postLink(scope, element, attrs) {\n                    function draw() {\n                        /* jshint validthis: true */\n                        var data = this.getData();\n                        if (!data) {\n                            return false;\n                        }\n                        graph.tree = d3.layout.tree()\n                            .size([this.dataHeight, this.dataWidth]);\n                        root = data;\n                        initNodes(data);\n                        return true;\n                    }\n                    function initNodes() {\n                        if (!root) {\n                            return;\n                        }\n                        root.x0 = graph.dataHeight / 2;\n                        root.y0 = graph.options.rtl ? graph.dataWidth : 0;\n                        root[graph.settings.xPositionParam] = graph.scale.x.domain()[graph.options.rtl ? 1 : 0];\n                        function toggleAll(d) {\n                            if (d.children) {\n                                d.children.forEach(toggleAll);\n                                toggle(d);\n                            }\n                        }\n                        if (root.children) {\n                            root.children.forEach(toggleAll);\n                        }\n                        createGraph(root);\n                    }\n                    function selectNode(node) {\n                        if (onSelect && !node.children) {\n                            onSelect(scope, { node: node, element: d3.event.currentTarget, graph: graph }).then(function (response) {\n                                if (angular.isObject(response)) {\n                                    if (response.children) {\n                                        var newnodes = graph.tree.nodes(response.children).reverse();\n                                        node.children = newnodes[0];\n                                        createGraph(node);\n                                    }\n                                    else {\n                                        node.children = [];\n                                    }\n                                }\n                                else {\n                                    toggle(node);\n                                    createGraph(node);\n                                }\n                            });\n                        }\n                        else {\n                            toggle(node);\n                            createGraph(node);\n                        }\n                    }\n                    function setNodePosition(d) {\n                        d.y = graph.scale.x(d[graph.settings.xPositionParam]);\n                    }\n                    function createGraph(source) {\n                        function createNodes() {\n                            if (graph.scale.x && graph.settings.xPositionParam) {\n                                nodes.forEach(function (d) {\n                                    if (d.unique === \"__ROOT__\") {\n                                        d.y = d.y0;\n                                    }\n                                    else {\n                                        d.y = graph.scale.x(d[graph.settings.xPositionParam]);\n                                    }\n                                });\n                            }\n                            var node = graph.dataSvg.selectAll(\"g.node\")\n                                .data(nodes, function (d) {\n                                return d.unique;\n                            });\n                            // Enter any new nodes at the parent's previous position.\n                            var nodeEnter = node.enter().append(\"svg:g\")\n                                .attr(\"class\", \"node\")\n                                .attr(\"data-tooltip\", graph.settings.nodeTooltip ? function (d) {\n                                return d.unique === \"__ROOT__\" ? null : \"nodeTooltip\";\n                            } : null)\n                                .attr(\"transform\", function () {\n                                return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                            })\n                                .on(\"click\", selectNode)\n                                .on('mouseover', function (d) {\n                                highlightPath(d);\n                            })\n                                .on('mouseout', function () {\n                                clearHighlight();\n                            });\n                            graph.elements.nodes = nodeEnter;\n                            nodeEnter.append(\"svg:circle\")\n                                .attr(\"r\", 1e-6)\n                                .style(\"fill\", function (d) {\n                                return d._children ? \"lightsteelblue\" : \"#fff\";\n                            });\n                            nodeEnter.append(\"svg:text\")\n                                .attr(\"y\", \"-.75em\")\n                                .attr(\"text-anchor\", \"middle\")\n                                .text(function (d) {\n                                return d.name;\n                            })\n                                .style(\"fill-opacity\", 1e-6);\n                            // Transition nodes to their new position.\n                            var nodeUpdate = node.transition()\n                                .duration(duration)\n                                .attr(\"transform\", getNodeTransform);\n                            nodeUpdate.select(\"circle\")\n                                .attr(\"r\", 4.5)\n                                .style(\"fill\", function (d) {\n                                return d._children ? \"lightsteelblue\" : \"#fff\";\n                            });\n                            nodeUpdate.select(\"text\")\n                                .style(\"fill-opacity\", 1);\n                            // Transition exiting nodes to the parent's new position.\n                            var nodeExit = node.exit().transition()\n                                .duration(duration)\n                                .attr(\"transform\", function () {\n                                return \"translate(\" + source.y + \",\" + source.x + \")\";\n                            })\n                                .remove();\n                            nodeExit.select(\"circle\")\n                                .attr(\"r\", 1e-6);\n                            nodeExit.select(\"text\")\n                                .style(\"fill-opacity\", 1e-6);\n                            graph.elements.nodes = graph.dataSvg.selectAll('.node');\n                        }\n                        function createLinks() {\n                            var link = graph.dataSvg.selectAll(\"path.link\")\n                                .data(tree.links(nodes), function (d) {\n                                return d.target.unique;\n                            });\n                            // Enter any new links at the parent's previous position.\n                            graph.elements.links = link.enter().insert(\"svg:path\", \".node\")\n                                .attr(\"class\", \"link\" + (onSelectLink ? \" selectable\" : \"\"))\n                                .attr(\"d\", function () {\n                                var o = { x: source.x0, y: source.y0 };\n                                return diagonal({ source: o, target: o });\n                            });\n                            if (onSelectLink) {\n                                graph.elements.links.on(\"click\", function (d) {\n                                    onSelectLink(scope, { $event: d3.event, link: d });\n                                });\n                            }\n                            graph.elements.links.transition()\n                                .duration(duration)\n                                .attr(\"d\", diagonal);\n                            // Transition links to their new position.\n                            link.transition()\n                                .duration(duration)\n                                .attr(\"d\", diagonal);\n                            // Transition exiting nodes to the parent's new position.\n                            link.exit().transition()\n                                .duration(duration)\n                                .attr(\"d\", function () {\n                                var o = { x: source.x, y: source.y };\n                                return diagonal({ source: o, target: o });\n                            })\n                                .remove();\n                            graph.elements.links = graph.dataSvg.selectAll('.link');\n                        }\n                        function createLinkTexts() {\n                            var linksText = graph.dataSvg.selectAll(\".linkText\").data(tree.links(nodes), function (d) {\n                                return d.target.unique;\n                            }), params = scope.getWidgetParams();\n                            graph.elements.linkTexts = linksText.enter().insert(\"svg:text\", \".node\")\n                                .attr(\"class\", \"linkText\" + (onSelectLink ? \" selectable\" : \"\"))\n                                .text(function (d) {\n                                return utils.strings.parseValue(graph.settings.linkText, d, params);\n                            })\n                                .attr(\"text-anchor\", \"middle\")\n                                .style(\"fill-opacity\", 1e-6)\n                                .attr(\"dy\", \"-.35em\")\n                                .attr(\"transform\", function (d) {\n                                return \"translate(\" + d.source.y + \", \" + d.source.x + \")\";\n                            })\n                                .attr(\"data-tooltip\", graph.settings.linkTextTooltip ? \"linkTextTooltip\" : null);\n                            if (onSelectLink) {\n                                graph.elements.linkTexts.on(\"click\", function (d) {\n                                    onSelectLink(scope, { $event: d3.event, link: d });\n                                });\n                            }\n                            graph.elements.linkTexts.transition()\n                                .duration(duration)\n                                .style(\"fill-opacity\", 1)\n                                .attr(\"transform\", function (d) {\n                                return \"translate(\" + (d.source.y + (d.target.y - d.source.y) / 2) + \", \" +\n                                    (d.source.x + (d.target.x - d.source.x) / 2) + \")\";\n                            });\n                            linksText.exit().transition()\n                                .duration(duration)\n                                .attr(\"transform\", function (d) {\n                                return \"translate(\" + d.source.y + \", \" + d.source.x + \")\";\n                            })\n                                .style(\"fill-opacity\", 1e-6)\n                                .remove();\n                            graph.elements.linkTexts = graph.dataSvg.selectAll('.linkText');\n                        }\n                        var tree = graph.tree, duration = graph.options.expandDuration;\n                        nodes = tree.nodes(root).reverse();\n                        createNodes();\n                        createLinks();\n                        if (graph.settings.linkText) {\n                            createLinkTexts();\n                        }\n                        // Stash the old positions for transition.\n                        nodes.forEach(function (d) {\n                            d.x0 = d.x;\n                            d.y0 = d.y;\n                        });\n                    }\n                    function highlightPath(node) {\n                        var highlighted = getHighlightedNodes(node);\n                        graph.elements.nodes.classed('inactive', function (d) {\n                            return !highlighted[d.unique];\n                        });\n                        graph.elements.links.classed('inactive', function (d) {\n                            return (!highlighted[d.source.unique] || !highlighted[d.target.unique]);\n                        });\n                        element.addClass(\"highlighted\");\n                    }\n                    function getHighlightedNodes(node) {\n                        var highlighted = {}, currentNode = node;\n                        while (currentNode) {\n                            highlighted[currentNode.unique] = true;\n                            currentNode = currentNode.parent;\n                        }\n                        return highlighted;\n                    }\n                    function toggle(d) {\n                        if (d.children) {\n                            d._children = d.children;\n                            d.children = null;\n                        }\n                        else {\n                            d.children = d._children;\n                            d._children = null;\n                        }\n                    }\n                    function clearHighlight() {\n                        graph.elements.nodes.classed('inactive', false);\n                        graph.elements.links.classed('inactive', false);\n                        highlighted = null;\n                        element.removeClass(\"highlighted\");\n                    }\n                    function getNodeTransform(d) {\n                        return \"translate(\" + d.y + \",\" + d.x + \")\";\n                    }\n                    function onUpdateDomain() {\n                        nodes.forEach(setNodePosition);\n                        graph.elements.nodes.attr(\"transform\", getNodeTransform);\n                        graph.elements.links.attr(\"d\", function (d) {\n                            return diagonal({ source: d.source, target: d.target });\n                        });\n                        graph.elements.linkTexts.attr(\"transform\", function (d) {\n                            return \"translate(\" + (d.source.y + (d.target.y - d.source.y) / 2) + \", \" +\n                                (d.source.x + (d.target.x - d.source.x) / 2) + \")\";\n                        });\n                    }\n                    var defaultOptions = {\n                        expandDuration: 500,\n                        rtl: false,\n                        margins: {\n                            top: 10,\n                            bottom: 10,\n                            left: 10,\n                            right: 10\n                        }\n                    }, graph = new Chart(defaultOptions, draw), root, onSelect = attrs.onSelect ? $parse(attrs.onSelect) : null, onSelectLink = attrs.onSelectLink ? $parse(attrs.onSelectLink) : null, diagonal = d3.svg.diagonal().projection(function (d) {\n                        return [d.y, d.x];\n                    }), highlighted, nodes;\n                    element.css(\"height\", \"100%\");\n                    graph.onUpdateDomain = onUpdateDomain;\n                    graph.init(scope, element, attrs);\n                    graph.getTooltipText = function (d, type) {\n                        return utils.strings.parseValue(graph.settings[type], d);\n                    };\n                    graph.onResize = function () {\n                        graph.tree.size([this.dataHeight, this.dataWidth]);\n                        root.x0 = graph.dataHeight / 2;\n                        root.y0 = graph.options.rtl ? graph.dataWidth : 0;\n                        onUpdateDomain();\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"FiguresWidget\", [\"Utils\", \"Widgets\"]).run([\"utils\", \"widgetViews\", function (utils, widgetViews) {\n            function figuresDataParser(view, data, params) {\n                var figuresData = [], noValueDisplay = view.settings.noValue || \"(No value)\";\n                data.forEach(function (item, i) {\n                    var value = view.settings.value ? utils.strings.parseValue(view.settings.value, item, params) :\n                        item.value;\n                    if (!value && value !== 0) {\n                        value = noValueDisplay;\n                    }\n                    figuresData.push({\n                        label: getLabel(item, i),\n                        value: value\n                    });\n                });\n                function getLabel(item, index) {\n                    var label;\n                    if (view.settings.label) {\n                        label = item[view.settings.label];\n                    }\n                    if (!label && view.settings.labels) {\n                        label = view.settings.labels[index];\n                    }\n                    return label;\n                }\n                return figuresData;\n            }\n            widgetViews.registerView(\"figures\", { dataParser: figuresDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"FocusWhen\", [])\n        .directive(\"focusWhen\", [\"$parse\", function ($parse) {\n            return {\n                restrict: 'A',\n                link: function postLink(scope, element, attrs) {\n                    scope.$watch(attrs.focusWhen, function (value) {\n                        if (value) {\n                            setTimeout(function () {\n                                element[0].focus();\n                                element[0].select();\n                            }, 40);\n                        }\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Tooltip\", []).directive(\"tooltip\", [\"$timeout\", function ($timeout) {\n            return {\n                restrict: 'E',\n                transclude: true,\n                template: '<div class=\"tooltip-directive\" ng-show=\"isOpen\" ng-transclude></div>',\n                require: '?ngModel',\n                link: function postLink(scope, element, attrs, ngModel) {\n                    function open() {\n                        scope.isOpen = true;\n                        element.css(\"opacity\", 0);\n                        document.body.addEventListener(\"mousedown\", onBackgroundClick);\n                        $timeout(function () {\n                            setPosition();\n                            element.css(\"opacity\", 1);\n                        }, 50);\n                    }\n                    function close() {\n                        document.body.removeEventListener(\"mousedown\", onBackgroundClick);\n                        scope.isOpen = false;\n                        ngModel.$setViewValue(false);\n                    }\n                    function setPosition() {\n                        var width = document.documentElement.clientWidth, height = document.documentElement.clientHeight, tooltipWidth = tooltip.outerWidth(), tooltipHeight = tooltip.outerHeight(), margin = 20;\n                        if (currentPosition.left + tooltipWidth > width - margin) {\n                            currentPosition.left = currentPosition.left - tooltipWidth;\n                        }\n                        if (currentPosition.top + tooltipHeight > height - margin) {\n                            currentPosition.top = currentPosition.top - tooltipHeight;\n                        }\n                        tooltip.css(currentPosition);\n                    }\n                    function onBackgroundClick(e) {\n                        var tooltipElement = $(e.target).closest(\".tooltip-directive\");\n                        if (!tooltipElement.length || tooltipElement[0] !== tooltip[0]) {\n                            scope.$apply(close);\n                        }\n                        return true;\n                    }\n                    var tooltip = element.find(\".tooltip-directive\"), currentPosition;\n                    scope.isOpen = false;\n                    ngModel.$render = function () {\n                        if (ngModel.$viewValue) {\n                            open();\n                        }\n                        else {\n                            close();\n                        }\n                    };\n                    scope.$watch(attrs.position, function (value) {\n                        if (value) {\n                            currentPosition = value;\n                        }\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\", [\n        \"Version\",\n        'ngRoute',\n        'ngMessages',\n        'ui.router',\n        'ngAnimate',\n        \"Config\",\n        \"DAL\",\n        \"Page\",\n        \"Reports\",\n        \"Widgets\",\n        \"Controls\",\n        \"Menus\",\n        \"Search\",\n        \"EventBus\",\n        \"Events\",\n        \"Popup\",\n        \"Cache\",\n        \"Chart\",\n        \"Utils\",\n        \"FSHighChart\",\n        \"Format\",\n        \"Conditions\",\n        \"DataEntities\",\n        \"FilterValidatorsModule\",\n        \"DataQueries\",\n        \"Explore\",\n        \"Explore.Filters\",\n        \"Explore.DataViews\",\n        \"State\",\n        \"Styles\",\n        \"Transforms\",\n        \"Icons\",\n        \"Tags\",\n        \"Yoxigen\",\n        \"DatePicker\",\n        \"Dropdown\",\n        \"ui.layout\",\n        \"ngResource\",\n        \"FocusWhen\",\n        \"Tooltip\",\n        \"Colors\",\n        \"FortscaleAuth\",\n        \"NumberRangeModule\",\n        \"StringInModule\",\n        \"multi-select\",\n        \"rt.debounce\",\n        \"paging\",\n        \"simplePagination\",\n        \"NumbersOnlyModule\",\n        \"DurationOnlyModule\",\n        \"PopupConditions\",\n        'restangular',\n        // Widgets:\n        \"TableWidget\",\n        \"SecurityFeed\",\n        \"BubblesWidget\",\n        \"HeatMapWidget\",\n        \"TagsWidget\",\n        \"BarsChartWidget\",\n        \"PercentChartWidget\",\n        \"PropertiesWidget\",\n        \"TabsWidget\",\n        \"ForceChartWidget\",\n        \"ScatterPlotWidget\",\n        \"TimelineWidget\",\n        \"ExploreWidget\",\n        \"MapWidget\",\n        \"PieWidget\",\n        \"BarsWidget\",\n        \"StackedBarsWidget\",\n        \"LinksWidget\",\n        \"SpanBarsWidget\",\n        \"TreeWidget\",\n        \"MultiTimelineWidget\",\n        \"FiguresWidget\",\n        \"RepeaterWidget\",\n        \"MultiLineWidget\",\n        \"pascalprecht.translate\",\n        // New design\n        'fsTemplates',\n        'Fortscale.shared',\n        'Fortscale.layouts',\n        'Fortscale.appConfig',\n        'Fortscale.remoteAppConfig',\n        'Fortscale.analytics'\n    ])\n        .config(['$rootScopeProvider', function ($rootScopeProvider) {\n            // This was done to support Explore. It turns out that Explore needs more then 10 digest cycles\n            // to work when switching data sources. I hope Explore will die soon, but most likely I'll die first...\n            $rootScopeProvider.digestTtl(20);\n        }])\n        .run(['$rootScope', '$timeout', function ($rootScope, $timeout) {\n            if (!$rootScope.safeApply) {\n                // Prevent executing $apply if already in a digest cycle\n                $rootScope.safeApply = function (fn) {\n                    var phase = $rootScope.$$phase;\n                    if (phase === '$apply' || phase === '$digest') {\n                        if (typeof fn === 'function') {\n                            fn();\n                        }\n                    }\n                    else {\n                        this.$apply(fn);\n                    }\n                };\n            }\n            $rootScope.hideLoader = true;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .config(function ($routeProvider, $locationProvider) {\n        /**\n         * LEGACY\n         * Setup Routes\n         */\n        $routeProvider\n            .when('/d/:dashboardId', {\n            templateUrl: 'views/pages/main_dashboard.html',\n            controller: \"MainDashboardController\",\n            reloadOnSearch: false\n        })\n            .when('/d/:dashboardId/:entityId', {\n            templateUrl: 'views/pages/main_dashboard.html',\n            controller: 'MainDashboardController',\n            reloadOnSearch: false,\n            resolve: {}\n        })\n            .when('/account', {\n            templateUrl: 'views/pages/account.html',\n            controller: \"AccountSettingsController\"\n        })\n            .when('/global_settings', {\n            templateUrl: 'views/pages/global_settings.html',\n            controller: \"GlobalSettingsController\"\n        })\n            .when('/alerts/:alertId', {})\n            .when('/alerts/:alertId/:evidenceId', {})\n            .when('/alerts/:alertId/evidence/:evidenceId', {})\n            .when('/username/:username', {})\n            .when('/user/:userId', {})\n            .when('/user/:userId/baseline', {})\n            .when('/reports/:reportId/:subReportId', {})\n            .when('/configuration/:stateName', {})\n            .when('/pxgrid-configuration/:certificateFlow/:generationFlow', {})\n            .when('/users', {})\n            .when('/:dashboardId/:entityId/:subDashboardId', {\n            templateUrl: 'views/pages/main_dashboard.html',\n            controller: \"MainDashboardController\",\n            reloadOnSearch: false\n        })\n            .when('/:dashboardId/:subDashboardId', {\n            templateUrl: 'views/pages/main_dashboard.html',\n            controller: \"MainDashboardController\",\n            reloadOnSearch: false\n        });\n        $locationProvider.html5Mode(false);\n    })\n        .config([\n        '$sceProvider',\n        '$stateProvider',\n        '$urlRouterProvider',\n        'alertsPageResolve',\n        function ($sceProvider, $stateProvider, $urlRouterProvider, alertsPageResolve) {\n            // LEGACY\n            // Completely disable SCE.\n            // For demonstration purposes only! Do not use in new projects.\n            $sceProvider.enabled(false);\n            //Configuration for UI-Router\n            $urlRouterProvider.otherwise('/overview');\n            $stateProvider\n                .state('alerts', {\n                url: '/alerts',\n                templateUrl: 'app/layouts/alerts/alerts.view.html',\n                controller: 'AlertsController',\n                controllerAs: 'alerts',\n                resolve: alertsPageResolve\n            })\n                .state('users', {\n                url: '/users',\n                templateUrl: 'app/layouts/users/users.view.html',\n                controller: 'UsersController',\n                controllerAs: 'usersCtrl'\n            })\n                .state('configuration', {\n                url: '/configuration',\n                templateUrl: 'app/layouts/configuration/configuration.view.html',\n                controller: 'ConfigurationController',\n                controllerAs: 'configuration'\n            })\n                .state('configuration.configForm', {\n                url: '/:stateName',\n                templateUrl: 'app/layouts/configuration/configuration-form.view.html',\n                controller: 'ConfigurationFormController',\n                controllerAs: 'configFormCtrl'\n            })\n                .state('ng-route-d-dashboardId', {\n                url: '/d/:dashboardId'\n            })\n                .state('explore', {\n                url: '/d/:dashboardId/:entityId'\n            })\n                .state('ng-route-d-dashboardId-entity-subDashboardId', {\n                url: '/:dashboardId/:entityId/:subDashboardId'\n            })\n                .state('ng-route-d-dashboardId-subDashboardId', {\n                url: '/:dashboardId/:subDashboardId'\n            })\n                .state('ng-route-count', {\n                url: '/account'\n            })\n                .state('ng-route-global-settings', {\n                url: '/global_settings'\n            });\n        }]);\n}());\n","angular.module(\"Version\", []).value(\"version\", new Date().valueOf());\n","(function () {\n    \"use strict\";\n    angular.module(\"Fortscale\").factory(\"eventBus\", [\"EventBus\", function (EventBus) {\n            return new EventBus();\n        }]);\n}());\n","(function () {\n    'use strict';\n    function widgets($q, DAL, format, reports, widgetViews, EventBus, Widget) {\n        var cachedWidgets = {};\n        function parseFieldValue(field, value, data, index, params, item) {\n            return value.replace(/\\{\\{([^\\}]+)\\}\\}/g, function (match, variable) {\n                if (/^@/.test(variable)) {\n                    var param = variable.replace(\"@\", \"\");\n                    if (param === \"index\") {\n                        return index;\n                    }\n                    else if (param === \"item\") {\n                        return item;\n                    }\n                    return params[param] || \"\";\n                }\n                else {\n                    var dataValue = data[variable];\n                    if (dataValue !== undefined && dataValue !== null) {\n                        if (field.format) {\n                            return format[field.format](dataValue, field.formatOptions);\n                        }\n                        return dataValue;\n                    }\n                    return \"\";\n                }\n            });\n        }\n        var methods = {\n            getWidget: function (widgetId, uniqueWidgetId) {\n                var cacheWidgetId = uniqueWidgetId || widgetId;\n                if (cachedWidgets[cacheWidgetId]) {\n                    return $q.when(angular.copy(cachedWidgets[cacheWidgetId]));\n                }\n                else {\n                    return DAL.widgets.getWidget(widgetId).then(function (widgetConfig) {\n                        var widget = Widget.loadWidget(widgetConfig);\n                        if (widgetConfig.reportId) {\n                            return reports.getReport(widgetConfig.reportId).then(function (report) {\n                                widget.report = report;\n                            });\n                        }\n                        cachedWidgets[cacheWidgetId] = widget;\n                        return widget;\n                    }, function () {\n                        return $q.reject(\"Widget with ID '\" + widgetId + \"' not found.\");\n                    });\n                }\n            }, parseFieldValue: parseFieldValue, refreshAll: function () {\n                widgetsEventBus.triggerEvent(\"refreshAll\");\n            }, setViewValues: function (view, data, params, rawData) {\n                return $q.when(widgetViews.parseViewData(view, data, params, rawData));\n            }\n        };\n        var widgetsEventBus = EventBus.setToObject(methods, [\"refreshAll\"]);\n        return methods;\n    }\n    widgets.$inject = [\"$q\", \"DAL\", \"format\", \"reports\", \"widgetViews\", \"EventBus\", \"Widget\"];\n    angular.module(\"Fortscale\").factory(\"widgets\", widgets);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").factory(\"widgetTypes\", [\"$q\", \"$http\", \"version\", function ($q, $http, version) {\n            var widgetTypes, cachedDefinitions = {};\n            var methods = {\n                getWidgetType: function (widgetTypeName) {\n                    var deferred = $q.defer();\n                    if (cachedDefinitions[widgetTypeName]) {\n                        deferred.resolve(cachedDefinitions[widgetTypeName]);\n                    }\n                    else {\n                        $http.get(\"widgets/\" + widgetTypeName + \"/\" + widgetTypeName + \".definition.json?v=\" +\n                            version).success(function (definition) {\n                            deferred.resolve(definition);\n                            cachedDefinitions[widgetTypeName] = definition;\n                        }).error(deferred.reject);\n                    }\n                    return deferred.promise;\n                }, getWidgetTypes: function () {\n                    var deferred = $q.defer();\n                    if (widgetTypes) {\n                        deferred.resolve(angular.copy(widgetTypes));\n                    }\n                    else {\n                        $http.get(\"data/widget_types/widget_types.json?v=\" + version).success(function (widgetTypesList) {\n                            var typesData = {}, typesPromises = [];\n                            angular.forEach(widgetTypesList, function (widgetTypeName) {\n                                typesPromises.push(methods.getWidgetType(widgetTypeName));\n                            });\n                            $q.all(typesPromises).then(function (_widgetTypes) {\n                                angular.forEach(_widgetTypes, function (widgetType, i) {\n                                    widgetType.type = widgetTypesList[i];\n                                    typesData[widgetTypesList[i]] = widgetType;\n                                });\n                                widgetTypes = typesData;\n                                deferred.resolve(angular.copy(typesData));\n                            }, deferred.reject);\n                        }).error(deferred.reject);\n                    }\n                    return deferred.promise;\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    \"use strict\";\n    angular.module(\"Fortscale\").factory(\"packages\", [\"$q\", \"utils\", function ($q, utils) {\n            var cachedPackages = {};\n            var methods = {\n                getPackageById: function (packageId) {\n                    if (cachedPackages[packageId]) {\n                        return $q.when(angular.copy(cachedPackages[packageId]));\n                    }\n                    else {\n                        return utils.http.wrappedHttpGet(\"packages/\" + packageId + \"/\" + packageId +\n                            \".package.json\").then(function (packageConfig) {\n                            try {\n                                cachedPackages[packageId] = packageConfig;\n                                return angular.copy(packageConfig);\n                            }\n                            catch (error) {\n                                return $q.reject(error);\n                            }\n                        });\n                    }\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"FortscaleAuth\", [\"Utils\"]).factory(\"auth\", [\"$q\", \"$http\", \"utils\", \"configFlags\",\n        function ($q, $http, utils, configFlags) {\n            var apiUrl = \"/fortscale-webapp/api/analyst/\", adminApiUrl = \"/fortscale-webapp/api/admin/\";\n            var emailRegExp = /^(([a-zA-Z0-9_.-])+@([a-zA-Z0-9_.-])+\\.([a-zA-Z])+([a-zA-Z])+)?$/;\n            var methods = {\n                changePassword: function (username, currentPassword, newPassword) {\n                    var deferred = $q.defer();\n                    $http({\n                        method: \"POST\",\n                        url: apiUrl + \"changePassword\",\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                        data: $.param({\n                            password: currentPassword,\n                            newPassword: newPassword,\n                            username: username\n                        })\n                    })\n                        .success(function (response) {\n                        deferred.resolve(response);\n                    })\n                        .error(function (error, httpCode) {\n                        deferred.reject(getErrorMessage(error, httpCode));\n                    });\n                    return deferred.promise;\n                },\n                createUser: function (accountData) {\n                    var deferred = $q.defer();\n                    $http({\n                        method: \"POST\",\n                        url: adminApiUrl + \"analyst/addAnalyst\",\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                        data: $.param(accountData)\n                    })\n                        .success(deferred.resolve)\n                        .error(function (error, httpCode) {\n                        deferred.reject(getErrorMessage(error, httpCode));\n                    });\n                    return deferred.promise;\n                },\n                deleteUser: function (username) {\n                    var deferred = $q.defer();\n                    $http({\n                        method: \"POST\",\n                        url: adminApiUrl + \"analyst/disableAnalyst\",\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                        data: $.param({ username: username })\n                    })\n                        .success(deferred.resolve)\n                        .error(function (error, httpCode) {\n                        deferred.reject(getErrorMessage(error, httpCode));\n                    });\n                    return deferred.promise;\n                },\n                editUser: function (accountData) {\n                    var deferred = $q.defer();\n                    $http({\n                        method: \"POST\",\n                        url: apiUrl + \"analyst/update\",\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                        data: $.param(accountData)\n                    })\n                        .success(deferred.resolve)\n                        .error(function (error, httpCode) {\n                        deferred.reject(getErrorMessage(error, httpCode));\n                    });\n                    return deferred.promise;\n                },\n                getAllUsers: function () {\n                    if (configFlags.mockData) {\n                        return utils.http.wrappedHttpGet(\"data/mock_data/admin_users.json\").then(function (results) {\n                            return results.data;\n                        });\n                    }\n                    else {\n                        return utils.http.wrappedHttpGet(adminApiUrl + \"analyst/details\").then(function (results) {\n                            var users = [];\n                            results.data.forEach(function (user) {\n                                user.fullName = user.firstName + \" \" + user.lastName;\n                                users.push(user);\n                            });\n                            return users;\n                        }, function (error, httpCode) {\n                            return $q.reject(getErrorMessage(error, httpCode));\n                        });\n                    }\n                },\n                getCurrentUser: function () {\n                    if (configFlags.mockData) {\n                        return utils.http.wrappedHttpGet(\"data/mock_data/currentUser.json\").then(function (result) {\n                            if (result && result.data) {\n                                var userData = result.data[0];\n                                userData.fullName = [userData.firstName, userData.lastName].join(\" \");\n                                return userData;\n                            }\n                            else {\n                                return $q.reject(\"Current user unavailable.\");\n                            }\n                        });\n                    }\n                    return utils.http.wrappedHttpGet(apiUrl + \"me/details\", { cache: true }).then(function (result) {\n                        if (result && result.data) {\n                            var userData = result.data[0];\n                            userData.fullName = [userData.firstName, userData.lastName].join(\" \");\n                            return userData;\n                        }\n                        else {\n                            return $q.reject(\"Can't get current user\");\n                        }\n                    }, function (error, httpCode) {\n                        return $q.reject(getErrorMessage(error, httpCode));\n                    });\n                },\n                getLastLoggedInUser: function () {\n                    return localStorage.getItem(\"lastUser\");\n                },\n                login: function (username, password, remember) {\n                    var deferred = $q.defer();\n                    $http({\n                        method: \"POST\",\n                        url: apiUrl + \"login\",\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                        data: $.param({\n                            j_username: username,\n                            j_password: password,\n                            _spring_security_remember_me: remember ? \"yes\" : \"no\"\n                        })\n                    })\n                        .success(function (response) {\n                        localStorage.setItem(\"lastUser\", username);\n                        deferred.resolve(response);\n                    })\n                        .error(function (error, httpCode) {\n                        deferred.reject(getErrorMessage(error, httpCode));\n                    });\n                    return deferred.promise;\n                },\n                logout: function () {\n                    $http.post(apiUrl + \"logout\").then(function () {\n                        sessionStorage.removeItem('session-login');\n                        localStorage.removeItem('last-login-time');\n                        window.location.href = window.location.href.replace(/fortscale-webapp\\/.*/, \"fortscale-webapp/signin.html\");\n                    }, function (error) {\n                        alert(\"Logout error: \" + error.data.message);\n                    });\n                },\n                renewPassword: function (user, adminPassword, newPassword) {\n                    return utils.http.wrappedHttpPost(adminApiUrl + \"analyst/renewPassword\", {\n                        password: adminPassword,\n                        username: user,\n                        newPassword: newPassword\n                    });\n                },\n                validateUsername: function (username) {\n                    return emailRegExp.test(username);\n                }\n            };\n            function getErrorMessage(error, httpCode) {\n                var errorMessage = { error: true };\n                switch (httpCode) {\n                    case 401:\n                        errorMessage.message = \"Wrong username or password.\";\n                        break;\n                    case 403:\n                        errorMessage.message = \"Password has expired.\";\n                        errorMessage.expired = true;\n                        break;\n                    case 400:\n                        errorMessage.message = error.message;\n                        break;\n                    default:\n                        errorMessage.message = \"Can't access server (error code \" + httpCode + \").\";\n                }\n                return errorMessage;\n            }\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").factory(\"users\", [function () {\n            return {\n                getSearchSettings: function () {\n                    return {\n                        \"search\": {\n                            \"dataEntity\": \"users\",\n                            \"dataEntityField\": [\"id\", \"normalized_username\"],\n                            \"labelField\": \"display_name\"\n                        },\n                        \"resultField\": \"displayname\",\n                        \"value\": \"{{id}}\",\n                        \"showValueOnSelect\": false,\n                        \"placeholder\": \"All users\",\n                        \"onSelect\": function (e) {\n                            if (e.$value) {\n                                window.location.hash = \"#/user/\" + e.$value + \"/user_overview\";\n                            }\n                        }\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").factory(\"comments\", [\"$q\", function ($q) {\n            var methods = {\n                listToTree: function (comments) {\n                    var tree = [], index = {};\n                    comments.forEach(function (comment) {\n                        index[comment.id] = comment;\n                    });\n                    comments = comments.sort(function (a, b) {\n                        return a.when < b.when ? 1 : -1;\n                    });\n                    comments.forEach(function (comment) {\n                        if (comment.basedOn) {\n                            var replyToComment = index[comment.basedOn];\n                            if (!replyToComment) {\n                                console.error(\"missing comment: \", replyToComment);\n                            }\n                            if (replyToComment.children) {\n                                replyToComment.children.push(comment);\n                            }\n                            else {\n                                replyToComment.children = [comment];\n                            }\n                        }\n                        else {\n                            tree.push(comment);\n                        }\n                        index[comment.id] = comment;\n                    });\n                    return tree;\n                }\n            };\n            return methods;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"MainController\", [\"$scope\", \"$routeParams\", \"dashboards\", \"auth\", \"users\", \"search\", \"reports\", \"configFlags\", \"utils\", \"$state\",\n        \"userUtils\",\n        function ($scope, $routeParams, dashboards, auth, users, search, reports, configFlags, utils, $state, userUtils) {\n            $scope.showBenchmarks = configFlags.qa;\n            $scope.printPage = function () {\n                window.print();\n            };\n            auth.getCurrentUser()\n                .then(function (userData) {\n                if (userData) {\n                    $scope.loggedInUser = userData;\n                }\n                else {\n                    window.location.href = \"/fortscale-webapp/signin.html?redirect=\" +\n                        window.encodeURIComponent(window.location.hash);\n                }\n            });\n            $scope.report = {\n                /**\n                 * An error callback function. It prints out an error to the console, unless error object has a\n                 * redirectToState property, in which case it redirects to the required state.\n                 *\n                 * @param {{message:string, redirectToState:string=}|string} error\n                 */\n                error: function (error) {\n                    var errorStr = typeof (error) === \"string\" ? error : typeof (error.message) === \"string\" ?\n                        error.message : JSON.stringify(error);\n                    if (error.redirectToState) {\n                        console.warn(errorStr);\n                        $state.go(error.redirectToState);\n                    }\n                    else {\n                        console.error(errorStr);\n                    }\n                }\n            };\n            $scope.$on(\"$routeChangeSuccess\", function () {\n                $scope.currentNav = document.location.hash.split(\"?\")[0];\n                //setActiveNavItem();\n                // Visible only when printing a page in the browser (top right)\n                $scope.loadDate = utils.date.getMoment('now', false).format(\"MM/DD/YYYY HH:mm\");\n            });\n            $scope.$on(\"$locationChangeSuccess\", function (e, newUrl, oldUrl) {\n                //reports.abortCurrentReports();\n                $scope.$broadcast(\"locationChange\", {\n                    newUrl: newUrl,\n                    oldUrl: oldUrl\n                });\n                //setActiveNavItem();\n            });\n            $scope.getCurrentNavRedirect = function () {\n                return encodeURIComponent(document.location.hash);\n            };\n            $scope.$on(\"authError\", function (e, data) {\n                $scope.modal = {\n                    show: true,\n                    src: data.status === 403 ? \"views/modals/password_expired.html\" :\n                        \"views/modals/session_expired.html\"\n                };\n            });\n            $scope.setCurrentMainDashboard = function (dashboard) {\n                $scope.currentMainDashboard = null;\n                var dashboardIndex = 0;\n                if ($scope.dashboards) {\n                    for (var i = 0; i < $scope.dashboards.length && !$scope.currentMainDashboard; i++) {\n                        if ($scope.dashboards[dashboardIndex].dashboardId === dashboard) {\n                            $scope.currentMainDashboard = $scope.dashboards[dashboardIndex];\n                        }\n                    }\n                }\n            };\n            $scope.logout = function () {\n                auth.logout();\n            };\n            $scope.sortableOptions = {\n                update: function (e, ui) {\n                },\n                connectWith: \".sortable-contents\",\n                tolerance: \"pointer\",\n                handle: \".widget-header\",\n                forcePlaceholderSize: true,\n                placeholder: \"sortable-placeholder\",\n                cancel: \".widget-dashboard\"\n            };\n            $scope.showPopup = function (popup) {\n                if ($scope.popup) {\n                    $scope.popup = null;\n                }\n                popup.show = true;\n                $scope.popup = popup;\n            };\n            $scope.closePopup = function () {\n                $scope.popupShow = false;\n            };\n            // Add user control settings\n            $scope.userControlSettings = {\n                \"dataValueField\": \"id\",\n                \"dataTextField\": \"fallBackDisplayName\",\n                /**\n                 * Takes received users and creates fallBack display name for each, and prevents duplications.\n                 * @param users\n                 */\n                \"dataTextFn\": function (users) {\n                    userUtils.setFallBackDisplayNames(users);\n                    userUtils.preventFallBackDisplayNameDuplications(users);\n                },\n                \"placeholder\": \"Search User\"\n            };\n            // Add user control resource settings\n            $scope.userControlResource = {\n                \"entity\": \"user\",\n                \"params\": {\n                    \"page\": 1,\n                    \"size\": 10,\n                    \"sort_field\": \"displayName\",\n                    \"sort_direction\": \"ASC\",\n                    \"search_field_contains\": \"{{search}}\"\n                }\n            };\n            /**\n             * Used as state update delegate for the user control. When user control state changes, this method is\n             * invoked, and within, the input is cleaned, and state go is fired.\n             *\n             * @param {{id: string, immediate: boolean, type: string, value: *}}updateObj\n             */\n            $scope.goToUserProfile = function (updateObj) {\n                // Clear user search control\n                $('#main_user_search').find('input').val('');\n                // Go to state\n                $state.go('userOverviewPage.userOverview', { userId: updateObj.value });\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    function MainDashboardController($scope, $q, $routeParams, $location, $timeout, dashboards, utils, transforms, reportsProcess, reports, Report, Cache, Widget, widgets, tags, eventBus, conditions, state, events, DAL) {\n        var locationChangeHandlerTimeout, nonUrlParams = {};\n        $scope.$on(\"$destroy\", function (e, data) {\n            $timeout.cancel(locationChangeHandlerTimeout);\n        });\n        $scope.mainDashboardParams = { entityId: $routeParams.entityId, dashboardId: $routeParams.dashboardId };\n        $scope.isMainDashboard = true;\n        dashboards.getDashboardById($routeParams.dashboardId).then(function (dashboard) {\n            if ($routeParams.subDashboardId) {\n                dashboards.getDashboardById(\"nav_dashboard\").then(function (navDashboard) {\n                    $scope.dashboard = angular.extend(navDashboard, dashboard);\n                    if ($scope.dashboard.params) {\n                        angular.extend($scope.mainDashboardParams, $scope.dashboard.params);\n                    }\n                    $scope.$broadcast(\"onMainDashboard\", { dashboard: dashboard });\n                });\n            }\n            else {\n                $scope.dashboard = dashboard;\n                $scope.$broadcast(\"onMainDashboard\", { dashboard: dashboard });\n            }\n        }, $scope.report.error);\n        var disableLocationChangeListener;\n        $scope.closePopup = function () {\n            $scope.popupShow = false;\n        };\n        var dashboardEvents = {\n            broadcast: function (options) {\n                $scope.$broadcast(options.event, options.data);\n            },\n            clearCache: function (options) {\n                Cache.clearAll();\n            },\n            closeAllPopups: function () {\n                $scope.$broadcast(\"closePopups\");\n            },\n            innerUrl: function (options, data, widgetParams) {\n                var hash = \"#\" + utils.strings.parseValue(options.url, data, widgetParams || $scope.mainDashboardParams);\n                if (options.params) {\n                    var params = {};\n                    for (var paramName in options.params) {\n                        if (options.params.hasOwnProperty(paramName)) {\n                            params[paramName] = utils.strings.parseValue(options.params[paramName], data, widgetParams);\n                        }\n                    }\n                    params = transforms.transformParams(params, options.paramsTransform);\n                    hash += (/\\?/.test(hash) ? \"&\" : \"?\") + \"params=\" + encodeURIComponent(JSON.stringify(params));\n                }\n                hash = hash.replace(/%3A/g, \":\");\n                window.location.hash = hash;\n            },\n            openPopup: function (options, data, params) {\n                var popupWidgetId = options.widgetId || (options.widget && options.widget.widgetId);\n                var popup = {\n                    width: options.width,\n                    height: options.height,\n                    title: utils.strings.parseValue(options.title, data, params),\n                    src: popupWidgetId ? \"views/widgets/standalone_widget.html\" : \"views/pages/dashboard.html\",\n                    show: true,\n                    position: options.position,\n                    data: data,\n                    controls: options.controls\n                };\n                function showPopup() {\n                    if ($scope.popup) {\n                        $scope.popup = null;\n                    }\n                    popup.show = true;\n                    $scope.popup = popup;\n                }\n                if (popupWidgetId) {\n                    DAL.widgets.getWidget(popupWidgetId).then(function (widgetConfig) {\n                        /*\n                         parsing of dynamic report name (name that depends on data source type)\n                         is executed before creation of Widget, since the creation of Report is done within Widget\n                         constructor.\n                         */\n                        if (options.widget && options.widget.reportId) {\n                            widgetConfig.reportId = utils.strings.parseValue(options.widget.reportId, data, params);\n                        }\n                        //returns new Widget\n                        return Widget.loadWidget(widgetConfig);\n                    }).then(function (widgetTemplate) {\n                        var widget = angular.copy(widgetTemplate);\n                        var parsedParams;\n                        if (widget.exploreBased && state.__explore__ && widget.report &&\n                            widget.report.endpoint && widget.report.endpoint.dataQuery) {\n                            var exploreDataQuery = state.__explore__.getFiltersDataQuery();\n                            if (exploreDataQuery.conditions) {\n                                widget.report.endpoint.dataQuery.conditions =\n                                    exploreDataQuery.conditions.terms\n                                        .concat(widget.report.endpoint.dataQuery.conditions.terms);\n                            }\n                            widget.report.endpoint.dataQuery.entity = state.__explore__.dataEntity.id;\n                            if (widget.report.endpoint.dataQuery.entitiesJoin) {\n                                widget.report.endpoint.dataQuery.entitiesJoin.joinFields.left =\n                                    widget.report.endpoint.dataQuery.entity + \".\" +\n                                        widget.report.endpoint.dataQuery.entitiesJoin.joinFields.left;\n                            }\n                        }\n                        if (options.widget) {\n                            angular.extend(widget, options.widget);\n                        }\n                        if (options.params) {\n                            parsedParams = {};\n                            var paramValue;\n                            for (var paramName in options.params) {\n                                if (options.params.hasOwnProperty(paramName)) {\n                                    paramValue = options.params[paramName];\n                                    parsedParams[utils.strings.parseValue(paramName, data, params)] =\n                                        typeof (paramValue) === \"string\" ?\n                                            utils.strings.parseValue(paramValue, data, params) : paramValue;\n                                }\n                            }\n                        }\n                        if (!widget.className) {\n                            widget.className = \"no-shadow\";\n                        }\n                        if (!widget.flags) {\n                            widget.flags = { noBorder: true };\n                        }\n                        else {\n                            widget.flags.noBorder = true;\n                        }\n                        popup.scope = {\n                            widget: widget,\n                            params: angular.extend({}, params, parsedParams)\n                        };\n                        var popupParent = angular.copy($scope.dashboard);\n                        popupParent = angular.extend(popupParent, { params: parsedParams });\n                        widget.setParent(popupParent);\n                        widget.refresh();\n                        showPopup();\n                    });\n                }\n                else {\n                    showPopup();\n                }\n            },\n            refreshAll: function (options) {\n                widgets.refreshAll();\n            },\n            refreshTags: function (options) {\n                $scope.dashboard.runReports();\n                if ($scope.dashboard.details.tags) {\n                    tags.getTags($scope.dashboard.details.tags, state.currentParams[options.dashboardParam] || {})\n                        .then(function (dashboardTags) {\n                        $scope.dashboard.details.parsedTags = dashboardTags;\n                    });\n                }\n            },\n            runReport: function (options, data, widgetParams) {\n                var report;\n                if (!options.report && !options.reportId) {\n                    return;\n                }\n                if (options.report) {\n                    report = options.report;\n                }\n                else if (options.reportId) {\n                    reports.getReport(options.reportId).then(function (_report) {\n                        report = _report;\n                        doRunReport();\n                    }, function (error) {\n                        console.error(\"Can't find report with ID %s: \", options.reportId, error);\n                    });\n                }\n                function doRunReport() {\n                    report = utils.objects.extend(report, options.reportParams);\n                    reports.runReport(new Report(report), utils.objects.extend(widgetParams, data), true)\n                        .then(function (results) {\n                        if (options.onResults) {\n                            $scope.dashboardEvent(utils.objects.extend(options.onResults, {\n                                data: data,\n                                params: widgetParams\n                            }));\n                        }\n                    }, function (error) {\n                        console.error(options.onError && options.onError.alert || \"Error running report: \", error, \". Report: \", options.report);\n                    });\n                }\n            },\n            setParams: function (options, data) {\n                var params = {}, paramValue, paramData, paramStrConfig, useParam, parsedParamName, urlParams = {}, existingParamValue;\n                function getParamValue(paramConfig) {\n                    var paramValue;\n                    if (paramConfig) {\n                        paramValue = angular.isString(paramConfig.value || paramConfig) ?\n                            utils.strings.parseValue(paramConfig.value || paramConfig, paramData || {}, $scope.mainDashboardParams, undefined, true) :\n                            paramConfig.value || paramConfig;\n                    }\n                    else if (paramConfig === null) {\n                        paramValue = null;\n                    }\n                    else if (angular.isObject(options.params[paramName]) && options.params[paramName].dataValue) {\n                        paramValue = paramData[options.params[paramName].dataValue];\n                    }\n                    else {\n                        paramValue = paramConfig;\n                    }\n                    return paramValue;\n                }\n                function addUrlParams(paramName, paramConfig, paramValue) {\n                    if (!urlParams[paramName]) {\n                        urlParams[paramName] = [];\n                    }\n                    if (angular.isArray(paramConfig)) {\n                        paramConfig.forEach(function (param) {\n                            addUrlParams(paramName, param, getParamValue(param));\n                        });\n                    }\n                    else {\n                        urlParams[paramName].push(paramConfig && paramConfig.setToUrl === false ? null : paramValue);\n                    }\n                }\n                for (var paramName in options.params) {\n                    if (options.params.hasOwnProperty(paramName)) {\n                        parsedParamName = utils.strings.parseValue(paramName, data, $scope.mainDashboardParams);\n                        paramStrConfig = options.params[paramName];\n                        useParam = true;\n                        if (angular.isArray(data) && angular.isObject(paramStrConfig)) {\n                            paramData = data[paramStrConfig.itemIndex || 0];\n                            if (paramStrConfig.setIf) {\n                                if (!paramData[paramStrConfig.setIf]) {\n                                    useParam = false;\n                                }\n                            }\n                            else {\n                                paramStrConfig = paramStrConfig.value;\n                            }\n                        }\n                        else {\n                            paramData = data;\n                        }\n                        if (!useParam) {\n                            continue;\n                        }\n                        if (options.updateUrl === false) {\n                            nonUrlParams[paramName] = true;\n                        }\n                        else {\n                            delete nonUrlParams[paramName];\n                        }\n                        paramValue = getParamValue(paramStrConfig);\n                        if (parsedParamName === \"filters\") {\n                            existingParamValue = state.currentParams.filters;\n                        }\n                        else {\n                            existingParamValue = $scope.mainDashboardParams[parsedParamName];\n                        }\n                        if (options.addToParam && existingParamValue) {\n                            // If the paramValue already exists in the param, there's no need to add it:\n                            if (typeof (existingParamValue) === \"string\" &&\n                                ~existingParamValue.split(\",\").indexOf(paramValue)) {\n                                continue;\n                            }\n                            paramValue = existingParamValue + \",\" + paramValue;\n                        }\n                        params[parsedParamName] = paramValue;\n                        addUrlParams(parsedParamName, paramStrConfig, paramValue);\n                    }\n                }\n                params = transforms.transformParams(params, options.paramsTransform);\n                angular.extend($scope.mainDashboardParams, params);\n                state.setParams(params, false);\n                if (options.updateUrl !== false) {\n                    setParamsToUrl(urlParams);\n                    state.setParams(urlParams);\n                }\n                if (params && Object.keys(params).length) {\n                    eventBus.triggerEvent(\"dashboardParamsChange\", params);\n                }\n            },\n            showTooltip: function (options, data, params) {\n                var tooltipContents = {}, tooltipOptions = options;\n                if (options.switch) {\n                    tooltipOptions = options.switchCases[data[options.switch]];\n                }\n                if (tooltipOptions.table && tooltipOptions.table.rows) {\n                    tooltipContents.table = { rows: [] };\n                    tooltipOptions.table.rows.forEach(function (row) {\n                        tooltipContents.table.rows.push({\n                            label: utils.strings.parseValue(row.label, data, params),\n                            value: utils.strings.parseValue(row.value, data, params)\n                        });\n                    });\n                }\n                tooltipContents.text = tooltipOptions.text;\n                $scope.tooltipContents = tooltipContents;\n                $scope.tooltipOpen = true;\n                $scope.tooltipPosition = options.position;\n            }\n        };\n        $scope.$on(\"dashboardEvent\", function (e, data) {\n            $scope.dashboardEvent(data);\n        });\n        events.onDashboardEvent.subscribe(function (e, data) {\n            $scope.dashboardEvent(data);\n        });\n        $scope.dashboardEvent = function (data) {\n            if (data.event) {\n                runEvent(data.event, data.data, data.params);\n            }\n            else if (data.events) {\n                angular.forEach(data.events, function (event) {\n                    runEvent(event, data.data, data.params);\n                });\n            }\n        };\n        // Shortcut for setParams dashboardEvent:\n        $scope.setParams = function (params, updateUrl) {\n            $scope.dashboardEvent({\n                event: {\n                    action: \"setParams\",\n                    actionOptions: {\n                        updateUrl: updateUrl,\n                        params: params\n                    }\n                }\n            });\n        };\n        $scope.innerUrl = function (url) {\n            $scope.dashboardEvent({\n                event: {\n                    action: \"innerUrl\",\n                    actionOptions: {\n                        url: url\n                    }\n                }\n            });\n        };\n        $scope.menuSelect = function ($event, item, data, menu, widgetParams) {\n            var preSelectData;\n            function doSelect() {\n                var events = angular.copy(item.onSelect), eventData = menu.params ? {} : data, params = widgetParams;\n                if (!angular.isArray(events)) {\n                    events = [events];\n                }\n                if (menu.params) {\n                    var param;\n                    for (var paramName in menu.params) {\n                        if (menu.params.hasOwnProperty(paramName)) {\n                            param = menu.params[paramName];\n                            if (typeof (param) === \"string\") {\n                                eventData[paramName] = utils.strings.parseValue(menu.params[paramName], data, params);\n                            }\n                            else if (angular.isObject(param) && param.dashboardParam) {\n                                eventData[paramName] = params[param.dashboardParam];\n                            }\n                        }\n                    }\n                }\n                events.forEach(function (event) {\n                    if (!event.actionOptions) {\n                        event.actionOptions = {};\n                    }\n                    event.actionOptions.position = { top: $event.clientY, left: $event.clientX };\n                });\n                $scope.dashboardEvent({\n                    events: events,\n                    data: angular.extend(eventData, preSelectData),\n                    params: widgetParams\n                });\n            }\n            if (item.onSelect) {\n                if (item.preSelectReport && (conditions.validateConditions(item.preSelectReport.conditions, data, menu.params) === true)) {\n                    Report.loadReport({ reportId: item.preSelectReport.reportId }).then(function (preSelectReport) {\n                        // resolve params\n                        var itemParams = item.params ? {} : data;\n                        if (item.params) {\n                            var param;\n                            for (var parameterName in item.params) {\n                                if (item.params.hasOwnProperty(parameterName)) {\n                                    param = item.params[parameterName];\n                                    if (typeof (param) === \"string\") {\n                                        itemParams[parameterName] =\n                                            utils.strings.parseValue(item.params[parameterName], data);\n                                    }\n                                }\n                            }\n                        }\n                        // send request for preSelectReport\n                        reports.runReport(preSelectReport, angular.extend({}, widgetParams, itemParams, data))\n                            .then(function (results) {\n                            preSelectData = results.data.length && item.preSelectReport.singleResult ?\n                                results.data[0] : results;\n                            doSelect();\n                        });\n                    }, function (error) {\n                        console.error(\"Can't get preSelectReport: \", error);\n                    });\n                }\n                else {\n                    doSelect();\n                }\n            }\n        };\n        function runEvent(event, data, params) {\n            if (event && event.action) {\n                var action = dashboardEvents[event.action];\n                if (action) {\n                    if (event.process) {\n                        $q.when(reportsProcess.processData(event.process.processId, data, event.process.params))\n                            .then(function (processedData) {\n                            action(event.actionOptions, processedData.data.length && processedData.data[0], params);\n                        }, function (error) {\n                            console.error(\"Can't process data for event: \", error);\n                        });\n                    }\n                    else {\n                        action(event.actionOptions, data, params);\n                    }\n                }\n                else {\n                    console.error(\"Action not found: \", event.action);\n                }\n            }\n        }\n        $scope.onControlParamsChange = function (control) {\n            if (control.updateDataOnChange) {\n                setControlParamsToDashboard(control);\n                setParamsToUrl();\n            }\n        };\n        function setControlParamsToDashboard(control, useExistingParamsIfAvailable) {\n            if (control.params) {\n                var transformedParams = transforms.transformParams(control.params, control.paramsTransform);\n                for (var paramName in transformedParams) {\n                    if (!useExistingParamsIfAvailable || $scope.mainDashboardParams[paramName] === undefined) {\n                        $scope.mainDashboardParams[paramName] = transformedParams[paramName];\n                    }\n                }\n            }\n        }\n        function setParamsToUrl(urlParams) {\n            var paramsObj = urlParams || angular.copy($scope.mainDashboardParams), currentUrlParams = $location.search(), paramValue;\n            delete paramsObj.entityId;\n            for (var paramName in paramsObj) {\n                if (paramsObj.hasOwnProperty(paramName)) {\n                    paramValue = paramsObj[paramName];\n                    if (angular.isArray(paramValue) && (!paramValue.length || (paramValue.length === 1 &&\n                        paramValue[0] === null))) {\n                        paramValue = null;\n                    }\n                    if (paramValue === null || (paramValue && paramValue.length > 200)) {\n                        delete paramsObj[paramName];\n                    }\n                    // If there's a query param of the same name as the param, remove it.\n                    if (currentUrlParams[paramName]) {\n                        $location.search(paramName, null);\n                    }\n                    //$location.search(paramName, angular.isObject(paramValue) ?\n                    // JSON.stringify(paramValue) : paramValue);\n                    $location.search(paramName, paramValue);\n                }\n            }\n            disableLocationChangeListener = true;\n            locationChangeHandlerTimeout = $timeout(function () {\n                disableLocationChangeListener = false;\n            }, 15);\n        }\n    }\n    MainDashboardController.$inject = [\n        \"$scope\", \"$q\", \"$routeParams\",\n        \"$location\", \"$timeout\", \"dashboards\",\n        \"utils\", \"transforms\", \"reportsProcess\",\n        \"reports\", \"Report\", \"Cache\", \"Widget\", \"widgets\", \"tags\",\n        \"eventBus\", \"conditions\", \"state\", \"events\", \"DAL\"];\n    angular.module(\"Fortscale\")\n        .controller(\"MainDashboardController\", MainDashboardController);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .controller(\"DashboardController\", [\"$scope\", \"transforms\", \"utils\", \"eventBus\", \"reports\", \"tags\", \"menus\", \"page\", \"state\", \"events\",\n        function ($scope, transforms, utils, eventBus, reports, tags, menus, page, state, events) {\n            var defaultMessages = {\n                requiredParams: { text: \"Missing parameters.\", type: \"error\" }\n            };\n            function setDashboardFieldValues(dashboard) {\n                if (dashboard) {\n                    if (dashboard.title) {\n                        page.setPageTitle(dashboard.title);\n                    }\n                    //if browserTitle attribute is found in dashboard json file it overrides the page title\n                    // with its value\n                    if (dashboard.browserTitle) {\n                        page.setPageTitle(dashboard.browserTitle);\n                    }\n                    if (dashboard.navigation) {\n                        parseNavigation(dashboard.navigation, state.currentParams);\n                    }\n                    if (dashboard.iconUrl) {\n                        var dashboardIconUrl = utils.strings.parseValue(dashboard.iconUrl, {}, state.currentParams);\n                        $scope.dashboardIconUrl = dashboardIconUrl || null;\n                    }\n                    if (dashboard.details) {\n                        dashboard.currentDetails = {};\n                        var detailValue, detailName;\n                        for (detailName in dashboard.details) {\n                            if (dashboard.details.hasOwnProperty(detailName)) {\n                                detailValue = dashboard.details[detailName];\n                                if (typeof (detailValue) === \"string\") {\n                                    dashboard.currentDetails[detailName] = utils.strings.parseValue(detailValue, {}, state.currentParams);\n                                }\n                            }\n                        }\n                        setDashboardDetailsMenu(dashboard);\n                        if (dashboard.details.tags) {\n                            tags.getTags(dashboard.details.tags, state.currentParams || {})\n                                .then(function (dashboardTags) {\n                                $scope.dashboard.details.parsedTags = dashboardTags;\n                            });\n                        }\n                    }\n                    dashboard._renderHeader = dashboard.renderHeader !== false &&\n                        (dashboard.controls && dashboard.controls.length ||\n                            dashboard.title || dashboard.description);\n                    if (!(dashboard.allRequiredParamsAvailable = checkRequiredParams())) {\n                        dashboard._messages = [dashboard.messages && dashboard.messages.requiredParams ||\n                                defaultMessages.requiredParams];\n                    }\n                    else {\n                        dashboard._messages = null;\n                    }\n                }\n            }\n            function onParamsChange() {\n                if ($scope.dashboard) {\n                    $scope.dashboard.checkReady();\n                    $scope.dashboard.update();\n                    setDashboardFieldValues($scope.dashboard);\n                }\n            }\n            function setDashboardDetailsMenu(dashboard) {\n                if (dashboard.details.menu) {\n                    menus.getMenu(dashboard.details.menu, {}, state.currentParams).then(function (menu) {\n                        $scope.dashboard.details.parsedMenu = menu;\n                    });\n                }\n            }\n            function checkRequiredParams() {\n                if (!$scope.dashboard.requiredParams) {\n                    return true;\n                }\n                for (var i = 0, param; undefined !== (param = $scope.dashboard.requiredParams[i]); i++) {\n                    if (!state.currentParams[param]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            function parseNavigation(rootItem, params) {\n                if (rootItem.url) {\n                    rootItem.href = utils.strings.parseValue(rootItem.url, {}, params);\n                }\n                if (rootItem.children) {\n                    rootItem.children.forEach(function (item) {\n                        parseNavigation(item, params);\n                    });\n                }\n            }\n            function onDashboard(dashboard) {\n                setDashboardFieldValues(dashboard);\n                if (dashboard) {\n                    dashboard.paramsReady = !dashboard.controls;\n                }\n            }\n            setDashboardFieldValues($scope.dashboard);\n            $scope.getDashboardParams = function () {\n                return state.currentParams;\n            };\n            $scope.dashboardSubtitle = null;\n            $scope.dashboardIconUrl = null;\n            $scope.setParams = state.setParams;\n            $scope.showDashboardNameDescription = function ($event) {\n                events.triggerDashboardEvent({\n                    action: \"showTooltip\",\n                    actionOptions: {\n                        text: $scope.dashboardNameDescription,\n                        position: { top: $event.clientY, left: $event.clientX }\n                    }\n                });\n            };\n            $scope.$on(\"$destroy\", function (e, data) {\n                state.onStateChange.unsubscribe(onParamsChange);\n            });\n            $scope.$on(\"refresh\", function () {\n                if ($scope.dashboard) {\n                    $scope.dashboard.runReports();\n                }\n            });\n            state.onStateChange.subscribe(onParamsChange);\n            $scope.$on(\"onMainDashboard\", function (e, data) {\n                onDashboard(data.dashboard);\n            });\n            $scope.$watch(\"dashboard\", onDashboard);\n            if ($scope.dashboard) {\n                onDashboard($scope.dashboard);\n            }\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .controller(\"WidgetControlController\", [\"$scope\", \"controls\", \"eventBus\", \"events\",\n        function ($scope, controls, eventBus, events) {\n            function onParamsChange(e, changedParams) {\n                for (var i = 0; i < $scope.control.refreshOn.length; i++) {\n                    if (changedParams[$scope.control.refreshOn[i]] !== undefined) {\n                        controls.initControl($scope.control, $scope.params, angular.extend($scope.getWidgetParams(), changedParams));\n                        return;\n                    }\n                }\n            }\n            $scope.onEvent = function (e, eventConfig) {\n                if (eventConfig) {\n                    events.triggerDashboardEvent(eventConfig);\n                }\n            };\n            function init() {\n                var widgetParams = $scope.getWidgetParams ? $scope.getWidgetParams() : $scope.mainDashboardParams;\n                controls.initControl($scope.control, $scope.params, widgetParams);\n                if ($scope.control.refreshOn) {\n                    eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n                }\n                $scope.$on(\"$destroy\", function () {\n                    eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n                });\n            }\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"ButtonsBarWidgetController\", [\"$scope\", \"events\", function ($scope, events) {\n            $scope.btnClick = function (button) {\n                if (button.toggleOnClick) {\n                    button.on = !button.on;\n                }\n                angular.forEach($scope.view.settings.events, function (event) {\n                    if (event.eventName === \"click\") {\n                        events.triggerDashboardEvent(event);\n                    }\n                });\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .run([\"widgetViews\", function (widgetViews) {\n            widgetViews.registerView(\"dashboardWidget\", {});\n        }])\n        .controller(\"DashboardWidgetController\", [\"$scope\", \"dashboards\", \"utils\", \"$timeout\", \"eventBus\", \"state\",\n        function ($scope, dashboards, utils, $timeout, eventBus, state) {\n            var setDashboardTimeout, currentDashboardId;\n            $scope.dashboard = null;\n            $scope.isDashboardWidget = true;\n            $scope.$on(\"$destroy\", function () {\n                $timeout.cancel(setDashboardTimeout);\n                state.onStateChange.unsubscribe(onParamsChange);\n            });\n            function allParamsAvailable(params) {\n                var paramValue;\n                for (var i = 0; i < $scope.view.settings.requiredParams.length; i++) {\n                    paramValue = params[$scope.view.settings.requiredParams[i]];\n                    if (!paramValue && paramValue !== 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            function setDashboard(dashboardId) {\n                $scope.dashboard = null;\n                setDashboardTimeout = $timeout(function () {\n                    currentDashboardId = dashboardId;\n                    dashboards.getDashboardById(dashboardId).then(function (dashboard) {\n                        $scope.dashboard = angular.extend(dashboard, $scope.view.settings);\n                        if ($scope.dashboard.params && $scope.mainDashboardParams) {\n                            utils.objects.extend($scope.mainDashboardParams, $scope.dashboard.params);\n                        }\n                    }, function (error) {\n                        console.error(\"Can't load dashboard: \", error);\n                    });\n                }, 40);\n            }\n            function init() {\n                var widgetParams = state.currentParams;\n                currentDashboardId = utils.strings.parseValue($scope.view.settings.defaultDashboardId ||\n                    $scope.view.settings.dashboardId, {}, widgetParams);\n                if (currentDashboardId &&\n                    (!$scope.view.settings.requiredParams || allParamsAvailable(widgetParams))) {\n                    setDashboard(currentDashboardId);\n                }\n                if ($scope.view.settings.dashboardId) {\n                    state.onStateChange.subscribe(onParamsChange);\n                }\n            }\n            function onParamsChange(e, params) {\n                var dashboardId = utils.strings.parseValue($scope.view.settings.dashboardId, {}, state.currentParams);\n                if (dashboardId && dashboardId !== currentDashboardId) {\n                    currentDashboardId = dashboardId;\n                    if (!$scope.view.settings.requiredParams || allParamsAvailable(params)) {\n                        setDashboard(dashboardId);\n                    }\n                }\n                if ($scope.dashboard) {\n                    $scope.dashboard.update();\n                }\n            }\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .run([\"widgetViews\", function (widgetViews) {\n            widgetViews.registerView(\"htmlWidget\", {});\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"ItemsListController\", [\"$scope\", function ($scope) {\n            var defaultListItemDisplayCount = 5, graceLimitCount = 3;\n            function setLimit() {\n                $scope.limit = 999999999;\n                $scope.disableLimit = false;\n                $scope.showAllItems = false;\n                if ($scope.view.settings.limit && $scope.items.length > $scope.view.settings.limit + graceLimitCount) {\n                    $scope.limit = $scope.view.settings.limit;\n                }\n                else {\n                    $scope.disableLimit = true;\n                }\n            }\n            $scope.showAll = function (item) {\n                item.enableShowLess = true;\n                angular.forEach(item.list, function (listItem) {\n                    listItem.enabled = true;\n                });\n            };\n            $scope.showLess = function (item) {\n                item.enableShowLess = false;\n                angular.forEach(item.list, function (listItem, index) {\n                    listItem.enabled = index < defaultListItemDisplayCount;\n                });\n            };\n            $scope.setLimit = function (limit, showAll) {\n                $scope.limit = limit;\n                $scope.showAllItems = !!showAll;\n            };\n            $scope.$on(\"onWidgetData\", setLimit);\n            setLimit();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"MonitoringController\", [\"$scope\", \"reports\", function ($scope, reports) {\n            $scope.getJob = function (job) {\n                if (!job.steps) {\n                    reports.runReport(getJobDataReport(job.id), job, true).then(function (results) {\n                        job.steps = results.steps;\n                    });\n                }\n                job.isOpen = !job.isOpen;\n            };\n            function getJobDataReport(jobId) {\n                return {\n                    \"mock_data\": \"monitor_\" + jobId\n                };\n            }\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"RepeaterWidget\", [\"Utils\", \"Widgets\"])\n        .run([\"widgetViews\", function (widgetViews) {\n            widgetViews.registerView(\"repeater\", {});\n        }])\n        .controller(\"RepeaterWidgetController\", [\"$scope\", \"widgets\", \"$q\", \"utils\", function ($scope, widgets, $q, utils) {\n            $scope.widgetype = $scope.view.settings.widgetType;\n            var promises = [];\n            function addView(viewData) {\n                var view = {\n                    settings: $scope.view.settings.widgetSettings,\n                    type: $scope.view.settings.widgetType,\n                    rawData: viewData\n                };\n                $scope.repeaterViews.push(view);\n                promises.push(widgets.setViewValues(view, viewData, $scope.getWidgetParams()));\n            }\n            function init() {\n                $scope.repeaterViews = [];\n                promises = [];\n                if ($scope.view.settings.title && $scope.view.data && $scope.view.data.length) {\n                    $scope.repeaterTitle = utils.strings.parseValue($scope.view.settings.title, $scope.view.data[0], $scope.getWidgetParams());\n                }\n                angular.forEach($scope.view.data, function (viewData) {\n                    if ($scope.view.settings.repeatField) {\n                        angular.forEach(viewData[$scope.view.settings.repeatField], addView);\n                    }\n                    else {\n                        addView(viewData);\n                    }\n                });\n                $q.all(promises).then(function (viewsData) {\n                    angular.forEach(viewsData, function (viewData, i) {\n                        $scope.repeaterViews[i].data = viewData;\n                    });\n                });\n            }\n            $scope.$on(\"onWidgetData\", init);\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"PackageController\", [\"$scope\", \"packages\", \"utils\", \"conditions\", \"search\", \"eventBus\",\n        function ($scope, packages, utils, conditions, search, eventBus) {\n            var packageId, requiredParams, controlParamNames = [];\n            $scope.$on(\"$destroy\", function () {\n                eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n            });\n            $scope.onControlChange = function (control, value, label) {\n                $scope.paramChange = true;\n                control.value = value;\n                if (control.type === \"search\" && label) {\n                    control.valueLabel = label;\n                }\n                setAllRequiredParamsAvailable(false);\n                setDependantControls(control, value);\n            };\n            $scope.onControlBlur = function (control) {\n                if (!control.value && control.default) {\n                    control.value = control.default;\n                }\n            };\n            $scope.updateParams = function () {\n                if (!$scope.paramChange || !$scope.paramsReadyToRun) {\n                    return;\n                }\n                var params = getParamsFromControls();\n                setAllRequiredParamsAvailable(true);\n                $scope.setParams(params.urlParams);\n                $scope.setParams(params.innerParams, false);\n                $scope.paramChange = false;\n                setLinkToHref(params.innerParams);\n            };\n            $scope.setPackageError = function (error) {\n                clearMessages();\n                $scope.packageError = error;\n            };\n            $scope.setPackageLoading = function (isLoading) {\n                clearMessages();\n                $scope.packageLoading = isLoading;\n            };\n            $scope.setPackageNoData = function (noData) {\n                clearMessages();\n                $scope.packageNoData = !!noData;\n            };\n            function clearMessages() {\n                $scope.packageError = $scope.packageLoading = $scope.packageNoData = null;\n            }\n            function setDependantControls(srcControl, value) {\n                $scope.currentPackage.controls.forEach(function (control) {\n                    if (srcControl !== control) {\n                        var dependency = control.dependencies && control.dependencies[srcControl.param];\n                        if (dependency) {\n                            if (control.type === \"date\") {\n                                if (dependency === \"lesserThan\") {\n                                    control.maxValue =\n                                        value !== undefined && value !== null ? value : control.settings.maxDate;\n                                }\n                                else if (dependency === \"greaterThan\") {\n                                    control.minValue =\n                                        value !== undefined && value !== null ? value : control.settings.minDate;\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            function setLinkToHref(params) {\n                var urlParams = [], paramValue, linkParams;\n                function populateUrlParams(d) {\n                    if (d) {\n                        urlParams.push(paramName + \"=\" + encodeURIComponent(d));\n                    }\n                }\n                for (var paramName in params) {\n                    if (params.hasOwnProperty(paramName)) {\n                        paramValue = params[paramName];\n                        if (angular.isArray(paramValue)) {\n                            paramValue.forEach(populateUrlParams);\n                        }\n                        else if (paramValue) {\n                            urlParams.push(paramName + \"=\" + encodeURIComponent(paramValue));\n                        }\n                    }\n                }\n                linkParams = angular.extend(getParamsFromControls(), params);\n                if ($scope.currentPackage.linkTo) {\n                    $scope.currentPackage.links =\n                        angular.isArray($scope.currentPackage.linkTo) ? $scope.currentPackage.linkTo :\n                            [$scope.currentPackage.linkTo];\n                    $scope.currentPackage.links.forEach(function (link) {\n                        link.href = utils.strings.parseValue(link.url, { params: urlParams.join(\"&\") }, linkParams);\n                    });\n                }\n                if ($scope.currentPackage.multiLink) {\n                    $scope.currentPackage.multiLink.links.forEach(function (link) {\n                        link.href =\n                            utils.url.escapeUrl(utils.strings.parseValue(link.url, { params: urlParams.join(\"&\") }, linkParams));\n                    });\n                }\n            }\n            function getParamsFromControls() {\n                if (!$scope.currentPackage.controls) {\n                    return;\n                }\n                var params = { urlParams: {} }, widgetParams = $scope.getWidgetParams();\n                $scope.currentPackage.controls.forEach(function (control) {\n                    var innerParam, paramValue;\n                    paramValue = params.urlParams[control.param] = !control.value ? null :\n                        control.formatParam ?\n                            utils.strings.parseValue(control.formatParam, { value: control.value }, widgetParams) :\n                            control.value;\n                    if (paramValue !== undefined && paramValue !== null) {\n                        params[control.param] = paramValue;\n                    }\n                    if (control.value && control.valueLabel) {\n                        params.urlParams[control.param + \"_label\"] = control.valueLabel;\n                    }\n                    if (control.innerParam) {\n                        if (!params.innerParams) {\n                            params.innerParams = {};\n                        }\n                        else {\n                            innerParam = params.innerParams[control.innerParam.name];\n                        }\n                        var innerParamValue = getInnerParamValue(control, paramValue);\n                        if (innerParam) {\n                            params.innerParams[control.innerParam.name + \"_conjuction\"] = \"AND\";\n                            if (!angular.isArray(innerParam)) {\n                                params.innerParams[control.innerParam.name] = [innerParam];\n                            }\n                            params.innerParams[control.innerParam.name].push(innerParamValue);\n                        }\n                        else {\n                            params.innerParams[control.innerParam.name] = innerParamValue;\n                        }\n                    }\n                });\n                return params;\n            }\n            function getInnerParamValue(control, paramValue) {\n                return control.innerParam.type && control.innerParam.type !== \"equals\" && paramValue ?\n                    conditions.getParamOperator(control.innerParam.type) + paramValue : paramValue;\n            }\n            function setControlParams() {\n                var widgetParams = $scope.getWidgetParams(), innerParams;\n                requiredParams = {};\n                $scope.currentPackage.controls.forEach(function (control) {\n                    var paramValue = widgetParams[control.param] || control.defaultValue;\n                    if (paramValue) {\n                        if (control.type === \"date\") {\n                            control.value = utils.date.getMoment(paramValue) || null;\n                            if (control.value) {\n                                control.value = control.value.toDate();\n                            }\n                        }\n                        else if (control.type === \"number\") {\n                            control.value = parseInt(paramValue, 10);\n                        }\n                        else if (control.type === \"boolean\") {\n                            control.value = paramValue !== \"false\";\n                        }\n                        else if (control.type === \"search\") {\n                            control.value = widgetParams[control.param];\n                            control.valueLabel = widgetParams[control.param + \"_label\"];\n                        }\n                        else {\n                            control.value = paramValue;\n                        }\n                        if (control.innerParam) {\n                            if (!innerParams) {\n                                innerParams = {};\n                            }\n                            var innerParam = innerParams[control.innerParam.name];\n                            if (!innerParam) {\n                                innerParam = innerParams[control.innerParam.name] = [];\n                            }\n                            else {\n                                innerParams[control.innerParam.name + \"_conjuction\"] = \"AND\";\n                            }\n                            innerParam.push(getInnerParamValue(control, paramValue));\n                        }\n                    }\n                    if (control.isRequired) {\n                        requiredParams[control.param] = control.label;\n                    }\n                });\n                setAllRequiredParamsAvailable(true);\n                if (innerParams) {\n                    $scope.setParams(innerParams, false);\n                }\n                setLinkToHref(innerParams || {});\n            }\n            function setAllRequiredParamsAvailable(setParamsReady) {\n                var allRequiredParamsAvailable = true, requiredParamNames = [];\n                if ($scope.currentPackage.controls) {\n                    for (var i = 0, control; !!(control = $scope.currentPackage.controls[i]); i++) {\n                        if (control.isRequired && !control.value) {\n                            allRequiredParamsAvailable = false;\n                            requiredParamNames.push(control.label.toLowerCase());\n                        }\n                        if (control.disableConditions) {\n                            control.disabled = conditions.validateConditions(control.disableConditions, getParamsFromControls().urlParams, {});\n                        }\n                    }\n                }\n                $scope.paramsReadyToRun = allRequiredParamsAvailable;\n                if (setParamsReady) {\n                    $scope.paramsReady = allRequiredParamsAvailable;\n                }\n                $scope.requiredParamNames = $scope.paramsReady ? null : utils.arrays.toSentence(requiredParamNames);\n            }\n            function setSearchSettings() {\n                $scope.currentPackage.controls.forEach(function (control) {\n                    if (control.type === \"search\" && control.settings.search) {\n                        control.settings.search = control.settings.search.params ?\n                            search[control.settings.search.entity].bind(this, control.settings.search.params) :\n                            search[control.settings.search.entity];\n                    }\n                });\n            }\n            function init() {\n                var params = $scope.getWidgetParams();\n                packageId = params.entityId ||\n                    $scope.dashboard.navigation.children[0].children[0].url.match(/package\\/(.*)$/)[1];\n                packages.getPackageById(packageId).then(function (packageConfig) {\n                    $scope.setParams({\n                        packageName: { value: packageConfig.name, setToUrl: false },\n                        packageDescription: { value: packageConfig.description, setToUrl: false }\n                    }, false);\n                    $scope.currentPackage = packageConfig;\n                    $scope.currentPackage.renderParams =\n                        packageConfig.controls || packageConfig.linkTo || packageConfig.multiLink;\n                    if ($scope.currentPackage.controls) {\n                        setControlParams();\n                        setSearchSettings();\n                        $scope.currentPackage.controls.forEach(function (control) {\n                            controlParamNames.push(control.param);\n                        });\n                        eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n                    }\n                    else {\n                        $scope.paramsReady = true;\n                        $scope.paramsReadyToRun = true;\n                        setLinkToHref(params);\n                    }\n                }, function (error) {\n                    console.error(\"Can't load package: \", error);\n                });\n            }\n            function onParamsChange(e, changedParams) {\n                if (utils.objects.containsAnyParam(changedParams, controlParamNames)) {\n                    $scope.$broadcast(\"packageParamsChange\", changedParams);\n                }\n            }\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .controller(\"PopupController\", [\"$scope\", function ($scope) {\n            $scope.isPopup = true;\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('simplePagination', []).directive('simplePagination', [\"$parse\", \"$timeout\", \"utils\", function ($parse, $timeout, utils) {\n            return {\n                templateUrl: \"views/controls/simplePagination.html\",\n                restrict: 'E',\n                scope: {\n                    page: \"=\",\n                    pageSize: \"=\",\n                    onSelect: \"&\",\n                    hideIfEmpty: \"=\",\n                    total: \"=\"\n                },\n                replace: true,\n                link: function postLink(scope, element) {\n                    function setPages() {\n                        if (!isNaN(scope.total) && !isNaN(scope.pageSize)) {\n                            scope.pageCount = Math.ceil(scope.total / scope.pageSize);\n                        }\n                        if (isNaN(scope.page)) {\n                            scope.page = 1;\n                        }\n                        scope.pageInput = scope.page;\n                        if (scope.pageCount) {\n                            scope.pageInputWidth = (scope.pageCount.toString().length + 1) + \"em\";\n                        }\n                    }\n                    function setWaitTime() {\n                        $timeout.cancel(waitTimeout);\n                        wait = true;\n                        waitTimeout = $timeout(function () {\n                            wait = false;\n                        }, graceTime);\n                    }\n                    function fireOnChange() {\n                        $timeout.cancel(onChangeTimeout);\n                        setWaitTime();\n                        if (scope.onSelect) {\n                            onChangeTimeout = $timeout(function () {\n                                scope.onSelect({ page: scope.page });\n                            }, graceTime);\n                        }\n                    }\n                    var onChangeTimeout, wait, waitTimeout, graceTime = 300;\n                    scope.$on(\"$destroy\", function () {\n                        $timeout.cancel(waitTimeout);\n                        $timeout.cancel(onChangeTimeout);\n                        element.empty();\n                        element.off();\n                    });\n                    //listen to url changes and update the pagination control accordingly\n                    scope.$on(\"locationChange\", function (event, args) {\n                        var params = utils.url.parseUrlParams(args.newUrl);\n                        if (params.page) {\n                            scope.gotoPage(Number(params.page));\n                        }\n                    });\n                    scope.gotoPage = function (page) {\n                        if (page === scope.page) {\n                            return;\n                        }\n                        if (page > scope.pageCount) {\n                            scope.page = scope.pageCount;\n                        }\n                        else if (page < 1) {\n                            scope.page = 1;\n                        }\n                        else {\n                            scope.page = page;\n                        }\n                        setPages();\n                        if (!wait) {\n                            setWaitTime();\n                            if (scope.onSelect) {\n                                scope.onSelect({ page: scope.page });\n                            }\n                        }\n                        else {\n                            fireOnChange();\n                        }\n                    };\n                    //enables the text box to insert the requested page number\n                    scope.enablePageInput = function () {\n                        scope.pageInputEnabled = true;\n                    };\n                    scope.prevPage = function () {\n                        scope.gotoPage(scope.page - 1);\n                    };\n                    scope.nextPage = function () {\n                        scope.gotoPage(scope.page + 1);\n                    };\n                    scope.onInputKeydown = function (e) {\n                        if (e.keyCode === 27) {\n                            scope.pageInput = scope.page;\n                            scope.pageInputEnabled = false;\n                        }\n                    };\n                    scope.$watchGroup([\"page\", \"pageSize\", \"total\"], setPages);\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"ButtonController\", [\"$scope\", \"utils\", \"eventBus\", \"events\", \"state\", function ($scope, utils, eventBus, events, state) {\n            var buttonState;\n            $scope.$on(\"$destroy\", function () {\n                eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n            });\n            $scope.buttonClick = function () {\n                var events = angular.copy(angular.isArray($scope.control.onClick) ? $scope.control.onClick :\n                    [$scope.control.onClick]);\n                angular.forEach(events, function (event) {\n                    if ($scope.button.actionOptions) {\n                        event.actionOptions = jQuery.extend(true, event.actionOptions, $scope.button.actionOptions);\n                    }\n                });\n                events.triggerDashboardEvent(events, null, state.currentParams);\n                if ($scope.control.toggle) {\n                    buttonState = buttonState === \"on\" ? \"off\" : \"on\";\n                    $scope.button = $scope.control.toggle[buttonState];\n                    $scope.button.state = buttonState;\n                    setTexts();\n                }\n            };\n            function setTexts() {\n                if ($scope.button.text) {\n                    $scope.button.text = utils.strings.parseValue($scope.button.text, {}, $scope.mainDashboardParams);\n                }\n                if ($scope.button.tooltip) {\n                    $scope.button.tooltip =\n                        utils.strings.parseValue($scope.button.tooltip, {}, $scope.mainDashboardParams);\n                }\n            }\n            function init() {\n                var buttonSettings;\n                if ($scope.control.toggle) {\n                    buttonState = $scope.mainDashboardParams[$scope.control.toggle.toggleParam] ? \"on\" :\n                        $scope.control.toggle.defaultState || \"off\";\n                    buttonSettings = $scope.control.toggle[buttonState];\n                    buttonSettings.state = buttonState;\n                }\n                else {\n                    buttonSettings = $scope.control;\n                }\n                $scope.button = angular.extend({}, $scope.control, buttonSettings);\n                setTexts();\n            }\n            function needsRefresh(params) {\n                if ($scope.control.toggle && params[$scope.control.toggle.toggleParam] !== undefined) {\n                    var toggleParamState = params[$scope.control.toggle.toggleParam] ? \"on\" : \"off\";\n                    return toggleParamState !== buttonState;\n                }\n                if ($scope.control.refreshOn) {\n                    for (var i = 0; i < $scope.control.refreshOn.length; i++) {\n                        if (params[$scope.control.refreshOn[i]] !== undefined) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n            function onParamsChange(e, changedParams) {\n                if (needsRefresh(changedParams)) {\n                    init();\n                }\n            }\n            if ($scope.control.toggle && $scope.control.refreshOn) {\n                eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n            }\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .controller(\"AccountSettingsController\", [\"$scope\", \"auth\", \"page\", function ($scope, auth, page) {\n            var originalData;\n            $scope.modified = false;\n            $scope.onChanged = function () {\n                $scope.modified = true;\n            };\n            page.setPageTitle(\"Account Settings\");\n            auth.getCurrentUser().then(function (user) {\n                originalData = angular.copy(user);\n                $scope.account = user;\n            });\n            $scope.changePassword = function () {\n                $scope.passwordError = null;\n                $scope.success = null;\n                if (!$scope.currentPassword) {\n                    $scope.passwordError = { message: \"Please enter your current password.\" };\n                    return;\n                }\n                if (validatePasswordsMatch()) {\n                    if ($scope.account) {\n                        doChangePassword();\n                    }\n                }\n            };\n            $scope.saveUser = function () {\n                $scope.success = null;\n                $scope.error = null;\n                if (!$scope.userPassword) {\n                    $scope.passwordRequired = true;\n                    return;\n                }\n                auth.editUser({\n                    username: $scope.account.userName,\n                    password: $scope.userPassword,\n                    firstName: $scope.account.firstName,\n                    lastName: $scope.account.lastName\n                }).then(function () {\n                    $scope.success = { message: \"User saved successfully.\" };\n                }, function (error) {\n                    $scope.error = { message: \"Error saving user.\" };\n                    console.error(\"Error saving user: \", error);\n                });\n                $scope.passwordRequired = false;\n            };\n            $scope.reset = function () {\n                $scope.account = angular.copy(originalData);\n                $scope.modified = false;\n                $scope.currentPassword = $scope.newPassword = $scope.newPasswordConfirm = $scope.userPassword = \"\";\n                $scope.passwordRequired = false;\n                $scope.error = null;\n            };\n            function doChangePassword() {\n                auth.changePassword($scope.account.userName, $scope.currentPassword, $scope.newPassword)\n                    .then(function () {\n                    $scope.passwordSuccess = { message: \"Password changed successfully.\" };\n                    $scope.currentPassword = $scope.newPassword = $scope.newPasswordConfirm = \"\";\n                }, function (error) {\n                    $scope.passwordError = { message: error.message };\n                });\n            }\n            function validatePasswordsMatch() {\n                if (!$scope.newPasswordConfirm) {\n                    $scope.passwordError = { message: \"Please enter password confirmation.\" };\n                    return;\n                }\n                if ($scope.newPassword !== $scope.newPasswordConfirm) {\n                    $scope.passwordError = { message: \"Passwords don't match.\" };\n                    return;\n                }\n                if ($scope.currentPassword === $scope.newPassword) {\n                    $scope.passwordError = { message: \"The new password can't be identical to the current one.\" };\n                    return;\n                }\n                return true;\n            }\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"GlobalSettingsController\", [\"$scope\", \"utils\", function ($scope, utils) {\n            $scope.scores = [\n                {\n                    weight: 25,\n                    name: \"Active Directory\"\n                },\n                {\n                    weight: 25,\n                    name: \"Logins\"\n                },\n                {\n                    weight: 25,\n                    name: \"VPN\"\n                },\n                {\n                    weight: 25,\n                    name: \"Group Membership\"\n                }\n            ];\n            function getScoresWeightDisplay() {\n                var totalWeights = 0;\n                angular.forEach($scope.scores, function (score, index) {\n                    totalWeights += score.weight;\n                });\n                angular.forEach($scope.scores, function (score, index) {\n                    score.weightDisplay = Math.round((score.weight / totalWeights) * 100) + \"%\";\n                });\n            }\n            getScoresWeightDisplay();\n            $scope.distributeScoresEvenly = function () {\n                var weight = Math.floor(100 / $scope.scores.length), firstWeight = weight + 100 - weight * $scope.scores.length;\n                angular.forEach($scope.scores, function (score, index) {\n                    var newWeight = index ? weight : firstWeight;\n                    if (score.weight !== newWeight) {\n                        score.weight = newWeight;\n                        $scope.changed = true;\n                    }\n                });\n                getScoresWeightDisplay();\n            };\n            $scope.scoreChange = function (score, scoreIndex) {\n                getScoresWeightDisplay();\n                $scope.changed = true;\n            };\n        }]);\n}());\n","angular.module('Fortscale')\n    .directive('daterange', [\"$parse\", \"transforms\", \"utils\",\n    function ($parse, transforms, utils) {\n        'use strict';\n        return {\n            template: \"<input type='text'  readonly='readonly' class='daterange-input' />\",\n            restrict: 'E',\n            require: \"?ngModel\",\n            link: function postLink(scope, element, attrs, ngModel) {\n                var params, init, input = element.children(\"input\")[0], ngChangeFunc = attrs.ngChange ? $parse(attrs.ngChange) : null;\n                var MOMENT_DATE_FORMAT = \"MM/DD/YYYY\";\n                scope.$on(\"$destroy\", function (e, data) {\n                    $(input).empty().off();\n                    element.empty();\n                    element.off();\n                });\n                function onChange(dates) {\n                    var timeStart = utils.date.getMoment(dates.start, null, MOMENT_DATE_FORMAT);\n                    var timeEnd = utils.date.getMoment(dates.end, null, MOMENT_DATE_FORMAT);\n                    params.timeStart = timeStart.startOf('day');\n                    params.timeEnd = timeEnd.endOf('day');\n                    ngModel.$setViewValue(params);\n                    if (ngChangeFunc) {\n                        ngChangeFunc(scope, params);\n                    }\n                }\n                scope.$watch(attrs.ngModel, function (value) {\n                    var timeStart, timeEnd;\n                    if (value) {\n                        if (angular.isObject(value)) {\n                            if (value.timeStart && value.timeEnd) {\n                                timeStart = utils.date.getMoment(value.timeStart).startOf('day');\n                                timeEnd = utils.date.getMoment(value.timeEnd).endOf('day');\n                            }\n                        }\n                        if (!timeStart || !timeEnd) {\n                            timeStart = utils.date.getMoment(value).startOf('day');\n                            if (timeStart.isValid()) {\n                                timeEnd = timeStart = timeStart.toDate();\n                            }\n                        }\n                    }\n                    params = {\n                        timeStart: transforms.date(timeStart || utils.date.getMoment('now'), {\n                            format: MOMENT_DATE_FORMAT\n                        }),\n                        timeEnd: transforms.date(timeEnd || utils.date.getMoment('now'), {\n                            format: MOMENT_DATE_FORMAT\n                        })\n                    };\n                    if (params.timeStart === params.timeEnd) {\n                        input.value = params.timeStart;\n                    }\n                    else {\n                        input.value = [params.timeStart, params.timeEnd].join(\" - \");\n                    }\n                    // Init DatePicker component\n                    $(input).daterangepicker({\n                        presets: {\n                            dateRange: \"Date Range\"\n                        },\n                        presetRanges: [\n                            { text: 'Last week', dateStart: 'today-7days', dateEnd: 'today', closeOnSelect: true },\n                            { text: 'Last month', dateStart: 'today-1months', dateEnd: 'today', closeOnSelect: true }\n                        ],\n                        closeOnSelect: false,\n                        doneButtonText: \"Apply\",\n                        dateFormat: \"mm/dd/yy\",\n                        onDone: onChange,\n                        onChange: onChange,\n                        latestDate: \"today\"\n                    });\n                    init = true;\n                });\n            }\n        };\n    }]);\n","(function () {\n    'use strict';\n    angular.module('Fortscale')\n        .directive('searchbox', [\"$timeout\", \"reports\", \"transforms\", \"widgets\", \"$parse\", \"$rootScope\",\n        \"search\", \"utils\", function ($timeout, reports, transforms, widgets, $parse, $rootScope, search, utils) {\n            return {\n                template: \"<span class='searchbox' ng-class='{ loading: loading }'><input type='text'  \" +\n                    \"placeholder='{{placeholder}}' class='search' ng-class='{ error: isRequired }' />\" +\n                    \"<i class='icon-spinner icon-spin'></i></span>\",\n                restrict: 'AE',\n                replace: true,\n                require: \"?ngModel\",\n                scope: {\n                    onSelect: \"&\",\n                    searchSettings: \"=\",\n                    isRequired: \"=\",\n                    display: \"=\",\n                    charEntered: \"=\"\n                },\n                link: function postLink(scope, element, attrs, ngModel) {\n                    var isInit, MIN_SEARCH_SIZE = 1, // If the current term is smaller than this, search won't run.\n                    onSelectTimeout, input = element.find(\"input\"), onSelect;\n                    if (!element[0].classList.contains(\"search\")) {\n                        element[0].classList.add(\"search\");\n                    }\n                    scope.$watch(\"onSelect\", function () {\n                        if (Object(scope.onSelect) === scope.onSelect && scope.onSelect.url) {\n                            onSelect = function (selected) {\n                                if (selected.$item) {\n                                    var path = utils.strings.parseValue(scope.onSelect.url, selected.$item);\n                                    if (/^#/.test(scope.onSelect)) {\n                                        window.location.hash = path;\n                                    }\n                                    else {\n                                        window.location.href = path;\n                                    }\n                                }\n                            };\n                        }\n                        else {\n                            onSelect = scope.onSelect;\n                        }\n                    });\n                    scope.$watch(\"searchSettings\", function (value) {\n                        if (value && !isInit) {\n                            init();\n                        }\n                    });\n                    if (ngModel) {\n                        ngModel.$render = function () {\n                            if (ngModel.$viewValue) {\n                                input.val(scope.display || ngModel.$viewValue);\n                            }\n                        };\n                    }\n                    function split(val) {\n                        return val.split(/,\\s*/);\n                    }\n                    function extractLast(term) {\n                        return split(term).pop();\n                    }\n                    function parseResults(results) {\n                        var value, label;\n                        if (scope.searchSettings.distinct) {\n                            var checkDuplicates = [];\n                            var toRemove = [];\n                            results.forEach(function (item) {\n                                var key = item[Object.keys(item)[0]];\n                                if (checkDuplicates.indexOf(key) > -1) {\n                                    toRemove.push(item);\n                                }\n                                else {\n                                    checkDuplicates.push(key);\n                                }\n                            });\n                            toRemove.forEach(function (item) {\n                                results.splice(results.indexOf(item), 1);\n                            });\n                        }\n                        if (results.data) {\n                            results = results.data;\n                        }\n                        if (scope.searchSettings.valueField || scope.searchSettings.resultField) {\n                            return results.map(function (result) {\n                                if (result.label || result.display_name) {\n                                    value = result.value || result.id;\n                                    label = result.label || result.display_name;\n                                }\n                                else {\n                                    value = result[scope.searchSettings.valueField ||\n                                        scope.searchSettings.resultField];\n                                    label = scope.searchSettings.labelField ?\n                                        result[scope.searchSettings.labelField] : value;\n                                }\n                                return { label: label, value: value };\n                            });\n                        }\n                        return results;\n                    }\n                    function init() {\n                        if (scope.searchSettings.onSelect && !attrs.onSelect) {\n                            scope.onSelect = scope.searchSettings.onSelect;\n                        }\n                        isInit = true;\n                        input.on(\"keyup\", function (event) {\n                            if (event.keyCode === $.ui.keyCode.TAB &&\n                                $(this).data(\"ui-autocomplete\").menu.active) {\n                                event.preventDefault();\n                            }\n                            else if (event.keyCode === $.ui.keyCode.ESCAPE) {\n                                $(this)\n                                    .val(\"\")\n                                    .autocomplete(\"close\");\n                            }\n                            else if (event.keyCode === $.ui.keyCode.ENTER &&\n                                scope.searchSettings.allowAllStrings) {\n                                scope.onSelect(this.value);\n                            }\n                            else if (!input.val() || input.val() === \"\") {\n                                onSelect({ $value: \"\", $label: \"\", $item: $.ui.item });\n                                if (ngModel) {\n                                    ngModel.$setViewValue(\"\");\n                                }\n                            }\n                            else {\n                                if (scope.charEntered && scope.display !== input.val()) {\n                                    scope.charEntered();\n                                }\n                            }\n                        })\n                            .attr(\"placeholder\", scope.searchSettings.placeholder)\n                            .data(\"autocomplete-enabled\", true)\n                            .autocomplete({\n                            delay: 400,\n                            autoFocus: true,\n                            minLength: MIN_SEARCH_SIZE,\n                            source: function (request, response) {\n                                if (!request.term || request.term.length < MIN_SEARCH_SIZE) {\n                                    return;\n                                }\n                                //var searchMethod = scope.searchSettings.search.constructor === Function ?\n                                //    scope.searchSettings.search : search.searchDataEntityField.bind(search,\n                                //    scope.searchSettings.dataEntity, scope.searchSettings.dataEntityField,\n                                //    scope.searchSettings.labelField, scope.searchSettings.extraTerms);\n                                scope.loading = true;\n                                var searchTerm = extractLast(request.term);\n                                if (scope.searchSettings.termTransform) {\n                                    searchTerm = transforms.string(searchTerm, scope.searchSettings.termTransform);\n                                }\n                                $rootScope.safeApply(function () {\n                                    if (scope.searchSettings.search) {\n                                        scope.searchSettings.search(searchTerm).then(function (results) {\n                                            results = results ? parseResults(results) : [];\n                                            scope.loading = false;\n                                            response(results);\n                                        }, function (error) {\n                                            scope.loading = false;\n                                            response([]);\n                                        });\n                                    }\n                                });\n                            },\n                            search: function () {\n                                // custom minLength\n                                var term = extractLast(this.value);\n                                if (term.length < 1) {\n                                    return false;\n                                }\n                            },\n                            focus: function () {\n                                // prevent value inserted on focus\n                                return false;\n                            },\n                            select: function (event, ui) {\n                                if (scope.searchSettings.showValueOnSelect) {\n                                    input.val(ui.item.label || ui.item.value);\n                                }\n                                else {\n                                    input.val(\"\");\n                                }\n                                if (scope.onSelect) {\n                                    $timeout.cancel(onSelectTimeout);\n                                    onSelectTimeout = $timeout(function () {\n                                        onSelect({\n                                            $value: ui.item.value,\n                                            $label: ui.item.label,\n                                            $item: ui.item\n                                        });\n                                        scope.display = ui.item.label;\n                                        if (ngModel) {\n                                            ngModel.$setViewValue(ui.item.value);\n                                        }\n                                    }, 40);\n                                }\n                                return false;\n                            }\n                        });\n                        scope.$on(\"$destroy\", function (e, data) {\n                            var $input = element.find(\"input\");\n                            $timeout.cancel(onSelectTimeout);\n                            if ($input.data(\"autocomplete-enabled\")) {\n                                $input.autocomplete(\"destroy\").off();\n                            }\n                            element.empty();\n                            element.off();\n                        });\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale')\n        .directive('progressBar', function ($timeout, reports, transforms) {\n        return {\n            template: \"<div class='progress-bar' ng-style='{width: width}' title='{{tooltip}}'><span \" +\n                \"ng-style='{width: progressValue, background: progressColor}'><em ng-show='showArrow'></em></span>\" +\n                \"</div>\",\n            restrict: 'E',\n            replace: true,\n            require: \"?ngModel\",\n            link: function postLink(scope, element, attrs, ngModel) {\n                var rawValue, settings, colors = [\"#90CA77\", \"#E9B64D\", \"#E48743\", \"#E48743\", \"#9E3B33\"];\n                scope.progressValue = 0;\n                scope.$watch(attrs.ngModel, function (value) {\n                    rawValue = parseFloat(value, 10);\n                    setValue();\n                });\n                scope.$watch(attrs.settings, function (value) {\n                    settings = value;\n                    scope.width = settings.width;\n                    if (settings.tooltip) {\n                        scope.tooltip = settings.tooltip;\n                    }\n                    setValue();\n                });\n                scope.$watch(attrs.tooltip, function (value) {\n                    scope.tooltip = value;\n                });\n                function getColor(value) {\n                    var color, colorStep = 1 / colors.length;\n                    for (var i = 0; i < colors.length; i++) {\n                        color = colors[i];\n                        if (value < (i + 1) * colorStep) {\n                            return color;\n                        }\n                    }\n                    return color;\n                }\n                function setValue() {\n                    if (rawValue === undefined || !settings) {\n                        return;\n                    }\n                    rawValue = Math.max(settings.min, rawValue);\n                    rawValue = Math.min(settings.max, rawValue);\n                    var valueFracture = (rawValue - settings.min) / (settings.max - settings.min);\n                    scope.progressValue = (100 * valueFracture) + \"%\";\n                    scope.progressColor = getColor(valueFracture);\n                    scope.showArrow = valueFracture > 0.05 && valueFracture < 0.95;\n                }\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").directive(\"modal\", function () {\n        return {\n            restrict: \"E\",\n            template: ['<div class=\"modal\" ng-show=\"settings.show\" toggle-keys=\"{{ { escape: \\'modalClose\\' } }}\" ' +\n                    'toggle-keys-enabled=\"settings.show\" ng-cloak>',\n                '<div class=\"modal-background closes-modal\"></div>',\n                '<div class=\"modal-contents\" ng-style=\"modalStyle\" ng-transclude>',\n                '</div></div>'].join(\"\"),\n            transclude: true,\n            replace: true,\n            require: '?ngModel',\n            link: function ($scope, element, attrs, ngModel) {\n                element.on(\"click\", function (e) {\n                    if (e.target.classList.contains(\"closes-modal\")) {\n                        $scope.$apply($scope.modalClose);\n                    }\n                });\n                $scope.modalClose = function () {\n                    $scope.settings.show = false;\n                    //ngModel.$setViewValue(false);\n                    $scope.$emit(\"modalClose\");\n                };\n                ngModel.$render = function () {\n                    $scope.settings = ngModel.$viewValue;\n                    if ($scope.settings) {\n                        $scope.modalStyle = {\n                            width: $scope.settings.width,\n                            height: $scope.settings.height,\n                            'margin-top': $scope.settings.height / -2,\n                            'margin-left': $scope.settings.width / -2\n                        };\n                    }\n                };\n                $scope.$on(\"$destroy\", function (e, data) {\n                    element.empty();\n                    element.off();\n                });\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .directive(\"hideOnError\", [function () {\n            return {\n                restrict: 'A',\n                link: function postLink(scope, element, attrs) {\n                    scope.$on(\"$destroy\", function (e, data) {\n                        element.off();\n                    });\n                    element.on(\"error\", function (event) {\n                        element.css(\"display\", \"none\");\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    function navigation(dynamicMenus, conditions, state) {\n        return {\n            template: \"<div></div>\",\n            restrict: 'E',\n            require: 'ngModel',\n            scope: {\n                onSelect: \"&\",\n                navData: \"=\"\n            },\n            link: function (scope, element, attrs, ngModel) {\n                var selectedItem, selectedElement, navData;\n                scope.$watch(\"navData\", function (value) {\n                    if (!!(navData = value)) {\n                        setNav();\n                    }\n                });\n                ngModel.$render = function () {\n                    if (!navData || !ngModel.$viewValue) {\n                        return;\n                    }\n                    if (selectedItem) {\n                        selectedItem.selected = false;\n                        selectedElement = element[0].querySelector(\".nav-link.selected\");\n                        if (selectedElement) {\n                            selectedElement.parentNode.classList.remove(\"selected\");\n                        }\n                    }\n                    selectedItem = getItem(navData, ngModel.$viewValue);\n                    if (selectedItem) {\n                        selectedItem.selected = true;\n                        selectedElement = getElement(selectedItem);\n                        selectedElement.parentNode.classList.add(\"selected\");\n                    }\n                };\n                function getItem(root, item) {\n                    if ((root.id && root.id === item.id) || (root.url && root.url === item.url)) {\n                        return root;\n                    }\n                    if (root.children) {\n                        var found;\n                        for (var i = 0, child; !!(child = root.children[i]); i++) {\n                            found = getItem(child, item);\n                            if (found) {\n                                return found;\n                            }\n                        }\n                    }\n                    return null;\n                }\n                function getElement(item) {\n                    var links = element[0].querySelectorAll(\".nav-link\");\n                    for (var i = 0, link; !!(link = links[i]); i++) {\n                        if (link.__data__ === item) {\n                            return link;\n                        }\n                    }\n                }\n                function selectFirstItem() {\n                    var firstElement = element.find(\".nav-link\").first();\n                    if (firstElement.length) {\n                        firstElement.parent().addClass(\"selected\");\n                        firstElement.parents(\".nav\").removeClass(\"closed\").prev().removeClass(\"closed\");\n                        selectedElement = firstElement[0];\n                        if (scope.onSelect) {\n                            scope.onSelect({ $item: selectedElement.__data__ });\n                        }\n                    }\n                }\n                function addChildren(rootElement, navItem, isChild) {\n                    var root = d3.select(rootElement);\n                    if (navItem.name) {\n                        var expand = root.append(\"a\")\n                            .attr(\"id\", \"menu-parent-item-\" + navItem.name.toLowerCase().split(\" \").join(\"_\"))\n                            .attr(\"class\", \"nav-expand\" + (navItem.isOpen ? \"\" : \" closed\"));\n                        expand.append(\"i\").attr(\"class\", \"icon-\");\n                        expand.append(\"span\").text(navItem.name);\n                    }\n                    var list = root.append(\"ul\")\n                        .attr(\"class\", \"unstyled nav \" + (!isChild || navItem.isOpen ? \"open\" : \"closed\"));\n                    if (navItem.children && navItem.children.length) {\n                        rootElement.classList.add(\"with-children\");\n                    }\n                    list.selectAll(\"li\").data(navItem.children.filter(checkConditions))\n                        .enter()\n                        .append(function (d) {\n                        var li = document.createElement(\"li\");\n                        if (d.children) {\n                            addChildren(li, d, true);\n                        }\n                        else {\n                            d3.select(li).append(\"a\")\n                                .attr(\"id\", \"nav-item-\" + d.name.toLowerCase().split(\" \").join(\"_\"))\n                                .attr(\"class\", \"nav-link\" + (d.selected ? \" selected\" : \"\"))\n                                .attr(\"href\", d.href || d.url || null)\n                                .attr(\"data-regexp\", d.selectedRegExp)\n                                .text(d.name)\n                                .data([d]);\n                            // This will change the href of the nav's a tags to reflect the changes to the state.\n                            if (d.href) {\n                                // Check if current hash is a match to d.href\n                                var hrefRgx = new RegExp(d.href);\n                                if (hrefRgx.test(window.location.href)) {\n                                    // When a match, add a mouseover listener that updates href\n                                    var aTag = li.querySelector('a');\n                                    aTag.addEventListener('mouseover', function () {\n                                        if (aTag.hash !== window.location.hash) {\n                                            aTag.hash = window.location.hash;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                        return li;\n                    });\n                    return root[0][0];\n                }\n                function checkConditions(navItem) {\n                    return !(navItem.conditions &&\n                        !conditions.validateConditions(navItem.conditions, null, state.currentParams));\n                }\n                function setNav() {\n                    element.empty();\n                    dynamicMenus.setDynamicMenus(navData.children);\n                    var newElement = angular.element(addChildren(document.createElement(\"div\"), navData)), locationUrl = window.location.hash.split(\"?\")[0];\n                    element.append(newElement);\n                    selectedElement = element.find(\".nav-link.selected\");\n                    if (!selectedElement.length) {\n                        selectedElement = element.find(\".nav-link[href='\" + locationUrl + \"']\");\n                    }\n                    if (!selectedElement.length) {\n                        element.find(\".nav-link[data-regexp]\").each(function (i, link) {\n                            var regexp = new RegExp(link.getAttribute(\"data-regexp\"));\n                            if (regexp && regexp.test(locationUrl)) {\n                                selectedElement = jQuery(link);\n                                return false;\n                            }\n                        });\n                    }\n                    if (selectedElement.length) {\n                        selectedElement.parent().addClass(\"selected\");\n                        selectedElement.parents(\".nav\").removeClass(\"closed\").prev().removeClass(\"closed\");\n                        selectedElement = selectedElement[0];\n                    }\n                    else {\n                        selectFirstItem();\n                    }\n                }\n                function init() {\n                    if (scope.onSelect) {\n                        element.on(\"click\", \".nav-link\", function (e) {\n                            var navItem = e.target.__data__;\n                            if (selectedElement) {\n                                selectedElement.parentNode.classList.remove(\"selected\");\n                            }\n                            selectedElement = e.target;\n                            selectedElement.parentNode.classList.add(\"selected\");\n                            scope.$apply(function () {\n                                scope.onSelect({ $item: navItem });\n                            });\n                        });\n                    }\n                    element.on(\"click\", \".nav-expand\", function (e) {\n                        $(e.currentTarget).toggleClass(\"closed\").next().toggleClass(\"closed\");\n                    });\n                    scope.$on(\"$destroy\", function () {\n                        element.empty();\n                        element.off();\n                    });\n                }\n                init();\n            }\n        };\n    }\n    navigation.$inject = [\"dynamicMenus\", \"conditions\", \"state\"];\n    angular.module(\"Fortscale\")\n        .directive('nav', navigation);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .directive('tabs', function () {\n        return {\n            template: \"<div class='tabs'></div>\",\n            restrict: 'E',\n            replace: true,\n            scope: {\n                onSelect: \"&\",\n                _tabs: \"=tabsData\"\n            },\n            require: '?ngModel',\n            link: function (scope, element, attrs, ngModel) {\n                var dataWatcher, selectedElement, selectedTab;\n                ngModel.$render = function () {\n                    selectedTab = ngModel.$viewValue;\n                    selectTabElement(selectedTab);\n                };\n                function selectTabElement(tab) {\n                    if (!scope._tabs) {\n                        return;\n                    }\n                    if (selectedElement) {\n                        selectedElement.classList.remove(\"selected\");\n                        selectedElement = null;\n                    }\n                    for (var i = 0; i < scope._tabs.length; i++) {\n                        if (scope._tabs[i] === tab) {\n                            selectedElement = element[0].childNodes[i];\n                            break;\n                        }\n                    }\n                    if (selectedElement) {\n                        selectedElement.classList.add(\"selected\");\n                    }\n                }\n                element.on(\"click\", \".tab\", function (e) {\n                    e.stopPropagation();\n                    selectTab(scope._tabs[e.currentTarget.tabIndex]);\n                });\n                function selectTab(tab) {\n                    selectTabElement(tab);\n                    scope.selectedTab = tab;\n                    if (scope.onSelect) {\n                        scope.onSelect({ tab: tab });\n                    }\n                }\n                dataWatcher = scope.$watch(\"_tabs\", function (tabsData) {\n                    if (!tabsData) {\n                        return;\n                    }\n                    tabsData.forEach(function (tabData, i) {\n                        var tabElement = document.createElement(\"a\");\n                        tabElement.className = \"tab\";\n                        if (selectedTab === tabData) {\n                            tabElement.classList.add(\"selected\");\n                            selectedElement = tabElement;\n                        }\n                        tabElement.innerText = tabData.name;\n                        element.append(tabElement);\n                        tabElement.tabIndex = i;\n                    });\n                    dataWatcher();\n                });\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").directive(\"dropdownMenu\", [\"$timeout\", function ($timeout) {\n            return {\n                restrict: 'E',\n                template: '<menu class=\"dropdown dropdown-directive\"></menu>',\n                replace: true,\n                scope: {\n                    items: \"=\",\n                    params: \"=\",\n                    onSelect: \"&\"\n                },\n                link: function postLink(scope, element) {\n                    function selectMenuItem($event, item) {\n                        if (!scope.onSelect) {\n                            return true;\n                        }\n                        close();\n                        scope.onSelect({ $event: $event, $item: item });\n                    }\n                    function renderMenu() {\n                        if (!dropdownMenu) {\n                            dropdownMenu = document.createElement(\"ul\");\n                            dropdownMenu.className = \"dropdown-menu\";\n                            element.append(dropdownMenu);\n                        }\n                        if (!itemsRendered) {\n                            scope.items.forEach(function (item, i) {\n                                var listItem = document.createElement(\"li\"), link = document.createElement(\"a\");\n                                if (item.href) {\n                                    link.setAttribute(\"href\", item.href);\n                                }\n                                else {\n                                    link.setAttribute(\"data-select\", i);\n                                }\n                                link.innerText = item.text || item.name;\n                                listItem.appendChild(link);\n                                dropdownMenu.appendChild(listItem);\n                            });\n                            itemsRendered = true;\n                        }\n                    }\n                    function destroyMenu() {\n                        dropdownMenu.parentElement.removeChild(dropdownMenu);\n                        dropdownMenu = null;\n                        itemsRendered = false;\n                    }\n                    function open(event) {\n                        renderMenu();\n                        dropdownMenu.style.opacity = \"0\";\n                        buttonBoundingRect = event.currentTarget.getBoundingClientRect();\n                        dropdownMenu.style.top = (buttonBoundingRect.bottom - 3) + \"px\";\n                        dropdownMenu.style.left = buttonBoundingRect.left + \"px\";\n                        dropdownMenu.classList.remove(\"rightDropdown\");\n                        dropdownMenu.classList.remove(\"topDropdown\");\n                        isOpen = true;\n                        element.addClass(\"open\");\n                        element.removeClass(\"dropdown-top\");\n                        $timeout(function () {\n                            setPosition();\n                            dropdownMenu.style.opacity = \"1\";\n                            document.body.addEventListener(\"mousedown\", onBackgroundClick);\n                            window.addEventListener(\"scroll\", onBackgroundClick);\n                        }, 50);\n                    }\n                    function setPosition() {\n                        var width = document.documentElement.clientWidth, height = document.documentElement.clientHeight, dropdownMenuBoundingRect = dropdownMenu.getBoundingClientRect(), dropdownRight = dropdownMenuBoundingRect.right, dropdownBottom = dropdownMenuBoundingRect.bottom, marginRight = 20, marginBottom = 60;\n                        if (dropdownRight > width - marginRight) {\n                            dropdownMenu.style.removeProperty(\"left\");\n                            dropdownMenu.style.left = (buttonBoundingRect.right - dropdownMenuBoundingRect.width) + \"px\";\n                            dropdownMenu.classList.add(\"rightDropdown\");\n                        }\n                        if (dropdownBottom > height - marginBottom) {\n                            dropdownMenu.style.removeProperty(\"top\");\n                            dropdownMenu.style.top = (buttonBoundingRect.top - dropdownMenuBoundingRect.height) + \"px\";\n                            dropdownMenu.classList.add(\"topDropdown\");\n                            element.addClass(\"dropdown-top\");\n                            scope.isTopMenu = true;\n                        }\n                        else {\n                            element.removeClass(\"dropdown-top\");\n                        }\n                    }\n                    function close() {\n                        document.body.removeEventListener(\"mousedown\", onBackgroundClick);\n                        window.removeEventListener(\"scroll\", onBackgroundClick);\n                        isOpen = false;\n                        element.removeClass(\"open\");\n                        element.removeClass(\"dropdown-top\");\n                        setTimeout(destroyMenu, 300);\n                    }\n                    function onBackgroundClick(e) {\n                        if (!$(e.target).closest(\".dropdown\").length ||\n                            $(e.target).closest(\".dropdown\")[0] !== element[0]) {\n                            scope.$apply(close);\n                        }\n                        return true;\n                    }\n                    var dropdownMenu, buttonBoundingRect, isOpen = false, toggleButton = $('<a class=\"clickable dropdown-toggle hidden-phone\"><b class=\"caret\"></a>'), itemsRendered;\n                    element.removeClass(\"open\");\n                    scope.$on(\"$destroy\", function () {\n                        element.off();\n                        element.empty();\n                    });\n                    function toggle(event) {\n                        if (isOpen) {\n                            close();\n                        }\n                        else {\n                            open(event);\n                        }\n                    }\n                    element.append(toggleButton);\n                    toggleButton.on(\"click\", toggle);\n                    scope.$watch(\"items\", function (items) {\n                        if (!items) {\n                            return;\n                        }\n                        if (itemsRendered) {\n                            destroyMenu();\n                        }\n                        renderMenu();\n                    });\n                    element.on(\"click\", \"[data-select]\", function (e) {\n                        var item = scope.items[parseInt(this.getAttribute(\"data-select\"), 10)];\n                        selectMenuItem(e, item);\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .directive(\"dropdownMenuDelegate\", [\"$timeout\", \"conditions\", \"state\", function ($timeout, conditions, state) {\n            return {\n                restrict: 'A',\n                scope: false,\n                link: function postLink(scope, element, attrs) {\n                    var dropdownMenu, dropdownMenuList, currentItems, itemsRendered, isOpen, isTopMenu;\n                    function init() {\n                        element.on(\"click\", \".dropdown-delegate-toggle\", function (e) {\n                            if (dropdownMenu && this.parentNode !== dropdownMenu) {\n                                closeMenu();\n                            }\n                            dropdownMenu = this.parentNode;\n                            if (!dropdownMenu.menu) {\n                                return true;\n                            }\n                            currentItems = dropdownMenu.menu.items;\n                            toggle(e);\n                        });\n                        element.on(\"click\", \".dropdown-directive .dropdown-menu-link\", function (e) {\n                            selectMenuItem(e, this.menuItem);\n                        });\n                    }\n                    function renderMenu() {\n                        if (!dropdownMenuList) {\n                            dropdownMenuList = document.createElement(\"ul\");\n                            dropdownMenuList.className = \"dropdown-menu\";\n                            dropdownMenu.appendChild(dropdownMenuList);\n                        }\n                        if (!itemsRendered) {\n                            currentItems.forEach(function (item, i) {\n                                var listItem = document.createElement(\"li\"), link = document.createElement(\"a\");\n                                link.className = \"dropdown-menu-link\";\n                                link.menuItem = item;\n                                if (item.href) {\n                                    link.setAttribute(\"href\", item.href);\n                                }\n                                else {\n                                    link.setAttribute(\"data-select\", i);\n                                }\n                                link.innerText = item.text || item.name;\n                                listItem.appendChild(link);\n                                dropdownMenuList.appendChild(listItem);\n                            });\n                            itemsRendered = true;\n                        }\n                    }\n                    function destroyMenu() {\n                        dropdownMenu.removeChild(dropdownMenuList);\n                        dropdownMenuList = null;\n                        itemsRendered = false;\n                        dropdownMenu = null;\n                    }\n                    function openMenu(event) {\n                        renderMenu();\n                        dropdownMenuList.style.opacity = \"0\";\n                        var buttonBoundingRect = event.currentTarget.getBoundingClientRect();\n                        dropdownMenuList.style.top = (buttonBoundingRect.bottom - 3) + \"px\";\n                        dropdownMenuList.style.left = buttonBoundingRect.left + \"px\";\n                        dropdownMenuList.classList.remove(\"rightDropdown\");\n                        dropdownMenuList.classList.remove(\"topDropdown\");\n                        isOpen = true;\n                        dropdownMenu.classList.add(\"open\");\n                        dropdownMenu.classList.remove(\"dropdown-top\");\n                        document.body.addEventListener(\"mousedown\", onBackgroundClick);\n                        window.addEventListener(\"scroll\", onBackgroundClick);\n                        $timeout(function () {\n                            setPosition(buttonBoundingRect);\n                            dropdownMenuList.style.opacity = \"1\";\n                        }, 1);\n                    }\n                    function setPosition(buttonBoundingRect) {\n                        var width = document.documentElement.clientWidth, height = document.documentElement.clientHeight, dropdownMenuBoundingRect = dropdownMenuList.getBoundingClientRect(), dropdownRight = dropdownMenuBoundingRect.right, dropdownBottom = dropdownMenuBoundingRect.bottom, marginRight = 20, marginBottom = 60;\n                        if (dropdownRight > width - marginRight) {\n                            dropdownMenuList.style.removeProperty(\"left\");\n                            dropdownMenuList.style.left = (buttonBoundingRect.right - dropdownMenuBoundingRect.width) +\n                                \"px\";\n                            dropdownMenuList.classList.add(\"rightDropdown\");\n                        }\n                        if (dropdownBottom > height - marginBottom) {\n                            dropdownMenuList.style.removeProperty(\"top\");\n                            dropdownMenuList.style.top = (buttonBoundingRect.top - dropdownMenuBoundingRect.height) +\n                                \"px\";\n                            dropdownMenuList.classList.add(\"topDropdown\");\n                            dropdownMenu.classList.add(\"dropdown-top\");\n                            isTopMenu = true;\n                        }\n                        else {\n                            dropdownMenu.classList.remove(\"dropdown-top\");\n                        }\n                    }\n                    function closeMenu(immediate) {\n                        document.body.removeEventListener(\"mousedown\", onBackgroundClick);\n                        window.removeEventListener(\"scroll\", onBackgroundClick);\n                        isOpen = false;\n                        if (dropdownMenu) {\n                            dropdownMenu.classList.remove(\"open\");\n                            dropdownMenu.classList.remove(\"dropdown-top\");\n                            if (immediate) {\n                                destroyMenu();\n                            }\n                            else {\n                                setTimeout(destroyMenu, 300);\n                            }\n                        }\n                    }\n                    function toggle(event) {\n                        if (isOpen) {\n                            closeMenu();\n                        }\n                        else {\n                            openMenu(event);\n                        }\n                    }\n                    function selectMenuItem($event, item) {\n                        if (!scope.menuSelect) {\n                            return true;\n                        }\n                        closeMenu();\n                        scope.menuSelect($event, item, dropdownMenu.data, dropdownMenu.menu, scope.mainDashboardParams);\n                    }\n                    function onBackgroundClick(e) {\n                        if (!$(e.target).closest(\".dropdown\").length || $(e.target).closest(\".dropdown\")[0] !==\n                            dropdownMenu) {\n                            scope.$apply(closeMenu);\n                        }\n                        return true;\n                    }\n                    init();\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    function paramControls(conditions, eventBus, utils, search, $timeout, controls, FilterValidators, popupConditions) {\n        return {\n            restrict: 'E',\n            templateUrl: \"scripts/directives/param_controls/param_controls.template.html\",\n            replace: true,\n            scope: {\n                controls: \"=\",\n                buttons: \"=\",\n                search: \"=\",\n                getParams: \"&\",\n                setParams: \"&\",\n                ready: \"=\",\n                classname: \"@\",\n                widgetControlId: \"@\",\n                widget: \"=\",\n                controlsTitle: \"@\"\n            },\n            link: function postLink(scope) {\n                var requiredParams, controlParamNames = [], changedParams = {};\n                scope.renderUpdateButton = false;\n                scope.$on(\"$destroy\", function () {\n                    eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n                });\n                // in the cases controls selection have changed\n                // load controls from control service and update the update button if needed.\n                scope.$watch(\"controls\", function (_controls) {\n                    scope.controls = controls.loadControls(_controls);\n                    setUpdateButton();\n                    init();\n                });\n                scope.charEntered = function () {\n                    scope.paramChange = true;\n                };\n                scope.onControlChange = function (control, value, label) {\n                    scope.paramChange = true;\n                    changedParams[control.param] = true;\n                    control.value = value;\n                    if (control.type === \"search\" && label) {\n                        control.valueLabel = label;\n                    }\n                    setAllRequiredParamsAvailable(false);\n                    setDependantControls(control, value);\n                    if (control.warning) {\n                        control.showWarning =\n                            conditions.validateConditions(control.warning.conditions, { value: control.value });\n                    }\n                    if (control.autoUpdate) {\n                        scope.updateParams();\n                    }\n                };\n                scope.onControlBlur = function (control) {\n                    if (!control.value && control.value !== 0 && control.default) {\n                        control.value = control.default;\n                    }\n                };\n                scope.updateParams = function () {\n                    if (!scope.paramChange || !scope.paramsReadyToRun) {\n                        return;\n                    }\n                    var params = getParamsFromControls(true);\n                    var popupMessage = popupConditions.shouldNotifyPopup(params);\n                    if (popupMessage !== \"\") {\n                        bootbox.confirm({\n                            message: popupMessage,\n                            buttons: {\n                                'cancel': {\n                                    label: 'No'\n                                },\n                                'confirm': {\n                                    label: 'Yes'\n                                }\n                            },\n                            callback: function (result) {\n                                if (result) {\n                                    updateParamsAux(params);\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        updateParamsAux(params);\n                    }\n                };\n                function updateParamsAux(params) {\n                    setAllRequiredParamsAvailable(true);\n                    //if the new changed params doesn't contain a specific page but the current params does, reset the\n                    // paging and go to the first page.\n                    var scopeParams = scope.getParams();\n                    if (scopeParams && scopeParams.page && params.urlParams && !params.urlParams.page) {\n                        params.urlParams.page = 1;\n                    }\n                    // Timeout so the setParams runs AFTER the dashboard scope params are changed by\n                    // setAllRequiredParamsAvailable. Otherwise, widgets in the dashboard that listen to changes in\n                    // params/paramsReady are not updated.\n                    $timeout(function () {\n                        scope.setParams({ params: params.urlParams });\n                        if (params.innerParams && Object.keys(params.innerParams).length) {\n                            scope.setParams({ params: params.innerParams, setToUrl: false });\n                        }\n                    }, 1);\n                    scope.paramChange = false;\n                    updateButtons(angular.extend({}, params.innerParams, params.urlParams));\n                    changedParams = {};\n                }\n                function setUpdateButton() {\n                    if (scope.controls) {\n                        for (var i = 0, control; !!(control = scope.controls[i]); i++) {\n                            if (!control.autoUpdate && !control.hide) {\n                                scope.renderUpdateButton = true;\n                                return;\n                            }\n                        }\n                    }\n                    scope.renderUpdateButton = false;\n                }\n                function setDependantControls(srcControl, value) {\n                    scope.controls.forEach(function (control) {\n                        if (srcControl !== control) {\n                            var dependency = control.dependencies && control.dependencies[srcControl.param];\n                            if (dependency) {\n                                if (control.type === \"date\") {\n                                    if (dependency === \"lesserThan\") {\n                                        control.maxValue =\n                                            value !== undefined && value !== null ? value : control.settings.maxDate;\n                                    }\n                                    else if (dependency === \"greaterThan\") {\n                                        control.minValue =\n                                            value !== undefined && value !== null ? value : control.settings.minDate;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                scope.requiredValueEmpty = function (control) {\n                    return (control && control.isRequired && (!control.value && control.value !== 0) && control.label);\n                };\n                //check if the control value is valid according to the control validator\n                scope.isNotValidValue = function (control) {\n                    if (control && control.filterValidator) {\n                        try {\n                            var validator = FilterValidators.getValidator(control.filterValidator, control.value);\n                            validator.validate();\n                        }\n                        catch (errorMessage) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n                function setAllRequiredParamsAvailable(setParamsReady) {\n                    var allRequiredParamsAvailable = true, allValueParamsValid = true, requiredParamNames = [];\n                    if (scope.controls) {\n                        for (var i = 0, control; scope.controls[i]; i++) {\n                            control = scope.controls[i];\n                            //in the case the control is required check if it have value\n                            if (scope.requiredValueEmpty(control)) {\n                                allRequiredParamsAvailable = false;\n                                requiredParamNames.push(control.label.toLowerCase());\n                            }\n                            //in the case the control have a validator check that the value is valid\n                            if (scope.isNotValidValue(control)) {\n                                allValueParamsValid = false;\n                            }\n                            if (control.disableConditions) {\n                                control.disabled = conditions.validateConditions(control.disableConditions, getParamsFromControls().urlParams, {});\n                            }\n                        }\n                    }\n                    //uses for the ng-disable of the update button\n                    scope.paramsReadyToRun = allRequiredParamsAvailable && allValueParamsValid;\n                    if (setParamsReady) {\n                        scope.paramsReady = allRequiredParamsAvailable && allValueParamsValid;\n                    }\n                    scope.requiredParamNames = scope.paramsReady ? null : utils.arrays.toSentence(requiredParamNames);\n                }\n                function getParamsFromControls() {\n                    var params = { urlParams: {} }, widgetParams = scope.getParams();\n                    if (scope.controls) {\n                        scope.controls.forEach(function (control) {\n                            if (control.defaultValueOnly && widgetParams[control.param]) {\n                                return true;\n                            }\n                            var innerParam, paramValue = null;\n                            if (control.settings && control.settings.useItemParams) {\n                                control.settings.items.forEach(function (item) {\n                                    params.urlParams[item.param] =\n                                        control.value && ~control.value.indexOf(item.param) ? \"true\" : null;\n                                });\n                            }\n                            else {\n                                controls.getControlValue(control, widgetParams, params.urlParams);\n                            }\n                            if (control.value && control.valueLabel) {\n                                params.urlParams[control.param + \"_label\"] = control.valueLabel;\n                            }\n                            if (control.innerParam) {\n                                if (!params.innerParams) {\n                                    params.innerParams = {};\n                                }\n                                else {\n                                    innerParam = params.innerParams[control.innerParam.name];\n                                }\n                                var innerParamValue = getInnerParamValue(control, paramValue);\n                                if (innerParam) {\n                                    params.innerParams[control.innerParam.name + \"_conjuction\"] = \"AND\";\n                                    if (!angular.isArray(innerParam)) {\n                                        params.innerParams[control.innerParam.name] = [innerParam];\n                                    }\n                                    params.innerParams[control.innerParam.name].push(innerParamValue);\n                                }\n                                else {\n                                    params.innerParams[control.innerParam.name] = innerParamValue;\n                                }\n                            }\n                        });\n                    }\n                    return params;\n                }\n                function getInnerParamValue(control, paramValue, params) {\n                    var value = control.innerParam.type && control.innerParam.type !== \"equals\" &&\n                        (paramValue || paramValue === 0) ?\n                        conditions.getParamOperator(control.innerParam.type) + paramValue : paramValue;\n                    if (control.innerParam.formatParam) {\n                        return utils.strings.parseValue(control.innerParam.formatParam, { value: value }, params);\n                    }\n                    return value;\n                }\n                /**\n                 * Takes the current params and fills the controls values accordingly\n                 */\n                function setControlParams() {\n                    var widgetParams = scope.getParams() || {}, innerParams = null;\n                    requiredParams = {};\n                    if (scope.controls) {\n                        scope.controls.forEach(function (control) {\n                            if (control.settings && control.settings.useItemParams) {\n                                control.value = [];\n                                control.settings.items.forEach(function (item) {\n                                    if (widgetParams[item.param]) {\n                                        control.value.push(item.param);\n                                    }\n                                });\n                            }\n                            else {\n                                setParamsToControl(control, widgetParams, innerParams);\n                            }\n                            if (control.isRequired) {\n                                requiredParams[control.param] = control.label;\n                            }\n                        });\n                    }\n                    setAllRequiredParamsAvailable(true);\n                    if (innerParams) {\n                        scope.setParams({ params: innerParams, setToUrl: false });\n                    }\n                    updateButtons(angular.extend({}, scope.getParams(), innerParams));\n                }\n                /**\n                 * Sets the contents of a control according to the available params.\n                 * @param control\n                 * @param params\n                 * @param innerParams\n                 */\n                function setParamsToControl(control, params, innerParams) {\n                    var paramValue;\n                    var dates;\n                    if (params[control.param] || params[control.param] === 0) {\n                        paramValue = params[control.param];\n                    }\n                    else {\n                        paramValue = control.defaultValue;\n                    }\n                    if (paramValue || paramValue === 0) {\n                        if (control.type === \"date\") {\n                            control.value = utils.date.getMoment(paramValue) || null;\n                            if (control.value) {\n                                control.value = control.value.toDate();\n                            }\n                        }\n                        else if (control.type === \"dateRange\") {\n                            if (paramValue && typeof paramValue === \"string\") {\n                                dates = paramValue.match(/^(\\d+)\\,(\\d+)$/);\n                            }\n                            if (dates) {\n                                control.value = {\n                                    timeStart: utils.date.getMoment(dates[1]).toDate(),\n                                    timeEnd: utils.date.getMoment(dates[2]).toDate()\n                                };\n                            }\n                        }\n                        else if (control.type === \"number\") {\n                            control.value =\n                                typeof (paramValue) === \"string\" ? parseInt(paramValue.match(/\\d+/), 10) : paramValue;\n                        }\n                        else if (control.type === \"boolean\") {\n                            control.value = paramValue !== \"false\";\n                        }\n                        else if (control.type === \"search\") {\n                            control.value = params[control.param];\n                            control.valueLabel = params[control.param + \"_label\"];\n                        }\n                        else {\n                            control.value = paramValue;\n                        }\n                        if (control.innerParam) {\n                            if (!innerParams) {\n                                innerParams = {};\n                            }\n                            var innerParam = innerParams[control.innerParam.name];\n                            if (!innerParam) {\n                                innerParam = innerParams[control.innerParam.name] = [];\n                            }\n                            else {\n                                innerParams[control.innerParam.name + \"_conjuction\"] = \"AND\";\n                            }\n                            innerParam.push(getInnerParamValue(control, paramValue, params));\n                        }\n                    }\n                }\n                function onParamsChange(e, changedParams) {\n                    if (utils.objects.containsAnyParam(changedParams, controlParamNames)) {\n                        scope.$broadcast(\"packageParamsChange\", changedParams);\n                    }\n                    updateButtons(scope.getParams());\n                    setControlParams();\n                }\n                var buttonsUpdateFunctions = {\n                    link: function (button, data, params) {\n                        button.settings.href = utils.strings.parseValue(button.settings.url, data, params);\n                        button.settings.parsedText = utils.strings.parseValue(button.settings.text, data, params);\n                    },\n                    multiLink: function (button, data, params) {\n                        button.settings.links.forEach(function (link) {\n                            link.href = utils.url.escapeUrl(utils.strings.parseValue(link.url, data, params));\n                            link.parsedText = utils.strings.parseValue(link.text, data, params);\n                        });\n                    }\n                };\n                function updateButtons(params) {\n                    if (!scope.buttons || !scope.buttons.length) {\n                        return;\n                    }\n                    var urlParams = [], paramValue, linkParams;\n                    function populateUrlParam(d) {\n                        if (d) {\n                            urlParams.push(paramName + \"=\" + encodeURIComponent(d));\n                        }\n                    }\n                    for (var paramName in params) {\n                        if (params.hasOwnProperty(paramName)) {\n                            paramValue = params[paramName];\n                            if (angular.isArray(paramValue)) {\n                                paramValue.forEach(populateUrlParam);\n                            }\n                            else if (paramValue) {\n                                urlParams.push(paramName + \"=\" + encodeURIComponent(paramValue));\n                            }\n                        }\n                    }\n                    var controlParams = getParamsFromControls();\n                    linkParams = angular.extend(controlParams.urlParams, controlParams.innerParams, params);\n                    scope.buttons.forEach(function (button) {\n                        button._show =\n                            !button.requiredParams || utils.objects.containsAllParams(params, button.requiredParams);\n                        var updater = buttonsUpdateFunctions[button.type];\n                        if (updater) {\n                            updater(button, { params: urlParams.join(\"&\") }, linkParams);\n                        }\n                    });\n                }\n                function setSearchSettings(control) {\n                    // if this is the second time for this control, we already binded the search function\n                    if (typeof (control.settings.search) === \"function\") {\n                        return;\n                    }\n                    if (!control.settings || !control.settings.search) {\n                        throw new Error(\"Can't set search for control, missing the search object.\");\n                    }\n                    if (Object(control.settings.search) !== control.settings.search) {\n                        throw new TypeError(\"Invalid search settings for control, expected an object but got \" +\n                            control.settings.search + \".\");\n                    }\n                    if (!control.settings.search.dataEntity || !control.settings.search.dataEntityField) {\n                        throw new Error(\"Can't set search for control, both settings.search.dataEntity and \" +\n                            \"settings.search.dataEntityField properties are required.\");\n                    }\n                    /* jshint validthis: true */\n                    if (control.settings.search) {\n                        control.settings.search =\n                            search.searchDataEntityField.bind(this, control.settings.search.dataEntity, control.settings.search.dataEntityField, control.settings.search.labelField, control.settings.search.extraTerms);\n                    }\n                }\n                function init() {\n                    if (scope.search) {\n                        setSearchSettings(scope.search);\n                    }\n                    eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n                    if (scope.controls) {\n                        setControlParams();\n                        scope.controls.forEach(function (control) {\n                            if (control.type === \"search\") {\n                                setSearchSettings(control);\n                            }\n                        });\n                        scope.controls.forEach(function (control) {\n                            controlParamNames.push(control.param);\n                        });\n                        setAllRequiredParamsAvailable();\n                        getParamsFromControls();\n                    }\n                    else {\n                        scope.paramsReady = true;\n                        scope.paramsReadyToRun = true;\n                        updateButtons(scope.getParams());\n                    }\n                }\n            }\n        };\n    }\n    paramControls.$inject =\n        [\"conditions\", \"eventBus\", \"utils\", \"search\", \"$timeout\", \"controls\", \"FilterValidators\",\n            \"popupConditions\"];\n    angular.module(\"Fortscale\").directive(\"paramControls\", paramControls);\n})();\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").directive(\"checklist\", [function () {\n            return {\n                restrict: 'E',\n                templateUrl: \"scripts/directives/checklist/checklist.template.html\",\n                replace: true,\n                require: '?ngModel',\n                scope: {\n                    items: \"=\",\n                    _onChange: \"&onChange\",\n                    defaultValue: \"=\",\n                    allowNone: \"=\",\n                    useItemParams: \"=\"\n                },\n                link: function postLink(scope, element, attrs, ngModel) {\n                    ngModel.$render = function () {\n                        if (!ngModel.$viewValue) {\n                            return;\n                        }\n                        var selectedItemsValues = ngModel.$viewValue || [];\n                        if (typeof (selectedItemsValues) === \"string\") {\n                            selectedItemsValues = selectedItemsValues.split(\",\");\n                        }\n                        scope.items.forEach(function (item) {\n                            item.checked = !!~selectedItemsValues.indexOf(scope.useItemParams ? item.param : item.value);\n                        });\n                    };\n                    scope.$watch(\"items\", function (items) {\n                        items.forEach(function (item) {\n                            if (item.checked === undefined) {\n                                item.checked = !!scope.defaultValue;\n                            }\n                        });\n                    });\n                    scope.selectAll = function () {\n                        scope.items.forEach(function (item) {\n                            item.checked = true;\n                        });\n                        scope.onChange();\n                    };\n                    scope.selectNone = function () {\n                        scope.items.forEach(function (item) {\n                            item.checked = false;\n                        });\n                        scope.onChange();\n                    };\n                    scope.onChange = function () {\n                        var selectedItemsValues = [], allSelected = true;\n                        scope.items.forEach(function (_item) {\n                            if (_item.checked) {\n                                selectedItemsValues.push(scope.useItemParams ? _item.param || _item.value : _item.value);\n                            }\n                            else {\n                                allSelected = false;\n                            }\n                        });\n                        if (!selectedItemsValues.length) {\n                            selectedItemsValues = null;\n                        }\n                        ngModel.$setViewValue(selectedItemsValues, scope);\n                        if (scope._onChange) {\n                            scope._onChange(selectedItemsValues);\n                        }\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .directive(\"dropdownNoclose\", [function dropdownNoCloseDirective() {\n            return {\n                restrict: 'AC',\n                link: function postLink(scope, element, attrs) {\n                    element.on(\"click\", function (e) {\n                        e.stopPropagation();\n                    });\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").directive(\"buttonSelect\", [function () {\n            return {\n                restrict: 'E',\n                templateUrl: \"scripts/directives/button_select/button_select.template.html\",\n                replace: true,\n                require: '?ngModel',\n                scope: {\n                    \"buttons\": \"=\"\n                },\n                link: function postLink(scope, element, attrs, ngModel) {\n                    function setSelectedButton() {\n                        if (!scope.buttons) {\n                            return;\n                        }\n                        scope.buttons.forEach(function (button) {\n                            button.selected = String(ngModel.$viewValue) === String(button.value);\n                            if (button.selected) {\n                                selectedButton = button;\n                            }\n                        });\n                    }\n                    var selectedButton;\n                    ngModel.$render = setSelectedButton;\n                    scope.$watch(\"buttons\", setSelectedButton);\n                    scope.selectButton = function (button) {\n                        if (button === selectedButton) {\n                            return false;\n                        }\n                        if (selectedButton) {\n                            selectedButton.selected = false;\n                        }\n                        selectedButton = button;\n                        button.selected = true;\n                        ngModel.$setViewValue(button.value, scope);\n                    };\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"NumbersOnlyModule\", []).directive(\"numbersOnly\", function () {\n        return {\n            restrict: \"A\",\n            require: 'ngModel',\n            link: function ($scope, element, $attrs, ngModelCtrl) {\n                ngModelCtrl.$parsers.push(function (inputValue) {\n                    if (inputValue === undefined) {\n                        return '';\n                    }\n                    var transformedInput = inputValue.replace(/[^\\d.]/g, '');\n                    if (transformedInput !== inputValue) {\n                        ngModelCtrl.$setViewValue(transformedInput);\n                        ngModelCtrl.$render();\n                    }\n                    return transformedInput;\n                });\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"DurationOnlyModule\", []).directive(\"durationOnly\", function () {\n        return {\n            restrict: \"A\",\n            require: 'ngModel',\n            link: function ($scope, element, $attrs, ngModelCtrl) {\n                //allows to enter the input field only digits and ':' - to support the format hh:mm:ss\n                ngModelCtrl.$parsers.push(function (inputValue) {\n                    if (inputValue === undefined) {\n                        return '';\n                    }\n                    var transformedInput = inputValue.replace(/[^\\d:]/g, '');\n                    if (transformedInput !== inputValue) {\n                        ngModelCtrl.$setViewValue(transformedInput);\n                        ngModelCtrl.$render();\n                    }\n                    return transformedInput;\n                });\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"NumberRangeModule\", [\"NumbersOnlyModule\"]).directive(\"numberRange\", function () {\n        return {\n            restrict: \"E\",\n            templateUrl: \"scripts/directives/number_range/number_range_template.html\",\n            replace: true,\n            require: \"?ngModel\",\n            scope: {\n                minVal: '=',\n                maxVal: '='\n            },\n            link: function ($scope, element, attrs, ngModelCtrl) {\n                function initScopeVars() {\n                    $scope.minPlaceholderValue = $scope.minVal ? \"> \" + $scope.minVal : \"From\";\n                    $scope.maxPlaceholderValue = $scope.maxVal ? \"< \" + $scope.maxVal : \"To\";\n                }\n                ngModelCtrl.$render = function () {\n                    $scope.value = angular.copy(ngModelCtrl.$viewValue);\n                };\n                initScopeVars();\n                $scope.validateInput = function () {\n                    ngModelCtrl.$setViewValue(angular.copy($scope.value));\n                };\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"StringInModule\", []).directive(\"stringIn\", function () {\n        return {\n            restrict: \"E\",\n            templateUrl: \"scripts/directives/in_operator/string_in_template.html\",\n            replace: true,\n            require: \"?ngModel\",\n            scope: {\n                inValues: '=ngModel',\n                isSearchable: '=',\n                searchSettings: '='\n            },\n            link: function ($scope) {\n                function initValues() {\n                    for (var i = 0; i < $scope.inValues.length; i++) {\n                        var val = $scope.inValues[i];\n                        $scope.vals.push({ enabled: true, val: val });\n                    }\n                }\n                function isInValExist(val) {\n                    for (var i = 0; i < $scope.vals.length; i++) {\n                        if ($scope.vals[i].val === val) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                function getAllEnabledValues() {\n                    var arr = [];\n                    for (var i = 0; i < $scope.vals.length; i++) {\n                        var stringInVal = $scope.vals[i];\n                        if (stringInVal.enabled) {\n                            arr.push(stringInVal.val);\n                        }\n                    }\n                    return arr;\n                }\n                $scope.vals = [];\n                if ($scope.inValues) {\n                    initValues();\n                }\n                $scope.onStringInEnter = function (event) {\n                    if (event.which === 13) {\n                        var element = angular.element(event.target);\n                        var val = element.val();\n                        if (val && !isInValExist(val)) {\n                            $scope.vals.push({ enabled: true, val: val });\n                            $scope.inValues = getAllEnabledValues();\n                        }\n                        element.val(\"\");\n                        event.preventDefault();\n                    }\n                };\n                $scope.onStringInSearchSelect = function ($value) {\n                    if ($value && !isInValExist($value)) {\n                        $scope.vals.push({ enabled: true, val: $value });\n                        $scope.inValues = getAllEnabledValues();\n                    }\n                };\n                $scope.removeStringInVal = function (val, index) {\n                    $scope.vals.splice(index, 1);\n                    $scope.inValues = getAllEnabledValues();\n                };\n                $scope.onCheckboxClick = function () {\n                    $scope.inValues = getAllEnabledValues();\n                };\n            }\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\")\n        .filter('dataFieldType', function () {\n        return function (fields, dataFieldType) {\n            if (!dataFieldType) {\n                return fields;\n            }\n            var filteredFields = [];\n            angular.forEach(fields, function (field) {\n                if (field.type === dataFieldType) {\n                    filteredFields.push(field);\n                }\n            });\n            return filteredFields;\n        };\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"GeoHoppingPackageController\", [\"$scope\", \"$timeout\", \"geoHopping\", \"eventBus\", \"state\", \"utils\",\n        function ($scope, $timeout, geoHopping, eventBus, state, utils) {\n            function destroy() {\n                state.onStateChange.unsubscribe(setEvents);\n            }\n            function setEvents(e, data) {\n                if (data && data.params && (data.params.subDashboardId || data.params.dashboardId)) {\n                    destroy();\n                    return;\n                }\n                $timeout.cancel(getDataTimeout);\n                getDataTimeout = $timeout(function () {\n                    if ($scope.widget.parent) {\n                        var params = utils.objects.extend({}, state.currentParams, $scope.widget.parent.getState());\n                        $scope.$parent.packageLoading = true;\n                        $scope.widget.isLoading = true;\n                        geoHopping.getUserEvents(params.notifications_events_dates &&\n                            params.notifications_events_dates.split(\",\")[0], params.notifications_events_dates && params.notifications_events_dates.split(\",\")[1], params.user).then(function (userEvents) {\n                            $scope.userEvents = userEvents;\n                            $scope.usersTitle = \"user\";\n                            $scope.isMultipleUsers = false;\n                            if ($scope.userEvents && $scope.userEvents.length) {\n                                var userCount = parseInt($scope.userEvents.length);\n                                if (!isNaN(userCount) && userCount > 1) {\n                                    $scope.usersTitle = userCount + \" users\";\n                                    $scope.isMultipleUsers = true;\n                                }\n                            }\n                            $scope.showAllUsers();\n                            $scope.widget.isLoading = false;\n                            $scope.widget.error = null;\n                        }, function () {\n                            $scope.widget.loading = false;\n                            $scope.widget.error = \"Error getting geo hopping data from server.\";\n                        });\n                    }\n                }, 200);\n            }\n            function init() {\n                setEvents();\n                state.onStateChange.subscribe(setEvents);\n            }\n            var getDataTimeout;\n            $scope.graphSettings = geoHopping.graphSettings;\n            $scope.view = {\n                \"type\": \"table\",\n                settings: geoHopping.tableSettings\n            };\n            $scope.$on(\"$destroy\", destroy);\n            $scope.$on(\"refresh\", function () {\n                setEvents();\n            });\n            $scope.showUser = function (user) {\n                if (user) {\n                    geoHopping.getTableData($scope.view, user.events, state.currentParams).then(function (tableData) {\n                        $scope.view.data = tableData;\n                    });\n                    $scope.currentGeoHoppingUser = user;\n                }\n                else {\n                    $scope.showAllUsers();\n                }\n            };\n            $scope.showAllUsers = function () {\n                var allEvents = [];\n                $scope.userEvents.forEach(function (user) {\n                    allEvents = allEvents.concat(user.events);\n                });\n                $scope.currentGeoHoppingUser =\n                    { name: $scope.userEvents.length === 1 ? $scope.userEvents[0].name : \"All Users\" };\n                geoHopping.getTableData($scope.view, allEvents, state.currentParams).then(function (tableData) {\n                    $scope.view.data = tableData;\n                });\n            };\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").factory(\"geoHopping\", [\"securityFeed\", \"utils\", \"widgetViews\", function (securityFeed, utils, widgetViews) {\n            return {\n                get graphSettings() {\n                    return {\n                        \"value\": \"date_time\",\n                        \"unique\": \"id\",\n                        \"label\": \"name\",\n                        \"eventLabelField\": \"country\",\n                        \"scales\": {\n                            x: {\n                                type: \"time\"\n                            }\n                        },\n                        axes: {\n                            x: {\n                                type: \"time\",\n                                label: \"VPN Events Time\"\n                            }\n                        },\n                        options: {\n                            margins: {\n                                top: 0,\n                                left: 0,\n                                right: 5,\n                                bottom: 0\n                            }\n                        },\n                        eventTooltip: \"{{city}}, {{country}} @ {{date_time:date}}\"\n                    };\n                },\n                get tableSettings() {\n                    return {\n                        fields: [\n                            {\n                                name: \"Username\",\n                                value: \"{{username}}\",\n                                link: \"#/d/explore/vpn?filters=vpn.username%3D{{username}}\",\n                                externalLinks: [{\n                                        url: \"#/user/{{userId}}/user_overview\",\n                                        icon: \"user\",\n                                        tooltip: \"Go to {{username}}'s page\"\n                                    }]\n                            },\n                            {\n                                name: \"Source\",\n                                value: \"{{source_ip}}\",\n                                link: \"#/d/explore/vpn?filters=vpn.source_ip%3D{{source_ip}}\"\n                            },\n                            {\n                                name: \"Country\",\n                                value: \"{{country}}\",\n                                link: \"#/d/explore/vpn?filters=vpn.country%3D{{country}}\"\n                            },\n                            {\n                                name: \"City\",\n                                value: \"{{city}}\",\n                                link: \"#/d/explore/vpn?filters=vpn.city%3D{{city}}\"\n                            },\n                            {\n                                name: \"Time\",\n                                value: \"{{date_time:date}}\"\n                            }\n                        ]\n                    };\n                },\n                getUserEvents: function (start, end, userId) {\n                    return securityFeed.getNotifications({\n                        after: start,\n                        before: end,\n                        userIds: userId,\n                        types: \"VpnGeoHoppingNotificationGenerator\"\n                    }).then(function (notifications) {\n                        var userEventsIndex = {}, userEvents = [];\n                        notifications.forEach(function (notification) {\n                            var user = userEventsIndex[notification.userid];\n                            if (!user) {\n                                user = userEventsIndex[notification.userid] =\n                                    { name: notification.username, id: notification.userid, events: [] };\n                            }\n                            user.events.push({\n                                date_time: utils.date.getMoment(notification.event_time_utc).toDate(),\n                                country: utils.strings.capitalize(notification.country),\n                                city: utils.strings.capitalize(notification.city),\n                                source_ip: notification.source_ip,\n                                username: notification.username,\n                                local_ip: notification.local_ip,\n                                id: notification.id,\n                                userId: notification.userid\n                            });\n                        });\n                        for (var userId in userEventsIndex) {\n                            if (userEventsIndex.hasOwnProperty(userId)) {\n                                userEvents.push(userEventsIndex[userId]);\n                            }\n                        }\n                        return userEvents;\n                    });\n                },\n                getTableData: function (_view, data, params, rawData) {\n                    data = _.uniq(data, 'id');\n                    return widgetViews.parseViewData(_view, data, params, rawData);\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"TabsWidget\", [\"Utils\", \"Styles\", \"Widgets\"]).run([\"utils\", \"styles\", \"widgetViews\",\n        function (utils, styles, widgetViews) {\n            function tabsDataParser(view, data, params) {\n                var viewData;\n                if (view.settings.tab) {\n                    viewData = [];\n                    angular.forEach(data, function (item, itemIndex) {\n                        var itemData = {};\n                        itemData.display = utils.strings.parseValue(view.settings.tab.display, item, params, itemIndex);\n                        itemData.id = utils.strings.parseValue(view.settings.tab.id, item, params, itemIndex);\n                        if (view.settings.tab.style) {\n                            styles.getStyle(view.settings.tab, item).then(function (style) {\n                                itemData.style = style;\n                            });\n                        }\n                        if (view.settings.label) {\n                            itemData.label = {\n                                value: utils.strings.parseValue(view.settings.label.value, item, params, itemIndex)\n                            };\n                            if (view.settings.label.style) {\n                                styles.getStyle(view.settings.label, item).then(function (style) {\n                                    itemData.label.style = style;\n                                });\n                            }\n                        }\n                        viewData.push(itemData);\n                    });\n                }\n                else if (view.settings.tabs) {\n                    viewData = view.settings.tabs;\n                }\n                return viewData;\n            }\n            widgetViews.registerView(\"tabs\", { dataParser: tabsDataParser });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale\").controller(\"TabsWidgetController\", [\"$scope\", \"eventBus\", \"dashboards\", \"events\", \"state\", function ($scope, eventBus, dashboards, events, state) {\n            var selectedDashboardParam;\n            $scope.dashboard = null;\n            $scope.$on(\"$destroy\", function () {\n                eventBus.unsubscribe(\"dashboardParamsChange\", onParamsChange);\n            });\n            $scope.initDashboardForAtab = function (tab) {\n                if (tab.dashboard) {\n                    $scope.dashboard = dashboards.createDashboard(tab.dashboard);\n                }\n            };\n            $scope.selectTab = function (tab, tabIndex, isDefaultTab) {\n                if (!setCurrentTab(tabIndex)) {\n                    return;\n                }\n                else if (tab.dashboardId) {\n                    dashboards.getDashboardById(tab.dashboardId).then(function (dashboard) {\n                        tab.dashboard = $scope.dashboard = dashboard;\n                    });\n                }\n                if ($scope.view.settings.events) {\n                    angular.forEach($scope.view.settings.events, function (eventSettings) {\n                        if (eventSettings.eventName === \"select\") {\n                            var eventSettingsCopy = angular.copy(eventSettings);\n                            if (isDefaultTab && eventSettingsCopy.actionOptions) {\n                                eventSettingsCopy.actionOptions.updateUrl = false;\n                            }\n                            events.triggerDashboardEvent(eventSettingsCopy, tab, state.currentParams);\n                        }\n                    });\n                }\n                if ($scope.view.settings.onSelect) {\n                    $scope.view.settings.onSelect(tab);\n                }\n            };\n            function setCurrentTabFromDashboardParam() {\n                var currentlySelectedTab = $scope.getWidgetParams()[selectedDashboardParam];\n                if (currentlySelectedTab) {\n                    var tabToSelect = findTab(currentlySelectedTab);\n                    if (tabToSelect) {\n                        if (setCurrentTab(tabToSelect.tabIndex)) {\n                            return true;\n                        }\n                        else {\n                            return -1;\n                        }\n                    }\n                }\n                return false;\n            }\n            function onParamsChange(e, changedParams) {\n                if (changedParams[selectedDashboardParam]) {\n                    var tabToSelect = findTab(changedParams[selectedDashboardParam]);\n                    if (tabToSelect) {\n                        setCurrentTab(tabToSelect.tabIndex);\n                    }\n                    else {\n                        $scope.currentTab = null;\n                        $scope.currentTabIndex = null;\n                    }\n                }\n            }\n            function init() {\n                var selectedMatch;\n                if ($scope.view.settings.tab && $scope.view.settings.tab.selected) {\n                    selectedMatch = $scope.view.settings.tab.selected.match(/^@(.*)$/);\n                    if (selectedMatch) {\n                        selectedDashboardParam = selectedMatch[1];\n                        eventBus.subscribe(\"dashboardParamsChange\", onParamsChange);\n                    }\n                    else {\n                        console.error(\"Invalid selected property for tabs - \" +\n                            \"must be a dashboard param and start with '@'.\");\n                    }\n                }\n                else if ($scope.view.settings.tabs && $scope.view.settings.selectedTabId) {\n                    selectedMatch = $scope.view.settings.selectedTabId.match(/^@(.*)$/);\n                    if (selectedMatch) {\n                        selectedDashboardParam = selectedMatch[1];\n                    }\n                }\n                $scope.$on(\"onWidgetData\", function () {\n                    if ($scope.view.data) {\n                        setCurrentTabFromDashboardParam();\n                    }\n                });\n                if (!setCurrentTabFromDashboardParam()) {\n                    selectFirstTab();\n                }\n                if ($scope.view.settings.refreshOn) {\n                    angular.forEach($scope.view.settings.refreshOn, function (refreshParam) {\n                        $scope.$on(\"dashboardParamsChange\", function (e, changedParams) {\n                            if (changedParams[refreshParam]) {\n                                setCurrentTabFromDashboardParam();\n                            }\n                        });\n                    });\n                }\n            }\n            function selectFirstTab() {\n                if ($scope.view.settings.tabs && $scope.view.settings.tabs.length) {\n                    $scope.selectTab($scope.view.settings.tabs[0], 0, true);\n                }\n                else if ($scope.view.settings.tab && $scope.view.data && $scope.view.data.length) {\n                    $scope.selectTab($scope.view.data[0], 0, true);\n                }\n            }\n            function setCurrentTab(tabIndex) {\n                if (tabIndex !== $scope.currentTabIndex && $scope.view.data) {\n                    $scope.currentTab = $scope.view.data[tabIndex];\n                    $scope.initDashboardForAtab($scope.currentTab);\n                    $scope.currentTabIndex = tabIndex;\n                    return true;\n                }\n                return false;\n            }\n            function findTab(id) {\n                if (!id || !$scope.view.data) {\n                    return null;\n                }\n                for (var i = 0, tab; !!(tab = $scope.view.data[i]); i++) {\n                    if (tab.id === id) {\n                        return { tab: tab, tabIndex: i };\n                    }\n                }\n                return null;\n            }\n            init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Loader\", [\"DataEntities\", \"Controls\", 'Fortscale.shared.services.assert', \"Fortscale.remoteAppConfig\"])\n        .run([\"dataEntities\", \"controls\", \"remoteAppConfig\", \"$q\",\n        function (dataEntities, controls, remoteAppConfig, $q) {\n            // If last login was more then an hour ago\n            var lastLoginTime = parseInt(localStorage.getItem('last-login-time'), 10);\n            if (lastLoginTime && lastLoginTime + (1000 * 60 * 60) < Date.now().valueOf()) {\n                // If there is session login then do nothing. http-request-interceptor will do\n                // what needs to be done. If no session login, go to login.\n                var sessionLogin = sessionStorage.getItem('session-login');\n                if (!sessionLogin) {\n                    window.location.href = 'signin.html?redirect=' +\n                        encodeURIComponent(document.location.hash);\n                    return;\n                }\n            }\n            var initPromises = [dataEntities.initEntities(), controls.initControls(),\n                remoteAppConfig.initRemoteAppConfig()];\n            // After all pre loaded resources were loaded will start the Fortscale application\n            $q.all(initPromises).then(function () {\n                angular.element(document).ready(function () {\n                    angular.bootstrap(document, [\"Fortscale\"]);\n                });\n            });\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Config')\n        .constant('BASE_URL', '/fortscale-webapp/api')\n        .constant('BASE_WEBSOCKET_URL', '/fortscale-webapp');\n}());\n","(function () {\n    'use strict';\n    /**\n     *\n     * @param {string} id\n     * @param {string} displayName\n     * @param {string} displayChar\n     * @param {string} color\n     * @param {Array<number>} scoreRange\n     * @constructor\n     */\n    function Severity(id, displayName, displayChar, color, scoreRange) {\n        this.id = id;\n        this.displayName = displayName;\n        this.displayChar = displayChar;\n        this.color = color;\n        this.scoreRange = scoreRange;\n    }\n    var SEVERITIES;\n    /**\n     *\n     * @param {string} id\n     * @returns {Severity || null}\n     */\n    function getById(id) {\n        var severity = _.filter(SEVERITIES, { id: id });\n        return severity ? severity[0] : null;\n    }\n    /**\n     *\n     * @param {number} score\n     * @returns {Severity || null}\n     */\n    function getByScore(score) {\n        var severity = _.filter(SEVERITIES, function (severity) {\n            return score >= severity.scoreRange[0] && score <= severity.scoreRange[1];\n        });\n        return severity ? severity[0] : null;\n    }\n    function getList() {\n        return _.map(SEVERITIES);\n    }\n    SEVERITIES = [\n        new Severity('critical', 'Critical', 'C', '#F36F63', [90, 100]),\n        new Severity('high', 'High', 'H', '#E99848', [75, 89]),\n        new Severity('medium', 'Medium', 'M', '#F2C446', [50, 74]),\n        new Severity('low', 'Low', 'L', '#B0C75E', [0, 49])\n    ];\n    SEVERITIES.getById = getById;\n    SEVERITIES.getByScore = getByScore;\n    SEVERITIES.getList = getList;\n    angular.module('Config')\n        .constant('SEVERITIES', SEVERITIES);\n}());\n","(function () {\n    'use strict';\n    angular.module('Config')\n        .constant('VERSION_NUMBER', '3.0.0')\n        .constant('VERSION_YEAR', '2017')\n        .constant('VERSION_COMPANY', 'Fortscale User Behavior Analytics');\n}());\n","(function () {\n    'use strict';\n    /**\n     * Factory restangular.adapters.dataQueryAdapter\n     * returns a function that is an adapter for data returned from Fortscale's dataQuery api\n     *\n     * @returns {Function}\n     * @constructor\n     */\n    function DataAdapters() {\n        var provider = this;\n        provider._errorMsg = 'restangular.dataAdapters: ';\n        /**\n         * Takes a data object (returned by Fortscale's dataQuery api) and converts it to a\n         * generalized object schema where the main object holds the data,\n         * and it has a _meta property holding all meta data\n         *\n         * @param {object} data\n         * @returns {object}\n         */\n        provider.processDataQuery = function (data) {\n            // Validations (not using assert because its a provider)\n            if (!(data && angular.isDefined(data.data))) {\n                throw new ReferenceError(provider._errorMsg +\n                    'provided data argument must have a \"data\" property.');\n            }\n            if (!angular.isObject(data.data)) {\n                throw new TypeError(provider._errorMsg +\n                    'provided data argument\\'s \"data\" property must be an object.');\n            }\n            // Set the 'actual' data as the primary object\n            var transformedData = data.data;\n            // Create a _meta object for holding meta data\n            transformedData._meta = {};\n            // Iterate through all keys on the data and attach them to _meta object (expect for\n            // 'data' key which is already the primary object\n            _.each(data, function (value, key, obj) {\n                if (key !== 'data') {\n                    transformedData._meta[key] = value;\n                }\n            });\n            // Return the transformed data object\n            return transformedData;\n        };\n        /**\n         * Takes a data object (returned by Fortscale's rest api) and converts it to a\n         * generalized object schema where the main object holds the data,\n         * and it has a _meta property holding all meta data\n         *\n         * @param {object} data\n         * @returns {object}\n         */\n        provider.processRest = function (data) {\n            // Validations (not using assert because its a provider)\n            if (!(data && angular.isDefined(data.data))) {\n                throw new ReferenceError(provider._errorMsg +\n                    'provided data argument must have an \"data\" property.');\n            }\n            if (!angular.isObject(data.data)) {\n                throw new TypeError(provider._errorMsg +\n                    'provided data._embedded argument\\'s \"data\" property must be an object.');\n            }\n            // Set the 'actual' data as the primary object\n            var transformedData = data.data;\n            // Create a _meta object for holding meta data\n            transformedData._meta = {};\n            // Iterate through all keys on the data and attach them to _meta object (expect for\n            // 'data' key which is already the primary object\n            _.each(data, function (value, key, obj) {\n                if (key !== 'data') {\n                    transformedData._meta[key] = value;\n                }\n            });\n            // Return the transformed data object\n            return transformedData;\n        };\n        /*\n        The $get is an angular convention, and is !required! when creating a provider.\n         */\n        provider.$get = [function () {\n                throw new Error(provider._errorMsg +\n                    'This provider is only supposed to be consumed in config phase.');\n            }];\n    }\n    function restangularConfig(BASE_URL, RestangularProvider, dataAdaptersProvider) {\n        // Set base url\n        RestangularProvider.setBaseUrl(BASE_URL);\n        // Add response interceptor\n        // This is uses to 'iron-out' the response coming from different sources and having\n        // different schemas\n        RestangularProvider.addResponseInterceptor(function (data, operation, entity) {\n            if (entity === 'dataQuery') {\n                return dataAdaptersProvider.processDataQuery(data);\n            }\n            else {\n                return dataAdaptersProvider.processRest(data);\n            }\n        });\n    }\n    restangularConfig.$inject = [\n        'BASE_URL',\n        'RestangularProvider',\n        'restangular.dataAdaptersProvider'\n    ];\n    angular.module('Fortscale')\n        .provider('restangular.dataAdapters', DataAdapters)\n        .config(restangularConfig);\n}());\n","(function () {\n    'use strict';\n    var defaultLang = 'en_US';\n    angular.module('Fortscale')\n        .config(['$translateProvider', function ($translateProvider) {\n            $translateProvider.useLoader('customAngularTranslateLoader');\n            $translateProvider.preferredLanguage('en');\n        }]);\n    /**\n     * Factory for $translateProvider to load the messages from rest API\n     */\n    function CustomAngularTranslateLoaderFactory($http, BASE_URL, $q) {\n        /**\n         * This method fetch the messages from the RestAPI and return manipulated messages object to translateProvider\n         */\n        function customAngularTranslateLoader(options) {\n            return $http({\n                method: 'GET',\n                url: BASE_URL + '/messages/' + defaultLang //Use for real messages from server (/api/messages/lang)\n            }).then(function (response) {\n                return response.data.data;\n            }, function () {\n                return options.key;\n            });\n        }\n        return customAngularTranslateLoader;\n    }\n    CustomAngularTranslateLoaderFactory.$inject = ['$http', 'BASE_URL', '$q'];\n    angular.module('Fortscale')\n        .factory('customAngularTranslateLoader', CustomAngularTranslateLoaderFactory);\n}());\n","(function () {\n    'use strict';\n    var remoteConfigList = null;\n    var restPath = 'application_configuration';\n    function RemoteAppConfigProvider() {\n        var provider = this;\n        /**\n         * Change the REST path in config phase.\n         *\n         * @param _restPath\n         */\n        provider.changeRestPath = function (_restPath) {\n            restPath = _restPath;\n        };\n        function RemoteAppConfigFactory(assert, BASE_URL, $http) {\n            var remoteConfigApi;\n            /**\n             * Returns the REST url\n             *\n             * @returns {string}\n             * @private\n             */\n            function _getUrl() {\n                return BASE_URL + '/' + restPath;\n            }\n            /**\n             * This is used by the Loader module. It loads the remote configuration and stores in remoteConfigList\n             *\n             * @returns {Promise.<T>|*}\n             */\n            function initRemoteAppConfig() {\n                return $http.get(remoteConfigApi._getUrl())\n                    .then(function (res) {\n                    remoteConfigList = res.data.data;\n                })\n                    .catch(function (err) {\n                    console.error('Remote configuration could not be loaded due to an http error.');\n                    console.error(err);\n                    remoteConfigList = {};\n                });\n            }\n            /**\n             * Returns a duplicated list of remote config list.\n             *\n             * @returns {Array<{key: string, value: string}>}\n             */\n            function getRemoteConfigList() {\n                return _.map(remoteConfigList, function (configurationItem) {\n                    return _.merge({}, configurationItem);\n                });\n            }\n            /**\n             *\n             * @param {Array<{key: string, value: string}>} configItemsList\n             * @returns {HttpPromise}\n             */\n            function updateConfigItems(configItemsList) {\n                return $http.post(remoteConfigApi._getUrl(), {\n                    items: configItemsList\n                });\n            }\n            remoteConfigApi = {\n                _getUrl: _getUrl,\n                initRemoteAppConfig: initRemoteAppConfig,\n                getRemoteConfigList: getRemoteConfigList,\n                updateConfigItems: updateConfigItems\n            };\n            return remoteConfigApi;\n        }\n        provider.$get = [\n            'assert', 'BASE_URL', '$http',\n            RemoteAppConfigFactory\n        ];\n    }\n    RemoteAppConfigProvider.$inject = [];\n    angular.module('Fortscale.remoteAppConfig', [])\n        .provider('remoteAppConfig', RemoteAppConfigProvider);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var appConfigProvider;\n    (function (appConfigProvider) {\n        var configContainerProvider;\n        (function (configContainerProvider) {\n            var ConfigContainer = (function () {\n                function ConfigContainer(id, displayName, description, parent, configurable, allowUpsert) {\n                    this.id = id;\n                    this.displayName = displayName;\n                    this.description = description;\n                    this.parent = parent;\n                    this.configurable = configurable;\n                    this.allowUpsert = allowUpsert;\n                }\n                return ConfigContainer;\n            }());\n            configContainerProvider.ConfigContainer = ConfigContainer;\n            var ConfigContainerProvider = (function () {\n                function ConfigContainerProvider(assert) {\n                    this.assert = assert;\n                    this.$get = [function () {\n                            throw new Error('ConfigContainerProvider works only as a provider and not as a service');\n                        }];\n                }\n                /**\n                 * factory method for ConfigContainer\n                 * @param configContainerData\n                 * @returns {Fortscale.appConfig.ConfigContainer.ConfigContainer}\n                 */\n                ConfigContainerProvider.prototype.createContainer = function (configContainerData) {\n                    // Validations\n                    this.assert.isString(configContainerData.id, 'id', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configContainerData.displayName, 'displayName', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configContainerData.description, 'description', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configContainerData.parent, 'parent', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    var id = configContainerData.id;\n                    var displayName = configContainerData.displayName;\n                    var description = configContainerData.description;\n                    var parent = ConfigContainerProvider._getParent(configContainerData.parent, id);\n                    var configurable = typeof configContainerData.configurable === 'undefined' ? true :\n                        !!configContainerData.configurable;\n                    var allowUpsert = !!configContainerData.allowUpsert;\n                    return new ConfigContainer(id, displayName, description, parent, configurable, allowUpsert);\n                };\n                ConfigContainerProvider._getParent = function (parent, id) {\n                    if (!parent) {\n                        parent = null;\n                        var nameSpaceNodes = id.split(appConfigProvider.NAMESPACE_DELIMITER);\n                        nameSpaceNodes.pop();\n                        if (nameSpaceNodes.length) {\n                            parent = nameSpaceNodes.join(appConfigProvider.NAMESPACE_DELIMITER);\n                        }\n                    }\n                    return parent;\n                };\n                ConfigContainerProvider.$inject = ['assertConstant'];\n                return ConfigContainerProvider;\n            }());\n            configContainerProvider.ConfigContainerProvider = ConfigContainerProvider;\n            angular.module('Fortscale.appConfig.ConfigContainer', ['Fortscale.shared.services.assert'])\n                .provider('Fortscale.appConfig.ConfigContainer', ConfigContainerProvider);\n        })(configContainerProvider = appConfigProvider.configContainerProvider || (appConfigProvider.configContainerProvider = {}));\n    })(appConfigProvider = Fortscale.appConfigProvider || (Fortscale.appConfigProvider = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var appConfigProvider;\n    (function (appConfigProvider) {\n        var configItemProvider;\n        (function (configItemProvider) {\n            var ConfigItem = (function () {\n                function ConfigItem(id, containerId, description, displayName, type, validators, formatter, value, _originalValue, meta) {\n                    this.id = id;\n                    this.containerId = containerId;\n                    this.description = description;\n                    this.displayName = displayName;\n                    this.type = type;\n                    this.validators = validators;\n                    this.formatter = formatter;\n                    this.value = value;\n                    this._originalValue = _originalValue;\n                    this.meta = meta;\n                }\n                return ConfigItem;\n            }());\n            configItemProvider.ConfigItem = ConfigItem;\n            var ConfigItemProvider = (function () {\n                function ConfigItemProvider(assert) {\n                    this.assert = assert;\n                    this.$get = [function () {\n                            throw new Error('ConfigItemProvider works only as a provider and not as a service');\n                        }];\n                }\n                ConfigItemProvider.prototype._getContainerId = function (containerId, id) {\n                    if (!containerId) {\n                        var nameSpaceNodes = id.split(appConfigProvider.NAMESPACE_DELIMITER);\n                        // Make sure there are at least two nodes\n                        this.assert((nameSpaceNodes.length >= 2), 'appConfig: new ConfigItem: configObj: id must be a namespace with at least one dot. example: ' +\n                            'someConfig.configId. id: ' + id, RangeError);\n                        nameSpaceNodes.pop();\n                        containerId = nameSpaceNodes.join(appConfigProvider.NAMESPACE_DELIMITER);\n                    }\n                    return containerId;\n                };\n                ;\n                ConfigItemProvider.prototype.createItem = function (configItemData) {\n                    // Validations\n                    this.assert.isString(configItemData.id, 'id', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configItemData.containerId, 'containerId', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configItemData.displayName, 'displayName', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    this.assert.isString(configItemData.description, 'description', 'appConfig: new ConfigItem: configObj: ', appConfigProvider.IS_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    // Assignments\n                    var id = configItemData.id;\n                    var containerId = this._getContainerId(configItemData.containerId, id);\n                    var description = configItemData.description;\n                    var displayName = configItemData.displayName;\n                    var type = configItemData.type || null;\n                    var validators = configItemData.validators ? configItemData.validators :\n                        [configItemData.type];\n                    var formatter = configItemData.formatter || configItemData.type || null;\n                    var value = configItemData.value === undefined ? null : configItemData.value;\n                    var _originalValue = configItemData.value;\n                    var meta = configItemData.meta || null;\n                    return new ConfigItem(id, containerId, description, displayName, type, validators, formatter, value, _originalValue, meta);\n                };\n                ConfigItemProvider.$inject = ['assertConstant'];\n                return ConfigItemProvider;\n            }());\n            configItemProvider.ConfigItemProvider = ConfigItemProvider;\n            angular.module('Fortscale.appConfig.ConfigItem', ['Fortscale.shared.services.assert'])\n                .provider('Fortscale.appConfig.ConfigItem', ConfigItemProvider);\n        })(configItemProvider = appConfigProvider.configItemProvider || (appConfigProvider.configItemProvider = {}));\n    })(appConfigProvider = Fortscale.appConfigProvider || (Fortscale.appConfigProvider = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var appConfigProvider;\n    (function (appConfigProvider) {\n        var ConfigItem = Fortscale.appConfigProvider.configItemProvider.ConfigItem;\n        'use strict';\n        appConfigProvider.IS_OPTIONAL = true;\n        appConfigProvider.IS_NOT_OPTIONAL = false;\n        appConfigProvider.CAN_NOT_BE_EMPTY = false;\n        appConfigProvider.DO_NOT_VALIDATE = true;\n        var DEFAULT_CONFIG_NAME = 'default';\n        appConfigProvider.NAMESPACE_DELIMITER = '.';\n        var assert;\n        var AppConfigService = (function () {\n            function AppConfigService(provider, $q, assert, remoteAppConfig) {\n                this.provider = provider;\n                this.$q = $q;\n                this.assert = assert;\n                this.remoteAppConfig = remoteAppConfig;\n            }\n            /**\n             * Validates configId param\n             *\n             * @param {string} configId\n             * @param {string} methodName\n             *\n             * @private\n             */\n            AppConfigService.prototype._validateConfigId = function (configId, methodName) {\n                this.assert.isString(configId, 'configId', 'appConfig: ' + methodName + ': ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                this.assert(configId.split(appConfigProvider.NAMESPACE_DELIMITER).length >= 2, 'appConfig: ' + methodName + ': configId should be a namespace with at least two nodes; ' +\n                    'configId: ' + configId, RangeError);\n            };\n            /**\n             * Takes a key and traverses up (recursively) to see if any of the parent config containers exist,\n             * and if so if any of them specify allowUpsert\n             * @param {string} key\n             * @returns {boolean}\n             * @private\n             */\n            AppConfigService.prototype._shouldUpsert = function (key) {\n                var namespace = key.split(appConfigProvider.NAMESPACE_DELIMITER);\n                if (namespace.length > 1) {\n                    namespace.pop();\n                    var configContainer = this.getConfigContainer(namespace.join(appConfigProvider.NAMESPACE_DELIMITER));\n                    if (configContainer) {\n                        return !!configContainer.allowUpsert;\n                    }\n                    else {\n                        return this._shouldUpsert(namespace.join(appConfigProvider.NAMESPACE_DELIMITER));\n                    }\n                }\n                else {\n                    return false;\n                }\n            };\n            /**\n             * Builds recursively the missing configContainers al the way to the existing configContainer.\n             * If build fails, false is returned. If success the true is returned.\n             *\n             * @param {string} key\n             * @returns {boolean}\n             * @private\n             */\n            AppConfigService.prototype._buildContainerPath = function (key) {\n                var namespace = key.split(appConfigProvider.NAMESPACE_DELIMITER);\n                if (namespace.length > 1) {\n                    // try and get container\n                    namespace.pop();\n                    var configContainer = this.getConfigContainer(namespace.join(appConfigProvider.NAMESPACE_DELIMITER));\n                    if (configContainer) {\n                        return true;\n                    }\n                    else {\n                        //build the parent\n                        if (this._buildContainerPath(namespace.join(appConfigProvider.NAMESPACE_DELIMITER))) {\n                            //get the parent\n                            var parentId = namespace.slice(0, namespace.length - 1).join(appConfigProvider.NAMESPACE_DELIMITER);\n                            var parent_1 = this.getConfigContainer(parentId);\n                            // build the current\n                            this.provider.addConfigContainer({\n                                id: namespace.join(appConfigProvider.NAMESPACE_DELIMITER),\n                                displayName: namespace.pop(),\n                                allowUpsert: true,\n                                configurable: parent_1.configurable\n                            });\n                            return true;\n                        }\n                        else {\n                            // if could not build the parent\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            };\n            /**\n             * Takes a remote config item and inserts it into the config items.\n             *\n             * @param {{key: string, value: string, type: string=}} remoteConfigItem\n             * @private\n             */\n            AppConfigService.prototype._upsertRemoteConfigItem = function (remoteConfigItem) {\n                var messageName = remoteConfigItem.key.split(appConfigProvider.NAMESPACE_DELIMITER).pop();\n                var newConfigItem = this.provider.ConfigItemProvider.createItem({\n                    id: remoteConfigItem.key,\n                    displayName: messageName,\n                    value: remoteConfigItem.value,\n                    type: remoteConfigItem.type || \"string\",\n                    validators: ['required']\n                });\n                this.provider.addConfigItem(newConfigItem);\n            };\n            /**\n             * Returns configItem by id\n             *\n             * @param {string} configId\n             * @param {boolean=} _doNotValidate\n             * @returns {*|null}\n             */\n            AppConfigService.prototype.getConfigItem = function (configId, _doNotValidate) {\n                // Validations\n                if (!_doNotValidate) {\n                    this._validateConfigId(configId, 'getDerivedConfigItem');\n                }\n                // Get the configItem\n                return this.provider.getConfigItem(configId);\n            };\n            ;\n            /**\n             * Traverses the config node tree to find the closest node item.\n             *\n             * @param {string} configId\n             * @param {boolean=} _doNotValidate\n             * @returns {ConfigItem|null}\n             */\n            AppConfigService.prototype.getDerivedConfigItem = function (configId, _doNotValidate) {\n                // Validations\n                if (!_doNotValidate) {\n                    this._validateConfigId(configId, 'getDerivedConfigItem');\n                }\n                // Get the configItem\n                var configItem = this.provider.getConfigItem(configId);\n                // If the value is not undefined and it's value property is not null or undefined return it's value.\n                if (configItem !== undefined && configItem !== null && configItem.value !== undefined &&\n                    configItem.value !== null) {\n                    return configItem;\n                }\n                var propName = configId.split(appConfigProvider.NAMESPACE_DELIMITER).pop();\n                if (configItem !== undefined && configItem !== null) {\n                    var container = this.provider.getConfigContainer(configItem.containerId);\n                    // If there's a parent, return parent's value recursively\n                    if (container.parent) {\n                        return this.getDerivedConfigItem(container.parent + appConfigProvider.NAMESPACE_DELIMITER + propName, appConfigProvider.DO_NOT_VALIDATE);\n                    }\n                }\n                // If stateName is not 'default' and: [configItem item is undefined or value is undefined or value is\n                // null] then try and get the default value.\n                if (configId.indexOf(DEFAULT_CONFIG_NAME + appConfigProvider.NAMESPACE_DELIMITER) !== 0 &&\n                    (configItem === undefined || configItem === null || configItem.value === undefined ||\n                        configItem.value === null)) {\n                    return this.getDerivedConfigItem(DEFAULT_CONFIG_NAME + appConfigProvider.NAMESPACE_DELIMITER + propName, appConfigProvider.DO_NOT_VALIDATE);\n                }\n                return null;\n            };\n            ;\n            /**\n             * Returns a config item's value. If configItem is not found, or its value is undefined or null, the parent\n             * is accessed for the same property key. If no parent is found, the \"default\" config state is accessed for\n             * the same property key. If no value is found on the parent, null is returned.\n             *\n             * @param {string} stateName\n             * @param {string} propName\n             * @returns {*}\n             */\n            AppConfigService.prototype.getConfigValue = function (stateName, propName) {\n                // Validations\n                this.assert.isString(stateName, 'stateName', 'appConfig: getConfigValue: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                this.assert.isString(propName, 'propName', 'appConfig: getConfigValue: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                // Get the config item\n                var configValue = this.getDerivedConfigItem(stateName + appConfigProvider.NAMESPACE_DELIMITER + propName, appConfigProvider.DO_NOT_VALIDATE);\n                // If configItem has a value that is different than null, return the value. If not return null.\n                if (configValue !== null && configValue.value !== null && configValue.value !== undefined) {\n                    return configValue.value;\n                }\n                return null;\n            };\n            ;\n            /**\n             * Returns a list of configItems of a specific container.\n             *\n             * @param {string} containerId\n             * @returns {Array}\n             */\n            AppConfigService.prototype.getConfigItemsByContainer = function (containerId) {\n                // Validations\n                this.assert.isString(containerId, 'stateName', 'appConfig: getConfigItemsByContainer: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                // Iterate through config keys, and find all configItems where the parent equals the stateName and are\n                // not nodes\n                return _.filter(this.provider.getConfigItems(), function (configItem) { return configItem.containerId === containerId; });\n            };\n            ;\n            /**\n             * Returns an object that represents all config nodes as a tree. each node has a 'nodes' object that holds\n             * all child nodes\n             *\n             * @returns {object}\n             */\n            AppConfigService.prototype.getConfigNodesTree = function () {\n                var configNodeTree = { nodes: {} };\n                _.each(this.provider.getConfigContainers(), function (configContainer) {\n                    // place on nodeTree by breaking to namespace\n                    var nameSpaceNodes = configContainer.id.split(appConfigProvider.NAMESPACE_DELIMITER);\n                    var traversed = configNodeTree.nodes;\n                    // Create entire namespace if it doesn't exist\n                    _.each(nameSpaceNodes, function (nameSpaceNode, index) {\n                        // build or traverse nodes as long as its not the last node\n                        if (index < nameSpaceNodes.length - 1) {\n                            traversed[nameSpaceNode] = traversed[nameSpaceNode] || { nodes: {} };\n                            traversed = traversed[nameSpaceNode].nodes;\n                        }\n                        else {\n                            // On the last node place the config container on the last created 'nodes'\n                            traversed[nameSpaceNode] = _.merge({ nodes: {} }, configContainer);\n                        }\n                    });\n                });\n                return configNodeTree;\n            };\n            ;\n            /**\n             * Returns a ConfigContainer by a configContainerId\n             *\n             * @param {string} configContainerId\n             * @returns {ConfigContainer|null}\n             */\n            AppConfigService.prototype.getConfigContainer = function (configContainerId) {\n                // Validations\n                this.assert.isString(configContainerId, 'configContainerId', 'appConfig: getConfigContainer: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                return this.provider.getConfigContainer(configContainerId);\n            };\n            /**\n             * Checks if current container (by id) is a maternal relative of target container (by id)\n             *\n             * @param {string} currentContainerId\n             * @param {string} targetContainerId\n             * @returns {boolean}\n             */\n            AppConfigService.prototype.isParentOfConfigContainer = function (currentContainerId, targetContainerId) {\n                // Validations\n                this.assert.isString(currentContainerId, 'currentContainerId', 'appConfig: isParentOfConfigContainer: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                // Validations\n                this.assert.isString(targetContainerId, 'targetContainerId', 'appConfig: isParentOfConfigContainer: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                // Get config container\n                var targetConfigContainer = this.getConfigContainer(targetContainerId);\n                // If no config container was found, return false\n                if (targetConfigContainer === null) {\n                    return false;\n                }\n                // If configContainer has a parent, and the parent points to currentContainerId return true\n                if (targetConfigContainer.parent && targetConfigContainer.parent === currentContainerId) {\n                    return true;\n                }\n                // If configContainer has a parent, and the parent does not point to currentContainerId then run the\n                // function recursively with the parent\n                if (targetConfigContainer.parent) {\n                    return this.isParentOfConfigContainer(currentContainerId, targetConfigContainer.parent);\n                }\n                // If configContainer has no parent then return false\n                return false;\n            };\n            /**\n             * Takes a config id and returns a list of all possible affected config items\n             *\n             * @param {string} configId\n             * @returns {Array<ConfigItem>}\n             */\n            AppConfigService.prototype.getAffectedConfigItems = function (configId) {\n                var _this = this;\n                // Validations\n                this._validateConfigId(configId, 'getAffectedConfigItems');\n                // get config item\n                var configItem = this.getConfigItem(configId, appConfigProvider.DO_NOT_VALIDATE);\n                // get a list of possible affected items (use last node of configId)\n                var propName = configId.split(appConfigProvider.NAMESPACE_DELIMITER).pop();\n                var propNameRegExp = new RegExp(propName + '$');\n                var possibleAffectedConfigItems = _.filter(this.provider.getConfigItems(), function (configItem) { return propNameRegExp.test(configItem.id); });\n                // filter list for configItem's container is a parent of list config item's container. return list.\n                return _.filter(possibleAffectedConfigItems, function (paConfigItem) {\n                    // DEFAULT_CONFIG_NAME is excepted because all items are affected by default\n                    return (configItem.containerId === DEFAULT_CONFIG_NAME &&\n                        paConfigItem.containerId !== DEFAULT_CONFIG_NAME) ||\n                        _this.isParentOfConfigContainer(configItem.containerId, paConfigItem.containerId);\n                });\n            };\n            /**\n             * Verifies an object is an instance of ConfigItem\n             *\n             * @param obj\n             * @returns {boolean}\n             */\n            AppConfigService.prototype.isConfigItem = function (obj) {\n                return (obj instanceof ConfigItem);\n            };\n            /**\n             * Duplicates a ConfigItem. This is done so original config items will not be affected.\n             *\n             * @param {ConfigItem} configItem\n             * @returns {ConfigItem}\n             */\n            AppConfigService.prototype.duplicateConfigItem = function (configItem) {\n                this.assert(this.isConfigItem(configItem), 'appConfig: duplicateConfigItem: provided configItem must be an instance of ConfigItem', TypeError);\n                return this.provider.ConfigItemProvider.createItem(_.merge({}, configItem));\n            };\n            /**\n             * This method checks if a target config item can inherit from a specific config container.\n             *\n             * @param {string} targetConfigId\n             * @param {string} containerId\n             * @returns {boolean}\n             */\n            AppConfigService.prototype.canTargetDeriveFromContainer = function (targetConfigId, containerId) {\n                // Get the config item\n                var configItem = this.provider.getConfigItem(targetConfigId);\n                if (!configItem) {\n                    return false;\n                }\n                // Get the prop\n                var prop = targetConfigId.split(appConfigProvider.NAMESPACE_DELIMITER).pop();\n                // Check if target's container is a child of containerId and target's container is not default return\n                // false\n                if (!this.isParentOfConfigContainer(containerId, configItem.containerId) &&\n                    containerId !== DEFAULT_CONFIG_NAME) {\n                    return false;\n                }\n                // Travers up to targetConfigId (not including) and check if it has value\n                // If value exists before the parent, then return false\n                var cursorConfigContainer, cursorValue;\n                cursorValue = null;\n                cursorConfigContainer = this.getConfigContainer(configItem.containerId);\n                while (cursorValue === null) {\n                    cursorValue = (this.provider.getConfigItem(cursorConfigContainer.id + appConfigProvider.NAMESPACE_DELIMITER + prop) ||\n                        { value: null }).value;\n                    if (cursorValue !== null) {\n                        return false;\n                    }\n                    if (!cursorConfigContainer.parent || cursorConfigContainer.parent === containerId) {\n                        return true;\n                    }\n                    cursorConfigContainer = this.getConfigContainer(cursorConfigContainer.parent);\n                }\n                return true;\n            };\n            /**\n             * Returns a formatter if on exists. If it does not, it returns null\n             *\n             * @param formatterId\n             * @returns {function|null}\n             */\n            AppConfigService.prototype.getFormatter = function (formatterId) {\n                return this.provider.getFormatter(formatterId) || null;\n            };\n            /**\n             * Returns a validator if on exists. If it does not, it returns null\n             *\n             * @param validatorId\n             * @returns {function|null}\n             */\n            AppConfigService.prototype.getValidator = function (validatorId) {\n                return this.provider.getValidator(validatorId) || null;\n            };\n            /**\n             * Takes a list of objects, and updates the local config. Remote config must relate to a local config. If\n             * it does not, than remote config is ignored. If validator exists for the type, and validation fails. The\n             * remote config will be ignored.\n             *\n             * @param {Array<{key: string, value: string}>} remoteConfigList\n             */\n            AppConfigService.prototype.digestRemoteConfig = function (remoteConfigList) {\n                var _this = this;\n                _.each(remoteConfigList, function (remoteConfigItem) {\n                    var configItem = _this.getConfigItem(remoteConfigItem.key);\n                    var finalValue;\n                    if (configItem) {\n                        finalValue = _this.formatConfigItem(remoteConfigItem);\n                        // Validate value based on type. If valid or no validator, than set value to configItem.\n                        if (_this.validateConfigItem({ key: remoteConfigItem.key, value: finalValue })) {\n                            configItem.value = finalValue;\n                        }\n                    }\n                    else {\n                        // Check if any parent container allows upsert\n                        if (_this._shouldUpsert(remoteConfigItem.key)) {\n                            // build the path up to the parent container\n                            if (_this._buildContainerPath(remoteConfigItem.key)) {\n                                // insert the remote config item\n                                _this._upsertRemoteConfigItem(remoteConfigItem);\n                            }\n                            else {\n                                console.warn('Could not upsert remote config item.' + remoteConfigItem.key + ': ' +\n                                    remoteConfigItem.value);\n                            }\n                        }\n                    }\n                });\n            };\n            /**\n             * Validates a config item based on its validators\n             *\n             * @param {IKeyValueConfig} keyValueConfig\n             * @returns {boolean}\n             */\n            AppConfigService.prototype.validateConfigItem = function (keyValueConfig) {\n                var _this = this;\n                var configItem = this.getConfigItem(keyValueConfig.key);\n                this.assert.isObject(configItem, 'configItem', 'validateConfigItem: ');\n                var validators = _.map(configItem.validators, function (validatorName) { return _this.getValidator(validatorName); });\n                return _.every(validators, function (validatorFn) {\n                    if (validatorFn === null) {\n                        return true;\n                    }\n                    return validatorFn(keyValueConfig.value);\n                });\n            };\n            /**\n             * Takes a formatter and converts it to its proper format.\n             *\n             * @param {IKeyValueConfig} keyValueConfig\n             * @returns {any}\n             */\n            AppConfigService.prototype.formatConfigItem = function (keyValueConfig) {\n                var configItem = this.getConfigItem(keyValueConfig.key);\n                this.assert.isObject(configItem, 'configItem', 'formatConfigItem: ');\n                var formatterFn = this.getFormatter(configItem.formatter);\n                if (formatterFn) {\n                    return formatterFn(keyValueConfig.value);\n                }\n                return keyValueConfig.value;\n            };\n            /**\n             * Accepts a list of objects, validates, updates the config items in the db, then locally.\n             *\n             * @param {Array<{key: string, value: string}>} configItemsList\n             * @returns {*}\n             */\n            AppConfigService.prototype.updateConfigItems = function (configItemsList) {\n                var _this = this;\n                // Validate list\n                this.assert.isArray(configItemsList, 'configItemsList', 'appConfig: updateConfigItems: ', appConfigProvider.IS_NOT_OPTIONAL);\n                _.each(configItemsList, function (configItem, index) {\n                    _this.assert.isString(configItem.key, 'key', 'appConfig: updateConfigItems: configItemsList: item ' + index + ': ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                    _this.assert(_this.getConfigItem(configItem.key) !== undefined, 'appConfig: updateConfigItems: configItemsList: item ' + index +\n                        ': Item\\'s key does not point to a valid config item.', ReferenceError);\n                });\n                var clonedList = _.cloneDeep(configItemsList);\n                return this.$q(function (resolve, reject) {\n                    _.each(clonedList, function (configItem) {\n                        // format output\n                        configItem.value = _this.formatConfigItem(configItem);\n                        // validate\n                        if (!_this.validateConfigItem(configItem)) {\n                            return reject(new RangeError(\"Trying to update a config value with an invalid value. key: \" + configItem.key + \"  -  value: \" + configItem.value));\n                        }\n                        resolve();\n                    });\n                })\n                    .then(function () {\n                    return _this.remoteAppConfig.updateConfigItems(clonedList);\n                })\n                    .then(function () { return _this.digestRemoteConfig(clonedList); });\n            };\n            /**\n             * Init function. Digests remote config.\n             *\n             * @private\n             */\n            AppConfigService.prototype._init = function () {\n                this.digestRemoteConfig(this.remoteAppConfig.getRemoteConfigList());\n            };\n            return AppConfigService;\n        }());\n        var AppConfigProvider = (function () {\n            function AppConfigProvider(assert, ConfigContainerProvider, ConfigItemProvider) {\n                this.assert = assert;\n                this.ConfigContainerProvider = ConfigContainerProvider;\n                this.ConfigItemProvider = ConfigItemProvider;\n                this.$get = ['$q', 'assert', 'remoteAppConfig', this.appConfigFactory.bind(this)];\n                // Initialize privates\n                this._configContainers = {};\n                this._configItems = {};\n                this._formatters = {};\n                this._validators = {};\n            }\n            AppConfigProvider.prototype.appConfigFactory = function ($q, assert, remoteAppConfig) {\n                var service = new AppConfigService(this, $q, assert, remoteAppConfig);\n                service._init();\n                return service;\n            };\n            AppConfigProvider.prototype.getConfigItem = function (configId) {\n                return this._configItems[configId] || null;\n            };\n            AppConfigProvider.prototype.getConfigItems = function () {\n                return _.values(this._configItems);\n            };\n            AppConfigProvider.prototype.getConfigContainer = function (containerId) {\n                return this._configContainers[containerId] || null;\n            };\n            AppConfigProvider.prototype.getConfigContainers = function () {\n                return _.values(this._configContainers);\n            };\n            /**\n             * Adds a config container\n             *\n             * @param {IConfigContainerData} configContainerData\n             * @param {boolean} isUnique\n             * @returns {AppConfigProvider}\n             */\n            AppConfigProvider.prototype.addConfigContainer = function (configContainerData, isUnique) {\n                if (isUnique === void 0) { isUnique = true; }\n                // Validations\n                this.assert.isObject(configContainerData, 'configContainerData', 'AppConfigProvider: addConfigContainer: ', appConfigProvider.IS_NOT_OPTIONAL);\n                // Create new ConfigItem instance\n                var configContainer = this.ConfigContainerProvider.createContainer(configContainerData);\n                //Validations: make sure that if isUnique is true, the config item does not override an existing one.\n                this.assert((isUnique && this._configContainers[configContainerData.id] === undefined), 'appConfig: addConfigContainer: When isUnique is true, config container id must be unique and it is ' +\n                    'not; id: ' + configContainerData.id, RangeError);\n                // Place config item on the config items object\n                this._configContainers[configContainerData.id] = configContainer;\n                // Return the config item instance from configItems\n                return this;\n            };\n            /**\n             * Adds a config item\n             * @param {IConfigItemData} configItemData\n             * @param isUnique\n             * @returns {AppConfigProvider}\n             */\n            AppConfigProvider.prototype.addConfigItem = function (configItemData, isUnique) {\n                if (isUnique === void 0) { isUnique = true; }\n                // Validations\n                this.assert.isObject(configItemData, 'configItemData', 'AppConfigProvider: addConfigItem: ', appConfigProvider.IS_NOT_OPTIONAL);\n                // Create new ConfigItem instance\n                var configItem = this.ConfigItemProvider.createItem(configItemData);\n                // If isUnique make sure its not pointing to an existing object\n                this.assert((isUnique && this._configItems[configItem.id] === undefined), 'AppConfigProvider: addConfigItem: When isUnique is true, config item id must be unique and it is ' +\n                    'not; id: ' + configItemData.id, RangeError);\n                // Make sure the config item is pointing to an existing container\n                this.assert(!!this._configContainers[configItem.containerId], 'AppConfigProvider: addConfigItem: config item containerId must point to an existing container; id: ' +\n                    configItemData.id, ReferenceError);\n                // Place config item on the config items object\n                this._configItems[configItem.id] = configItem;\n                // Return the config item instance from configItems\n                return this;\n            };\n            /**\n             * Changes the name of the default container in the config phase.\n             *\n             * @param {string} newName\n             */\n            AppConfigProvider.prototype.changeDefaultName = function (newName) {\n                // Validations\n                this.assert.isString(newName, 'newName', 'appConfigProvider: changeDefaultName: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                DEFAULT_CONFIG_NAME = newName;\n            };\n            ;\n            /**\n             * Adds a formatter. Formatter will be consumed when config item type equals formatter id.\n             *\n             * @param {string} formatterId\n             * @param {function} formatterFn\n             * @param {boolean=} isUnique\n             * @returns {AppConfigProvider}\n             */\n            AppConfigProvider.prototype.addFormatter = function (formatterId, formatterFn, isUnique) {\n                if (isUnique === void 0) { isUnique = true; }\n                // Validations\n                this.assert.isString(formatterId, 'formatterId', 'appConfigProvider: addFormatter: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                this.assert.isFunction(formatterFn, 'formatterFn', 'appConfigProvider: addFormatter: ', appConfigProvider.IS_NOT_OPTIONAL);\n                // If isUnique make sure its not pointing to an existing object\n                this.assert((isUnique && this._formatters[formatterId] === undefined), 'appConfigProvider: addFormatter: When isUnique is true, formatter must be unique and it is ' +\n                    'not; formatterId: ' + formatterId, RangeError);\n                this._formatters[formatterId] = formatterFn;\n                return this;\n            };\n            ;\n            /**\n             * Returns a formatter by id\n             *\n             * @param formatterId\n             * @returns {*}\n             */\n            AppConfigProvider.prototype.getFormatter = function (formatterId) {\n                return this._formatters[formatterId];\n            };\n            /**\n             * Adds a validator. Validator will be consumed when config item type equals validator id.\n             *\n             * @param {string} validatorId\n             * @param {function} validatorFn\n             * @param {boolean=} isUnique\n             * @returns {AppConfigProvider}\n             */\n            AppConfigProvider.prototype.addValidator = function (validatorId, validatorFn, isUnique) {\n                if (isUnique === void 0) { isUnique = true; }\n                // Validations\n                this.assert.isString(validatorId, 'validatorId', 'appConfigProvider: addValidator: ', appConfigProvider.IS_NOT_OPTIONAL, appConfigProvider.CAN_NOT_BE_EMPTY);\n                this.assert.isFunction(validatorFn, 'validatorFn', 'appConfigProvider: addValidator: ', appConfigProvider.IS_NOT_OPTIONAL);\n                // If isUnique make sure its not pointing to an existing object\n                this.assert((isUnique && this._validators[validatorId] === undefined), 'appConfigProvider: addValidator: When isUnique is true, validator must be unique and it is ' +\n                    'not; validatorId: ' + validatorId, RangeError);\n                this._validators[validatorId] = validatorFn;\n                return this;\n            };\n            ;\n            /**\n             * Returns a validator by id\n             *\n             * @param validatorId\n             * @returns {*}\n             */\n            AppConfigProvider.prototype.getValidator = function (validatorId) {\n                return this._validators[validatorId];\n            };\n            AppConfigProvider.$inject = ['assertConstant', 'Fortscale.appConfig.ConfigContainerProvider',\n                'Fortscale.appConfig.ConfigItemProvider'];\n            return AppConfigProvider;\n        }());\n        function containerIdToDisplayNameFilter(appConfig) {\n            return function (containerId) {\n                return (appConfig.getConfigContainer(containerId) || { displayName: 'N/A' }).displayName;\n            };\n        }\n        function containerIdToDisplayCrumb(appConfig) {\n            return function fn(containerId) {\n                if (containerId) {\n                    var configContainer = appConfig.getConfigContainer(containerId);\n                    return (configContainer.parent ? fn(configContainer.parent) + ': ' : '') + configContainer.displayName;\n                }\n                return '';\n            };\n        }\n        angular.module('Fortscale.appConfig', ['Fortscale.shared.services.assert', 'Fortscale.remoteAppConfig', 'Fortscale.appConfig.ConfigContainer',\n            'Fortscale.appConfig.ConfigItem'])\n            .provider('appConfig', AppConfigProvider)\n            .filter('containerIdToDisplayName', ['appConfig', containerIdToDisplayNameFilter])\n            .filter('containerIdToDisplayCrumb', ['appConfig', containerIdToDisplayCrumb]);\n    })(appConfigProvider = Fortscale.appConfigProvider || (Fortscale.appConfigProvider = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var appConfigProvider;\n    (function (appConfigProvider_1) {\n        var formatters;\n        (function (formatters) {\n            'use strict';\n            function numberFormatter(val) {\n                var parsedVal = parseFloat(val);\n                if (!isNaN(parsedVal)) {\n                    return parsedVal;\n                }\n                if (val === '' || val === undefined) {\n                    return null;\n                }\n                return val;\n            }\n            function booleanFormatter(val) {\n                if (typeof val === 'string') {\n                    return val.trim().toLowerCase() !== 'false';\n                }\n                return !!val;\n            }\n            function stringFormatter(val) {\n                if (val === null || val === undefined) {\n                    return null;\n                }\n                return val.toString();\n            }\n            angular.module('Fortscale.appConfig')\n                .config([\n                'appConfigProvider',\n                function (appConfigProvider) {\n                    appConfigProvider.addFormatter('integer', numberFormatter);\n                    appConfigProvider.addFormatter('number', numberFormatter);\n                    appConfigProvider.addFormatter('boolean', booleanFormatter);\n                    appConfigProvider.addFormatter('string', stringFormatter);\n                    appConfigProvider.addFormatter('password', stringFormatter);\n                    appConfigProvider.addFormatter('isEnabled', booleanFormatter);\n                }\n            ]);\n        })(formatters = appConfigProvider_1.formatters || (appConfigProvider_1.formatters = {}));\n    })(appConfigProvider = Fortscale.appConfigProvider || (Fortscale.appConfigProvider = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var appConfigProvider;\n    (function (appConfigProvider_1) {\n        var validators;\n        (function (validators) {\n            'use strict';\n            function requiredValidator(val) {\n                return val !== null && val !== undefined && val !== '';\n            }\n            /**\n             * Validates integer\n             *\n             * @param {string} val\n             * @returns {boolean}\n             */\n            function integerValidator(val) {\n                if (val === null) {\n                    return true;\n                }\n                return (!isNaN(val) && _.isNumber(val) && Math.floor(val) === val);\n            }\n            function numberValidator(val) {\n                if (val === null) {\n                    return true;\n                }\n                return (!isNaN(val) && _.isNumber(val));\n            }\n            function portValidator(val) {\n                if (val === null) {\n                    return true;\n                }\n                return (!isNaN(val) && _.isNumber(val) && val > 0 && val <= 65535);\n            }\n            function ipValidator(val) {\n                if (val === null) {\n                    return true;\n                }\n                if (!_.isString(val)) {\n                    return false;\n                }\n                var ipRgx = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n                return ipRgx.test(val);\n            }\n            function stringValidator(val) {\n                if (val === null) {\n                    return true;\n                }\n                return _.isString(val);\n            }\n            function booleanValidator(val) {\n                if (val === null || val === true || val === false) {\n                    return true;\n                }\n            }\n            angular.module('Fortscale.appConfig')\n                .config(['appConfigProvider', function (appConfigProvider) {\n                    appConfigProvider\n                        .addValidator('integer', integerValidator)\n                        .addValidator('number', numberValidator)\n                        .addValidator('string', stringValidator)\n                        .addValidator('password', stringValidator)\n                        .addValidator('boolean', booleanValidator)\n                        .addValidator('required', requiredValidator)\n                        .addValidator('port', portValidator)\n                        .addValidator('ip', ipValidator);\n                }]);\n        })(validators = appConfigProvider_1.validators || (appConfigProvider_1.validators = {}));\n    })(appConfigProvider = Fortscale.appConfigProvider || (Fortscale.appConfigProvider = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function fsConfigTypeDirective() {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // Link function logic\n            scope.ctrl.ngModelController = ctrl[0];\n            scope.ctrl._linkInit();\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsConfigurationAffectedItemsController($element, $scope, appConfig, assert) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            ctrl.appConfig = appConfig;\n            ctrl.assert = assert;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsConfigurationAffectedItemsController.prototype, {\n            _errMsg: 'Fortscale.appConfig: fsConfigType.directive: ',\n            _linkInit: function () {\n                var ctrl = this;\n                // Get formatter\n                var formatter = this.appConfig.getFormatter(this.configItem.type);\n                // Inject formatter into ngModel\n                if (formatter) {\n                    this.ngModelController.$formatters.push(formatter);\n                }\n                // Get validator\n                var validator = this.appConfig.getValidator(this.configItem.type);\n                // Inject validator into ngModel\n                if (validator) {\n                    this.ngModelController.$validators[this.configItem.type] = function (modelValue, viewValue) {\n                        // Value should be modelValue or viewValue or configItem.value\n                        var value = modelValue !== undefined ? modelValue : viewValue;\n                        value = value !== undefined ? value : ctrl.configItem.value;\n                        // run formatter\n                        if (formatter) {\n                            value = formatter(value);\n                        }\n                        // Run validator\n                        return validator(value);\n                    };\n                }\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n            }\n        });\n        FsConfigurationAffectedItemsController.$inject = ['$element', '$scope', 'appConfig', 'assert'];\n        return {\n            restrict: 'A',\n            link: linkFn,\n            controller: FsConfigurationAffectedItemsController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                configItem: '<'\n            },\n            require: ['ngModel'],\n            priority: -1000\n        };\n    }\n    fsConfigTypeDirective.$inject = [];\n    angular.module('Fortscale.appConfig')\n        .directive('fsConfigType', fsConfigTypeDirective);\n}());\n","(function () {\n    'use strict';\n    function appConfig(appConfigProvider) {\n        appConfigProvider\n            .addConfigContainer({\n            id: 'default',\n            displayName: 'Default',\n            description: 'All Default configuration'\n        })\n            .addConfigItem({\n            id: 'default.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Default value for all Date Range in Days in the application, in days, from now.',\n            type: 'integer',\n            value: 7\n        })\n            .addConfigItem({\n            id: 'default.daysAgo',\n            displayName: 'Days Ago',\n            description: 'Default date value for all Days Ago in the application, in days, from now.',\n            type: 'integer',\n            value: 30\n        })\n            .addConfigItem({\n            id: 'default.shortDaysRange',\n            displayName: 'Short Days Range in Days',\n            description: 'Default short date range value, in days, from now.',\n            type: 'integer',\n            value: 1\n        })\n            .addConfigItem({\n            id: 'default.longDaysRange',\n            displayName: 'Long Days Range in Days',\n            description: 'Default long date range value, in days, from now.',\n            type: 'integer',\n            value: 7\n        })\n            .addConfigItem({\n            id: 'default.topRelatedDaysRange',\n            displayName: 'Top Related Days Range',\n            description: 'Default value for User-Overview Top-Related date range, in days, from now.',\n            type: 'integer',\n            value: 90\n        })\n            .addConfigItem({\n            id: 'default.topRelatedListLimit',\n            displayName: 'Top Related List Limit',\n            description: 'Default value for Top-Related items limit.',\n            type: 'integer',\n            value: 5\n        })\n            .addConfigItem({\n            id: 'default.userNameFallbackOrder',\n            displayName: 'User Name Fallback Order',\n            description: 'Default user name order. A CSV string value describing the priority order of property' +\n                ' names on the user that might have a user name value.',\n            type: 'string',\n            value: 'adDisplayName,name,displayName,noDomainUsername,username'\n        })\n            .addConfigContainer({\n            id: 'ui',\n            displayName: 'User Interface',\n            description: 'User interface configuration'\n        })\n            .addConfigContainer({\n            id: 'ui.overview',\n            displayName: 'Overview',\n            description: 'Overview page configuration'\n        })\n            .addConfigItem({\n            id: 'ui.overview.shortDaysRange',\n            displayName: 'Short Date Range in Days',\n            description: 'Overview\\'s short date range value, in days, from now. ' +\n                'Used in \"Alerts Status\"s left chart.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigItem({\n            id: 'ui.overview.longDaysRange',\n            displayName: 'Long Date Range in Days',\n            description: 'Overview\\'s long date range value, in days, from now. ' +\n                'Used in \"Alerts Status\"s right chart, and in \"Alerts Severity\"s chart.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigItem({\n            id: 'ui.overview.numberOfRiskUsers',\n            displayName: 'Number Of Risk Users',\n            description: 'Overview\\'s number of requested risk users',\n            type: 'integer',\n            value: 5\n        })\n            .addConfigContainer({\n            id: 'ui.alerts',\n            displayName: 'Alerts',\n            description: 'Alerts page configuration'\n        })\n            .addConfigItem({\n            id: 'ui.alerts.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Alerts\\'s \"Alert Start\" filter\\'s date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.explore',\n            displayName: 'Explore',\n            description: 'Explore page configuration'\n        })\n            .addConfigItem({\n            id: 'ui.explore.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Explore\\'s \"Result Between\" control\\'s date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports',\n            displayName: 'Reports',\n            description: 'All Reports default configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Reports default value for all Date Range in Days , in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigItem({\n            id: 'ui.reports.daysAgo',\n            displayName: 'Days Ago',\n            description: 'Reports default date value for all Days Ago, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.highPrivilegedUsersMonitoring',\n            displayName: 'High Privileged Users',\n            description: 'High Privileged Users reports configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'High Privileged Users Reports default Date Range in Days value, ' +\n                'in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.admins',\n            displayName: 'Admin Accounts',\n            description: 'Admin Accounts report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.admins.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Admin Accounts report\\'s \"Events Time\" control\\'s date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.executives',\n            displayName: 'Executive Accounts',\n            description: 'Executive Accounts report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.executives.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Executive Accounts report\\'s \"Events Time\" control\\'s date range value, ' +\n                'in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.serviceAccounts',\n            displayName: 'Service Accounts',\n            description: 'Service Accounts report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.highPrivilegedUsersMonitoring.serviceAccounts.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Service Accounts report\\'s \"Events Time\" control\\'s date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.externalAccessToNetwork',\n            displayName: 'External Access to the Network',\n            description: 'External Access to the Network reports configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.externalAccessToNetwork.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Service Accounts report\\'s \"Events Time\" control\\'s date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.externalAccessToNetwork.suspiciousVPNDataAmount',\n            displayName: 'VPN Anomalous Data Usage',\n            description: 'VPN Anomalous Data Usage report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.externalAccessToNetwork.suspiciousVPNDataAmount.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'VPN Anomalous Data Usage report\\'s \"Events Time\" control\\'s date range ' +\n                'value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.externalAccessToNetwork.VPNGeoHopping',\n            displayName: 'VPN Anomalous Geolocation Sequences',\n            description: 'VPN Anomalous Geolocation Sequences report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.externalAccessToNetwork.VPNGeoHopping.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'VPN Anomalous Geolocation Sequences report\\'s \"Events Time\" control\\'s ' +\n                'date range value, in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.deviceMonitoring',\n            displayName: 'Device Investigation',\n            description: 'Device Investigation reports configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.deviceMonitoring.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Device Investigation report\\'s \"Events Time\" control\\'s date range value, in days,' +\n                ' from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.deviceMonitoring.IPInvestigation',\n            displayName: 'IP Investigation',\n            description: 'IP Investigation report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.deviceMonitoring.IPInvestigation.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'IP Investigation report\\'s \"Events Time\" control\\'s date range value, in days,' +\n                ' from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.deviceMonitoring.suspiciousEndpointAccess',\n            displayName: 'Suspicious Device Access',\n            description: 'Suspicious Device Access report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.deviceMonitoring.suspiciousEndpointAccess.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Suspicious Device Access report\\'s \"Events Time\" control\\'s date range value, ' +\n                'in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.deviceMonitoring.sensitiveResourcesMonitoring',\n            displayName: 'Sensitive Resources Monitoring',\n            description: 'Sensitive Resources Monitoring report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.deviceMonitoring.sensitiveResourcesMonitoring.daysRange',\n            displayName: 'Date Range in Days',\n            description: 'Sensitive Resources Monitoring report\\'s \"Events Time\" control\\'s date range value, ' +\n                'in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.staleAccountsMonitoring',\n            displayName: 'Stale Accounts',\n            description: 'Stale Accounts reports configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.staleAccountsMonitoring.daysAgo',\n            displayName: 'Days Ago',\n            description: 'Stale Accounts reports default date value for all Days Ago, ' +\n                'in days, from now.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.staleAccountsMonitoring.disabledUserAccounts',\n            displayName: 'Disabled Accounts',\n            description: 'Disabled Accounts report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.staleAccountsMonitoring.disabledUserAccounts.daysAgo',\n            displayName: 'Days Ago',\n            description: 'Disabled Accounts report\\'s \"Disabled Since\" control\\'s date value, ' +\n                'in days, from now, will be set to start of day.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'ui.reports.staleAccountsMonitoring.inactiveUserAccounts',\n            displayName: 'Inactive Accounts',\n            description: 'Inactive Accounts report configuration'\n        })\n            .addConfigItem({\n            id: 'ui.reports.staleAccountsMonitoring.inactiveUserAccounts.daysAgo',\n            displayName: 'Days Ago',\n            description: 'Inactive Accounts report\\'s \"No Activity Since\" control\\'s date value, ' +\n                'in days, from now, will be set to start of day.',\n            type: 'integer',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system',\n            displayName: 'System',\n            description: 'Holds system configuration'\n        })\n            .addConfigContainer({\n            id: 'system.email',\n            displayName: 'Email',\n            description: 'Holds all generic email configuration'\n        })\n            .addConfigItem({\n            id: 'system.email.from',\n            displayName: 'From',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.email.username',\n            displayName: 'User',\n            type: 'string',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.email.password',\n            displayName: 'Password',\n            type: 'password',\n            value: null,\n            meta: {\n                encrypt: true\n            }\n        })\n            .addConfigItem({\n            id: 'system.email.port',\n            displayName: 'Port',\n            type: 'integer',\n            validators: ['required', 'integer', 'port'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.email.host',\n            displayName: 'Host',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.email.auth',\n            displayName: 'Authentication',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system.alertsEmail',\n            displayName: 'Alerts Email',\n            description: 'Holds configuration for Alerts email'\n        })\n            .addConfigItem({\n            id: 'system.alertsEmail.settings',\n            displayName: 'Alerts Mail Settings',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system.logEmail',\n            displayName: 'Log Email',\n            description: 'Holds configuration for Log email'\n        })\n            .addConfigItem({\n            id: 'system.logEmail.subscribers',\n            displayName: 'Log Mail Settings',\n            type: 'string',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system.pxgrid',\n            displayName: 'pxGrid',\n            description: 'Holds configuration for pxGrid',\n            configurable: false\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.cer',\n            displayName: 'Certificate',\n            type: 'simpleRequiredString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.csr',\n            displayName: 'CSR',\n            type: 'simpleRequiredString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.hosts',\n            displayName: 'Hosts',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.username',\n            displayName: 'Username',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.group',\n            displayName: 'Group',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.keystorepath',\n            displayName: 'Keystore Path',\n            type: 'pxgridFile',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.keystorepasspharse',\n            displayName: 'Key Store Pass Phrase',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.truststore',\n            displayName: 'Trust Store',\n            type: 'pxgridFile',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.truststorepasspharse',\n            displayName: 'Trust Store Pass Phrase',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.pxgrid.connectionretrymillisecond',\n            displayName: 'Connection Retry in Milliseconds',\n            type: 'pxgridString',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system.syslogforwarding',\n            displayName: 'Alert Forwarding via Syslog',\n            description: 'Set up properties for forwarding alerts'\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.enabled',\n            displayName: 'Enable Forwarding?',\n            type: 'boolean',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.forwardingtype',\n            displayName: 'Forwarding Type',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.ip',\n            displayName: 'IP',\n            type: 'string',\n            validators: ['required', 'ip'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.port',\n            displayName: 'Port',\n            type: 'integer',\n            validators: ['required', 'port'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.messageformat',\n            displayName: 'Message Format',\n            type: 'string',\n            validators: ['required'],\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.alertseverity',\n            displayName: 'Selective Forwarding: Alert Severity',\n            type: 'string',\n            value: null\n        })\n            .addConfigItem({\n            id: 'system.syslogforwarding.usertypes',\n            displayName: 'Selective Forwarding: User Tags',\n            type: 'string',\n            value: null\n        })\n            .addConfigContainer({\n            id: 'system.locale',\n            displayName: 'Locale',\n            configurable: false\n        })\n            .addConfigItem({\n            id: 'system.locale.settings',\n            displayName: 'Locale',\n            type: 'string',\n            value: 'en'\n        });\n        /**\n         * END OF Locale configuration\n         */\n        /**\n         * END OF System Configuration\n         */\n    }\n    appConfig.$inject = ['appConfigProvider'];\n    angular.module('Fortscale.appConfig')\n        .config(appConfig);\n}());\n","(function () {\n    'use strict';\n    function appConfig(appConfigProvider) {\n        appConfigProvider\n            .addConfigContainer({\n            id: 'messages',\n            displayName: 'Locale Messages',\n            configurable: false,\n            allowUpsert: true\n        });\n    }\n    appConfig.$inject = ['appConfigProvider'];\n    angular.module('Fortscale.appConfig')\n        .config(appConfig);\n}());\n","(function () {\n    'use strict';\n    function analyticsConfig(appConfigProvider) {\n        appConfigProvider\n            .addConfigContainer({\n            id: 'system.analytics',\n            displayName: 'Analytics'\n        })\n            .addConfigItem({\n            id: 'system.analytics.allowAnalytics',\n            displayName: 'Allow Analytics',\n            type: 'boolean',\n            value: false\n        })\n            .addConfigItem({\n            id: 'system.analytics.updateEventsNum',\n            displayName: 'Update on Number Of Events',\n            description: 'When local db accumulates this number of events, it will try to upload the events ' +\n                'to the remote db.',\n            type: 'integer',\n            value: 200\n        });\n    }\n    analyticsConfig.$inject = ['appConfigProvider'];\n    angular.module('Fortscale.appConfig')\n        .config(analyticsConfig);\n}());\n","(function () {\n    'use strict';\n    var countryCodes = {\n        \"afghanistan\": { \"name\": \"Afghanistan\", \"alpha-2\": \"AF\", \"country-code\": \"004\" },\n        \"åland islands\": { \"name\": \"Åland Islands\", \"alpha-2\": \"AX\", \"country-code\": \"248\" },\n        \"albania\": { \"name\": \"Albania\", \"alpha-2\": \"AL\", \"country-code\": \"008\" },\n        \"algeria\": { \"name\": \"Algeria\", \"alpha-2\": \"DZ\", \"country-code\": \"012\" },\n        \"american samoa\": { \"name\": \"American Samoa\", \"alpha-2\": \"AS\", \"country-code\": \"016\" },\n        \"andorra\": { \"name\": \"Andorra\", \"alpha-2\": \"AD\", \"country-code\": \"020\" },\n        \"angola\": { \"name\": \"Angola\", \"alpha-2\": \"AO\", \"country-code\": \"024\" },\n        \"anguilla\": { \"name\": \"Anguilla\", \"alpha-2\": \"AI\", \"country-code\": \"660\" },\n        \"antarctica\": { \"name\": \"Antarctica\", \"alpha-2\": \"AQ\", \"country-code\": \"010\" },\n        \"antigua and barbuda\": { \"name\": \"Antigua and Barbuda\", \"alpha-2\": \"AG\", \"country-code\": \"028\" },\n        \"argentina\": { \"name\": \"Argentina\", \"alpha-2\": \"AR\", \"country-code\": \"032\" },\n        \"armenia\": { \"name\": \"Armenia\", \"alpha-2\": \"AM\", \"country-code\": \"051\" },\n        \"aruba\": { \"name\": \"Aruba\", \"alpha-2\": \"AW\", \"country-code\": \"533\" },\n        \"australia\": { \"name\": \"Australia\", \"alpha-2\": \"AU\", \"country-code\": \"036\" },\n        \"austria\": { \"name\": \"Austria\", \"alpha-2\": \"AT\", \"country-code\": \"040\" },\n        \"azerbaijan\": { \"name\": \"Azerbaijan\", \"alpha-2\": \"AZ\", \"country-code\": \"031\" },\n        \"bahamas\": { \"name\": \"Bahamas\", \"alpha-2\": \"BS\", \"country-code\": \"044\" },\n        \"bahrain\": { \"name\": \"Bahrain\", \"alpha-2\": \"BH\", \"country-code\": \"048\" },\n        \"bangladesh\": { \"name\": \"Bangladesh\", \"alpha-2\": \"BD\", \"country-code\": \"050\" },\n        \"barbados\": { \"name\": \"Barbados\", \"alpha-2\": \"BB\", \"country-code\": \"052\" },\n        \"belarus\": { \"name\": \"Belarus\", \"alpha-2\": \"BY\", \"country-code\": \"112\" },\n        \"belgium\": { \"name\": \"Belgium\", \"alpha-2\": \"BE\", \"country-code\": \"056\" },\n        \"belize\": { \"name\": \"Belize\", \"alpha-2\": \"BZ\", \"country-code\": \"084\" },\n        \"benin\": { \"name\": \"Benin\", \"alpha-2\": \"BJ\", \"country-code\": \"204\" },\n        \"bermuda\": { \"name\": \"Bermuda\", \"alpha-2\": \"BM\", \"country-code\": \"060\" },\n        \"bhutan\": { \"name\": \"Bhutan\", \"alpha-2\": \"BT\", \"country-code\": \"064\" },\n        \"bolivia (plurinational state of)\": {\n            \"name\": \"Bolivia (Plurinational State of)\",\n            \"alpha-2\": \"BO\",\n            \"country-code\": \"068\"\n        },\n        \"bolivia\": { \"name\": \"Bolivia\", \"alpha-2\": \"BO\", \"country-code\": \"068\" },\n        \"bonaire, sint eustatius and saba\": {\n            \"name\": \"Bonaire, Sint Eustatius and Saba\",\n            \"alpha-2\": \"BQ\",\n            \"country-code\": \"535\"\n        },\n        \"bosnia and herzegovina\": { \"name\": \"Bosnia and Herzegovina\", \"alpha-2\": \"BA\", \"country-code\": \"070\" },\n        \"botswana\": { \"name\": \"Botswana\", \"alpha-2\": \"BW\", \"country-code\": \"072\" },\n        \"bouvet island\": { \"name\": \"Bouvet Island\", \"alpha-2\": \"BV\", \"country-code\": \"074\" },\n        \"brazil\": { \"name\": \"Brazil\", \"alpha-2\": \"BR\", \"country-code\": \"076\" },\n        \"british indian ocean territory\": {\n            \"name\": \"British Indian Ocean Territory\",\n            \"alpha-2\": \"IO\",\n            \"country-code\": \"086\"\n        },\n        \"brunei darussalam\": { \"name\": \"Brunei Darussalam\", \"alpha-2\": \"BN\", \"country-code\": \"096\" },\n        \"bulgaria\": { \"name\": \"Bulgaria\", \"alpha-2\": \"BG\", \"country-code\": \"100\" },\n        \"burkina faso\": { \"name\": \"Burkina Faso\", \"alpha-2\": \"BF\", \"country-code\": \"854\" },\n        \"burundi\": { \"name\": \"Burundi\", \"alpha-2\": \"BI\", \"country-code\": \"108\" },\n        \"cambodia\": { \"name\": \"Cambodia\", \"alpha-2\": \"KH\", \"country-code\": \"116\" },\n        \"cameroon\": { \"name\": \"Cameroon\", \"alpha-2\": \"CM\", \"country-code\": \"120\" },\n        \"canada\": { \"name\": \"Canada\", \"alpha-2\": \"CA\", \"country-code\": \"124\" },\n        \"cabo verde\": { \"name\": \"Cabo Verde\", \"alpha-2\": \"CV\", \"country-code\": \"132\" },\n        \"cape verde\": { \"name\": \"Cape Verde\", \"alpha-2\": \"CV\", \"country-code\": \"132\" },\n        \"cayman islands\": { \"name\": \"Cayman Islands\", \"alpha-2\": \"KY\", \"country-code\": \"136\" },\n        \"central african republic\": { \"name\": \"Central African Republic\", \"alpha-2\": \"CF\", \"country-code\": \"140\" },\n        \"chad\": { \"name\": \"Chad\", \"alpha-2\": \"TD\", \"country-code\": \"148\" },\n        \"chile\": { \"name\": \"Chile\", \"alpha-2\": \"CL\", \"country-code\": \"152\" },\n        \"china\": { \"name\": \"China\", \"alpha-2\": \"CN\", \"country-code\": \"156\" },\n        \"christmas island\": { \"name\": \"Christmas Island\", \"alpha-2\": \"CX\", \"country-code\": \"162\" },\n        \"cocos (keeling) islands\": { \"name\": \"Cocos (Keeling) Islands\", \"alpha-2\": \"CC\", \"country-code\": \"166\" },\n        \"colombia\": { \"name\": \"Colombia\", \"alpha-2\": \"CO\", \"country-code\": \"170\" },\n        \"comoros\": { \"name\": \"Comoros\", \"alpha-2\": \"KM\", \"country-code\": \"174\" },\n        \"congo\": { \"name\": \"Congo\", \"alpha-2\": \"CG\", \"country-code\": \"178\" },\n        \"congo (democratic republic of the)\": {\n            \"name\": \"Congo (Democratic Republic of the)\",\n            \"alpha-2\": \"CD\",\n            \"country-code\": \"180\"\n        },\n        \"congo the democratic republic of the\": {\n            \"name\": \"Congo The Democratic Republic Of The\",\n            \"alpha-2\": \"CD\",\n            \"country-code\": \"180\"\n        },\n        \"cook islands\": { \"name\": \"Cook Islands\", \"alpha-2\": \"CK\", \"country-code\": \"184\" },\n        \"costa rica\": { \"name\": \"Costa Rica\", \"alpha-2\": \"CR\", \"country-code\": \"188\" },\n        \"côte d'ivoire\": { \"name\": \"Côte d'Ivoire\", \"alpha-2\": \"CI\", \"country-code\": \"384\" },\n        \"cote d'ivoire\": { \"name\": \"Cote d'Ivoire\", \"alpha-2\": \"CI\", \"country-code\": \"384\" },\n        \"croatia\": { \"name\": \"Croatia\", \"alpha-2\": \"HR\", \"country-code\": \"191\" },\n        \"cuba\": { \"name\": \"Cuba\", \"alpha-2\": \"CU\", \"country-code\": \"192\" },\n        \"curaçao\": { \"name\": \"Curaçao\", \"alpha-2\": \"CW\", \"country-code\": \"531\" },\n        \"cyprus\": { \"name\": \"Cyprus\", \"alpha-2\": \"CY\", \"country-code\": \"196\" },\n        \"czech republic\": { \"name\": \"Czech Republic\", \"alpha-2\": \"CZ\", \"country-code\": \"203\" },\n        \"denmark\": { \"name\": \"Denmark\", \"alpha-2\": \"DK\", \"country-code\": \"208\" },\n        \"djibouti\": { \"name\": \"Djibouti\", \"alpha-2\": \"DJ\", \"country-code\": \"262\" },\n        \"dominica\": { \"name\": \"Dominica\", \"alpha-2\": \"DM\", \"country-code\": \"212\" },\n        \"dominican republic\": { \"name\": \"Dominican Republic\", \"alpha-2\": \"DO\", \"country-code\": \"214\" },\n        \"ecuador\": { \"name\": \"Ecuador\", \"alpha-2\": \"EC\", \"country-code\": \"218\" },\n        \"egypt\": { \"name\": \"Egypt\", \"alpha-2\": \"EG\", \"country-code\": \"818\" },\n        \"el salvador\": { \"name\": \"El Salvador\", \"alpha-2\": \"SV\", \"country-code\": \"222\" },\n        \"equatorial guinea\": { \"name\": \"Equatorial Guinea\", \"alpha-2\": \"GQ\", \"country-code\": \"226\" },\n        \"eritrea\": { \"name\": \"Eritrea\", \"alpha-2\": \"ER\", \"country-code\": \"232\" },\n        \"estonia\": { \"name\": \"Estonia\", \"alpha-2\": \"EE\", \"country-code\": \"233\" },\n        \"ethiopia\": { \"name\": \"Ethiopia\", \"alpha-2\": \"ET\", \"country-code\": \"231\" },\n        \"falkland islands (malvinas)\": { \"name\": \"Falkland Islands (Malvinas)\", \"alpha-2\": \"FK\", \"country-code\": \"238\" },\n        \"faroe islands\": { \"name\": \"Faroe Islands\", \"alpha-2\": \"FO\", \"country-code\": \"234\" },\n        \"fiji\": { \"name\": \"Fiji\", \"alpha-2\": \"FJ\", \"country-code\": \"242\" },\n        \"finland\": { \"name\": \"Finland\", \"alpha-2\": \"FI\", \"country-code\": \"246\" },\n        \"france\": { \"name\": \"France\", \"alpha-2\": \"FR\", \"country-code\": \"250\" },\n        \"french guiana\": { \"name\": \"French Guiana\", \"alpha-2\": \"GF\", \"country-code\": \"254\" },\n        \"french polynesia\": { \"name\": \"French Polynesia\", \"alpha-2\": \"PF\", \"country-code\": \"258\" },\n        \"french southern territories\": { \"name\": \"French Southern Territories\", \"alpha-2\": \"TF\", \"country-code\": \"260\" },\n        \"gabon\": { \"name\": \"Gabon\", \"alpha-2\": \"GA\", \"country-code\": \"266\" },\n        \"gambia\": { \"name\": \"Gambia\", \"alpha-2\": \"GM\", \"country-code\": \"270\" },\n        \"georgia\": { \"name\": \"Georgia\", \"alpha-2\": \"GE\", \"country-code\": \"268\" },\n        \"germany\": { \"name\": \"Germany\", \"alpha-2\": \"DE\", \"country-code\": \"276\" },\n        \"ghana\": { \"name\": \"Ghana\", \"alpha-2\": \"GH\", \"country-code\": \"288\" },\n        \"gibraltar\": { \"name\": \"Gibraltar\", \"alpha-2\": \"GI\", \"country-code\": \"292\" },\n        \"greece\": { \"name\": \"Greece\", \"alpha-2\": \"GR\", \"country-code\": \"300\" },\n        \"greenland\": { \"name\": \"Greenland\", \"alpha-2\": \"GL\", \"country-code\": \"304\" },\n        \"grenada\": { \"name\": \"Grenada\", \"alpha-2\": \"GD\", \"country-code\": \"308\" },\n        \"guadeloupe\": { \"name\": \"Guadeloupe\", \"alpha-2\": \"GP\", \"country-code\": \"312\" },\n        \"guam\": { \"name\": \"Guam\", \"alpha-2\": \"GU\", \"country-code\": \"316\" },\n        \"guatemala\": { \"name\": \"Guatemala\", \"alpha-2\": \"GT\", \"country-code\": \"320\" },\n        \"guernsey\": { \"name\": \"Guernsey\", \"alpha-2\": \"GG\", \"country-code\": \"831\" },\n        \"guinea\": { \"name\": \"Guinea\", \"alpha-2\": \"GN\", \"country-code\": \"324\" },\n        \"guinea-bissau\": { \"name\": \"Guinea-Bissau\", \"alpha-2\": \"GW\", \"country-code\": \"624\" },\n        \"guyana\": { \"name\": \"Guyana\", \"alpha-2\": \"GY\", \"country-code\": \"328\" },\n        \"haiti\": { \"name\": \"Haiti\", \"alpha-2\": \"HT\", \"country-code\": \"332\" },\n        \"heard island and mcdonald islands\": {\n            \"name\": \"Heard Island and McDonald Islands\",\n            \"alpha-2\": \"HM\",\n            \"country-code\": \"334\"\n        },\n        \"holy see\": { \"name\": \"Holy See\", \"alpha-2\": \"VA\", \"country-code\": \"336\" },\n        \"honduras\": { \"name\": \"Honduras\", \"alpha-2\": \"HN\", \"country-code\": \"340\" },\n        \"hong kong\": { \"name\": \"Hong Kong\", \"alpha-2\": \"HK\", \"country-code\": \"344\" },\n        \"hungary\": { \"name\": \"Hungary\", \"alpha-2\": \"HU\", \"country-code\": \"348\" },\n        \"iceland\": { \"name\": \"Iceland\", \"alpha-2\": \"IS\", \"country-code\": \"352\" },\n        \"india\": { \"name\": \"India\", \"alpha-2\": \"IN\", \"country-code\": \"356\" },\n        \"indonesia\": { \"name\": \"Indonesia\", \"alpha-2\": \"ID\", \"country-code\": \"360\" },\n        \"iran (islamic republic of)\": { \"name\": \"Iran (Islamic Republic of)\", \"alpha-2\": \"IR\", \"country-code\": \"364\" },\n        \"iran islamic republic of\": { \"name\": \"Iran Islamic Republic Of\", \"alpha-2\": \"IR\", \"country-code\": \"364\" },\n        \"iraq\": { \"name\": \"Iraq\", \"alpha-2\": \"IQ\", \"country-code\": \"368\" },\n        \"ireland\": { \"name\": \"Ireland\", \"alpha-2\": \"IE\", \"country-code\": \"372\" },\n        \"isle of man\": { \"name\": \"Isle of Man\", \"alpha-2\": \"IM\", \"country-code\": \"833\" },\n        \"israel\": { \"name\": \"Israel\", \"alpha-2\": \"IL\", \"country-code\": \"376\" },\n        \"italy\": { \"name\": \"Italy\", \"alpha-2\": \"IT\", \"country-code\": \"380\" },\n        \"jamaica\": { \"name\": \"Jamaica\", \"alpha-2\": \"JM\", \"country-code\": \"388\" },\n        \"japan\": { \"name\": \"Japan\", \"alpha-2\": \"JP\", \"country-code\": \"392\" },\n        \"jersey\": { \"name\": \"Jersey\", \"alpha-2\": \"JE\", \"country-code\": \"832\" },\n        \"jordan\": { \"name\": \"Jordan\", \"alpha-2\": \"JO\", \"country-code\": \"400\" },\n        \"kazakhstan\": { \"name\": \"Kazakhstan\", \"alpha-2\": \"KZ\", \"country-code\": \"398\" },\n        \"kenya\": { \"name\": \"Kenya\", \"alpha-2\": \"KE\", \"country-code\": \"404\" },\n        \"kiribati\": { \"name\": \"Kiribati\", \"alpha-2\": \"KI\", \"country-code\": \"296\" },\n        \"korea (democratic people's republic of)\": {\n            \"name\": \"Korea (Democratic People's Republic of)\",\n            \"alpha-2\": \"KP\",\n            \"country-code\": \"408\"\n        },\n        \"korea (republic of)\": { \"name\": \"Korea (Republic of)\", \"alpha-2\": \"KR\", \"country-code\": \"410\" },\n        \"korea republic of\": { \"name\": \"Korea Republic Of\", \"alpha-2\": \"KR\", \"country-code\": \"410\" },\n        \"kuwait\": { \"name\": \"Kuwait\", \"alpha-2\": \"KW\", \"country-code\": \"414\" },\n        \"kyrgyzstan\": { \"name\": \"Kyrgyzstan\", \"alpha-2\": \"KG\", \"country-code\": \"417\" },\n        \"lao people's democratic republic\": {\n            \"name\": \"Lao People's Democratic Republic\",\n            \"alpha-2\": \"LA\",\n            \"country-code\": \"418\"\n        },\n        \"latvia\": { \"name\": \"Latvia\", \"alpha-2\": \"LV\", \"country-code\": \"428\" },\n        \"lebanon\": { \"name\": \"Lebanon\", \"alpha-2\": \"LB\", \"country-code\": \"422\" },\n        \"lesotho\": { \"name\": \"Lesotho\", \"alpha-2\": \"LS\", \"country-code\": \"426\" },\n        \"liberia\": { \"name\": \"Liberia\", \"alpha-2\": \"LR\", \"country-code\": \"430\" },\n        \"libya\": { \"name\": \"Libya\", \"alpha-2\": \"LY\", \"country-code\": \"434\" },\n        \"liechtenstein\": { \"name\": \"Liechtenstein\", \"alpha-2\": \"LI\", \"country-code\": \"438\" },\n        \"lithuania\": { \"name\": \"Lithuania\", \"alpha-2\": \"LT\", \"country-code\": \"440\" },\n        \"luxembourg\": { \"name\": \"Luxembourg\", \"alpha-2\": \"LU\", \"country-code\": \"442\" },\n        \"macao\": { \"name\": \"Macao\", \"alpha-2\": \"MO\", \"country-code\": \"446\" },\n        \"macedonia (the former yugoslav republic of)\": {\n            \"name\": \"Macedonia (the former Yugoslav Republic of)\",\n            \"alpha-2\": \"MK\",\n            \"country-code\": \"807\"\n        },\n        \"macedonia the former yugoslav republic of\": {\n            \"name\": \"Macedonia The Former Yugoslav Republic Of\",\n            \"alpha-2\": \"MK\",\n            \"country-code\": \"807\"\n        },\n        \"madagascar\": { \"name\": \"Madagascar\", \"alpha-2\": \"MG\", \"country-code\": \"450\" },\n        \"malawi\": { \"name\": \"Malawi\", \"alpha-2\": \"MW\", \"country-code\": \"454\" },\n        \"malaysia\": { \"name\": \"Malaysia\", \"alpha-2\": \"MY\", \"country-code\": \"458\" },\n        \"maldives\": { \"name\": \"Maldives\", \"alpha-2\": \"MV\", \"country-code\": \"462\" },\n        \"mali\": { \"name\": \"Mali\", \"alpha-2\": \"ML\", \"country-code\": \"466\" },\n        \"malta\": { \"name\": \"Malta\", \"alpha-2\": \"MT\", \"country-code\": \"470\" },\n        \"marshall islands\": { \"name\": \"Marshall Islands\", \"alpha-2\": \"MH\", \"country-code\": \"584\" },\n        \"martinique\": { \"name\": \"Martinique\", \"alpha-2\": \"MQ\", \"country-code\": \"474\" },\n        \"mauritania\": { \"name\": \"Mauritania\", \"alpha-2\": \"MR\", \"country-code\": \"478\" },\n        \"mauritius\": { \"name\": \"Mauritius\", \"alpha-2\": \"MU\", \"country-code\": \"480\" },\n        \"mayotte\": { \"name\": \"Mayotte\", \"alpha-2\": \"YT\", \"country-code\": \"175\" },\n        \"mexico\": { \"name\": \"Mexico\", \"alpha-2\": \"MX\", \"country-code\": \"484\" },\n        \"micronesia (federated states of)\": {\n            \"name\": \"Micronesia (Federated States of)\",\n            \"alpha-2\": \"FM\",\n            \"country-code\": \"583\"\n        },\n        \"micronesia federated states of\": {\n            \"name\": \"Micronesia Federated States Of\",\n            \"alpha-2\": \"FM\",\n            \"country-code\": \"583\"\n        },\n        \"moldova (republic of)\": { \"name\": \"Moldova (Republic of)\", \"alpha-2\": \"MD\", \"country-code\": \"498\" },\n        \"moldova republic of\": { \"name\": \"Moldova Republic Of\", \"alpha-2\": \"MD\", \"country-code\": \"498\" },\n        \"monaco\": { \"name\": \"Monaco\", \"alpha-2\": \"MC\", \"country-code\": \"492\" },\n        \"mongolia\": { \"name\": \"Mongolia\", \"alpha-2\": \"MN\", \"country-code\": \"496\" },\n        \"montenegro\": { \"name\": \"Montenegro\", \"alpha-2\": \"ME\", \"country-code\": \"499\" },\n        \"montserrat\": { \"name\": \"Montserrat\", \"alpha-2\": \"MS\", \"country-code\": \"500\" },\n        \"morocco\": { \"name\": \"Morocco\", \"alpha-2\": \"MA\", \"country-code\": \"504\" },\n        \"mozambique\": { \"name\": \"Mozambique\", \"alpha-2\": \"MZ\", \"country-code\": \"508\" },\n        \"myanmar\": { \"name\": \"Myanmar\", \"alpha-2\": \"MM\", \"country-code\": \"104\" },\n        \"namibia\": { \"name\": \"Namibia\", \"alpha-2\": \"NA\", \"country-code\": \"516\" },\n        \"nauru\": { \"name\": \"Nauru\", \"alpha-2\": \"NR\", \"country-code\": \"520\" },\n        \"nepal\": { \"name\": \"Nepal\", \"alpha-2\": \"NP\", \"country-code\": \"524\" },\n        \"netherlands\": { \"name\": \"Netherlands\", \"alpha-2\": \"NL\", \"country-code\": \"528\" },\n        \"new caledonia\": { \"name\": \"New Caledonia\", \"alpha-2\": \"NC\", \"country-code\": \"540\" },\n        \"new zealand\": { \"name\": \"New Zealand\", \"alpha-2\": \"NZ\", \"country-code\": \"554\" },\n        \"nicaragua\": { \"name\": \"Nicaragua\", \"alpha-2\": \"NI\", \"country-code\": \"558\" },\n        \"niger\": { \"name\": \"Niger\", \"alpha-2\": \"NE\", \"country-code\": \"562\" },\n        \"nigeria\": { \"name\": \"Nigeria\", \"alpha-2\": \"NG\", \"country-code\": \"566\" },\n        \"niue\": { \"name\": \"Niue\", \"alpha-2\": \"NU\", \"country-code\": \"570\" },\n        \"norfolk island\": { \"name\": \"Norfolk Island\", \"alpha-2\": \"NF\", \"country-code\": \"574\" },\n        \"northern mariana islands\": { \"name\": \"Northern Mariana Islands\", \"alpha-2\": \"MP\", \"country-code\": \"580\" },\n        \"norway\": { \"name\": \"Norway\", \"alpha-2\": \"NO\", \"country-code\": \"578\" },\n        \"oman\": { \"name\": \"Oman\", \"alpha-2\": \"OM\", \"country-code\": \"512\" },\n        \"pakistan\": { \"name\": \"Pakistan\", \"alpha-2\": \"PK\", \"country-code\": \"586\" },\n        \"palau\": { \"name\": \"Palau\", \"alpha-2\": \"PW\", \"country-code\": \"585\" },\n        \"palestine, state of\": { \"name\": \"Palestine, State of\", \"alpha-2\": \"PS\", \"country-code\": \"275\" },\n        \"panama\": { \"name\": \"Panama\", \"alpha-2\": \"PA\", \"country-code\": \"591\" },\n        \"papua new guinea\": { \"name\": \"Papua New Guinea\", \"alpha-2\": \"PG\", \"country-code\": \"598\" },\n        \"paraguay\": { \"name\": \"Paraguay\", \"alpha-2\": \"PY\", \"country-code\": \"600\" },\n        \"peru\": { \"name\": \"Peru\", \"alpha-2\": \"PE\", \"country-code\": \"604\" },\n        \"philippines\": { \"name\": \"Philippines\", \"alpha-2\": \"PH\", \"country-code\": \"608\" },\n        \"pitcairn\": { \"name\": \"Pitcairn\", \"alpha-2\": \"PN\", \"country-code\": \"612\" },\n        \"poland\": { \"name\": \"Poland\", \"alpha-2\": \"PL\", \"country-code\": \"616\" },\n        \"portugal\": { \"name\": \"Portugal\", \"alpha-2\": \"PT\", \"country-code\": \"620\" },\n        \"puerto rico\": { \"name\": \"Puerto Rico\", \"alpha-2\": \"PR\", \"country-code\": \"630\" },\n        \"qatar\": { \"name\": \"Qatar\", \"alpha-2\": \"QA\", \"country-code\": \"634\" },\n        \"réunion\": { \"name\": \"Réunion\", \"alpha-2\": \"RE\", \"country-code\": \"638\" },\n        \"reunion\": { \"name\": \"Reunion\", \"alpha-2\": \"RE\", \"country-code\": \"638\" },\n        \"romania\": { \"name\": \"Romania\", \"alpha-2\": \"RO\", \"country-code\": \"642\" },\n        \"russian federation\": { \"name\": \"Russian Federation\", \"alpha-2\": \"RU\", \"country-code\": \"643\" },\n        \"rwanda\": { \"name\": \"Rwanda\", \"alpha-2\": \"RW\", \"country-code\": \"646\" },\n        \"saint barthélemy\": { \"name\": \"Saint Barthélemy\", \"alpha-2\": \"BL\", \"country-code\": \"652\" },\n        \"saint helena, ascension and tristan da cunha\": {\n            \"name\": \"Saint Helena, Ascension and Tristan da Cunha\",\n            \"alpha-2\": \"SH\",\n            \"country-code\": \"654\"\n        },\n        \"saint kitts and nevis\": { \"name\": \"Saint Kitts and Nevis\", \"alpha-2\": \"KN\", \"country-code\": \"659\" },\n        \"saint lucia\": { \"name\": \"Saint Lucia\", \"alpha-2\": \"LC\", \"country-code\": \"662\" },\n        \"saint martin (french part)\": { \"name\": \"Saint Martin (French part)\", \"alpha-2\": \"MF\", \"country-code\": \"663\" },\n        \"saint pierre and miquelon\": { \"name\": \"Saint Pierre and Miquelon\", \"alpha-2\": \"PM\", \"country-code\": \"666\" },\n        \"saint vincent and the grenadines\": {\n            \"name\": \"Saint Vincent and the Grenadines\",\n            \"alpha-2\": \"VC\",\n            \"country-code\": \"670\"\n        },\n        \"samoa\": { \"name\": \"Samoa\", \"alpha-2\": \"WS\", \"country-code\": \"882\" },\n        \"san marino\": { \"name\": \"San Marino\", \"alpha-2\": \"SM\", \"country-code\": \"674\" },\n        \"sao tome and principe\": { \"name\": \"Sao Tome and Principe\", \"alpha-2\": \"ST\", \"country-code\": \"678\" },\n        \"saudi arabia\": { \"name\": \"Saudi Arabia\", \"alpha-2\": \"SA\", \"country-code\": \"682\" },\n        \"senegal\": { \"name\": \"Senegal\", \"alpha-2\": \"SN\", \"country-code\": \"686\" },\n        \"serbia\": { \"name\": \"Serbia\", \"alpha-2\": \"RS\", \"country-code\": \"688\" },\n        \"serbia and montenegro\": { \"name\": \"Serbia and Montenegro\", \"alpha-2\": \"RS\", \"country-code\": \"688\" },\n        \"seychelles\": { \"name\": \"Seychelles\", \"alpha-2\": \"SC\", \"country-code\": \"690\" },\n        \"sierra leone\": { \"name\": \"Sierra Leone\", \"alpha-2\": \"SL\", \"country-code\": \"694\" },\n        \"singapore\": { \"name\": \"Singapore\", \"alpha-2\": \"SG\", \"country-code\": \"702\" },\n        \"sint maarten (dutch part)\": { \"name\": \"Sint Maarten (Dutch part)\", \"alpha-2\": \"SX\", \"country-code\": \"534\" },\n        \"slovakia\": { \"name\": \"Slovakia\", \"alpha-2\": \"SK\", \"country-code\": \"703\" },\n        \"slovenia\": { \"name\": \"Slovenia\", \"alpha-2\": \"SI\", \"country-code\": \"705\" },\n        \"solomon islands\": { \"name\": \"Solomon Islands\", \"alpha-2\": \"SB\", \"country-code\": \"090\" },\n        \"somalia\": { \"name\": \"Somalia\", \"alpha-2\": \"SO\", \"country-code\": \"706\" },\n        \"south africa\": { \"name\": \"South Africa\", \"alpha-2\": \"ZA\", \"country-code\": \"710\" },\n        \"south georgia and the south sandwich islands\": {\n            \"name\": \"South Georgia and the South Sandwich Islands\",\n            \"alpha-2\": \"GS\",\n            \"country-code\": \"239\"\n        },\n        \"south sudan\": { \"name\": \"South Sudan\", \"alpha-2\": \"SS\", \"country-code\": \"728\" },\n        \"spain\": { \"name\": \"Spain\", \"alpha-2\": \"ES\", \"country-code\": \"724\" },\n        \"sri lanka\": { \"name\": \"Sri Lanka\", \"alpha-2\": \"LK\", \"country-code\": \"144\" },\n        \"sudan\": { \"name\": \"Sudan\", \"alpha-2\": \"SD\", \"country-code\": \"729\" },\n        \"suriname\": { \"name\": \"Suriname\", \"alpha-2\": \"SR\", \"country-code\": \"740\" },\n        \"svalbard and jan mayen\": { \"name\": \"Svalbard and Jan Mayen\", \"alpha-2\": \"SJ\", \"country-code\": \"744\" },\n        \"swaziland\": { \"name\": \"Swaziland\", \"alpha-2\": \"SZ\", \"country-code\": \"748\" },\n        \"sweden\": { \"name\": \"Sweden\", \"alpha-2\": \"SE\", \"country-code\": \"752\" },\n        \"switzerland\": { \"name\": \"Switzerland\", \"alpha-2\": \"CH\", \"country-code\": \"756\" },\n        \"syrian arab republic\": { \"name\": \"Syrian Arab Republic\", \"alpha-2\": \"SY\", \"country-code\": \"760\" },\n        \"taiwan, province of china\": { \"name\": \"Taiwan, Province of China\", \"alpha-2\": \"TW\", \"country-code\": \"158\" },\n        \"taiwan province of china\": { \"name\": \"Taiwan Province Of China\", \"alpha-2\": \"TW\", \"country-code\": \"158\" },\n        \"taiwan\": { \"name\": \"Taiwan\", \"alpha-2\": \"TW\", \"country-code\": \"158\" },\n        \"tajikistan\": { \"name\": \"Tajikistan\", \"alpha-2\": \"TJ\", \"country-code\": \"762\" },\n        \"tanzania, united republic of\": {\n            \"name\": \"Tanzania, United Republic of\",\n            \"alpha-2\": \"TZ\",\n            \"country-code\": \"834\"\n        },\n        \"thailand\": { \"name\": \"Thailand\", \"alpha-2\": \"TH\", \"country-code\": \"764\" },\n        \"timor-leste\": { \"name\": \"Timor-Leste\", \"alpha-2\": \"TL\", \"country-code\": \"626\" },\n        \"togo\": { \"name\": \"Togo\", \"alpha-2\": \"TG\", \"country-code\": \"768\" },\n        \"tokelau\": { \"name\": \"Tokelau\", \"alpha-2\": \"TK\", \"country-code\": \"772\" },\n        \"tonga\": { \"name\": \"Tonga\", \"alpha-2\": \"TO\", \"country-code\": \"776\" },\n        \"trinidad and tobago\": { \"name\": \"Trinidad and Tobago\", \"alpha-2\": \"TT\", \"country-code\": \"780\" },\n        \"tunisia\": { \"name\": \"Tunisia\", \"alpha-2\": \"TN\", \"country-code\": \"788\" },\n        \"turkey\": { \"name\": \"Turkey\", \"alpha-2\": \"TR\", \"country-code\": \"792\" },\n        \"turkmenistan\": { \"name\": \"Turkmenistan\", \"alpha-2\": \"TM\", \"country-code\": \"795\" },\n        \"turks and caicos islands\": { \"name\": \"Turks and Caicos Islands\", \"alpha-2\": \"TC\", \"country-code\": \"796\" },\n        \"tuvalu\": { \"name\": \"Tuvalu\", \"alpha-2\": \"TV\", \"country-code\": \"798\" },\n        \"uganda\": { \"name\": \"Uganda\", \"alpha-2\": \"UG\", \"country-code\": \"800\" },\n        \"ukraine\": { \"name\": \"Ukraine\", \"alpha-2\": \"UA\", \"country-code\": \"804\" },\n        \"united arab emirates\": { \"name\": \"United Arab Emirates\", \"alpha-2\": \"AE\", \"country-code\": \"784\" },\n        \"united kingdom of great britain and northern ireland\": {\n            \"name\": \"United Kingdom of Great Britain and Northern Ireland\",\n            \"alpha-2\": \"GB\",\n            \"country-code\": \"826\"\n        },\n        \"united kingdom\": {\n            \"name\": \"United Kingdom\",\n            \"alpha-2\": \"GB\",\n            \"country-code\": \"826\"\n        },\n        \"united states of america\": { \"name\": \"United States of America\", \"alpha-2\": \"US\", \"country-code\": \"840\" },\n        \"usa\": { \"name\": \"USA\", \"alpha-2\": \"US\", \"country-code\": \"840\" },\n        \"united states\": { \"name\": \"United States\", \"alpha-2\": \"US\", \"country-code\": \"840\" },\n        \"united states minor outlying islands\": {\n            \"name\": \"United States Minor Outlying Islands\",\n            \"alpha-2\": \"UM\",\n            \"country-code\": \"581\"\n        },\n        \"uruguay\": { \"name\": \"Uruguay\", \"alpha-2\": \"UY\", \"country-code\": \"858\" },\n        \"uzbekistan\": { \"name\": \"Uzbekistan\", \"alpha-2\": \"UZ\", \"country-code\": \"860\" },\n        \"vanuatu\": { \"name\": \"Vanuatu\", \"alpha-2\": \"VU\", \"country-code\": \"548\" },\n        \"venezuela (bolivarian republic of)\": {\n            \"name\": \"Venezuela (Bolivarian Republic of)\",\n            \"alpha-2\": \"VE\",\n            \"country-code\": \"862\"\n        },\n        \"venezuela\": { \"name\": \"Venezuela\", \"alpha-2\": \"VE\", \"country-code\": \"862\" },\n        \"viet nam\": { \"name\": \"Viet Nam\", \"alpha-2\": \"VN\", \"country-code\": \"704\" },\n        \"virgin islands (british)\": { \"name\": \"Virgin Islands (British)\", \"alpha-2\": \"VG\", \"country-code\": \"092\" },\n        \"virgin islands (u.s.)\": { \"name\": \"Virgin Islands (U.S.)\", \"alpha-2\": \"VI\", \"country-code\": \"850\" },\n        \"wallis and futuna\": { \"name\": \"Wallis and Futuna\", \"alpha-2\": \"WF\", \"country-code\": \"876\" },\n        \"western sahara\": { \"name\": \"Western Sahara\", \"alpha-2\": \"EH\", \"country-code\": \"732\" },\n        \"yemen\": { \"name\": \"Yemen\", \"alpha-2\": \"YE\", \"country-code\": \"887\" },\n        \"zambia\": { \"name\": \"Zambia\", \"alpha-2\": \"ZM\", \"country-code\": \"894\" },\n        \"zimbabwe\": { \"name\": \"Zimbabwe\", \"alpha-2\": \"ZW\", \"country-code\": \"716\" }\n    };\n    angular.module('Config')\n        .constant('countryCodes', countryCodes);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared', [\n        'Fortscale.shared.services',\n        'Fortscale.shared.directives',\n        'Fortscale.shared.components',\n        'Fortscale.shared.filters',\n        'Fortscale.shared.service.fsDownloadFile'\n    ]);\n}());\n","\n","\n","\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services', [\n        'Fortscale.shared.services.assert',\n        'Fortscale.shared.services.dependencyMounter',\n        'Fortscale.shared.services.objectUtils',\n        'Fortscale.shared.services.interpolation',\n        'Fortscale.shared.services.CSVConverter',\n        'Fortscale.shared.services.URLUtils',\n        'Fortscale.shared.services.tableSettingsUtil',\n        'Fortscale.shared.services.jsonLoader',\n        'Fortscale.shared.services.indicatorTypeMapper',\n        'Fortscale.shared.services.modelUtils',\n        'Fortscale.shared.services.fsModals',\n        'Fortscale.shared.services.dateRanges',\n        'Fortscale.shared.services.tagsUtils',\n        'Fortscale.shared.services.countryCodesUtil',\n        'Fortscale.shared.services.fsIndicatorTypes',\n        'Fortscale.shared.services.fsIndicatorGraphsHandler',\n        'Fortscale.shared.services.fsIndexedDBService',\n        'Fortscale.shared.services.stringUtils',\n        'Fortscale.shared.services.fsIndicatorErrorCodes',\n        'Fortscale.shared.services.fsNanobarAutomation',\n        'Fortscale.shared.services.entityActivityUtils',\n        'Fortscale.shared.services.toastrService'\n    ]);\n}());\n","(function () {\n    'use strict';\n    function assertFactory() {\n        /**\n         *\n         * @param {boolean | *} condition\n         * @param {string=} message\n         * @param {function=} ErrorType The object should be\n         */\n        function assert(condition, message, ErrorType) {\n            // Create an early return when condition is fulfilled to prevent execution of futile code.\n            if (condition) {\n                return;\n            }\n            // Set defaults\n            message = message || '';\n            var error;\n            // Verify error type is valid. If it's not, then Error type should be error\n            if (typeof ErrorType === 'function') {\n                // Create new error from Error type\n                error = new ErrorType(message);\n            }\n            // If ErrorType is not a function or (newly populated) error is not an instance of Error\n            // Then error should be new Error\n            if (!(error instanceof Error)) {\n                error = new Error(message);\n            }\n            throw error;\n        }\n        /**\n         * Validates that a variable is string and not an empty string\n         *\n         * @param {string} str\n         * @param {string} strName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         * @param {boolean=} canBeEmpty Defaults to false\n         */\n        assert.isString = function (str, strName, errMsg, isOptional, canBeEmpty) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            canBeEmpty = !!canBeEmpty;\n            if (!(str === undefined && isOptional)) {\n                assert(!_.isUndefined(str), errMsg + strName + ' must be provided.', ReferenceError);\n                assert(_.isString(str), errMsg + strName + ' must be a string.', TypeError);\n                assert(str !== '' || canBeEmpty, errMsg + strName + ' must not be an empty string.', RangeError);\n            }\n        };\n        /**\n         * Validates that a variable is string and not an empty string\n         *\n         * @param {number} num\n         * @param {string} numName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isNumber = function (num, numName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(num === undefined && isOptional)) {\n                assert(!_.isUndefined(num), errMsg + numName + ' must be provided.', ReferenceError);\n                assert(_.isNumber(num), errMsg + numName + ' must be a number.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is an array\n         *\n         * @param {string} arr\n         * @param {string} arrName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isArray = function (arr, arrName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(arr === undefined && isOptional)) {\n                assert(!_.isUndefined(arr), errMsg + arrName + ' must be provided.', ReferenceError);\n                assert(_.isArray(arr), errMsg + arrName + ' must be an array.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is a function\n         *\n         * @param {string} fn\n         * @param {string} fnName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isFunction = function (fn, fnName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(fn === undefined && isOptional)) {\n                assert(!_.isUndefined(fn), errMsg + fnName + ' must be provided.', ReferenceError);\n                assert(_.isFunction(fn), errMsg + fnName + ' must be a function.', TypeError);\n            }\n        };\n        /**\n         * Validates that a variable is a function\n         *\n         * @param {string} obj\n         * @param {string} objName\n         * @param {string=} errMsg Defaults to empty string\n         * @param {boolean=} isOptional Defaults to false\n         */\n        assert.isObject = function (obj, objName, errMsg, isOptional) {\n            errMsg = errMsg || '';\n            isOptional = !!isOptional;\n            if (!(obj === undefined && isOptional)) {\n                assert(!_.isUndefined(obj), errMsg + objName + ' must be provided.', ReferenceError);\n                assert(_.isObject(obj), errMsg + objName + ' must be an object.', TypeError);\n            }\n        };\n        return assert;\n    }\n    angular.module('Fortscale.shared.services.assert', [])\n        .factory('assert', assertFactory)\n        .constant('assertConstant', assertFactory());\n}());\n","(function () {\n    'use strict';\n    /**\n     * The purpose of this service is to provide an alternative way for injecting dependencies.\n     *\n     *\n     * @param {object} $injector Angular service for injecting dependencies.\n     * @constructor\n     */\n    function DependencyMounter($injector) {\n        /**\n         * PRIVATE PROPERTIES\n         */\n        /**\n         * Holds the error message start.\n         *\n         * @type {string}\n         * @private\n         */\n        this._errorMsgStart = 'Fortscale.shared.services.dependencyMounter: ';\n        /**\n         * PRIVATE VALIDATIONS\n         */\n        /**\n         * Validates a Constructor function\n         *\n         * @param {string} methodName The name of the method requesting validation\n         * @param {function} Constructor The constructor function being validated\n         * @private\n         */\n        this._validateConstructor = function _validateConstructor(methodName, Constructor) {\n            // error msg start\n            var errMsgStart = this._errorMsgStart + methodName + ': ';\n            // Validate Constructor is received.\n            // If it's not received, throw ReferenceError\n            if (!angular.isDefined(Constructor)) {\n                throw new ReferenceError(errMsgStart + 'Constructor argument must be provided.');\n            }\n            // Validate Constructor is a function\n            // If not throw Type error.\n            if (!angular.isFunction(Constructor)) {\n                throw new TypeError(errMsgStart + 'Constructor argument must be a function.');\n            }\n        };\n        /**\n         * Validates a Constructor\n         *\n         * @param {string} methodName The name of the method requesting validation\n         * @param {object} instance The instance object being validated\n         * @private\n         */\n        this._validateInstance = function _validateInstance(methodName, instance) {\n            // error msg start\n            var errMsgStart = this._errorMsgStart + methodName + ': ';\n            // Validate instance is received.\n            // If it's not received, throw ReferenceError\n            if (!angular.isDefined(instance)) {\n                throw new ReferenceError(errMsgStart + 'instance argument must be provided.');\n            }\n            // Validate instance is an object. If it isn't throw TypeError.\n            if (!angular.isObject(instance)) {\n                throw new TypeError(errMsgStart + 'instance argument must be an object.');\n            }\n        };\n        /**\n         * Validates an array of strings\n         *\n         * @param {string} methodName The name of the method requesting validation\n         * @param {Array<string>} arrDependencies The instance object being validated\n         * @private\n         */\n        this._validateArrDependencies = function _validateArrDependencies(methodName, arrDependencies) {\n            // error msg start\n            var errMsgStart = this._errorMsgStart + methodName + ': ';\n            // Validate arrDependencies is received.\n            // If not throw ReferenceError\n            if (!angular.isDefined(arrDependencies)) {\n                throw new ReferenceError(errMsgStart + 'arrDependencies argument must be provided.');\n            }\n            // validate arrDependencies is an array.\n            // If not, throw TypeError\n            if (!angular.isArray(arrDependencies)) {\n                throw new TypeError(errMsgStart + 'arrDependencies argument must be an array.');\n            }\n            // Validate all members are strings.\n            // If not throw TypeError\n            angular.forEach(arrDependencies, function (dependecy, index) {\n                if (!angular.isString(dependecy)) {\n                    throw new TypeError(errMsgStart + 'arrDependencies array member ' + index + ' is not a string.' +\n                        ' All members must be strings.');\n                }\n            });\n        };\n        /**\n         * PRIVATE METHODS\n         */\n        /**\n         * Iterate through arrDependencies and get the dependency for each, then mount\n         * that dependency on the object if that key is undefined.\n         *\n         * @param {object} obj The object that the dependencies are to be mounter on\n         * @param {Array<string>} arrDependencies The list of dependency names\n         * @private\n         */\n        this._mountOnObject = function _mountOnObject(obj, arrDependencies) {\n            // Iterate through dependencies and mount each dependency on prototype (if not already there)\n            angular.forEach(arrDependencies, function (dependency) {\n                if (!angular.isDefined(obj[dependency])) {\n                    obj[dependency] = $injector.get(dependency);\n                }\n            });\n        };\n        /**\n         * Iterate through arrDependencies, and for each dependency name, it gets the dependency,\n         * and uses angular.extend to extend the object.\n         *\n         * @param {object} obj The object that the dependencies are to be mounter on\n         * @param {Array<string>} arrDependencies The list of dependency names\n         * @private\n         */\n        this._extendObject = function _extendObject(obj, arrDependencies) {\n            // Iterate through dependencies and mount each dependency on prototype (if not already there)\n            angular.forEach(arrDependencies, function (dependency) {\n                angular.extend(obj, $injector.get(dependency));\n            });\n        };\n        /**\n         * PUBLIC METHODS\n         */\n        /**\n         * Takes a constructor function and a list of dependency names, gets the dependencies and mounts them on the\n         * constructor's prototype\n         *\n         * @param {function} Constructor\n         * @param {Array<string>} arrDependencies An array of string where each string is a name of a dependency\n         */\n        this.mountOnConstructor = function mountOnConstructor(Constructor, arrDependencies) {\n            // Validations\n            this._validateConstructor('mountOnConstructor', Constructor);\n            this._validateArrDependencies('mountOnConstructor', arrDependencies);\n            // Start mounting process\n            this._mountOnObject(Constructor.prototype, arrDependencies);\n        };\n        /**\n         * Takes an instance object and a list of dependency names, gets the dependencies and mounts them on the\n         * constructor's prototype\n         *\n         * @param {object} instance A controller's instance\n         * @param {Array<string>} arrDependencies An array of string where each string is a name of a dependency\n         */\n        this.mountOnInstance = function mountOnInstance(instance, arrDependencies) {\n            // Validations\n            this._validateInstance('mountOnInstance', instance);\n            this._validateArrDependencies('mountOnInstance', arrDependencies);\n            // Start mounting process\n            this._mountOnObject(instance, arrDependencies);\n        };\n        this.extendConstructor = function extendConstructor(Constructor, arrDependencies) {\n            // Validations\n            this._validateConstructor('mountOnConstructor', Constructor);\n            this._validateArrDependencies('mountOnConstructor', arrDependencies);\n            // Start mounting process\n            this._extendObject(Constructor.prototype, arrDependencies);\n        };\n        this.extendInstance = function extendInstance(instance, arrDependencies) {\n            // Validations\n            this._validateInstance('mountOnInstance', instance);\n            this._validateArrDependencies('mountOnInstance', arrDependencies);\n            // Start mounting process\n            this._extendObject(instance, arrDependencies);\n        };\n    }\n    DependencyMounter.$inject = ['$injector'];\n    angular.module('Fortscale.shared.services.dependencyMounter', [])\n        .service('dependencyMounter', DependencyMounter);\n}());\n","(function () {\n    'use strict';\n    /**\n     * This service is used to open an iframe and download a file.\n     *\n     * @constructor\n     */\n    function FsDownloadFile(assert) {\n        /**\n         * Opens an iframe, downloads a file, then (if shouldRemoveOnDone) removes the iframe.\n         *\n         * @param {string} src\n         * @param {boolean=} shouldRemoveOnDone\n         * @returns {Element}\n         */\n        this.openIFrame = function (src, shouldRemoveOnDone) {\n            // Validate src\n            assert.isString(src, 'src', 'FsDownloadFile: openIFrame: ', false, false);\n            if (shouldRemoveOnDone === undefined) {\n                shouldRemoveOnDone = true;\n            }\n            // Open new Iframe to download\n            var iframe = document.createElement('iframe');\n            iframe.style.display = \"none\";\n            var html = document.getElementsByTagName('html')[0];\n            html.appendChild(iframe);\n            // If shouldRemoveOnDone then on file load remove the iframe\n            if (shouldRemoveOnDone) {\n                $(iframe).load(function () {\n                    html.removeChild(iframe);\n                });\n            }\n            iframe.src = src;\n            return iframe;\n        };\n    }\n    FsDownloadFile.$inject = ['assert'];\n    angular.module('Fortscale.shared.service.fsDownloadFile', [])\n        .service('fsDownloadFile', FsDownloadFile);\n}());\n","(function () {\n    'use strict';\n    var IS_NOT_OPTIONAL = false;\n    var CAN_NOT_BE_EMPTY = false;\n    var IS_OPTIONAL = true;\n    function FsIndicatorGraphsHandlerProvider(assert) {\n        var provider = this;\n        provider._errMsg = \"FsIndicatorGraphsHandlerProvider: \";\n        provider._indicatorQueries = new Map();\n        /**\n         * Add an indicator query. This will add a query to match the indicator and a handler function to fire\n         * when indicator is matched\n         *\n         * @param {object} queryObj Will be used as the query object to determine which handler function to use\n         * @param handlerFn The function to invoke when indicator has matched the query\n         */\n        provider.addIndicatorQuery = function (queryObj, handlerFn) {\n            var errMsg = provider._errMsg + \"addIndicatorQuery: \";\n            // Validations\n            assert.isObject(queryObj, 'queryObj', errMsg, IS_NOT_OPTIONAL);\n            assert.isFunction(handlerFn, 'handlerFn', errMsg, IS_NOT_OPTIONAL);\n            var queryObjectKey;\n            try {\n                queryObjectKey = JSON.stringify(queryObj);\n            }\n            catch (e) {\n                throw new RangeError(errMsg + \"queryObj must be a parseble to string.\", e);\n            }\n            assert(typeof provider._indicatorQueries.get(queryObjectKey) === 'undefined', errMsg + \"queryObj must be a unique query.\", RangeError);\n            // Add query object and handler function\n            provider._indicatorQueries.set(queryObjectKey, { query: queryObj, handlerFn: handlerFn });\n        };\n        /**\n         * PROVIDER'S FACTORY\n         */\n        function fsIndicatorGraphsHandlerFactory($location, $rootScope) {\n            var errMsg = \"fsIndicatorGraphsHandlerFactory: \";\n            /**\n             * Takes a selector and returns the indicator from the element's controller.\n             *\n             * @param {string} selector\n             * @returns {object|null} Returns an indicator or null\n             */\n            function getIndicatorBySelector(selector) {\n                assert.isString(selector, 'selector', errMsg + \"getIndicatorBySelector: \", IS_NOT_OPTIONAL);\n                var element = $(selector);\n                if (!element.length) {\n                    return null;\n                }\n                var controller = angular.element(element[0]).controller();\n                if (!controller) {\n                    return null;\n                }\n                return controller.indicator || null;\n            }\n            /**\n             * Takes an indicator and iterates through queries. When a query matches, the handlerFn is returned.\n             * If no match is made, null is returned.\n             *\n             * @param {object} indicator The indicator to be matched\n             * @returns {function|null} Returns a handlerFn or null;\n             */\n            function getHandlerFnByIndicator(indicator) {\n                assert.isObject(indicator, 'indicator', errMsg + \"getHandlerFnByIndicator: \", IS_NOT_OPTIONAL);\n                var queriesHandlers = Array.from(provider._indicatorQueries.values());\n                var selectedQueryHandler = null;\n                for (var _i = 0, queriesHandlers_1 = queriesHandlers; _i < queriesHandlers_1.length; _i++) {\n                    var queryHandler = queriesHandlers_1[_i];\n                    if (_.find([indicator], queryHandler.query)) {\n                        selectedQueryHandler = queryHandler;\n                        break;\n                    }\n                }\n                if (selectedQueryHandler) {\n                    return selectedQueryHandler.handlerFn;\n                }\n                return null;\n            }\n            /**\n             * Matches a handlerFn to an indicator, and if match is made, the handlerFn is invoked.\n             *\n             * @param {object} indicator\n             * @param {*} value\n             * @param {string=} identifier\n             * @returns {null|*}\n             */\n            function invokeHandlerByIndicator(indicator, value, identifier) {\n                assert.isObject(indicator, 'indicator', errMsg + \"getHandlerFnByIndicator: \", IS_NOT_OPTIONAL);\n                assert.isString(identifier, 'identifier', errMsg + \"getHandlerFnByIndicator: \", IS_OPTIONAL);\n                var handlerFn = api.getHandlerFnByIndicator(indicator);\n                if (handlerFn) {\n                    return handlerFn(indicator, value, identifier);\n                }\n                return null;\n            }\n            /**\n             * Takes a data source id and a search object, and uses $location.path to transition to Explore page.\n             *\n             * @param {string} dataSourceId\n             * @param {object=} search\n             */\n            function goToExplore(dataSourceId, search) {\n                // Validations\n                assert.isString(dataSourceId, 'dataSourceId', errMsg + \"goToExplore: \", IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n                assert.isObject(search, 'search', errMsg + \"goToExplore: \", IS_OPTIONAL);\n                // We use applyAsync because there is no guaranty that angular is not in a digest phase when the\n                // function is called.\n                $rootScope.$applyAsync(function () {\n                    $location.path('/d/explore/' + dataSourceId).search(search);\n                });\n            }\n            var api = {\n                getIndicatorBySelector: getIndicatorBySelector,\n                getHandlerFnByIndicator: getHandlerFnByIndicator,\n                invokeHandlerByIndicator: invokeHandlerByIndicator,\n                goToExplore: goToExplore\n            };\n            return api;\n        }\n        this.$get = ['$location', '$rootScope', fsIndicatorGraphsHandlerFactory];\n    }\n    FsIndicatorGraphsHandlerProvider.$inject = ['assertConstant'];\n    angular.module('Fortscale.shared.services.fsIndicatorGraphsHandler', [])\n        .provider('fsIndicatorGraphsHandler', FsIndicatorGraphsHandlerProvider);\n}());\n","(function () {\n    'use strict';\n    var fsIndicatorGraphsHandler;\n    angular.module('Fortscale.shared.services.fsIndicatorGraphsHandler')\n        .run(['$location', '$rootScope', 'fsIndicatorGraphsHandler',\n        function (_$location_, _$rootScope_, _fsIndicatorGraphsHandler_) {\n            // Get the service so it will be available on angular's event_loop phase\n            fsIndicatorGraphsHandler = _fsIndicatorGraphsHandler_;\n        }])\n        .config(['fsIndicatorGraphsHandlerProvider', function (fsIndicatorGraphsHandlerProvider) {\n            // Source Machine Click Handler\n            fsIndicatorGraphsHandlerProvider.addIndicatorQuery({\n                anomalyTypeFieldName: 'source_machine'\n            }, \n            /**\n             *\n             * @param {{entityName: string, anomalyValue: string, dataEntitiesIds: array<string>,\n             * startDate: number}} indicator\n             * @param {{name: string}} point\n             * @param identifier\n             */\n            function sourceMachineIndicatorGraphHandler(indicator, point, identifier) {\n                if (point.name.toLocaleLowerCase() === \"others\") {\n                    return;\n                }\n                var user, dataSourceId, sourceDevice, startTime, endDate, minScore;\n                // populate user and sourceDevice based on chart identifier\n                if (identifier === \"left-column\") {\n                    user = indicator.entityName;\n                    sourceDevice = point.name;\n                }\n                else if (identifier === \"right-column\") {\n                    user = point.name;\n                    sourceDevice = indicator.anomalyValue;\n                }\n                else {\n                    return;\n                }\n                // Populate dataSourceId, startTime, endDate, minScore\n                dataSourceId = indicator.dataEntitiesIds[0];\n                startTime = moment.utc(indicator.startDate).subtract(90, 'days').valueOf();\n                endDate = moment.utc(indicator.startDate).valueOf();\n                minScore = 0;\n                // Populate filters and defaultFilters\n                var filters = \"users.normalized_username=\" + user + ',' +\n                    dataSourceId + \".source_machine=\" + sourceDevice;\n                var defaultFilters = dataSourceId + \".event_time_utc=:\" + startTime + '::' + endDate + ',' +\n                    dataSourceId + \".event_score=>=\" + minScore;\n                // Go to Explore\n                fsIndicatorGraphsHandler\n                    .goToExplore(dataSourceId, { filters: filters, default_filters: defaultFilters });\n            });\n            // Source Machine Click Handler\n            fsIndicatorGraphsHandlerProvider.addIndicatorQuery({\n                anomalyTypeFieldName: \"destination_machine\"\n            }, function destinationMachineIndicatorGraphHandler(indicator, point, identifier) {\n                if (point.name.toLocaleLowerCase() === \"others\") {\n                    return;\n                }\n                var user, dataSourceId, targetDevice, startTime, endDate, minScore;\n                // populate user and targetDevice based on chart identifier\n                if (identifier === \"left-column\") {\n                    user = indicator.entityName;\n                    targetDevice = point.name;\n                }\n                else if (identifier === \"right-column\") {\n                    user = point.name;\n                    targetDevice = indicator.anomalyValue;\n                }\n                else {\n                    return;\n                }\n                // Populate dataSourceId, startTime, endDate, minScore\n                dataSourceId = indicator.dataEntitiesIds[0];\n                startTime = moment.utc(indicator.startDate).subtract(90, 'days').valueOf();\n                endDate = moment.utc(indicator.startDate).valueOf();\n                minScore = 0;\n                // Populate filters and defaultFilters\n                var filters = \"users.normalized_username=\" + user + ',' +\n                    dataSourceId + \".destination_machine=\" + targetDevice;\n                var defaultFilters = dataSourceId + \".event_time_utc=:\" + startTime + '::' + endDate + ',' +\n                    dataSourceId + \".event_score=>=\" + minScore;\n                // Go to Explore\n                fsIndicatorGraphsHandler\n                    .goToExplore(dataSourceId, { filters: filters, default_filters: defaultFilters });\n            });\n            // Country Click Handler\n            fsIndicatorGraphsHandlerProvider.addIndicatorQuery({\n                anomalyTypeFieldName: \"country\"\n            }, function countryIndicatorGraphHandler(indicator, point, identifier) {\n                if (point.name.toLocaleLowerCase() === \"others\") {\n                    return;\n                }\n                var user, dataSourceId, sourceCountry, startTime, endDate, minScore;\n                // populate user and targetDevice based on chart identifier\n                if (identifier === \"left-column\") {\n                    user = indicator.entityName;\n                    sourceCountry = point.name;\n                }\n                else if (identifier === \"right-column\") {\n                    user = point.name;\n                    sourceCountry = indicator.anomalyValue;\n                }\n                else {\n                    return;\n                }\n                // Populate dataSourceId, startTime, endDate, minScore\n                dataSourceId = indicator.dataEntitiesIds[0];\n                startTime = moment.utc(indicator.startDate).subtract(90, 'days').valueOf();\n                endDate = moment.utc(indicator.startDate).valueOf();\n                minScore = 0;\n                // Populate filters and defaultFilters\n                var filters = \"users.normalized_username=\" + user + ',' +\n                    dataSourceId + \".country=\" + sourceCountry;\n                var defaultFilters = dataSourceId + \".event_time_utc=:\" + startTime + '::' + endDate + ',' +\n                    dataSourceId + \".event_score=>=\" + minScore;\n                // Go to Explore\n                fsIndicatorGraphsHandler\n                    .goToExplore(dataSourceId, { filters: filters, default_filters: defaultFilters });\n            });\n        }]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Service used by fs-state-container directive to manage the queries and data fetching\n     *\n     * @param $interpolate\n     * @constructor\n     */\n    function Interpolation($interpolate) {\n        /**\n         * PRIVATE PROPERTIES\n         */\n        this._errMessageStart = 'interpolation: ';\n        /**\n         * PRIVATE METHODS\n         */\n        /**\n         * Takes a template, string or object. Returns a stringified string,\n         * or throws SyntaxError if object can not be stringified.\n         *\n         * @param {string | object} template\n         * @returns {string}\n         * @private\n         */\n        this._convertTemplateToString = function _convertTemplateToString(template) {\n            var self = this;\n            if (angular.isString(template)) {\n                return template;\n            }\n            try {\n                return JSON.stringify(template);\n            }\n            catch (e) {\n                var errMsg = self._errMessageStart +\n                    '_convertTemplateToString: template provided is not a string, ' +\n                    'and can not be stringified wite JSON.stringify.\\n' + e.message;\n                throw new SyntaxError(errMsg);\n            }\n        };\n        /**\n         * Takes a template string and tries to JSON.parse it into an object.\n         * If JSON.parse fails, it throws a SyntaxError\n         *\n         * @param {string} templateString\n         * @private\n         */\n        this._convertStringToObject = function _convertStringToObject(templateString) {\n            var self = this;\n            try {\n                return JSON.parse(templateString);\n            }\n            catch (e) {\n                var errMsg = self._errMessageStart +\n                    '_convertStringToObject: templateString provided ' +\n                    'could not be parsed to object.\\nThe string:\\n' + templateString + '\\n' +\n                    e.message;\n                throw new SyntaxError(errMsg);\n            }\n        };\n        /**\n         * Takes a query value, a changeTo value (or function) and an object. It iterates through\n         * all object values (also nested) and if a certain value matches the queryValue, the state\n         * property will change to -or by if changeTo is a function - changeTo value.\n         * If changeTo is a function, the new value will be the result of changeTo(value,key,obj)\n         *\n         *\n         * @param {*} queryValue\n         * @param {string|function} changeTo\n         * @param {object|Array} obj\n         * @returns {*}\n         * @private\n         */\n        this._digestAdapterItem = function (queryValue, changeTo, obj) {\n            // Duplicate object/array\n            if (_.isArray(obj)) {\n                obj = obj.slice(0);\n            }\n            else {\n                obj = _.merge({}, obj);\n            }\n            // Iterate through object's keys and invoke _digestAdapterItem recursively or\n            // apply changeTo\n            _.each(obj, _.bind(function (value, key) {\n                // If the value of the property is an object, invoke _digestAdapterItem recursively\n                if (_.isObject(value)) {\n                    obj[key] = this._digestAdapterItem(queryValue, changeTo, value);\n                    return;\n                }\n                // the property value equals to the query value, this means that the adapter should\n                // be used. When the changeTo value is a function, it is invoked with value,key,obj\n                // otherwise if its not a function, then the value of the property should be\n                // changeTo value\n                if (value === queryValue) {\n                    if (_.isFunction(changeTo)) {\n                        obj[key] = changeTo(value, key, obj);\n                    }\n                    else {\n                        obj[key] = changeTo;\n                    }\n                }\n            }, this));\n            return obj;\n        };\n        /**\n         * Takes a state adapter, and state, iterates through all values in the adapter, and for\n         * each adapterItem, it invokes _digestAdapterItem which in turn will return a new state\n         * object, that is potentially modified.\n         *\n         * @param {Array<{queryValue: *, changeTo: string|function}>=} stateAdapter\n         * @param {object} state\n         * @returns {Result|*}\n         * @private\n         */\n        this._digestStateAdapter = function (stateAdapter, state) {\n            _.each(stateAdapter, _.bind(function (adapterItem) {\n                var queryValue = adapterItem.queryValue;\n                var changeTo = adapterItem.changeTo;\n                state = this._digestAdapterItem(queryValue, changeTo, state);\n            }, this));\n            return state;\n        };\n        /**\n         *\n         * @param {string} templateString\n         * @param {object} state\n         * @returns {object} The interpolated and objectified templateString\n         * @private\n         */\n        this._interpolateTemplate = function _interpolateTemplate(templateString, state) {\n            return this._convertStringToObject($interpolate(templateString)(state));\n        };\n        /**\n         * Takes a template (string or object) and a state object, and interpolates the template\n         * based on state. It returns an (post-interpolated) object.\n         * If stateAdapter is provided, the state will be digested with the stateAdapter.\n         *\n         * @param {string|object} template\n         * @param {object} state\n         * @param {Array<{queryValue: *, changeTo: string|function}>=} stateAdapter\n         * @returns {Object}\n         */\n        this.interpolate = function interpolate(template, state, stateAdapter) {\n            if (stateAdapter) {\n                state = this._digestStateAdapter(stateAdapter, state);\n            }\n            var templateString = this._convertTemplateToString(template);\n            var interpolated = this._interpolateTemplate(templateString, state);\n            // In the case of a string template, there is no need to do the elaborate merge,\n            // because no data is dropped by converting to a string.\n            if (_.isString(template)) {\n                return interpolated;\n            }\n            // The reason a merge is returned and not the interpolated object, is that some data is\n            // dumped on the convertion to string of the original object (_convertTemplateToString)\n            // Functions for example are dumped in the stringfication process (this is the native\n            // functionality of JSON.stringify). So in order to insert them back, the pre\n            // interpolated template (if not a string) is merged with the interpolated one, so all\n            // new values override old values, but missing data like functions remain.\n            return _.merge({}, template, interpolated);\n        };\n    }\n    Interpolation.$inject = ['$interpolate'];\n    angular.module('Fortscale.shared.services.interpolation', [])\n        .service('interpolation', Interpolation);\n}());\n","(function () {\n    'use strict';\n    function ObjectUtils(assert) {\n        this._errMsg = 'Fortscale.shared.services.objectUtils: ';\n        /**\n         *\n         * @param caller\n         * @param obj\n         * @private\n         */\n        this._validateObject = function (caller, obj) {\n            var errMsg = this._errMsg + caller + ': ';\n            assert(angular.isDefined(obj), errMsg + 'obj argument must be provided.', ReferenceError);\n            assert(angular.isObject(obj), errMsg + 'obj argument must be an object.', TypeError);\n        };\n        this._validateHashObject = function (caller, obj) {\n            var errMsg = this._errMsg + caller + ': ';\n            assert(angular.isDefined(obj), errMsg + 'hashMap argument must be provided.', ReferenceError);\n            assert(angular.isObject(obj), errMsg + 'hashMap argument must be an object.', TypeError);\n        };\n        this._validateObjectName = function (caller, objName) {\n            var errMsg = this._errMsg + caller + ': ';\n            assert(angular.isDefined(objName), errMsg + 'objName argument must be provided.', ReferenceError);\n            assert(angular.isString(objName), errMsg + 'objName argument must be a string.', TypeError);\n            assert(objName !== '', errMsg + 'objName argument must not be an empty string.', RangeError);\n        };\n        /**\n         * Takes an object and returns a deep flattened array of key-value pairs,\n         * where the odd member is the namespace of the property and the even member is the value.\n         * This function runs recursively so there is a danger of stack overflowing.\n         *\n         * @param {object} obj\n         * @param {string} objName\n         */\n        this._flattenObject = function (obj, objName) {\n            var self = this;\n            // iterate through keys of object to flatten. If the value is not an object\n            // then a key-value array is returned. If value is an object, the function is invoked\n            // recursively with the object value and the key name.\n            // The array is flattened for each recursion resulting in a single array of key-value\n            // pairs where the odd is key and the even is value\n            return _.flattenDeep(_.map(_.keys(obj), function (key) {\n                var nameSpace = objName + '.' + key;\n                if (_.isObject(obj[key])) {\n                    return self._flattenObject(obj[key], nameSpace);\n                }\n                else {\n                    return [nameSpace, obj[key]];\n                }\n            }));\n        };\n        /**\n         * Takes an array of key-value pairs where the odd is the key and the even is the value\n         * Returns a hash-map object\n         *\n         * @param {Array} flattenedArray An array of key value pairs\n         * @returns {object} Hash map object\n         * @private\n         */\n        this._createPairsObject = function (flattenedArray) {\n            var length = flattenedArray.length;\n            var pairsObject = {};\n            for (var i = 0; i < length; i += 2) {\n                pairsObject[flattenedArray[i]] = flattenedArray[i + 1];\n            }\n            return pairsObject;\n        };\n        /**\n         * Takes an object and a dot delimited namespace.\n         * Recursively build (or use if exists) an object for each namespace but the last.\n         * The value will be set to the last namespace which is the property's name.\n         *\n         * @param {object} obj\n         * @param {string} nameSpace\n         * @param {*} value\n         * @returns {object}\n         * @private\n         */\n        this._inflateNameSpace = function (obj, nameSpace, value) {\n            var nsList = nameSpace.split('.');\n            if (nsList.length === 1) {\n                obj[nsList] = value;\n                return obj;\n            }\n            var nsCurrentPos = nsList.shift();\n            obj[nsCurrentPos] = obj[nsCurrentPos] || {};\n            this._inflateNameSpace(obj[nsCurrentPos], nsList.join('.'), value);\n        };\n        /**\n         * Takes an object (possibly with nesting) and returns a flattened object\n         * where each property is the namespace of the original property from the original object\n         * and each value is the original value\n         *\n         * @param {object} obj\n         * @param {string} objName\n         * @returns {Object}\n         */\n        this.flattenToNamespace = function (obj, objName) {\n            // Validations\n            this._validateObject('flattenToNamespace', obj);\n            this._validateObjectName('flattenToNamespace', objName);\n            // Create a flattened object\n            return this._createPairsObject(this._flattenObject(obj, objName));\n        };\n        /**\n         * Takes a Key-value object where each key represents a namespace.\n         * The namespace should be inflated into the provided object\n         * (or new object if no object was provided) and the value set to the namespace.\n         *\n         * @param {object} hashMap\n         * @param {object=} obj\n         * @returns {object}\n         */\n        this.createFromFlattened = function (hashMap, obj) {\n            var self = this;\n            // Validate hashMap\n            self._validateHashObject('createFromFlattened', hashMap);\n            // Validate object\n            self._validateObject('createFromFlattened', obj);\n            // Default the object\n            obj = obj || {};\n            // Iterate through keys and inflate each namespace into the object\n            _.each(hashMap, function (value, key) {\n                self._inflateNameSpace(obj, key, value);\n            });\n            return obj;\n        };\n        /**\n         * Removes all properties that have null values.\n         * This is useful for example to pass query params and remove all that have null values.\n         * It is possible to remove other values if alternativeValue is provided.\n         *\n         * @param {object} obj\n         * @param {*=} alternativeValue\n         */\n        this.removeNulls = function (obj, alternativeValue) {\n            // Validate object\n            this._validateObject('removeNulls', obj);\n            alternativeValue = alternativeValue === undefined ? null : alternativeValue;\n            _.each(obj, function (value, propertyName) {\n                if (value === alternativeValue) {\n                    delete obj[propertyName];\n                }\n            });\n        };\n    }\n    ObjectUtils.$inject = ['assert'];\n    angular.module('Fortscale.shared.services.objectUtils', [\n        'Fortscale.shared.services.assert'\n    ])\n        .service('objectUtils', ObjectUtils);\n}());\n","(function () {\n    'use strict';\n    function CSVConverter(assert) {\n        this.assert = assert;\n    }\n    angular.merge(CSVConverter.prototype, {\n        /**\n         * The start of the error message\n         * @private\n         */\n        _errMsg: 'CSVConverter.service: ',\n        /**\n         * An array holding allowed values for CSVSchemaValue.type\n         * @private\n         */\n        _validSchemaTypes: ['boolean', 'integer', 'number'],\n        /**\n         * Validate a single CSVSchema member\n         * @methodOf CSVConverter\n         *\n         * @param {{type: string, name: string} | string} CSVSchemaValue\n         * @param {string} errMsg\n         * @private\n         */\n        _validateCSVSchemaValue: function (CSVSchemaValue, errMsg) {\n            var self = this;\n            errMsg = errMsg || '';\n            // Validation in case the CSVSchemaValue is a string\n            if (_.isString(CSVSchemaValue)) {\n                self.assert(CSVSchemaValue !== '', errMsg + 'All CSVSchema members that are strings ' +\n                    'must not be empty strings.', RangeError);\n            }\n            else if (_.isObject(CSVSchemaValue)) {\n                // Validate CSVSchemaValue.name\n                self.assert(!_.isUndefined(CSVSchemaValue.name), errMsg + 'All CSVSchema members that are objects ' +\n                    'must have a \"name\" property.', ReferenceError);\n                self.assert(_.isString(CSVSchemaValue.name), errMsg + 'All CSVSchema members that are objects ' +\n                    'must have a \"name\" property that is a string.', TypeError);\n                self.assert(CSVSchemaValue.name !== '', errMsg + 'All CSVSchema members that are objects ' +\n                    'must have a \"name\" property this is not an empty string.', RangeError);\n                // Validate CSVSchemaValue.type\n                self.assert(!_.isUndefined(CSVSchemaValue.type), errMsg + 'All CSVSchema members that are objects ' +\n                    'must have a \"type\" property.', ReferenceError);\n                self.assert(_.isString(CSVSchemaValue.type), errMsg + 'All CSVSchema members that are objects ' +\n                    'must have a \"type\" property that is a string.', TypeError);\n                self.assert(self._validSchemaTypes\n                    .indexOf(CSVSchemaValue.type.toLowerCase()) !== -1, 'All CSVSchema members that are objects ' +\n                    'must have a \"type\" property that is one of these values: ' +\n                    self._validSchemaTypes.join(', ') + ' .', RangeError);\n            }\n            else {\n                // Default assertion that always fires if this branch is executed.\n                // This branch executing means that CSVSchemaValue was not a string or an object\n                self.assert(false, errMsg + 'All CSVSchema members must be either a string ' +\n                    'or an object.', TypeError);\n            }\n        },\n        /**\n         * Validate a CSVSchema array\n         *\n         * @param {Array<{type: string, name: string} | string>} CSVSchema\n         * @param {string} errMsg\n         * @private\n         */\n        _validateCSVSchema: function (CSVSchema, errMsg) {\n            var self = this;\n            errMsg = errMsg || '';\n            self.assert(!_.isUndefined(CSVSchema), errMsg + 'CSVSchema argument must be provided.', ReferenceError);\n            self.assert(_.isArray(CSVSchema), errMsg + 'CSVSchema argument must be an array.', TypeError);\n            _.each(CSVSchema, function (CSVSchemaValue) {\n                self._validateCSVSchemaValue(CSVSchemaValue, errMsg);\n            });\n        },\n        /**\n         * Validates CSVString\n         *\n         * @param {string} CSVString\n         * @param {string} errMsg\n         * @private\n         */\n        _validateCSVString: function (CSVString, errMsg) {\n            var self = this;\n            errMsg = errMsg || '';\n            // Validate CSVSchemaValue.name\n            self.assert(!_.isUndefined(CSVString), errMsg + 'CSVString argument must be provided.', ReferenceError);\n            self.assert(_.isString(CSVString), errMsg + 'CSVString argument must be a string.', TypeError);\n        },\n        /**\n         * Validates CSVString\n         *\n         * @param {string} CSVString\n         * @param {string} errMsg\n         * @private\n         */\n        _validateModel: function (model, errMsg) {\n            var self = this;\n            errMsg = errMsg || '';\n            // Validate CSVSchemaValue.name\n            self.assert(!_.isUndefined(model), errMsg + 'model argument must be provided.', ReferenceError);\n            self.assert(_.isObject(model), errMsg + 'model argument must be an object.', TypeError);\n        },\n        /**\n         * Holds parser methods -to- and -from-\n         * @private\n         */\n        _parsers: {\n            /**\n             * Holds -to- parsers. converts from string to a specific type.\n             */\n            to: {\n                /**\n                 * returns false if value is undefined, null, '0', 0, or 'false',\n                 * otherwise it returns true.\n                 *\n                 * @param {*} value\n                 * @returns {boolean}\n                 */\n                boolean: function (value) {\n                    return (value !== undefined &&\n                        value !== null &&\n                        value !== '0' &&\n                        value !== 0 &&\n                        value !== 'false');\n                },\n                /**\n                 * Parses from string to integer\n                 *\n                 * @param {string} value\n                 * @returns {Number}\n                 */\n                integer: function (value) {\n                    return parseInt(value);\n                },\n                /**\n                 * Parses from string to number\n                 *\n                 * @param {string} value\n                 * @returns {Number}\n                 */\n                number: function (value) {\n                    return parseFloat(value);\n                }\n            },\n            /**\n             * Holds -from- parsers. converts from primitives to string.\n             */\n            from: {\n                /**\n                 * Returns '1' if true and '0' if false\n                 *\n                 * @param {boolean} value\n                 * @returns {string}\n                 */\n                boolean: function (value) {\n                    return value ? '1' : '0';\n                },\n                /**\n                 * Returns a string from a number.\n                 *\n                 * @param {number} value\n                 * @returns {string}\n                 */\n                integer: function (value) {\n                    return value.toString();\n                },\n                /**\n                 * Returns a string from a number.\n                 *\n                 * @param {number} value\n                 * @returns {string}\n                 */\n                number: function (value) {\n                    return value.toString();\n                }\n            }\n        },\n        /**\n         * Takes a CSVString and a SCVSchema and returns an array of objects based on the schema\n         *\n         * @param {String} CSVString\n         * @param {Array<{type: string, name: string} | string>} CSVSchema\n         * @returns {Array<{}>}\n         */\n        toModel: function (CSVString, CSVSchema) {\n            var self = this;\n            // Validate CSVSchema\n            self._validateCSVSchema(CSVSchema, this._errMsg + 'toModel: ');\n            // Validate CSVString\n            self._validateCSVString(CSVString, this._errMsg + 'toModel: ');\n            // Extract values array from the string\n            var values = CSVString.split(',');\n            // Create a model array\n            var model = [];\n            // Ascertain the length\n            var schemaLength = CSVSchema.length;\n            // Iterate through values, and place each value in the correct position and type\n            // on the model array\n            _.each(values, function (value, index) {\n                // Position in the model array\n                var pos = Math.floor(index / schemaLength);\n                // CSVSchema array position is determined by\n                // modding the index of values by schemaLength\n                var CSVSchemaValue = CSVSchema[index % schemaLength];\n                // Create a new object member on the model array if on does not exist.\n                if (!model[pos]) {\n                    model[pos] = {};\n                }\n                // When CSVSchemaValue is an object, parsing is required,\n                // otherwise the value is set directly.\n                if (_.isObject(CSVSchemaValue)) {\n                    // Set the value to model after parsing it.\n                    model[pos][CSVSchemaValue.name] = self._parsers.to[CSVSchemaValue.type](value);\n                }\n                else {\n                    model[pos][CSVSchemaValue] = value;\n                }\n            });\n            // return the model array\n            return model;\n        },\n        /**\n         * Takes an array of object and a CSVSchema, and converts the model into a SCV string.\n         *\n         * @param {Array<{}>} model An array model that correlates to the schema\n         * @param {Array<{type: string, name: string} | string>} CSVSchema\n         * @returns {string}\n         */\n        toCSVString: function (model, CSVSchema) {\n            var self = this;\n            // Validate CSVSchema\n            self._validateCSVSchema(CSVSchema, this._errMsg + 'toCSVString: ');\n            // Validate model\n            self._validateModel(model, this._errMsg + 'toCSVString: ');\n            // Iterate through model members and return a string from joining array by map\n            return _.map(model, function (tabObj) {\n                // Iterate through CSVSchema members and return string from joining array by map\n                return _.map(CSVSchema, function (CSVSchemaValue) {\n                    // If CSVSchemaValue is an object, then parsing is required\n                    // otherwise return the direct value.\n                    if (_.isObject(CSVSchemaValue)) {\n                        // parse from primitive type to string and return the value\n                        return self._parsers.from[CSVSchemaValue.type](tabObj[CSVSchemaValue.name]);\n                    }\n                    // return a direct value (if CSVSchemaValue is not an object)\n                    return tabObj[CSVSchemaValue];\n                }).join(',');\n            }).join(',');\n        }\n    });\n    CSVConverter.$inject = ['assert'];\n    angular.module('Fortscale.shared.services.CSVConverter', [\n        'Fortscale.shared.services.assert'\n    ])\n        .service('CSVConverter', CSVConverter);\n}());\n","(function () {\n    'use strict';\n    function URLUtils($location) {\n        this.$location = $location;\n    }\n    angular.extend(URLUtils.prototype, {\n        /**\n         * Gets the (angular) url, and uses regex to get the query string.\n         * if withoutQuestionMark is set to true, the returned value will be without it;\n         *\n         * @param {boolean=} withoutQuestionMark\n         * @returns {string}\n         */\n        getSearchQueryString: function (withoutQuestionMark) {\n            // Get the (angular) url\n            var url = this.$location.url();\n            // Match the search query\n            var match = url.match(/(\\?)([^#]+)/);\n            // If match was made\n            if (match) {\n                // if withoutQuestionMark return the match without the question mark\n                if (withoutQuestionMark) {\n                    return match[2];\n                }\n                // return the match string\n                return match[0];\n            }\n            // If no match then return an empty string\n            return '';\n        },\n        /**\n         * Takes an (angular) url and sets it to transition to a new state.\n         * If shouldPassQuery is set to true, the search query will be added to the url.\n         *\n         * @param {string} url\n         * @param {boolean=} shouldPassQuery\n         */\n        setUrl: function (url, shouldPassQuery) {\n            var transitionTo = url + (shouldPassQuery ? this.getSearchQueryString() : '');\n            this.$location.url(transitionTo);\n        }\n    });\n    URLUtils.$inject = ['$location'];\n    angular.module('Fortscale.shared.services.URLUtils', [])\n        .service('URLUtils', URLUtils);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var tagsUtilsService;\n            (function (tagsUtilsService) {\n                'use strict';\n                var TagsUtils = (function () {\n                    function TagsUtils($http, BASE_URL, assert) {\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.assert = assert;\n                        this.USER_URL = this.BASE_URL + '/user';\n                        this.TAGS_URL = this.BASE_URL + '/tags';\n                        this.USER_TAGS_URL = this.TAGS_URL + '/user_tags';\n                        this.ERR_MSG = 'tagsUtils.service: ';\n                    }\n                    TagsUtils.prototype._getPostUrl = function (userId) {\n                        return this.USER_URL + '/' + userId;\n                    };\n                    /**\n                     * Returns promise that resolves on the response of the http request. Adds tag.\n                     *\n                     * @param {string} userId\n                     * @param {string} tagName\n                     * @returns {HttpPromise|Promise}\n                     */\n                    TagsUtils.prototype.addTag = function (userId, tagName) {\n                        return this.$http.post(this._getPostUrl(userId), { add: tagName });\n                    };\n                    /**\n                     * Returns promise that resolves on the response of the http request. Removes tag.\n                     *\n                     * @param {string} userId\n                     * @param {string} tagName\n                     * @returns {HttpPromise|Promise}\n                     */\n                    TagsUtils.prototype.removeTag = function (userId, tagName) {\n                        return this.$http.post(this._getPostUrl(userId), { remove: tagName });\n                    };\n                    /**\n                     * Returns promise that resolves on a list of tags in the application.\n                     *\n                     * @returns {IPromise<{data: ITagDefinition[]}>}\n                     */\n                    TagsUtils.prototype.getTags = function () {\n                        var ctrl = this;\n                        ctrl.allTagsCache = this.$http.get(this.USER_TAGS_URL)\n                            .then(function (res) {\n                            var data = res && res.data || null;\n                            return data;\n                        });\n                        return ctrl.allTagsCache;\n                    };\n                    /**\n                     * Retrun tags from cache, if there is any data in the cache.\n                     * If no data in cache - return empty\n                     */\n                    TagsUtils.prototype.getTagsFromCacheOnly = function () {\n                        return this.allTagsCache ? this.allTagsCache : this.getTags();\n                    };\n                    /**\n                     * Creates a new tag in the system.\n                     * Flow: get tags, then validate new tag, then create new tag in system, then return new tags list\n                     * @param {string} name\n                     * @param {string=} displayName\n                     * @param {string=} createsIndicator\n                     * @returns {IPromise<IHttpPromiseCallbackArg<any>>}\n                     */\n                    TagsUtils.prototype.createNewTag = function (name, displayName, createsIndicator) {\n                        var _this = this;\n                        var err_msg = this.ERR_MSG + 'createNewTag: ';\n                        var _tags;\n                        var _tag;\n                        // Async validation\n                        return this.getTags()\n                            .then(function (res) {\n                            _tags = res.data;\n                            // Validate tag name does not already exist\n                            var valid = _.every(_tags, function (tag) {\n                                return tag.name !== name;\n                            });\n                            return valid;\n                        })\n                            .then(function (valid) {\n                            // Validation\n                            if (!valid) {\n                                var err = new RangeError(err_msg + 'Trying to add a tag with a name that already exists.');\n                                err.name = 'identical-tag-name';\n                                throw err;\n                            }\n                            _this.assert.isString(name, 'name', err_msg);\n                            _this.assert.isString(displayName, 'displayName', err_msg, true);\n                        })\n                            .then(function () {\n                            // Set defaults\n                            if (!displayName) {\n                                displayName = name;\n                            }\n                            createsIndicator = !!createsIndicator;\n                            _tag = {\n                                name: name,\n                                displayName: displayName,\n                                active: true,\n                                createsIndicator: createsIndicator,\n                                rules: [],\n                                isAssignable: true\n                            };\n                            return _this.$http.post(\"\" + _this.USER_TAGS_URL, [_tag]);\n                        })\n                            .then(function (res) {\n                            // if POST was successful return updated tags\n                            if (res.status !== 202) {\n                                throw new Error(err_msg + \"Server should have responded with 202, but instead got \" + res.status + \".\");\n                            }\n                            return _this.getTags()\n                                .then(function (res) {\n                                return res.data;\n                            });\n                        });\n                    };\n                    TagsUtils.$inject = ['$http', 'BASE_URL', 'assert'];\n                    return TagsUtils;\n                }());\n                angular.module('Fortscale.shared.services.tagsUtils', [])\n                    .service('tagsUtils', TagsUtils);\n            })(tagsUtilsService = services.tagsUtilsService || (services.tagsUtilsService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function TableSettingsUtil() { }\n    angular.extend(TableSettingsUtil.prototype, {\n        /**\n         * The default adapter object that holds general definitions.\n         *\n         * @private\n         */\n        _adapter: {\n            types: {\n                DATE_TIME: {\n                    template: '{{ dataItem.date_time | date:\\\"MM/dd/yyyy HH\\\\:mm\\\\:ss\\\":\\\"UTC\\\"}}'\n                }\n            },\n            ids: {\n                status: {\n                    'template': \"{{dataItem.status }}\",\n                    'attributes': {\n                        'class': 'capitalizeText'\n                    }\n                },\n                write_bytes: {\n                    template: '{{dataItem.write_bytes|prettyBytes}}'\n                },\n                read_bytes: {\n                    template: '{{dataItem.read_bytes|prettyBytes}}'\n                },\n                session_score: {\n                    template: '<fs-score-icon score=\"dataItem.session_score\"></fs-score-icon>' +\n                        '{{dataItem.session_score}}'\n                },\n                event_score: {\n                    template: '<fs-score-icon score=\"dataItem.event_score\"></fs-score-icon>' +\n                        '{{dataItem.event_score}}'\n                },\n                country: {\n                    template: '{{ dataItem.country|orNA}}'\n                },\n                city: {\n                    template: '{{ dataItem.city|orNA}}'\n                },\n                source_machine: {\n                    template: '{{ dataItem.source_machine|orNA}}'\n                }\n            }\n        },\n        /**\n         * Takes (optionally) an adapter and returns an adapter that is the default adapter\n         * merged with the provided adapter.\n         *\n         * @param {object=} adapter\n         * @returns {object}\n         * @private\n         */\n        _getAdapterObject: function (adapter) {\n            return adapter ? _.merge({ types: {}, ids: {} }, adapter, this._adapter) :\n                this._adapter;\n        },\n        /**\n         * Returns a specific adapter property based on the adapterType, the property and the\n         * adapterObject\n         *\n         * @param {string} adapterType Should generally be 'types' or 'ids'\n         * @param {string} prop The property name correlating to the desired adapter\n         * @param {object} adapter The adapter object\n         * @returns {object|null} Returns null if the property does not exists on the adapterType,\n         * or the adapterType does not exist on the adapter.\n         * @private\n         */\n        _getAdapter: function (adapterType, prop, adapter) {\n            return (adapter[adapterType] && adapter[adapterType][prop]) || null;\n        },\n        /**\n         * Takes a title and makes sure that every two words there's a line break.\n         * @param title\n         * @returns {*}\n         * @private\n         */\n        _processTitle: function (title) {\n            if (!_.isString(title) || title === '') {\n                return title;\n            }\n            // if title is string and not empty\n            // split by space\n            var titleNodes = title.split(' ');\n            // remove empty strings\n            titleNodes = _.filter(titleNodes, function (titleNode) { return titleNode !== ''; });\n            // iterate through strings and for each even concat with space, for each odd concat with <br>\n            var processedTitle = '';\n            _.each(titleNodes, function (titleNode, index) {\n                if (index === titleNodes.length - 1) {\n                    processedTitle += titleNode;\n                }\n                else if (index % 2 === 0) {\n                    processedTitle += titleNode + ' ';\n                }\n                else {\n                    processedTitle += titleNode + '<br>';\n                }\n            });\n            // return string\n            return processedTitle;\n        },\n        /**\n         * Takes an entity field and an adapter and returns a single column definition\n         *\n         * @param {{name: string, id: string, type: {id: string}}} entityField\n         * @param {object} adapter An adapter object\n         * @returns {object} returns a column definition object\n         * @private\n         */\n        _getColumnByEntityField: function (entityField, adapter) {\n            // Define title and field\n            var title = entityField.name;\n            var field = entityField.id;\n            // Create a basic column def object\n            var columnDef = {\n                title: title,\n                field: field\n            };\n            // Get adapters (this is contingent on the existence of adapters on the type or id)\n            var adapterByType = this.getAdapterByType(entityField.type.id, adapter);\n            var adapterById = this.getAdapterById(entityField.id, adapter);\n            // Merge type adapter if exists into the columnDef\n            if (adapterByType) {\n                _.merge(columnDef, adapterByType);\n            }\n            // Merge id adapter if exists into the columnDef\n            if (adapterById) {\n                _.merge(columnDef, adapterById);\n            }\n            // Add score icon\n            if (entityField.scoreField) {\n                var template = '<fs-score-icon score=\"::dataItem.' +\n                    entityField.scoreField.id + '\"></fs-score-icon>';\n                if (columnDef.template) {\n                    columnDef.template = template + columnDef.template;\n                }\n                else {\n                    columnDef.template = template + '{{::dataItem.' + columnDef.field + '}}';\n                }\n            }\n            columnDef.title = this._processTitle(columnDef.title);\n            return columnDef;\n        },\n        /**\n         * Takes a type value and returns adapter.types[type] or null\n         *\n         * @param {string} type The property name on adapter.types\n         * @param {object} adapter The adapter object\n         * @returns {Object|null}\n         */\n        getAdapterByType: function (type, adapter) {\n            // All types should be upper cased.\n            type = type && type.toUpperCase();\n            return this._getAdapter('types', type, adapter);\n        },\n        /**\n         *\n         * @param {string} id the property name on adapter.ids or null\n         * @param {object} adapter\n         * @returns {Object|null}\n         */\n        getAdapterById: function (id, adapter) {\n            return this._getAdapter('ids', id, adapter);\n        },\n        /**\n         * Returns a columns definition object. It takes an entityFields array,\n         * and uses it to build the columns definition.\n         *\n         * @param {Array<{name: string, id: string, type: {id: string}}>} entityFields\n         * @param {object=} adapter An optional adapter object that is different from the default\n         * service adapter.\n         * If adapter object is provided, it will be merged (override) into the default adapter.\n         */\n        getColumnsByEntityFields: function (entityFields, adapter) {\n            var self = this;\n            // Get adapter object (merge if provided with default adapter)\n            adapter = self._getAdapterObject(adapter);\n            // Return a columns settings map\n            return _.map(entityFields, function (entityField) {\n                return self._getColumnByEntityField(entityField, adapter);\n            });\n        }\n    });\n    TableSettingsUtil.$inject = [];\n    angular.module('Fortscale.shared.services.tableSettingsUtil', [])\n        .service('tableSettingsUtil', TableSettingsUtil);\n}());\n","(function () {\n    'use strict';\n    function JsonLoader(assert, $http) {\n        this._errMsg = 'Fortscale.shared.services.jsonLoader: ';\n        this.$http = $http;\n        this.assert = assert;\n    }\n    angular.merge(JsonLoader.prototype, {\n        _validateUrl: function (url, errMsg) {\n            this.assert(_.isString(url), errMsg + 'url must be a string.', TypeError);\n            this.assert(url !== '', errMsg + 'url must not be an empty string.', RangeError);\n            this.assert(/\\.json$/.test(url) || /\\.jsonx$/.test(url), errMsg + 'url must request a json or jsonx type file.', RangeError);\n        },\n        /**\n         * Takes a json url.\n         * Returns a promise that is resolved on an object that a json file represents.\n         * If preventCache is true, the file will not be cached.\n         *\n         * @param {string} url\n         * @param {boolean=} preventCache\n         * @returns {Promise}\n         */\n        load: function (url, preventCache) {\n            this._validateUrl(url, this._errMsg + 'load: ');\n            var shouldCache = !preventCache;\n            return this.$http\n                .get(url, {\n                cache: shouldCache\n            })\n                .then(function (res) {\n                return res.data;\n            });\n        },\n        /**\n         * Takes a jsonx url.\n         * Returns a promise that is resolved on a string that a jsonx file represents.\n         * This type of file is used when a json needs to be interpolated, and before interpolation is not a valid\n         * JSON file.\n         * If preventCache is true, the file will not be cached.\n         *\n         * @param {string} url\n         * @param {boolean=} preventCache\n         * @returns {Promise}\n         */\n        loadJsonx: function (url, preventCache) {\n            this._validateUrl(url, this._errMsg + 'load: ');\n            var shouldCache = !preventCache;\n            return this.$http({\n                method: 'get',\n                url: url,\n                transformResponse: function (data) {\n                    return data;\n                },\n                cache: shouldCache\n            })\n                .then(function (res) {\n                return res.data;\n            });\n        }\n    });\n    JsonLoader.$inject = ['assert', '$http'];\n    angular.module('Fortscale.shared.services.jsonLoader', [\n        'Fortscale.shared.services.assert'\n    ])\n        .service('jsonLoader', JsonLoader);\n}());\n","(function () {\n    'use strict';\n    function DateRanges(utils) {\n        this.utils = utils;\n    }\n    /**\n     * Returns a number that is divided by 1000 and floored.\n     *\n     * @param {number} value\n     * @returns {number}\n     * @private\n     */\n    DateRanges.prototype._truncate = function (value) {\n        return Math.floor(value / 1000);\n    };\n    /**\n     * A dummy function that returns what it gets. Used as a 'through' alternative.\n     *\n     * @param {*} value\n     * @returns {*}\n     * @private\n     */\n    DateRanges.prototype._through = function (value) {\n        return value;\n    };\n    /**\n     * Returns the start of days 'days' days ago.\n     *\n     * @param {number} days\n     * @returns {number}\n     */\n    DateRanges.prototype.getStartOfDayByDaysAgo = function (days) {\n        return this.utils.date.getMoment()\n            .endOf('day').subtract(days, 'days').startOf('day').valueOf();\n    };\n    /**\n     * Returns the end of the current day\n     *\n     * @returns {*}\n     */\n    DateRanges.prototype.getEndOfCurrentDay = function () {\n        return this.utils.date.getMoment()\n            .endOf('day').valueOf();\n    };\n    /**\n     * Returns a CSV string that represent a date range; from(now->days-end->minus-days->days-start),to(now->days-end).\n     *\n     * @param {number} days\n     * @param {string=} type If set to 'short' will return a 10 digits timestamp.\n     * @returns {string}\n     */\n    DateRanges.prototype.getByDaysRange = function (days, type) {\n        var transformFn;\n        switch (type) {\n            case 'short':\n                transformFn = this._truncate;\n                break;\n            default:\n                transformFn = this._through;\n        }\n        return _.map([this.getStartOfDayByDaysAgo(days), this.getEndOfCurrentDay()], transformFn).join(',');\n    };\n    /**\n     * Returns a range that's 8 days from today's end of day\n     *\n     * @param {string=} type\n     * @returns {string} csv of startDate, endDate\n     * @private\n     */\n    DateRanges.prototype.getLast7Days = function (type) {\n        return this.getByDaysRange(7, type);\n    };\n    /**\n     * Returns a range that's 8 days from today's end of day\n     *\n     * @param {string=} type\n     * @returns {string} csv of startDate, endDate\n     * @private\n     */\n    DateRanges.prototype.getLastDay = function (type) {\n        return this.getByDaysRange(1, type);\n    };\n    DateRanges.$inject = ['utils'];\n    angular.module('Fortscale.shared.services.dateRanges', [])\n        .service('dateRanges', DateRanges);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.alertFeedback', []);\n}());\n","(function () {\n    'use strict';\n    // ENUMS\n    var enumAlertStatus = {\n        OPEN: 'open',\n        CLOSED: 'closed'\n    };\n    /**\n     * Map the display name of the feedback to the value sent to the server\n     * @type {{Approved: string, Rejected: string, Unresolved: string}}\n     */\n    var alertFeedbackMap = {\n        Approved: 'approved',\n        Rejected: 'rejected',\n        Unresolved: 'none'\n    };\n    /**\n     * Constants\n     */\n    var CLOSE_ALERT_POPUP_CONSTANTS = {\n        TEMPLATE_URL: 'app/shared/components/alert-feedback/alert-feedback-close-modal/alert-feedback-close-modal.html',\n        CONTROLLER_NAME: 'CloseAlertModalInstanceCtrl'\n    };\n    var OPEN_ALERT_POPUP_CONSTANTS = {\n        TEMPLATE_URL: 'app/shared/components/alert-feedback/alert-feedback-open-modal/alert-feedback-open-modal.html',\n        CONTROLLER_NAME: 'OpenAlertModalInstanceCtrl'\n    };\n    var FEEDBACK_RESPONSE_POPUP_CONSTANTS = {\n        TEMPLATE_URL: 'app/shared/components/alert-feedback/alert-feedback-results-modal' +\n            '/alert-feedback-result-modal.html',\n        CONTROLLER_NAME: 'FeedbackResultModalInstanceCtrl'\n    };\n    var FEEDBACK_FAILURE_POPUP_CONSTANTS = {\n        TEMPLATE_URL: 'app/shared/components/alert-feedback/alert-feedback-failure-modal' +\n            '/alert-feedback-failure-modal.html',\n        CONTROLLER_NAME: 'FeedbackFailureModalInstanceCtrl'\n    };\n    function AlertFeedback(assert, BASE_URL, $http, $modal) {\n        this._errMsg = 'alertFeedback.service: ';\n        this.enumAlertStatus = enumAlertStatus;\n        this.alertFeedbackMap = alertFeedbackMap;\n        this.$modal = $modal;\n        /**\n         * Checks if a value is allowed in a certain enum\n         *\n         * @param {object} enm\n         * @param {*} value\n         * @returns {boolean}\n         * @private\n         */\n        this._isValueAllowed = function (enm, value) {\n            return _.some(enm, function (enumValue) {\n                return enumValue === value;\n            });\n        };\n        this._verifyAlert = function (alert) {\n            assert.isObject(alert, 'alert', 'Alert should be an object');\n            assert.isString(alert.id, 'alert id', 'Alert must has an ID');\n            assert.isString(alert.name, 'alert name', 'Alert must has a name');\n        };\n        /**\n         * Make a patch request to set an alert status and/or feedback.\n         * @example alertFeedback.setAlertStatus({alertId: someAlertId, alertStatus:\n         *     alertFeedback.enumAlertStatus.OPEN, alertFeedback: alertFeedback.alertFeedbackMap.APPROVED})\n         * @example alertFeedback.setAlertStatus({alertId: someAlertId, alertStatus:\n         *     alertFeedback.enumAlertStatus.CLOSED})\n         * @example alertFeedback.setAlertStatus({alertId: someAlertId, alertFeedback:\n         *     alertFeedback.alertFeedbackMap.REJECTED})\n         *\n         * @param {{alertId: string, alertStatus: string=, alertFeedback: string=}} config\n         * @param {string=} errMsg This argument is mainly for internal use.\n         */\n        this.setAlertStatus = function (config, errMsg) {\n            errMsg = errMsg || this._errMsg + 'setAlertStatus: ';\n            // Validate config object\n            assert.isObject(config, 'config', errMsg);\n            assert.isString(config.alertId, 'config.alertId', errMsg);\n            if (!_.isUndefined(config.alertStatus)) {\n                assert(this._isValueAllowed(this.enumAlertStatus, config.alertStatus), errMsg + 'The value \"' + config.alertStatus +\n                    '\" is not an allowed alert status value', RangeError);\n            }\n            if (!_.isUndefined(config.alertFeedback)) {\n                assert(this._isValueAllowed(this.alertFeedbackMap, config.alertFeedback), errMsg + 'The value \"' + config.alertFeedback +\n                    '\" is not an allowed alert feedback value', RangeError);\n            }\n            // Create the patch request body\n            var body = {\n                status: config.alertStatus,\n                feedback: config.alertFeedback\n            };\n            // Create the patch request url\n            var url = BASE_URL + '/alerts/' + config.alertId;\n            return $http.patch(url, body);\n        };\n        /**\n         * Makes a patch request to set an alert as open with conditional feedback.\n         * @example alertFeedback.openAlert(someAlertId, alertFeedback.alertFeedbackMap.APPROVED)\n         * @example alertFeedback.openAlert(someAlertId)\n         *\n         * @param {string} alertId\n         * @param {string=} alertFeedback\n         */\n        this.openAlert = function (alertId, alertFeedback) {\n            return this.setAlertStatus({\n                alertId: alertId,\n                alertStatus: this.enumAlertStatus.OPEN,\n                alertFeedback: alertFeedback\n            }, this._errMsg + 'openAlert: ');\n        };\n        /**\n         * Makes a patch request to set an alert as open with conditional feedback.\n         * @example alertFeedback.closeAlert(someAlertId, alertFeedback.alertFeedbackMap.REJECTED)\n         * @example alertFeedback.closeAlert(someAlertId)\n         *\n         * @param {string} alertId\n         * @param {string=} alertFeedback\n         */\n        this.closeAlert = function (alertId, alertFeedback) {\n            return this.setAlertStatus({\n                alertId: alertId,\n                alertStatus: this.enumAlertStatus.CLOSED,\n                alertFeedback: alertFeedback\n            }, this._errMsg + 'closeAlert: ');\n        };\n        /**\n         * This method opens a modal with specific template and controller\n         * @param templateUrl - URL for the template HTML\n         * @param controller - The name of the controller\n         * @param controllerAs - The name which parts in the html use to reffer to the controller\n         * @param inputParamObejct - object which pass to the controller and contains data which the\n         *                          controller consumes\n         * @param windowClass - for case which we need to set a class for the top parent of the modal window\n         *          (this is not part of the template but part of the infra.\n         * @returns {*}The modal instance\n         * @private\n         */\n        this._openPopup = function (templateUrl, controller, controllerAs, inputParamObejct, windowClass) {\n            var ctrl = this;\n            return ctrl.$modal.open({\n                animation: true,\n                templateUrl: templateUrl,\n                controller: controller,\n                controllerAs: controllerAs,\n                size: 'lg',\n                resolve: {\n                    inputParams: function () {\n                        return inputParamObejct;\n                    }\n                },\n                windowClass: windowClass\n            });\n        };\n        /**\n         * Callback which executed if the user click on \"OK\" button\n         * when he asked to approve reopen the alert\n         * @param model\n         * @returns {*}Promise of the \"openAlert\" method\n         * @private\n         */\n        this._approveAlertReopenCallback = function (model) {\n            var alertId = model.inputParams.alert.id;\n            return this.openAlert(alertId, alertFeedbackMap.Unresolved);\n        };\n        /**\n         * Callback which executed if the user click on \"OK\" button\n         * when he asked to approve close the alert\n         * @param model\n         * @returns {*}Promise of the \"closeAlert\" method\n         * @private\n         */\n        this._approveAlertCloseCallback = function (model) {\n            var alertId = model.inputParams.alert.id;\n            return this.closeAlert(alertId, model.closeAlertStatus);\n        };\n        /**\n         * Trigger the \"are you sure\" popup for closing the alert.\n         * If the user click \"ok\" it will execute the \"closeAlert\" method.\n         * @param alert\n         * @returns {*}Promise which resolved after closeAlert triggered\n         */\n        this.handleCloseAlertPopupFlow = function (alert) {\n            var ctrl = this;\n            ctrl._verifyAlert(alert);\n            var templateUrl = CLOSE_ALERT_POPUP_CONSTANTS.TEMPLATE_URL;\n            var controller = CLOSE_ALERT_POPUP_CONSTANTS.CONTROLLER_NAME;\n            var controllerAs = 'closeModal';\n            var inputParamObejct = {\n                alert: alert,\n                options: ctrl.alertFeedbackMap\n            };\n            return ctrl._openPopup(templateUrl, controller, controllerAs, inputParamObejct)\n                .result\n                .then(ctrl._approveAlertCloseCallback.bind(this));\n        };\n        /**\n         * Trigger the \"are you sure\" popup for re-open of the alert.\n         * If the user click \"ok\" it will execute the \"openAlert\" method.\n         * @param alert\n         * @returns {*}Promise which resolved after openAlert triggered\n         */\n        this.handleOpenAlertPopupFlow = function (alert) {\n            var ctrl = this;\n            ctrl._verifyAlert(alert);\n            var templateUrl = OPEN_ALERT_POPUP_CONSTANTS.TEMPLATE_URL;\n            var controller = OPEN_ALERT_POPUP_CONSTANTS.CONTROLLER_NAME;\n            var controllerAs = 'openModal';\n            var inputParamObejct = {\n                alert: alert\n            };\n            return ctrl._openPopup(templateUrl, controller, controllerAs, inputParamObejct)\n                .result\n                .then(ctrl._approveAlertReopenCallback.bind(this));\n        };\n        /**\n         * Trigger the \"are you sure\" popup for re-open of the alert.\n         * If the user click \"ok\" it will execute the \"openAlert\" method.\n         * @param newAlertStatus - the new status that we suspect if operation was finished sucessfuly\n         *                         should be \"open\" or \"closed\"\n         * @param {string=} specificBodyMessage - Extra message to display below the title.\n         * @returns {*}The modal instance\n         */\n        this.showResponseSuccessPopup = function (newAlertStatus, specificBodyMessage) {\n            var ctrl = this;\n            //newAlertStatus is a mandatory string\n            assert.isString(newAlertStatus, 'Alert status', 'must be a string', false, false);\n            //Check the new status to be a valid status\n            if (!_.isUndefined(newAlertStatus)) {\n                assert(this._isValueAllowed(this.enumAlertStatus, newAlertStatus), 'showResponsePopup: The value \"' + newAlertStatus +\n                    '\" is not an allowed alert status value', RangeError);\n            }\n            //Initiate the modal\n            var templateUrl = FEEDBACK_RESPONSE_POPUP_CONSTANTS.TEMPLATE_URL;\n            var controller = FEEDBACK_RESPONSE_POPUP_CONSTANTS.CONTROLLER_NAME;\n            var controllerAs = 'responseModal';\n            var inputParamObejct = {\n                newAlertStatus: newAlertStatus,\n                specificBodyMessage: specificBodyMessage\n            };\n            var cssClass = (specificBodyMessage ? 'fs-alert-success-wrapper-with-body' : 'fs-alert-success-wrapper');\n            return ctrl._openPopup(templateUrl, controller, controllerAs, inputParamObejct, cssClass);\n        };\n        /**\n         * Call this method display feedback update failure message\n         * @param newAlertStatus\n         * @returns {*}\n         */\n        this.showResponseFailurePopup = function (newAlertStatus) {\n            var ctrl = this;\n            //newAlertStatus is a mandatory string\n            assert.isString(newAlertStatus, 'Alert status', 'must be a string', false, false);\n            //Initiate the modal\n            var templateUrl = FEEDBACK_FAILURE_POPUP_CONSTANTS.TEMPLATE_URL;\n            var controller = FEEDBACK_FAILURE_POPUP_CONSTANTS.CONTROLLER_NAME;\n            var controllerAs = 'responseModal';\n            var inputParamObejct = {\n                newAlertStatus: newAlertStatus\n            };\n            return ctrl._openPopup(templateUrl, controller, controllerAs, inputParamObejct);\n        };\n    }\n    AlertFeedback.$inject = ['assert', 'BASE_URL', '$http', '$modal'];\n    angular.module('Fortscale.shared.components.alertFeedback')\n        .service('alertFeedback', AlertFeedback);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsMinScore', []);\n}());\n","(function () {\n    'use strict';\n    var DEFAULT_VALUE = 50;\n    var MAX_VALUE_DEFAULT = 100;\n    var MIN_VALUE = 0;\n    function fsMinScoreDirective(assert) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrls\n         */\n        function linkFn(scope, element, attrs, ctrls) {\n            // Link function logic\n            var ctrl = ctrls[0];\n            ctrl.formCtrl = ctrls[1];\n            ctrl.setMinScoreValue(DEFAULT_VALUE);\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsMinScoreController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsMinScoreController.prototype, {\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                if (this.fetchStateDelegate && !angular.isFunction(this.fetchStateDelegate)) {\n                    throw new TypeError('fsMinScore.directive: FsMinScoreController: ' +\n                        'If fetchStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                if (this.updateStateDelegate && !angular.isFunction(this.updateStateDelegate)) {\n                    throw new TypeError('fsMinScore.directive: FsMinScoreController: ' +\n                        'If updateStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Directive validation sequence\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateGetStateFn();\n                this._validateSetStateFn();\n            },\n            /**\n             * Returns the value of the the state by the id\n             * @returns {*}\n             * @private\n             */\n            _stateWatchFn: function () {\n                return this.fetchStateDelegate(this.minScoreId);\n            },\n            /**\n             * Watch action function . Sets the value to the picker if state has changed.\n             *\n             * @param {string|number} value\n             */\n            _stateWatchActionFn: function (value) {\n                if (_.isString(value)) {\n                    value = parseInt(value, 10);\n                }\n                if (value !== undefined && value !== null && this.getMinScoreValue() !== value) {\n                    this.setMinScoreValue(value);\n                }\n            },\n            /**\n             * Initiates state watch\n             *\n             * @returns {*|function()}\n             * @private\n             */\n            _initStateWatch: function () {\n                this.$scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n            },\n            /**\n             * input change handler. When the input element changes, will change the value of the picker and fire\n             * 'change' event.\n             *\n             * @param {Event} evt\n             * @private\n             */\n            _inputChangeHandler: function (evt) {\n                this.setMinScoreValue(this.getMinScoreValue());\n                this.updateStateDelegate({\n                    id: this.minScoreId,\n                    type: 'DATA',\n                    value: this.getMinScoreValue(),\n                    immediate: false\n                });\n                if (this.formCtrl) {\n                    this.$scope.$apply(this.formCtrl.$setDirty.bind(this.formCtrl));\n                }\n            },\n            /**\n             * Sets an input change handler.\n             *\n             * @private\n             */\n            _initInputChangeWatch: function () {\n                var ctrl = this;\n                // Lock in context\n                function listenerFn(evt) {\n                    ctrl._inputChangeHandler(evt);\n                }\n                ctrl.minScoreElement.on('change', listenerFn);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    ctrl.minScoreElement.off('change', listenerFn);\n                });\n            },\n            _initDisableSubmitOnEnter: function () {\n                var ctrl = this;\n                function disableEnterKey(evt) {\n                    var code = evt.keyCode || evt.which;\n                    if (code === 13) {\n                        evt.preventDefault();\n                        ctrl.minScoreElement.trigger('blur');\n                        return false;\n                    }\n                }\n                ctrl.minScoreElement.on('keyup keypress', disableEnterKey);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    ctrl.minScoreElement.off('keyup keypress', disableEnterKey);\n                });\n            },\n            /**\n             * Init watches sequence\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._initStateWatch();\n                this._initInputChangeWatch();\n                this._initDisableSubmitOnEnter();\n            },\n            _checkMinMaxValues: function (value) {\n                if (value < MIN_VALUE) {\n                    return MIN_VALUE;\n                }\n                if (value > MAX_VALUE_DEFAULT) {\n                    return MAX_VALUE_DEFAULT;\n                }\n                return value;\n            },\n            /**\n             * Sets the picker value.\n             *\n             * @param {string|number} value\n             * @returns {*}\n             */\n            setMinScoreValue: function (value) {\n                assert((_.isString(value) || _.isNumber(value)), 'fsMinScore.directive: FsMinScoreController:' +\n                    ' setMinScoreValue: value argument must be a number or a string representing a number.');\n                if (_.isString(value)) {\n                    value = parseInt(value, 10) || 0;\n                }\n                value = this._checkMinMaxValues(value);\n                this.minScoreElement.val(value);\n            },\n            /**\n             * Gets the picker value\n             *\n             * @returns {string}\n             */\n            getMinScoreValue: function () {\n                return this.minScoreElement.val();\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                ctrl.minScoreElement = ctrl.$element.find('.min-score-input');\n                ctrl._validations();\n                ctrl._initWatches();\n            }\n        });\n        FsMinScoreController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<input type=\"number\" class=\"min-score-input\">',\n            scope: {},\n            link: linkFn,\n            controller: FsMinScoreController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                minScoreId: '@',\n                maxScore: '<?',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '='\n            },\n            require: ['fsMinScore', '?^^form']\n        };\n    }\n    fsMinScoreDirective.$inject = ['assert'];\n    angular.module('Fortscale.shared.components.fsMinScore')\n        .directive('fsMinScore', fsMinScoreDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsSelect', []);\n}());\n","(function () {\n    'use strict';\n    function fsSelectDirective(assert) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrls\n         */\n        function linkFn(scope, element, attrs, ctrls) {\n            // Link function logic\n            var ctrl = ctrls[0];\n            ctrl.formCtrl = ctrls[1];\n            ctrl._renderSelectElement();\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsSelectController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsSelectController.prototype, {\n            _errMsg: 'fsSelect.directive: ',\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                assert.isFunction(this.fetchStateDelegate, 'fetchStateDelegate', this._errMsg + 'arguments: ', true);\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                assert.isFunction(this.updateStateDelegate, 'updateStateDelegate', this._errMsg + 'arguments: ', true);\n            },\n            /**\n             * Validates selectMap\n             *\n             * @private\n             */\n            _validateSelectMap: function () {\n                var errMsg = this._errMsg + 'arguments: ';\n                assert.isObject(this.selectMap, 'selectMap', errMsg);\n                if (this.selectMap) {\n                    _.each(this.selectMap, function (selectValue, key) {\n                        assert.isString(selectValue, 'selectMap[' + key + ']', errMsg, false, true);\n                    });\n                }\n            },\n            /**\n             * Validates that provided selectedId is an actual id on selectMap\n             *\n             * @param {string=} errMsg\n             * @param {string=} selectedId\n             * @private\n             */\n            _validateSelectedId: function (errMsg, selectedId) {\n                if (this.selectedId !== undefined && this.selectedId !== null) {\n                    errMsg = errMsg || this._errMsg + '_validateSelectedId: id must be one of the id\\'s provided in' +\n                        ' selectMap';\n                    selectedId = selectedId || this.selectedId;\n                    var exists = Object.keys(this.selectMap).some(function (id) {\n                        return id === selectedId;\n                    }, this);\n                    assert(exists, errMsg, RangeError);\n                }\n            },\n            /**\n             * Directive validation sequence\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateGetStateFn();\n                this._validateSetStateFn();\n                this._validateSelectMap();\n            },\n            /**\n             * Returns the value of the the state by the id\n             * @returns {*}\n             * @private\n             */\n            _stateWatchFn: function () {\n                if (this.fetchStateDelegate) {\n                    return this.fetchStateDelegate(this.selectId);\n                }\n            },\n            /**\n             * Watch action function . Sets the value to the picker if state has changed.\n             *\n             * @param {string|number} value\n             */\n            _stateWatchActionFn: function (value) {\n                if (value !== null && value !== undefined) {\n                    this.setSelectValue(value);\n                }\n            },\n            /**\n             * Initiates state watch\n             *\n             * @returns {*|function()}\n             * @private\n             */\n            _initStateWatch: function () {\n                this.$scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n            },\n            /**\n             * input change handler. When the input element changes, will change the value of the picker and fire\n             * 'change' event.\n             *\n             * @private\n             */\n            _SelectChangeHandler: function () {\n                this.updateStateDelegate({\n                    id: this.selectId,\n                    type: 'DATA',\n                    value: this.getSelectValue(),\n                    immediate: !this.isNotImmediate\n                });\n                if (this.formCtrl && !!this.isNotImmediate) {\n                    this.$scope.$apply(this.formCtrl.$setDirty.bind(this.formCtrl));\n                }\n                this.selectElement.blur();\n            },\n            /**\n             * Sets a Select change handler.\n             *\n             * @private\n             */\n            _initSelectChangeWatch: function () {\n                var ctrl = this;\n                // Lock in context\n                function listenerFn(evt) {\n                    ctrl._SelectChangeHandler(evt);\n                }\n                ctrl.selectElement.on('change', listenerFn);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    ctrl.selectElement.off('change', listenerFn);\n                });\n            },\n            /**\n             * Init watches sequence\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._initStateWatch();\n                this._initSelectChangeWatch();\n            },\n            /**\n             * Adds a select option to select element\n             *\n             * @param {string} id\n             * @param {string} value\n             * @private\n             */\n            _addSelectOption: function (id, value) {\n                var option = document.createElement(\"option\");\n                option.text = value;\n                option.value = id;\n                this.selectElement[0].add(option);\n            },\n            /**\n             * Renders all options received on selectMap\n             *\n             * @private\n             */\n            _renderOptions: function () {\n                _.each(this.selectMap, _.bind(function (value, key) {\n                    this._addSelectOption(key, value);\n                }, this));\n            },\n            /**\n             * Sets the initial value of the select element. If selectedId is provided, it's assigned to the element\n             * via setSelectValue. if selectedId is not provided, the first option is selected.\n             * @private\n             */\n            _setInitialValue: function () {\n                var selectedId = this.selectedId ||\n                    (this.selectElement[0].options &&\n                        this.selectElement[0].options[0] &&\n                        this.selectElement[0].options[0].value);\n                if (selectedId) {\n                    this.setSelectValue(selectedId);\n                }\n            },\n            /**\n             * Renders the select element\n             *\n             * @private\n             */\n            _renderSelectElement: function () {\n                this._renderOptions();\n                this._setInitialValue();\n            },\n            /**\n             * Sets the element value.\n             *\n             * @param {string|number} value\n             * @returns {*}\n             */\n            setSelectValue: function (value) {\n                this._validateSelectedId(this._errMsg + 'setSelectValue: ', value);\n                this.selectElement[0].value = value;\n            },\n            /**\n             * Gets the element value\n             *\n             * @returns {string}\n             */\n            getSelectValue: function () {\n                return this.selectElement[0].value;\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                ctrl.selectElement = ctrl.$element.find('select');\n                ctrl._validations();\n                ctrl._initWatches();\n            }\n        });\n        FsSelectController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<div class=\"fs-select\"><select></select><svg class=\"dropdown-icon\"><use xlink:href=\"#dropdown-icon\"></use></svg></div>',\n            scope: {},\n            link: linkFn,\n            controller: FsSelectController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                selectId: '@',\n                selectMap: '=',\n                selectedId: '@',\n                isNotImmediate: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '='\n            },\n            require: ['fsSelect', '?^^form']\n        };\n    }\n    fsSelectDirective.$inject = ['assert'];\n    angular.module('Fortscale.shared.components.fsSelect')\n        .directive('fsSelect', fsSelectDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsAutocomplete', []);\n}());\n","/**\n * @name: fsAutocomplete.directive\n * @description: This directive will use kendo to render an autocomplete element. The element is based on received\n * configurations and settings.\n * @param {string} autocompleteId The (should be) unique id within a state chain.\n * @param {function=} fetchStateDelegate Function that's used to get an external state by providing autocompleteId\n * @param {function=} updateStateDelegate Function that's used to update an external state by providing an object:\n * {id: string, type: string, value: *, immediate: boolean}\n * @param {object} autocompleteSettings The required configuration. The received object will override any property\n * on _settings.\n * @param {object} resourceSettings A configuration object, that if received will be used for server filtering.\n */\n(function () {\n    'use strict';\n    function fsAutocompleteDirective(assert, interpolation, BASE_URL) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrls\n         */\n        function linkFn(scope, element, attrs, ctrls) {\n            // Link function logic\n            var ctrl = ctrls[0];\n            ctrl.formCtrl = ctrls[1];\n            ctrl._renderAutocompleteElement();\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsAutocompleteController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsAutocompleteController.prototype, {\n            _errMsg: 'fsAutocomplete.directive: ',\n            /**\n             * Validates received id is a non empty string.\n             *\n             * @private\n             */\n            _validateId: function () {\n                assert.isString(this.autocompleteId, 'autocompleteId', this._errMsg + 'arguments: autocompleteId: ', false, false);\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                assert.isFunction(this.fetchStateDelegate, 'fetchStateDelegate', this._errMsg + 'arguments: ', true);\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                assert.isFunction(this.updateStateDelegate, 'updateStateDelegate', this._errMsg + 'arguments: ', true);\n            },\n            /**\n             * Validate settings was received\n             * @private\n             */\n            _validateSettingsReceived: function () {\n                assert.isObject(this.autocompleteSettings, 'autocompleteSettings', this._errMsg + 'arguments: ', false);\n            },\n            /**\n             * Validates settings has dataValueField or dataValueFn\n             * Validates dataValueField is a non empty string if received.\n             * Validates dataValueFn is a function if received.\n             *\n             * @private\n             */\n            _validateSettingsDataValue: function () {\n                assert(this.autocompleteSettings.dataValueField || this.autocompleteSettings.dataValueFn, this._errMsg + 'arguments: autocompleteSettings: dataValueField or dataValueFn must be provided.', ReferenceError);\n                assert.isString(this.autocompleteSettings.dataValueField, 'autocompleteSettings.dataValueField', this._errMsg + 'arguments: autocompleteSettings: ', true, false);\n                assert.isFunction(this.autocompleteSettings.dataValueFn, 'autocompleteSettings.dataValueFn', this._errMsg + 'arguments: autocompleteSettings: ', true);\n            },\n            /**\n             * Validates dataTextField is a non empty string.\n             * Validates dataTextFn is a function if received.\n             *\n             * @private\n             */\n            _validateSettingsTextValue: function () {\n                assert.isString(this.autocompleteSettings.dataTextField, 'autocompleteSettings.dataTextField', this._errMsg + 'arguments: autocompleteSettings: ', false, false);\n                assert.isFunction(this.autocompleteSettings.dataTextFn, 'autocompleteSettings.dataTextFn', this._errMsg + 'arguments: autocompleteSettings: ', true);\n            },\n            /**\n             * Validates resourceSettings is an object if received.\n             *\n             * @private\n             */\n            _validateResourceSettingsReceived: function () {\n                assert.isObject(this.resourceSettings, 'resourceSettings', this._errMsg + 'arguments: ', true);\n            },\n            /**\n             * Validates entity on resourceSettings is a non empty string\n             *\n             * @private\n             */\n            _validateResourceSettingsEntity: function () {\n                assert.isString(this.resourceSettings.entity, 'resourceSettings.entity', this._errMsg + 'arguments: resourceSettings: ', false, false);\n            },\n            /**\n             * Validates params on resourceSettings is an object if received.\n             *\n             * @private\n             */\n            _validateResourceSettingsParams: function () {\n                assert.isObject(this.resourceSettings.params, 'resourceSettings.params', this._errMsg + 'arguments:' + ' resourceSettings: ', true);\n            },\n            /**\n             * Directive validation sequence\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateId();\n                this._validateGetStateFn();\n                this._validateSetStateFn();\n            },\n            /**\n             * Directive's settings validation sequence\n             *\n             * @private\n             */\n            _validateSettings: function () {\n                this._validateSettingsReceived();\n                this._validateSettingsDataValue();\n                this._validateSettingsTextValue();\n            },\n            /**\n             * Directive's resource settings validation sequence\n             *\n             * @private\n             */\n            _validateResourceSettings: function () {\n                this._validateResourceSettingsReceived();\n                if (this.resourceSettings) {\n                    this._validateResourceSettingsEntity();\n                    this._validateResourceSettingsParams();\n                }\n            },\n            /**\n             * Fires a fsAutocomplete:itemSelected event.\n             *\n             * @private\n             */\n            _fireSelectEvent: function (dataItem) {\n                this.$scope.$applyAsync(function () {\n                    this.$scope.$root.$broadcast('fsAutocomplete:itemSelected', this.autocompleteId, dataItem);\n                }.bind(this));\n            },\n            /**\n             * Fires when element value has changed, ie selection was made or focus was lost after change. It's\n             * fired via Kendo autocomplete controller\n             *\n             * @private\n             */\n            _changeHandler: function () {\n                // Get value\n                var dataValue = this.getAutocompleteValue();\n                var stateValue = this.fetchStateDelegate && this.fetchStateDelegate(this.autocompleteId);\n                if (dataValue === stateValue) {\n                    return;\n                }\n                // Positive updateOnNull will cause the element to update state even if the value is null\n                if ((this._settings.updateOnNull || dataValue !== null) && this.updateStateDelegate) {\n                    // Update state\n                    this.updateStateDelegate({\n                        id: this.autocompleteId,\n                        type: 'DATA',\n                        value: dataValue,\n                        immediate: !!this._settings.isImmediate\n                    });\n                    // Update form controller if it exists and isImmediate is false\n                    if (this.formCtrl && !this._settings.isImmediate) {\n                        this.$scope.$apply(this.formCtrl.$setDirty.bind(this.formCtrl));\n                    }\n                }\n                // If flag resetOnNull is positive, then reset value of element. (set to null)\n                if (this._settings.resetOnNull && !dataValue) {\n                    this.setAutocompleteValue(null);\n                }\n                // Focus out of element\n                this.inputElement.blur();\n                var dataItem = this.autocompleteCtrl.dataItem();\n                this._fireSelectEvent(dataItem);\n            },\n            /**\n             * Initiates settings. Digest received settings and creates settings that kendo will accept.\n             *\n             * @private\n             */\n            _initSettings: function () {\n                this._validateSettings();\n                var ctrl = this;\n                this._settings = _.merge({}, {\n                    // Directive  default settings\n                    dataValueField: null,\n                    dataValueFn: null,\n                    mustBeInData: false,\n                    updateOnNull: false,\n                    resetOnNull: false,\n                    isImmediate: false,\n                    dataTextFn: null,\n                    // Kendo default settings\n                    delay: 300,\n                    minLength: 1,\n                    placeholder: \"Service Account Username\",\n                    dataSource: (ctrl.resourceSettings && new kendo.data.DataSource({\n                        transport: {\n                            read: {\n                                url: BASE_URL + '/' + ctrl._resourceSettings.entity,\n                                dataType: \"json\",\n                                data: function () {\n                                    var searchQuery = ctrl._getSearchQueryValue();\n                                    var interpolatedSettings = interpolation.interpolate(ctrl._resourceSettings, {\n                                        search: searchQuery || ctrl._initialValue\n                                    });\n                                    return interpolatedSettings.params;\n                                }\n                            },\n                            /**\n                             * Adapter function for query params\n                             *\n                             * @param data\n                             * @returns {string}\n                             */\n                            parameterMap: function (data) {\n                                return _.map(data, function (queryParamValue, queryParamName) {\n                                    if (_.isObject(queryParamValue)) {\n                                        var queryParamAsJsonString;\n                                        try {\n                                            queryParamAsJsonString = JSON.stringify(queryParamValue);\n                                            queryParamValue = queryParamAsJsonString;\n                                        }\n                                        catch (e) {\n                                            console.warn(ctrl._errMsg + 'kendo:transport:parameterMap:' +\n                                                ' translation of object to string failed.', queryParamValue);\n                                            return '';\n                                        }\n                                    }\n                                    return queryParamName + '=' + queryParamValue;\n                                }).join('&');\n                            }\n                        },\n                        schema: {\n                            data: \"data\"\n                        },\n                        serverFiltering: ctrl.resourceSettings && true,\n                        change: function () {\n                            if (ctrl.autocompleteSettings.dataTextFn) {\n                                ctrl.autocompleteSettings.dataTextFn(this.data());\n                            }\n                        }\n                    })) || null,\n                    //Kendo default event handlers\n                    change: this._changeHandler.bind(this)\n                }, this.autocompleteSettings);\n                // place the dataSource directly on the controller instance\n                this._dataSource = this._settings.dataSource;\n            },\n            /**\n             * Initiates resource settings.\n             *\n             * @private\n             */\n            _initResourceSettings: function () {\n                this._validateResourceSettings();\n                this._resourceSettings = _.merge({}, this.resourceSettings);\n            },\n            /**\n             * Returns the value of the the state by the id\n             * @returns {*}\n             * @private\n             */\n            _stateWatchFn: function () {\n                if (this.fetchStateDelegate) {\n                    return this.fetchStateDelegate(this.autocompleteId);\n                }\n            },\n            /**\n             * Watch action function . Sets the value to the autocomplete if state has changed.\n             *\n             * @param {string|number} value\n             */\n            _stateWatchActionFn: function (value) {\n                if (value !== null && value !== undefined && value !== this.getAutocompleteValue()) {\n                    this._setAutocompleteInitialValue(value);\n                }\n            },\n            /**\n             * Initiates state watch\n             *\n             * @returns {*|function()}\n             * @private\n             */\n            _initStateWatch: function () {\n                this.$scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n            },\n            _initWatches: function () {\n                this._initStateWatch();\n            },\n            /**\n             * Processes the value of the input. Remove all whitespace from the string.\n             *\n             * @returns {string|null}\n             * @private\n             */\n            _getSearchQueryValue: function () {\n                // Get value\n                var value = this.autocompleteCtrl.value(value);\n                if (!value) {\n                    return null;\n                }\n                //// Remove all white spaces\n                //value = value.replace(/\\s/g, '');\n                // return value\n                return value;\n            },\n            /**\n             * Renders the autocomplete element. Places the rendered element kendo controller on the controller\n             * instance.\n             *\n             * @private\n             */\n            _renderAutocompleteElement: function () {\n                var ctrl = this;\n                ctrl.inputElement.kendoAutoComplete(ctrl._settings);\n                ctrl.autocompleteCtrl = ctrl.inputElement.data(\"kendoAutoComplete\");\n                // Make sure that when input value is deleted, and updateOnNull is on, update happens\n                function emptyOnBackspaceHandler(evt) {\n                    if (evt.keyCode === 8 && ctrl.inputElement.val() === '' && ctrl._settings.updateOnNull) {\n                        ctrl._fireSelectEvent(null);\n                        ctrl.autocompleteCtrl.trigger('change');\n                    }\n                }\n                ctrl.inputElement.on('keyup', emptyOnBackspaceHandler);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    ctrl.inputElement.off('keyup', emptyOnBackspaceHandler);\n                });\n            },\n            /**\n             * Processes received value from state, and selects the required choice.\n             *\n             * @param value\n             * @private\n             */\n            _setAutocompleteInitialValue: function (value) {\n                var ctrl = this;\n                ctrl._initialValue = value;\n                ctrl.autocompleteCtrl.enable(false);\n                // fetch data if resourceSettings is provided\n                if (ctrl.resourceSettings && ctrl._dataSource.fetch) {\n                    // Fetch data and fire callback\n                    ctrl._dataSource.fetch(function () {\n                        // select the first one (should be only one)\n                        if (ctrl.autocompleteCtrl.dataItems().length) {\n                            ctrl.autocompleteCtrl.select(ctrl.autocompleteCtrl.ul.children().eq(0));\n                            ctrl._fireSelectEvent(ctrl.autocompleteCtrl.dataItem());\n                            ctrl.autocompleteCtrl.trigger('change');\n                        }\n                        // delete initial value\n                        ctrl._initialValue = null;\n                        // enable the element\n                        ctrl.autocompleteCtrl.enable(true);\n                    });\n                }\n                else {\n                    assert(ctrl._settings.dataValueField !== null || ctrl._settings.dataValueField !== undefined, ctrl._errMsg + 'When using autocomplete without server filtering, ie providing dataSource ' +\n                        'in settings, dataValueField must be provided. Using dataValueFn will not allow the ' +\n                        'selection of initial state.', RangeError);\n                    var query = {};\n                    query[ctrl._settings.dataValueField] = value;\n                    var selectedItem = _.filter(ctrl._dataSource, query).shift();\n                    if (selectedItem) {\n                        ctrl.setAutocompleteValue(selectedItem[ctrl._settings.dataTextField]);\n                        ctrl._fireSelectEvent(selectedItem);\n                    }\n                    else {\n                        ctrl.setAutocompleteValue(value);\n                    }\n                    ctrl.autocompleteCtrl.trigger('change');\n                    // delete initial value\n                    ctrl._initialValue = null;\n                    // enable the element\n                    ctrl.autocompleteCtrl.enable(true);\n                }\n            },\n            /**\n             * Sets the element value (without selection).\n             *\n             * @param {string|number} value\n             * @returns {*}\n             */\n            setAutocompleteValue: function (value) {\n                return this.autocompleteCtrl.value(value);\n            },\n            /**\n             * Gets the element value. The extraction is based on the configuration.\n             *\n             * @returns {string|null}\n             */\n            getAutocompleteValue: function () {\n                // Get data item from kendo controller\n                var dataItem = this.autocompleteCtrl.dataItem();\n                // If dataItem is not null:\n                if (dataItem) {\n                    // If settings has a dataValueField then dataItem should be dataItem[dataValueField] otherwise\n                    // it should be the return value of dataValueFn(dataItem, dataItems)\n                    if (this._settings.dataValueField) {\n                        dataItem = dataItem[this._settings.dataValueField];\n                    }\n                    else if (this._settings.dataValueFn) {\n                        dataItem = this._settings.dataValueFn(dataItem, this.autocompleteCtrl.dataItems());\n                    }\n                }\n                else {\n                    // if flag mustBeInData is negative, then data item should be\n                    // autocompleteCtrl.value() otherwise it should be null\n                    if (!this._settings.mustBeInData) {\n                        dataItem = this.autocompleteCtrl.value();\n                    }\n                }\n                return dataItem;\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                ctrl.inputElement = ctrl.$element.find('input');\n                ctrl._validations();\n                ctrl._initResourceSettings();\n                ctrl._initSettings();\n                ctrl._initWatches();\n            }\n        });\n        FsAutocompleteController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<input class=\"autocomplete-input\">',\n            scope: {},\n            link: linkFn,\n            controller: FsAutocompleteController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                autocompleteId: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                autocompleteSettings: '=',\n                resourceSettings: '='\n            },\n            require: ['fsAutocomplete', '?^^form']\n        };\n    }\n    fsAutocompleteDirective.$inject = ['assert', 'interpolation', 'BASE_URL'];\n    angular.module('Fortscale.shared.components.fsAutocomplete')\n        .directive('fsAutocomplete', fsAutocompleteDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsGenInput', []);\n}());\n","(function () {\n    'use strict';\n    var IS_OPTIONAL = true;\n    var IS_NOT_OPTIONAL = false;\n    var CAN_NOT_BE_EMPTY = false;\n    function fsGenInputDirective(assert, $compile) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrls\n         */\n        function linkFn(scope, element, attrs, ctrls) {\n            // Link function logic\n            var ctrl = ctrls[0];\n            ctrl.formCtrl = ctrls[1];\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsGenInputController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsGenInputController.prototype, {\n            _errMsg: 'fsGenInput.directive: ',\n            _validateGenInputId: function () {\n                assert.isString(this.genInputId, 'genInputId', this._errMsg + 'arguments: ', IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                assert.isFunction(this.fetchStateDelegate, 'fetchStateDelegate', this._errMsg + 'arguments: ', IS_OPTIONAL);\n            },\n            /**\n             * Validate updateStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                assert.isFunction(this.updateStateDelegate, 'updateStateDelegate', this._errMsg + 'arguments: ', IS_OPTIONAL);\n            },\n            _validateAttributes: function () {\n                assert.isObject(this.attributes, 'attributes', this._errMsg + 'arguments: ', IS_OPTIONAL);\n            },\n            _validateState: function () {\n                assert.isObject(this.state, 'state', this._errMsg + 'arguments: ', IS_OPTIONAL);\n            },\n            /**\n             * Directive validation sequence\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateGenInputId();\n                this._validateGetStateFn();\n                this._validateSetStateFn();\n                this._validateAttributes();\n                this._validateState();\n            },\n            /**\n             * Returns the value of the the state by the id\n             * @returns {*|undefined}\n             * @private\n             */\n            _stateWatchFn: function () {\n                if (this.fetchStateDelegate) {\n                    return this.fetchStateDelegate(this.genInputId);\n                }\n            },\n            /**\n             * Watch action function . Sets the value to the picker if state has changed.\n             *\n             * @param {string|number} value\n             */\n            _stateWatchActionFn: function (value) {\n                if (value !== undefined && value !== null && this.getInputValue() !== value) {\n                    this.setInputValue(value);\n                }\n            },\n            /**\n             * Initiates state watch\n             *\n             * @returns {*|function()}\n             * @private\n             */\n            _initStateWatch: function () {\n                this.$scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n            },\n            /**\n             * input change handler. When the input element changes, the\n             *\n             * @private\n             */\n            _inputChangeHandler: function () {\n                if (!this.ngModelCtrl.$valid) {\n                    return;\n                }\n                if (this.updateStateDelegate) {\n                    this.updateStateDelegate({\n                        id: this.genInputId,\n                        type: 'DATA',\n                        value: this.getInputValue(),\n                        immediate: !!this.isImmediate\n                    });\n                }\n                if (this.formCtrl) {\n                    this.formCtrl.$setDirty.call(this.formCtrl);\n                }\n            },\n            /**\n             * Sets an input change handler.\n             *\n             * @private\n             */\n            _initInputChangeWatch: function () {\n                var ctrl = this;\n                ctrl.ngModelCtrl.$viewChangeListeners = [\n                    this._inputChangeHandler.bind(this)\n                ];\n            },\n            /**\n             * Makes sure that using the 'Enter' key will not fire submit action on the form.\n             *\n             * @private\n             */\n            _initDisableSubmitOnEnter: function () {\n                var ctrl = this;\n                function disableEnterKey(evt) {\n                    var code = evt.keyCode || evt.which;\n                    if (code === 13) {\n                        evt.preventDefault();\n                        ctrl.inputElement.trigger('blur');\n                        return false;\n                    }\n                }\n                ctrl.inputElement.on('keyup keypress', disableEnterKey);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    ctrl.inputElement.off('keyup keypress', disableEnterKey);\n                });\n            },\n            /**\n             * Init watches sequence\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._initStateWatch();\n                this._initInputChangeWatch();\n                this._initDisableSubmitOnEnter();\n            },\n            /**\n             * Takes an (angular/jquery) element, and applies attributes object with attr method. All properties on\n             * attributes object will be assigned to element as attributes.\n             *\n             * @param {angular.element} element\n             * @param {object=} attributes\n             * @private\n             */\n            _assignAttributes: function (element, attributes) {\n                if (attributes) {\n                    // Assign attributes to element\n                    angular.element(element).attr(attributes);\n                }\n            },\n            /**\n             * Renders and compiles the input element.\n             *\n             * @private\n             */\n            _renderElement: function () {\n                // Create element\n                this.inputElement = angular.element('<input ng-model=\"ctrl.model\">');\n                // Assign attributes to element\n                this._assignAttributes(this.inputElement, _.merge({}, {\n                    \"ng-model-options\": \"{ updateOn: 'default blur', debounce: { 'default': \" + (this.debounce || 400) +\n                        \", 'blur': 0 } }\"\n                }, this.attributes));\n                // Compile the element\n                this.inputElement = $compile(this.inputElement)(this.$scope);\n                // 'Capture' ngModel controller\n                this.ngModelCtrl = this.inputElement.controller('ngModel');\n                // Append input element to directive element\n                this.$element.append(this.inputElement);\n            },\n            /**\n             * Sets the input value.\n             *\n             * @param {string|number} value\n             * @returns {*}\n             */\n            setInputValue: function (value) {\n                return this.inputElement.val(value);\n            },\n            /**\n             * Gets the input value\n             *\n             * @returns {string}\n             */\n            getInputValue: function () {\n                return this.inputElement.val();\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                ctrl._validations();\n                ctrl._renderElement();\n                ctrl._initWatches();\n            }\n        });\n        FsGenInputController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<span class=\"gen-input-wrapper\"></span>',\n            scope: {},\n            link: linkFn,\n            controller: FsGenInputController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                genInputId: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                attributes: '=',\n                state: '=',\n                isImmediate: '@',\n                debounce: '@'\n            },\n            require: ['fsGenInput', '?^^form']\n        };\n    }\n    fsGenInputDirective.$inject = ['assert', '$compile'];\n    angular.module('Fortscale.shared.components.fsGenInput')\n        .directive('fsGenInput', fsGenInputDirective);\n}());\n","(function () {\n    'use strict';\n    var IS_NOT_OPTIONAL = false;\n    var CAN_NOT_BE_EMPTY = false;\n    function CountryCodesUtilService(assert, countryCodes) {\n        this.assert = assert;\n        this.countryCodes = countryCodes;\n    }\n    _.merge(CountryCodesUtilService.prototype, {\n        _errMsg: 'countryCodesUtils.service: ',\n        /**\n         * Returns a country object by\n         *\n         * @param {String} searchBy The property name to search by\n         * @param {String} searchValue the value to search by\n         * @returns {*|null}\n         * @private\n         */\n        _getCountryObj: function (searchBy, searchValue) {\n            // Since the countryCodes object's properties names are country names, there is no need to query when\n            // searchBy is 'name', you just need to return the country object.\n            if (searchBy === 'name') {\n                return this.countryCodes[searchValue] || null;\n            }\n            else {\n                // Query the countryCodes object to get the required country object.\n                var query = {};\n                query[searchBy] = searchValue;\n                return _.filter(this.countryCodes, query)[0] || null;\n            }\n        },\n        /**\n         * Validates countryName argument\n         *\n         * @param {String} methodName\n         * @param {String} countryName\n         * @private\n         */\n        _validateCountryName: function (methodName, countryName) {\n            this.assert.isString(countryName, 'countryName', this._errMsg + methodName + ': ', IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n        },\n        /**\n         * Return Alpha2 value by country name.\n         *\n         * @param {String} countryName\n         * @returns {String|Null}\n         */\n        getAlpha2ByCountryName: function (countryName) {\n            this._validateCountryName('getAlpha2ByCountryName', countryName);\n            var countryObj = this._getCountryObj('name', countryName.trim().toLowerCase());\n            if (countryObj === null) {\n                return null;\n            }\n            return countryObj['alpha-2'];\n        },\n        /**\n         * Return Alpha2 value by country code.\n         *\n         * @param {String} countryCode\n         * @returns {String|Null}\n         */\n        getAlpha2ByCountryCode: function (countryCode) {\n            this.assert.isString(countryCode, 'countryCode', this._errMsg + 'getAlpha2ByCountryCode: ', IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n            var countryObj = this._getCountryObj('country-code', countryCode.time());\n            if (countryObj === null) {\n                return null;\n            }\n            return countryObj['alpha-2'];\n        },\n        /**\n         * Return country-code value by country name.\n         *\n         * @param {String} countryName\n         * @returns {String|Null}\n         */\n        getCountryCodeByCountryName: function (countryName) {\n            this._validateCountryName('getAlpha2ByCountryName', countryName);\n            var countryObj = this._getCountryObj('name', countryName.trim().toLowerCase());\n            if (countryObj === null) {\n                return null;\n            }\n            return countryObj['country-code'];\n        },\n        /**\n         * Returns country name by alpha-2 code\n         *\n         * @param {String} alpha2\n         * @returns {String|Null}\n         */\n        getCountryNameByAlpha2: function (alpha2) {\n            this.assert.isString(alpha2, 'alpha2', this._errMsg + 'getCountryNameByAlpha2: ', IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n            var countryObj = this._getCountryObj('alpha-2', alpha2.trim().toUpperCase());\n            if (countryObj === null) {\n                return null;\n            }\n            return countryObj.name;\n        },\n        /**\n         * Returns country name by country-code\n         *\n         * @param {String} countryCode\n         * @returns {String|Null}\n         */\n        getCountryNameByCountryCode: function (countryCode) {\n            this.assert.isString(countryCode, 'countryCode', this._errMsg + 'getCountryNameByAlpha2: ', IS_NOT_OPTIONAL, CAN_NOT_BE_EMPTY);\n            var countryObj = this._getCountryObj('country-code', countryCode);\n            if (countryObj === null) {\n                return null;\n            }\n            return countryObj.name;\n        }\n    });\n    CountryCodesUtilService.$inject = ['assert', 'countryCodes'];\n    angular.module('Fortscale.shared.services.countryCodesUtil', [])\n        .service('countryCodesUtil', CountryCodesUtilService);\n}());\n","(function () {\n    'use strict';\n    function FsIndicatorTypes(assert, $http, BASE_URL, appConfig, dataEntities) {\n        this._PATH = '/alerts/exist-anomaly-types';\n        this._ERR_MSG = 'FsIndicatorTypes: ';\n        this._CONFIG_LOCALE_KEY = 'system.locale.settings';\n        this._CONFIG_INDICATOR_KEY = \"messages.\" + appConfig.getConfigItem(this._CONFIG_LOCALE_KEY).value + \".evidence.\";\n        this._MAJOR_DELIMITER = '@@@';\n        this._MINOR_DELIMITER = '@@';\n        /**\n         * Used to define the indicator type. Single or aggregated. Also used to define the sort order.\n         * @type {Array<{id: string, queryFn: Function, sortOrder: number}>}\n         * @private\n         */\n        this._indicator_types = [\n            {\n                id: 'Single',\n                queryFn: function (val) {\n                    return !(/daily$|hourly$/.test(val));\n                },\n                sortOrder: 0\n            },\n            {\n                id: 'Aggregated',\n                queryFn: function (val) {\n                    return /daily$|hourly$/.test(val);\n                },\n                sortOrder: 1\n            }\n        ];\n        /**\n         * Return the indicator types resource\n         *\n         * @returns {Promise}\n         * @private\n         */\n        this._getIndicatorsListResource = function () {\n            return $http.get(BASE_URL + this._PATH);\n        };\n        /**\n         *\n         * @param {Array<string>} list\n         * @private\n         */\n        /**\n         *\n         * @param {Array<string>} list\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, id: string} | {}>}\n         * @private\n         */\n        this._breakListByValue = function (list) {\n            var _this = this;\n            return _.map(list, function (listItem) {\n                var listItemKeyValueList = listItem.split(_this._MAJOR_DELIMITER);\n                if (listItemKeyValueList.length !== 2) {\n                    console.warn(_this._ERR_MSG + \"Trying to parse an incorrect value; \" + listItem);\n                    return {};\n                }\n                var dataSourceId = listItemKeyValueList[0];\n                var anomalyTypeFieldName = listItemKeyValueList[1];\n                return {\n                    id: listItem,\n                    dataSourceId: dataSourceId,\n                    anomalyTypeFieldName: anomalyTypeFieldName\n                };\n            });\n        };\n        /**\n         *\n         * @param {Array<{dataSourceId: string, anomalyTypeFieldName: string, id: string}>} list\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string, id: string}>}\n         */\n        this._populateAnomalyName = function (list) {\n            var _this = this;\n            return _.map(list, function (listItem) {\n                // Get anomaly name from config item\n                var anomalyTypeConfigItem = appConfig.getConfigItem(_this._CONFIG_INDICATOR_KEY + listItem.dataSourceId + \".\" +\n                    listItem.anomalyTypeFieldName);\n                if (!anomalyTypeConfigItem) {\n                    anomalyTypeConfigItem =\n                        appConfig.getConfigItem(_this._CONFIG_INDICATOR_KEY + listItem.anomalyTypeFieldName);\n                }\n                // If config item was found, then name would be its value, otherwise set it to anomalyTypeFieldName\n                if (anomalyTypeConfigItem && anomalyTypeConfigItem.value) {\n                    listItem.anomalyTypeName = anomalyTypeConfigItem.value;\n                }\n                else {\n                    listItem.anomalyTypeName = listItem.anomalyTypeFieldName;\n                }\n                return listItem;\n            });\n        };\n        //noinspection JSClosureCompilerSyntax\n        /**\n         *\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string, id: string}>}\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>}\n         * @private\n         */\n        this._populateDataSourceName = function (list) {\n            return _.map(list, function (listItem) {\n                // Get data entity\n                var dataSource = dataEntities.getEntityById(listItem.dataSourceId);\n                // If data entity exists set name to dataSourceName otherwise set it listItem.dataSourceId\n                if (dataSource) {\n                    listItem.dataSourceName = dataSource.name;\n                }\n                else {\n                    listItem.dataSourceName = listItem.dataSourceId;\n                }\n                return listItem;\n            });\n        };\n        /**\n         * Populates anomalyTypeFullName: <dataSourceName - anomalyTypeName>\n         *\n         * @param list\n         * @returns {Array}\n         * @private\n         */\n        this._populateAnomalyFullName = function (list) {\n            return _.map(list, function (listItem) {\n                listItem.anomalyTypeFullName = listItem.dataSourceName + \" - \" + listItem.anomalyTypeName;\n                return listItem;\n            });\n        };\n        /**\n         * Populates indicator types and indicator types order for sorting.\n         *\n         * @param list\n         * @returns {Array}\n         * @private\n         */\n        this._populateIndicatorType = function (list) {\n            var _this = this;\n            return _.map(list, function (listItem) {\n                _.some(_this._indicator_types, function (indicatorTypeQryObj) {\n                    if (indicatorTypeQryObj.queryFn(listItem.id)) {\n                        listItem.indicatorType = indicatorTypeQryObj.id;\n                        listItem.indicatorTypeOrder = indicatorTypeQryObj.sortOrder;\n                    }\n                    return false;\n                });\n                return listItem;\n            });\n        };\n        /**\n         *\n         * @param {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>} list\n         * @param {Array<string>} sort the sorting strings\n         * @param {Array<string>} order the sorting order\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>}\n         * @private\n         */\n        this._orderPopulatedList = function (list, sort, order) {\n            return _.orderBy(list, sort, order);\n        };\n        /**\n         *\n         * @param {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>} list\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>}\n         * @private\n         */\n        this._populateFinalizedSinglesList = function (list) {\n            var _this = this;\n            var groupedListByAnomalyTypeFullName = _.groupBy(list, \"anomalyTypeFullName\");\n            return _.map(groupedListByAnomalyTypeFullName, function (group) {\n                var groupObj = _.merge({}, group[0]);\n                // Set full id as a csv of ids\n                groupObj.id = groupObj.dataSourceId + _this._MAJOR_DELIMITER +\n                    _.map(group, function (listItem) { return listItem.anomalyTypeFieldName; }).join(_this._MINOR_DELIMITER);\n                return groupObj;\n            });\n        };\n        /**\n         *\n         * @param {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>} list\n         * @returns {Array<{dataSourceId: string, anomalyTypeFieldName: string, anomalyTypeName: string,\n         * dataSourceName: string, dataSourceName: string, id: string}>}\n         * @private\n         */\n        this._populateFinalCommonList = function (list) {\n            var groupedListByAnomalyTypeFullName = _.groupBy(list, \"dataSourceName\");\n            return _.map(groupedListByAnomalyTypeFullName, function (group) {\n                var groupObj = _.merge({}, group[0]);\n                groupObj.id = groupObj.dataSourceId;\n                groupObj.anomalyTypeFullName = \"All \" + groupObj.dataSourceName + \" Indicators\";\n                return groupObj;\n            });\n        };\n        /**\n         * Takes a list of indicator type ids (anomalyTypeFieldName) and matches the display name taken from messages.\n         *\n         * @param {Array<string>} list\n         * @returns {Array<{id: string, value: string}>}\n         * @private\n         */\n        this._populateIdValueList = function (list) {\n            // Break into a list of dataSourceId, anomalyTypeFieldName\n            var populatedList = this._breakListByValue(list) || [];\n            // Filter out empty objects\n            populatedList = populatedList\n                .filter(function (listItem) { return !!listItem.id; });\n            // add anomaly name for each item on list\n            populatedList = this._populateAnomalyName(populatedList);\n            // Add data source name for each item on list\n            populatedList = this._populateDataSourceName(populatedList);\n            // add to list concat value of data source name + anomaly name as anomalyFullName\n            populatedList = this._populateAnomalyFullName(populatedList);\n            // Add indicator type and indicator type order\n            populatedList = this._populateIndicatorType(populatedList);\n            // Create final single list\n            var finalSinglesList = this._populateFinalizedSinglesList(populatedList);\n            // Sort list\n            finalSinglesList = this._orderPopulatedList(finalSinglesList, ['dataSourceName', 'indicatorTypeOrder', 'anomalyTypeFullName'], ['asc', 'asc', 'asc']);\n            var finalCommonList = this._populateFinalCommonList(populatedList);\n            finalCommonList = this._orderPopulatedList(finalCommonList, ['dataSourceName'], ['asc']);\n            var finalList = finalCommonList.concat(finalSinglesList);\n            // Create a list of id: anomalyTypeFieldName, value: anomalyFullName\n            return _.map(finalList, function (listItem) {\n                return { id: listItem.id, value: listItem.anomalyTypeFullName };\n            });\n        };\n        /**\n         * Gets a list  a list of indicator type ids (anomalyTypeFieldName) from the server,\n         * and creates a id-value list to be returned on resolve.\n         * On error it will return an empty array.\n         *\n         * @returns {Promise}\n         */\n        this.getIndicatorsList = function () {\n            var ctrl = this;\n            var ERR_MSG = ctrl._ERR_MSG + 'getIndicatorsList: ';\n            return ctrl._getIndicatorsListResource()\n                .then(function (res) {\n                assert.isArray(res.data, 'res.data', ERR_MSG);\n                return ctrl._populateIdValueList(res.data);\n            })\n                .catch(function (err) {\n                console.error(ctrl._ERR_MSG + 'Indicators type list process failed.');\n                console.error(err);\n                return [];\n            });\n        };\n    }\n    FsIndicatorTypes.$inject = ['assert', '$http', 'BASE_URL', 'appConfig', 'dataEntities'];\n    angular.module('Fortscale.shared.services.fsIndicatorTypes', [])\n        .service('fsIndicatorTypes', FsIndicatorTypes);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper', []);\n}());\n","/**\n * This file will contain mapping settings which required  by few indicators mapping\n */\n(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .value('indicatorTypeMapper.commonQueryParams', {\n        /**\n         * Used as a common param configuration\n         */\n        entityTypeAnomalyTypeCount: {\n            context_type: '{{entityTypeFieldName}}',\n            context_value: '{{entityName}}',\n            feature: '{{anomalyTypeFieldName}}',\n            'function': 'Count',\n            num_columns: 4\n        },\n        /**\n         * Used as a common param configuration for time aggregation indicators\n         */\n        aggregationIndicatorsByTime: {\n            context_type: '{{entityTypeFieldName | fsRemoveIsExists:\\'context.\\':true}}',\n            context_value: '{{entityName}}',\n            feature: '{{anomalyTypeFieldName}}',\n            'function': 'distinctEventsByTime'\n        },\n        /**\n         * Used as a common param configuration\n         */\n        anomalyTypeEntityTypeCount: {\n            context_type: '{{anomalyTypeFieldName}}',\n            context_value: '{{anomalyValue}}',\n            feature: '{{entityTypeFieldName}}',\n            'function': 'Count',\n            num_columns: 4\n        },\n        /**\n         * param configuration for vpn-session data rate\n         */\n        entityTypeAnomalyTypeCount30days: {\n            context_type: '{{entityTypeFieldName}}',\n            context_value: '{{entityName}}',\n            feature: '{{anomalyTypeFieldName}}',\n            'function': 'VPNSession',\n            num_columns: 5,\n            time_range: 30\n        },\n        /**\n         * Used as a common param configuration\n         */\n        entityTypeAnomalyTypeCount5Columns: {\n            context_type: '{{entityTypeFieldName}}',\n            context_value: '{{entityName}}',\n            feature: '{{anomalyTypeFieldName}}',\n            'function': 'Count',\n            num_columns: 5\n        },\n    });\n}());\n","/**\n * This file will contain mapping settings which required  all scatter-plot single charts\n */\n(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .value('indicatorTypeMapper.abstract-scatter-plot', {\n        templateUrl: 'app/layouts/alert/layouts/indicator-templates/singlescatterplot.html',\n        settings: {\n            scatterSettings: {\n                styleSettings: {\n                    height: '25rem',\n                    width: '100%',\n                    padding: '0 1.25rem',\n                    boxSizing: 'border-box'\n                },\n                chartSettings: {\n                    xAxis: [{\n                            type: \"datetime\"\n                        }],\n                    yAxis: {\n                        min: 0\n                    }\n                }\n            }\n        },\n        indicatorClass: 'gen'\n    });\n}());\n","/**\n * Settings for indicator which contains heatmp\n */\n(function () {\n    'use strict';\n    function ActivityTimeAnomalyFactory($filter) {\n        /**\n         * Used as weekDaysUs axis\n         */\n        var weekDaysUS = [\n            'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'\n        ];\n        /**\n         * Used as hours in a day axis.\n         */\n        var HoursInDay = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            17, 18, 19, 20, 21, 22, 23];\n        return {\n            settings: {\n                activityTimeAnomaly: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'hourlyCountGroupByDayOfWeek'\n                    },\n                    chartSettings: {\n                        xAxis: {\n                            categories: weekDaysUS.reverse(),\n                            title: {\n                                text: 'Week days'\n                            },\n                            labels: {\n                                formatter: function () {\n                                    return $filter('pascalCase')(this.value);\n                                }\n                            }\n                        },\n                        yAxis: {\n                            title: {\n                                text: 'Hours'\n                            },\n                            categories: HoursInDay\n                        },\n                        colorAxis: {\n                            min: 1,\n                            minColor: '#8fbde4',\n                            maxColor: '#2766a9'\n                        },\n                        title: {\n                            text: '{{dataEntitiesIds[0]|entityIdToName}} ' +\n                                'Authentication Times (Last 90 days)'\n                        },\n                        \"series\": [{\n                                \"name\": \"{{dataEntitiesIds[0]|entityIdToName}} \" +\n                                    \"Authentication Times (Last 90 days) \"\n                            }]\n                    }\n                }\n            }\n        };\n    }\n    ActivityTimeAnomalyFactory.inject = ['$filter'];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.activityTimeAnomaly', ActivityTimeAnomalyFactory);\n}());\n","/**\n * This file will contain mapping settings for serial chart used for aggregation indicators\n */\n(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper').\n        /**\n         * Filter which generate the relevant message key from the anomalyTypeFieldName and title or axisYtitle\n         */\n        filter('buildAggregatedKey', function () {\n        var prefix = \"evidence.aggregated.\";\n        return function (anomalyTypeFieldName, postfix) {\n            return prefix + anomalyTypeFieldName + \".\" + postfix;\n        };\n    })\n        .factory('indicatorTypeMapper.aggregated-serial', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    scatterSettings: {\n                        params: commonQueryParams.aggregationIndicatorsByTime,\n                        templates: {\n                            titles: {\n                                'Title-1': '{{ anomalyTypeFieldName  | buildAggregatedKey: \\'title\\' | translate}}'\n                            },\n                            valueAxes: {\n                                'ValueAxis-1': '{{ anomalyTypeFieldName  | buildAggregatedKey: \\'axisYtitle\\' | ' +\n                                    'translate}}'\n                            }\n                        },\n                        sortData: function (data) {\n                            return _.orderBy(data, [function (dataItem) { return parseInt(dataItem.keys[0], 10); }], ['asc']);\n                        },\n                        dataAdapter: function (indicator, dataItem) {\n                            var chartItem = {\n                                category: new Date(parseInt(dataItem.keys[0], 10)),\n                                originalCategory: dataItem.keys[0],\n                                value: dataItem.value\n                            };\n                            if (dataItem.anomaly) {\n                                chartItem.color = '#FF0000';\n                            }\n                            return chartItem;\n                        },\n                        handlers: {},\n                        chartSettings: {\n                            \"type\": \"serial\",\n                            \"categoryField\": \"category\",\n                            \"startDuration\": 1,\n                            \"color\": \"#666666\",\n                            \"fontFamily\": \"'Open Sans', sans-serif\",\n                            \"export\": {\n                                \"enabled\": true\n                            },\n                            \"categoryAxis\": {\n                                \"axisColor\": \"#1C1A1A\",\n                                \"color\": \"#666666\",\n                                \"fontSize\": 10,\n                                \"gridColor\": \"#FFFFFF\",\n                                \"parseDates\": true,\n                                \"equalSpacing\": true,\n                                'minPeriod': 'hh',\n                                dateFormats: [{\n                                        period: 'fff',\n                                        format: 'JJ:NN:SS'\n                                    }, {\n                                        period: 'ss',\n                                        format: 'JJ:NN:SS'\n                                    }, {\n                                        period: 'mm',\n                                        format: 'JJ:NN'\n                                    }, {\n                                        period: 'hh',\n                                        format: 'MMM DD JJ:NN'\n                                    }, {\n                                        period: 'DD',\n                                        format: 'MMM DD'\n                                    }, {\n                                        period: 'WW',\n                                        format: 'MMM DD'\n                                    }, {\n                                        period: 'MM',\n                                        format: 'MMM YYYY'\n                                    }, {\n                                        period: 'YYYY',\n                                        format: 'MMM YYYY'\n                                    }]\n                            },\n                            \"chartScrollbar\": {\n                                \"enabled\": true\n                            },\n                            \"trendLines\": [],\n                            \"graphs\": [\n                                {\n                                    \"colorField\": \"color\",\n                                    \"columnWidth\": 0.6,\n                                    \"fillAlphas\": 1,\n                                    \"fillColors\": \"#C9E6F9\",\n                                    \"id\": \"AmGraph-1\",\n                                    \"lineColor\": \"#C9E6F9\",\n                                    \"lineColorField\": \"color\",\n                                    \"title\": \"graph 1\",\n                                    \"type\": \"column\",\n                                    \"valueField\": \"value\",\n                                    balloonFunction: function (dataItem) {\n                                        return moment(dataItem.dataContext.category).utc().format('YYYY MMM DD HH:mm') +\n                                            ' : <b>' + dataItem.dataContext.value + '</b>';\n                                    }\n                                }\n                            ],\n                            \"guides\": [],\n                            \"valueAxes\": [\n                                {\n                                    \"id\": \"ValueAxis-1\",\n                                    \"axisThickness\": 0,\n                                    \"color\": \"#666666\",\n                                    \"showFirstLabel\": false,\n                                    \"showLastLabel\": false,\n                                    \"tickLength\": -1,\n                                    \"titleBold\": false,\n                                    \"titleColor\": \"#666666\",\n                                    \"titleFontSize\": 14,\n                                    \"precision\": 0,\n                                    \"minimum\": 0\n                                }\n                            ],\n                            \"allLabels\": [],\n                            \"balloon\": {},\n                            \"titles\": [\n                                {\n                                    \"id\": \"Title-1\",\n                                    \"size\": 15\n                                }\n                            ]\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * This file will contain mapping settings for serial chart used for aggregation indicators\n */\n(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper').\n        /**\n         * Filter which generate the relevant message key from the anomalyTypeFieldName and title or axisYtitle\n         */\n        filter('buildAggregatedKey', function () {\n        var prefix = \"evidence.aggregated.\";\n        return function (anomalyTypeFieldName, postfix) {\n            return prefix + anomalyTypeFieldName + \".\" + postfix;\n        };\n    })\n        .factory('indicatorTypeMapper.aggregated-serial-data-rate', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    scatterSettings: {\n                        params: commonQueryParams.entityTypeAnomalyTypeCount30days,\n                        templates: {\n                            titles: {\n                                'Title-1': 'VPN Exfiltration Rate for {{entityName}} (Last 30 Days)'\n                            }\n                        },\n                        sortData: function (data) {\n                            return _.orderBy(data, [function (dataItem) { return parseInt(dataItem.keys[0], 10); }], ['asc']);\n                        },\n                        dataAdapter: function (indicator, dataItem) {\n                            var chartItem = {\n                                category: new Date(parseInt(dataItem.keys[0], 10)),\n                                originalCategory: dataItem.keys[0],\n                                value: dataItem.value\n                            };\n                            if (dataItem.anomaly) {\n                                chartItem.color = '#FF0000';\n                            }\n                            return chartItem;\n                        },\n                        handlers: {\n                            \"clickGraphItem\": function (indicator, item) {\n                                // indicatorChartTransitionUtil.go('columnEntity', indicator, item);\n                            }\n                        },\n                        chartSettings: {\n                            \"type\": \"serial\",\n                            \"categoryField\": \"category\",\n                            \"startDuration\": 1,\n                            \"color\": \"#666666\",\n                            \"fontFamily\": \"'Open Sans', sans-serif\",\n                            \"export\": {\n                                \"enabled\": true\n                            },\n                            \"categoryAxis\": {\n                                \"axisColor\": \"#1C1A1A\",\n                                \"color\": \"#666666\",\n                                \"fontSize\": 10,\n                                \"gridColor\": \"#FFFFFF\",\n                                \"parseDates\": true,\n                                \"equalSpacing\": true,\n                                'minPeriod': 'hh',\n                                dateFormats: [{\n                                        period: 'fff',\n                                        format: 'JJ:NN:SS'\n                                    }, {\n                                        period: 'ss',\n                                        format: 'JJ:NN:SS'\n                                    }, {\n                                        period: 'mm',\n                                        format: 'JJ:NN'\n                                    }, {\n                                        period: 'hh',\n                                        format: 'MMM DD JJ:NN'\n                                    }, {\n                                        period: 'DD',\n                                        format: 'MMM DD'\n                                    }, {\n                                        period: 'WW',\n                                        format: 'MMM DD'\n                                    }, {\n                                        period: 'MM',\n                                        format: 'MMM YYYY'\n                                    }, {\n                                        period: 'YYYY',\n                                        format: 'MMM YYYY'\n                                    }]\n                            },\n                            \"chartScrollbar\": {\n                                \"enabled\": true\n                            },\n                            \"trendLines\": [],\n                            \"graphs\": [\n                                {\n                                    \"colorField\": \"color\",\n                                    \"columnWidth\": 0.6,\n                                    \"fillAlphas\": 1,\n                                    \"fillColors\": \"#C9E6F9\",\n                                    \"id\": \"AmGraph-1\",\n                                    \"lineColor\": \"#C9E6F9\",\n                                    \"lineColorField\": \"color\",\n                                    \"title\": \"graph 1\",\n                                    \"type\": \"column\",\n                                    \"valueField\": \"value\",\n                                    balloonFunction: function (dataItem) {\n                                        return moment(dataItem.dataContext.category).utc().format('YYYY MMM DD HH:mm') + ' : ' +\n                                            $filter('prettyBytes')(dataItem.values.value) + '/s';\n                                    }\n                                }\n                            ],\n                            \"guides\": [],\n                            \"valueAxes\": [\n                                {\n                                    \"id\": \"ValueAxis-1\",\n                                    \"axisThickness\": 0,\n                                    \"color\": \"#666666\",\n                                    \"showFirstLabel\": false,\n                                    \"showLastLabel\": false,\n                                    \"tickLength\": -1,\n                                    \"titleBold\": false,\n                                    \"titleColor\": \"#666666\",\n                                    \"titleFontSize\": 14,\n                                    \"precision\": 0,\n                                    \"baseValue\": -10,\n                                    \"title\": 'Rate',\n                                    labelFunction: function (value) {\n                                        return $filter('prettyBytes')(value) + '/s';\n                                    }\n                                }\n                            ],\n                            \"allLabels\": [],\n                            \"balloon\": {},\n                            \"titles\": [\n                                {\n                                    \"id\": \"Title-1\",\n                                    \"size\": 15\n                                }\n                            ]\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * This file will contain mapping settings which required  by  date rate indicator\n */\n(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.data-rate-scatter-plot', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    scatterSettings: {\n                        params: commonQueryParams.entityTypeAnomalyTypeCount30days,\n                        chartSettings: {\n                            title: {\n                                text: 'VPN Exfiltration Rate for {{entityName}} (Last 30 Days)'\n                            },\n                            yAxis: {\n                                title: {\n                                    text: 'Rate'\n                                }\n                            },\n                            tooltip: {\n                                formatter: function () {\n                                    var tooltipText = 'Rate: ' + $filter('prettyBytes')(this.point.y) + '/Sec<br>';\n                                    tooltipText += 'Total: ' + this.point.total + '<br>';\n                                    tooltipText += 'Duration: ' + this.point.duration + ' (HH:MM:SS)';\n                                    return tooltipText;\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * This file contains setting for both column charts in any indicator which display\n * two column charts\n */\n(function () {\n    'use strict';\n    //Adding map of the anomalyTypeFieldName to pretty name,\n    //For each chart title (chart1, chart2)\n    var indicatorsChartsTitles = {\n        normalized_src_machine: {\n            title_chart1: 'Source Devices',\n            title_chart2: 'Users for Source Device'\n        },\n        normalized_dst_machine: {\n            title_chart1: 'Target Devices',\n            title_chart2: 'Users for Target Device'\n        },\n        country: {\n            title_chart1: 'Countries',\n            title_chart2: 'Users for'\n        },\n        db_object: {\n            title_chart1: 'DB Objects',\n            title_chart2: 'Users for'\n        },\n        db_username: {\n            title_chart1: 'DB Username',\n            title_chart2: 'Users for'\n        }\n    };\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .filter('fetchDualIndicatorMapProperties', function () {\n        return function (anomalyTypeFieldName, chartOrder) {\n            //Adding a filter which extract the name of the titles, according to\n            //anomalyTypeFieldName and chart title\n            if (anomalyTypeFieldName && indicatorsChartsTitles[anomalyTypeFieldName]) {\n                return indicatorsChartsTitles[anomalyTypeFieldName][chartOrder];\n            }\n            else if (anomalyTypeFieldName) {\n                return anomalyTypeFieldName;\n            }\n        };\n    })\n        .factory('indicatorTypeMapper.dual-column', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        'fsIndicatorGraphsHandler',\n        'indicatorChartTransitionUtil',\n        function ($filter, commonQueryParams, fsIndicatorGraphsHandler, indicatorChartTransitionUtil) {\n            return {\n                settings: {\n                    firstColumn: {\n                        params: commonQueryParams.entityTypeAnomalyTypeCount,\n                        styleSettings: {},\n                        templates: {\n                            titles: {\n                                'Title-1': '{{dataEntitiesIds[0]|entityIdToName}} ' +\n                                    '{{anomalyTypeFieldName | fetchDualIndicatorMapProperties: ' +\n                                    '\\'title_chart1\\'}} for {{entityName}} (Last 90 Days)'\n                            }\n                        },\n                        sortData: function (data) {\n                            return _.orderBy(data, ['anomaly', 'value'], ['asc', 'desc']);\n                        },\n                        dataAdapter: function (indicator, dataItem) {\n                            var chartItem = {\n                                category: $filter('anomalyTypeFormatter')(dataItem.keys[0], indicator),\n                                originalCategory: dataItem.keys[0],\n                                value: dataItem.value\n                            };\n                            if (dataItem.anomaly) {\n                                chartItem.color = '#CC3300';\n                            }\n                            return chartItem;\n                        },\n                        handlers: {\n                            \"clickGraphItem\": function (indicator, item) {\n                                indicatorChartTransitionUtil.go('columnAnomaly', indicator, item);\n                            }\n                        },\n                        chartSettings: {\n                            \"type\": \"serial\",\n                            \"categoryField\": \"category\",\n                            \"plotAreaBorderColor\": \"#F0F7F8\",\n                            \"colors\": [\n                                \"#9EC8E4\"\n                            ],\n                            \"startDuration\": 1,\n                            \"backgroundColor\": \"#F0F7F8\",\n                            \"fontFamily\": \"Open Sans\",\n                            \"fontSize\": 12,\n                            \"export\": {\n                                \"enabled\": true\n                            },\n                            \"categoryAxis\": {\n                                \"gridPosition\": \"start\",\n                                \"axisColor\": \"#BCB5B5\",\n                                \"gridColor\": \"#FFFFFF\",\n                                \"title\": \"\",\n                                \"fontFamily\": \"'Open Sans', sans-serif\",\n                                fontSize: 10,\n                                autoWrap: true,\n                                labelFunction: function (value, valueString, axis) {\n                                    return value;\n                                }\n                            },\n                            \"trendLines\": [],\n                            \"graphs\": [\n                                {\n                                    \"colorField\": \"color\",\n                                    \"columnWidth\": 0,\n                                    \"fillAlphas\": 1,\n                                    \"fillColors\": \"\",\n                                    \"fixedColumnWidth\": 20,\n                                    \"fontSize\": -1,\n                                    \"id\": \"AmGraph-1\",\n                                    \"lineColor\": \"\",\n                                    \"lineColorField\": \"color\",\n                                    \"title\": \"graph 1\",\n                                    \"type\": \"column\",\n                                    \"valueField\": \"value\",\n                                    showHandOnHover: true\n                                }\n                            ],\n                            \"valueAxes\": [\n                                {\n                                    \"id\": \"ValueAxis-1\",\n                                    \"axisAlpha\": 0,\n                                    \"axisColor\": \"#\",\n                                    \"fontSize\": 12,\n                                    \"gridColor\": \"#666666\",\n                                    \"labelOffset\": -1,\n                                    \"showFirstLabel\": false,\n                                    \"title\": \"Number of Sessions\",\n                                    \"titleColor\": \"#666666\",\n                                    \"fontFamily\": \"'Open Sans', sans-serif\"\n                                }\n                            ],\n                            \"titles\": [\n                                {\n                                    \"id\": \"Title-1\",\n                                    \"fontFamily\": \"'Open Sans', sans-serif\",\n                                    \"color\": \"#666666\",\n                                    \"size\": 12\n                                }\n                            ]\n                        }\n                    },\n                    secondColumn: {\n                        params: commonQueryParams.anomalyTypeEntityTypeCount,\n                        styleSettings: {},\n                        templates: {\n                            titles: {\n                                'Title-1': '{{dataEntitiesIds[0]|entityIdToName}} ' +\n                                    '{{anomalyTypeFieldName | fetchDualIndicatorMapProperties: ' +\n                                    '\\'title_chart2\\'}} {{anomalyValue}} (Last 90 Days)'\n                            }\n                        },\n                        sortData: function (data) {\n                            return _.orderBy(data, ['anomaly', 'value'], ['asc', 'desc']);\n                        },\n                        dataAdapter: function (indicator, dataItem) {\n                            var chartItem = {\n                                category: $filter('anomalyTypeFormatter')(dataItem.keys[0], indicator),\n                                originalCategory: dataItem.keys[0],\n                                value: dataItem.value\n                            };\n                            if (dataItem.anomaly) {\n                                chartItem.color = '#CC3300';\n                            }\n                            return chartItem;\n                        },\n                        handlers: {\n                            \"clickGraphItem\": function (indicator, item) {\n                                indicatorChartTransitionUtil.go('columnEntity', indicator, item);\n                            }\n                        },\n                        chartSettings: {\n                            \"type\": \"serial\",\n                            \"categoryField\": \"category\",\n                            \"plotAreaBorderColor\": \"#F0F7F8\",\n                            \"colors\": [\n                                \"#9EC8E4\"\n                            ],\n                            \"startDuration\": 1,\n                            \"backgroundColor\": \"#F0F7F8\",\n                            \"fontFamily\": \"Open Sans\",\n                            \"fontSize\": 12,\n                            \"export\": {\n                                \"enabled\": true\n                            },\n                            \"categoryAxis\": {\n                                \"gridPosition\": \"start\",\n                                \"axisColor\": \"#BCB5B5\",\n                                \"gridColor\": \"#FFFFFF\",\n                                \"title\": \"\",\n                                \"fontFamily\": \"'Open Sans', sans-serif\",\n                                fontSize: 10,\n                                autoWrap: true,\n                                labelFunction: function (value, valueString, axis) {\n                                    return value;\n                                }\n                            },\n                            \"trendLines\": [],\n                            \"graphs\": [\n                                {\n                                    \"colorField\": \"color\",\n                                    \"columnWidth\": 0,\n                                    \"fillAlphas\": 1,\n                                    \"fillColors\": \"\",\n                                    \"fixedColumnWidth\": 20,\n                                    \"fontSize\": -1,\n                                    \"id\": \"AmGraph-1\",\n                                    \"lineColor\": \"\",\n                                    \"lineColorField\": \"color\",\n                                    \"title\": \"graph 1\",\n                                    \"type\": \"column\",\n                                    \"valueField\": \"value\",\n                                    showHandOnHover: true\n                                }\n                            ],\n                            \"valueAxes\": [\n                                {\n                                    \"id\": \"ValueAxis-1\",\n                                    \"axisAlpha\": 0,\n                                    \"axisColor\": \"#\",\n                                    \"fontSize\": 12,\n                                    \"gridColor\": \"#666666\",\n                                    \"labelOffset\": -1,\n                                    \"showFirstLabel\": false,\n                                    \"title\": \"Number of Sessions\",\n                                    \"titleColor\": \"#666666\",\n                                    \"fontFamily\": \"'Open Sans', sans-serif\"\n                                }\n                            ],\n                            \"titles\": [\n                                {\n                                    \"id\": \"Title-1\",\n                                    \"fontFamily\": \"'Open Sans', sans-serif\",\n                                    \"color\": \"#666666\",\n                                    \"size\": 12\n                                }\n                            ]\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * Settings for indicator which contains heatmp\n */\n(function () {\n    'use strict';\n    function HeatMapFactory($filter) {\n        /**\n         * Used as weekDaysUs axis\n         */\n        var weekDaysUS = [\n            'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'\n        ];\n        /**\n         * Used as hours in a day axis.\n         */\n        var HoursInDay = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            17, 18, 19, 20, 21, 22, 23];\n        return {\n            settings: {\n                heatmap: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'hourlyCountGroupByDayOfWeek'\n                    },\n                    styleSettings: {\n                        height: '28.125rem'\n                    },\n                    chartSettings: {\n                        chart: {\n                            inverted: true\n                        },\n                        xAxis: {\n                            categories: weekDaysUS.reverse(),\n                            title: {\n                                text: 'Week days'\n                            },\n                            labels: {\n                                formatter: function () {\n                                    return $filter('pascalCase')(this.value);\n                                }\n                            }\n                        },\n                        yAxis: {\n                            title: {\n                                text: 'Hours'\n                            },\n                            categories: HoursInDay\n                        },\n                        colorAxis: {\n                            min: 1,\n                            minColor: '#8fbde4',\n                            maxColor: '#2766a9'\n                        },\n                        title: {\n                            text: '{{dataEntitiesIds[0]|entityIdToName}} ' +\n                                'Authentication Times (Last 90 days)'\n                        },\n                        \"series\": [{\n                                \"name\": \"{{dataEntitiesIds[0]|entityIdToName}} \" +\n                                    \"Authentication Times (Last 90 days) \"\n                            }]\n                    }\n                }\n            }\n        };\n    }\n    HeatMapFactory.inject = ['$filter'];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.heatmap', HeatMapFactory);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .filter('buildSingleColumnKey', function () {\n        var prefix = \"evidence.singlecolumn.title.\";\n        return function (anomalyTypeFieldName, postfix) {\n            return prefix + anomalyTypeFieldName;\n        };\n    })\n        .factory('indicatorTypeMapper.single-column', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    singleColumn: {\n                        params: commonQueryParams.entityTypeAnomalyTypeCount5Columns,\n                        styleSettings: {\n                            height: '24rem',\n                            boxSizing: 'border-box',\n                            width: '100%',\n                            padding: '0 1.25rem'\n                        },\n                        chartSettings: {\n                            title: {\n                                text: '<span class=\"chart-title\">' +\n                                    '{{anomalyTypeFieldName  | buildSingleColumnKey | translate: this}}' +\n                                    '</span>'\n                            },\n                            \"series\": [{}]\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    var colors = [\"#0D8ECF\", \"#0D6ECD\"];\n    var colorIndex = 0;\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .filter('buildPieKey', function () {\n        var prefix = \"evidence.single.singlePieHistogram.\";\n        return function (anomalyTypeFieldName, postfix) {\n            return prefix + anomalyTypeFieldName + \".chart.\" + postfix;\n        };\n    })\n        .factory('indicatorTypeMapper.pie', [\n        '$filter',\n        'indicatorChartTransitionUtil',\n        function ($filter, indicatorChartTransitionUtil) {\n            return {\n                settings: {\n                    pie: {\n                        params: {\n                            context_type: '{{entityTypeFieldName}}',\n                            context_value: '{{entityName}}',\n                            feature: '{{anomalyTypeFieldName}}',\n                            'function': 'Count'\n                        },\n                        styleSettings: {},\n                        templates: {\n                            titles: {\n                                'Title-1': '{{ anomalyTypeFieldName  | buildPieKey: \\'title\\' ' +\n                                    '| translate: this}}' //\"this\" refer to the scope (the indicator object)'\n                            }\n                        },\n                        sortData: function (data) {\n                            return _.orderBy(data, ['anomaly', 'value'], ['asc', 'desc']);\n                        },\n                        dataAdapter: function (indicator, dataItem) {\n                            var chartItem = {\n                                category: $filter('anomalyTypeFormatter')(dataItem.keys[0], indicator),\n                                originalCategory: dataItem.keys[0],\n                                value: dataItem.value\n                            };\n                            if (dataItem.anomaly) {\n                                chartItem.color = '#CC3300';\n                            }\n                            else {\n                                // Alternate colors\n                                chartItem.color = colors[colorIndex % 2];\n                                colorIndex += 1;\n                            }\n                            return chartItem;\n                        },\n                        handlers: {\n                            \"clickGraphItem\": function (indicator, item) {\n                                indicatorChartTransitionUtil.go('pie', indicator, item);\n                            }\n                        },\n                        chartSettings: {\n                            \"type\": \"pie\",\n                            \"balloonText\": \"[[title]]<br><span style='font-size:14px'><b>[[value]]</b> ([[percents]]%)</span>\",\n                            \"innerRadius\": \"60%\",\n                            \"labelRadius\": 10,\n                            \"pullOutRadius\": 10,\n                            \"radius\": \"40%\",\n                            \"startRadius\": 0,\n                            \"colors\": [\"#0D8ECF\", \"#0D6ECD\"],\n                            \"colorField\": \"color\",\n                            \"hideLabelsPercent\": 10,\n                            \"maxLabelWidth\": 199,\n                            \"pullOutDuration\": 0,\n                            \"pullOutEffect\": \"easeOutSine\",\n                            \"startAlpha\": 1,\n                            \"titleField\": \"category\",\n                            \"valueField\": \"value\",\n                            \"color\": \"#989191\",\n                            \"creditsPosition\": \"bottom-right\",\n                            \"fontFamily\": \"Open Sans\",\n                            \"fontSize\": 12,\n                            \"processCount\": 999,\n                            \"titles\": [\n                                {\n                                    \"id\": \"Title-1\",\n                                    \"fontFamily\": \"'Open Sans', sans-serif\",\n                                    \"color\": \"#666666\",\n                                    \"size\": 12\n                                }\n                            ]\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * Settings for indicator which contains heatmp\n */\n(function () {\n    'use strict';\n    function ColumnRangeFactory() {\n        return {\n            settings: {\n                columnRange: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'timeIntervals'\n                    },\n                    styleSettings: {\n                        height: '28.125rem'\n                    },\n                    chartSettings: {\n                        chart: {\n                            inverted: true\n                        },\n                        yAxis: {\n                            type: 'datetime'\n                        },\n                        series: [{}]\n                    }\n                }\n            }\n        };\n    }\n    ColumnRangeFactory.inject = [];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.columnRange', ColumnRangeFactory);\n}());\n","/**\n * This file contains setting for both column charts in any indicator which display\n * two column charts\n */\n(function () {\n    'use strict';\n    var aggregatedIndicatorsTablesMap = {};\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .filter('ScatterPieTitleFilter', function () {\n        return function (val, propName) {\n            if (val && aggregatedIndicatorsTablesMap[val]) {\n                return aggregatedIndicatorsTablesMap[val][propName];\n            }\n            else if (val) {\n                return val;\n            }\n        };\n    })\n        .factory('indicatorTypeMapper.scatter-pie', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    pie: {\n                        params: commonQueryParams.entityTypeActionCodeCount,\n                        styleSettings: {\n                            height: '24rem'\n                        },\n                        chartSettings: {\n                            title: {\n                                text: '<span class=\"chart-title\">' +\n                                    '{{dataEntitiesIds[0]|entityIdToName}} Actions on {{anomalyValue}} ' +\n                                    '(Last 30 Days)</span>'\n                            },\n                            yAxis: {\n                                title: {\n                                    enabled: true,\n                                    text: '{{anomalyTypeFieldName | ScatterPieTitleFilter: \\'axisYtitlePie\\'}}'\n                                }\n                            },\n                            xAxis: {\n                                title: {\n                                    enabled: true,\n                                    text: '{{anomalyTypeFieldName | ScatterPieTitleFilter: \\'axisXtitlePie\\'}}'\n                                }\n                            },\n                            tooltip: {\n                                headerFormat: '',\n                                formatter: function () {\n                                    return '<b>' + this.point.name + ':</b> ' +\n                                        Highcharts.numberFormat(this.y, 0, '', ',') + '<br/>';\n                                }\n                            }\n                        }\n                    },\n                    scatter: {\n                        params: commonQueryParams.entityTypeCountByTime,\n                        chartSettings: {\n                            title: {\n                                text: '<span class=\"chart-title\">' +\n                                    '{{dataEntitiesIds[0]|entityIdToName}} Actions on ' +\n                                    '{{anomalyValue}} ' +\n                                    '(Last 30 days)</span>'\n                            },\n                            yAxis: {\n                                title: {\n                                    text: '{{anomalyTypeFieldName | ScatterPieTitleFilter: \\'axisYtitleScatter\\'}}'\n                                }\n                            },\n                            tooltip: {\n                                enabled: false\n                            }\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * This file contains setting for both column charts in any indicator which display\n * two column charts\n */\n(function () {\n    'use strict';\n    var aggregatedIndicatorsTablesMap = {};\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .filter('ScatterColumnTitleFilter', function () {\n        return function (val, propName) {\n            if (val && aggregatedIndicatorsTablesMap[val]) {\n                return aggregatedIndicatorsTablesMap[val][propName];\n            }\n            else if (val) {\n                return val;\n            }\n        };\n    })\n        .factory('indicatorTypeMapper.scatter-column', ['$filter',\n        'indicatorTypeMapper.commonQueryParams',\n        function ($filter, commonQueryParams) {\n            return {\n                settings: {\n                    column: {\n                        params: commonQueryParams.entityTypeActionCodeCount,\n                        styleSettings: {\n                            height: '24rem'\n                        },\n                        chartSettings: {\n                            title: {\n                                text: '<span class=\"chart-title\">' +\n                                    '{{dataEntitiesIds[0]|entityIdToName}} Actions on {{anomalyValue}} ' +\n                                    '(Last 30 Days)</span>'\n                            },\n                            yAxis: {\n                                title: {\n                                    enabled: true,\n                                    text: '{{anomalyTypeFieldName | ScatterColumnTitleFilter: \\'axisYtitleColumn\\'}}'\n                                }\n                            },\n                            xAxis: {\n                                title: {\n                                    enabled: true,\n                                    text: '{{anomalyTypeFieldName | ScatterColumnTitleFilter: \\'axisXtitleColumn\\'}}'\n                                }\n                            }\n                        }\n                    },\n                    scatter: {\n                        params: commonQueryParams.entityTypeCountByTime,\n                        styleSettings: {\n                            height: '24rem'\n                        },\n                        chartSettings: {\n                            title: {\n                                text: '<span class=\"chart-title\">' +\n                                    '{{dataEntitiesIds[0]|entityIdToName}} Actions on ' +\n                                    '{{anomalyValue}} ' +\n                                    '(Last 30 days)</span>'\n                            },\n                            yAxis: {\n                                title: {\n                                    text: '{{anomalyTypeFieldName | ScatterColumnTitleFilter: \\'axisYtitleScatter\\'}}'\n                                }\n                            },\n                            tooltip: {\n                                enabled: false\n                            }\n                        }\n                    }\n                }\n            };\n        }]);\n}());\n","/**\n * Settings for indicator which contains heatmp\n */\n(function () {\n    'use strict';\n    function sharedCredentialsFactory() {\n        return {\n            settings: {\n                sharedCredentials: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'timeIntervals'\n                    },\n                    styleSettings: {},\n                    templates: {},\n                    sortData: function (data) {\n                        return _.orderBy(data, ['value'], ['asc']);\n                    },\n                    dataAdapter: function (indicator, dataItem) {\n                        var open = moment(parseInt(dataItem.keys[0], 10)).utc();\n                        var close = moment(parseInt(dataItem.keys[1], 10)).utc();\n                        var chartItem = {\n                            category: dataItem.value,\n                            open: open.hour() + open.minute() / 60,\n                            openDate: open.format('HH:mm:ss'),\n                            close: close.hour() + close.minute() / 60,\n                            closeDate: close.format('HH:mm:ss'),\n                            indicator: indicator\n                        };\n                        return chartItem;\n                    },\n                    handlers: {\n                        \"clickGraphItem\": function (indicator, item) {\n                            // indicatorChartTransitionUtil.go('columnAnomaly', indicator, item);\n                        }\n                    },\n                    chartSettings: {\n                        \"type\": \"serial\",\n                        \"categoryField\": \"category\",\n                        \"rotate\": true,\n                        \"startDuration\": 1,\n                        \"fontFamily\": \"'Open Sans', sans-serif\",\n                        \"categoryAxis\": {\n                            \"gridPosition\": \"start\",\n                            \"axisAlpha\": 0,\n                            \"axisThickness\": 0,\n                            \"gridColor\": \"#989191\",\n                            \"gridThickness\": 0,\n                            \"title\": \"Session Source IP\",\n                            \"titleColor\": \"#989191\",\n                            \"fontFamily\": \"'Open Sans', sans-serif\"\n                        },\n                        \"colors\": [\n                            \"#0D8ECF\"\n                        ],\n                        \"trendLines\": [],\n                        \"graphs\": [\n                            {\n                                \"balloonText\": \"Session Start: <b>[[openDate]]</b><br>Session End: <b>[[closeDate]]</b>\",\n                                \"closeField\": \"close\",\n                                \"colorField\": \"color\",\n                                \"fillAlphas\": 1,\n                                // \"fixedColumnWidth\": 15,\n                                \"columnWidth\": 0.5,\n                                \"fontSize\": 4,\n                                \"id\": \"AmGraph-1\",\n                                \"lineThickness\": 0,\n                                \"negativeFillColors\": \"#FF0000\",\n                                \"openField\": \"open\",\n                                \"title\": \"graph 1\",\n                                \"type\": \"column\"\n                            }\n                        ],\n                        \"guides\": [],\n                        \"valueAxes\": [\n                            {\n                                \"id\": \"ValueAxis-1\",\n                                \"stackType\": \"regular\",\n                                \"axisColor\": \"#BCB5B5\",\n                                \"gridColor\": \"#989191\",\n                                // \"labelFrequency\": 2,\n                                // \"minHorizontalGap\": 10,\n                                // \"minVerticalGap\": 10,\n                                \"showFirstLabel\": true,\n                                \"showLastLabel\": true,\n                                \"title\": \"Time of Day\",\n                                \"titleColor\": \"#989191\",\n                                precision: 2,\n                                labelFunction: function (value) {\n                                    var hours = Math.floor(value);\n                                    var minutes = Math.floor((value % 1) * 60);\n                                    minutes = minutes < 10 ? '0' + minutes : minutes;\n                                    return hours + ':' + minutes;\n                                }\n                            }\n                        ],\n                        \"allLabels\": [],\n                        \"balloon\": {},\n                        \"titles\": [\n                            {\n                                \"color\": \"#989191\",\n                                \"id\": \"Title-1\",\n                                \"size\": 15,\n                                \"text\": \"Concurrent Sessions\",\n                                \"fontFamily\": \"'Open Sans', sans-serif\"\n                            }\n                        ]\n                    }\n                }\n            }\n        };\n    }\n    sharedCredentialsFactory.inject = [];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.sharedCredentials', sharedCredentialsFactory);\n    /**\n     a = {\n    title: {\n        text: 'Overlapping VPN Sessions by Time'\n    }\n    ,\n    yAxis: {\n        title: {\n            text: 'Time'\n        }\n    }\n    ,\n    xAxis: {\n        title: {\n            text: 'Session Source IP'\n        }\n    }\n\n}\n     **/\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.geo-location', [\n        function () {\n            return {\n                settings: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'Count',\n                        num_columns: 4\n                    },\n                    mapSettings: {\n                        type: 'map',\n                        mouseWheelZoomEnabled: true,\n                        projection: 'miller',\n                        imagesSettings: {\n                            balloonText: '<span style=\"font-size:14px;\"><b>[[title]]</b>: [[value]]%</span>',\n                            selectable: false\n                        },\n                        areasSettings: {\n                            selectedColor: '#024d88',\n                            color: '#babdbe',\n                            selectable: false\n                        },\n                        zoomControl: {\n                            top: 1,\n                            buttonSize: window.innerHeight < 700 ? 25 :\n                                window.innerHeight < 1000 ? 30 : 35\n                        },\n                        dataProvider: {\n                            map: 'worldHigh',\n                            getAreasFromMap: true,\n                            zoomLevel: 1,\n                            zoomLatitude: \"\",\n                            zoomLongitude: \"\"\n                        }\n                    }\n                },\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.geo-sequence', [\n        function () {\n            return {\n                settings: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        function: 'Count',\n                        num_columns: 5,\n                        feature: 'country'\n                    },\n                    usePlanes: true,\n                    title: 'Geo Location Sequence Anomaly',\n                    mapSettings: {\n                        type: 'map',\n                        mouseWheelZoomEnabled: true,\n                        projection: 'miller',\n                        imagesSettings: {\n                            balloonText: '<span style=\"font-size:14px;\"><b>[[title]]</b>: [[value]]%</span>',\n                            selectable: false,\n                            color: \"#585869\",\n                            rollOverColor: \"#585869\",\n                            selectedColor: \"#585869\",\n                            pauseDuration: 0.2,\n                            animationDuration: 2.5,\n                            adjustAnimationSpeed: true\n                        },\n                        linesSettings: {\n                            color: \"#FF0000\",\n                            alpha: 0.6\n                        },\n                        areasSettings: {\n                            selectedColor: '#024d88',\n                            color: '#babdbe',\n                            selectable: false\n                        },\n                        zoomControl: {\n                            top: 1,\n                            buttonSize: window.innerHeight < 700 ? 25 :\n                                window.innerHeight < 1000 ? 30 : 35\n                        },\n                        dataProvider: {\n                            map: 'worldHigh',\n                            getAreasFromMap: true,\n                            zoomLevel: 1,\n                            zoomLatitude: \"\",\n                            zoomLongitude: \"\"\n                        }\n                    }\n                },\n            };\n        }]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMapper.lateralMovement', [\n        '$filter',\n        function ($filter) {\n            return {\n                settings: {\n                    params: {\n                        context_type: '{{entityTypeFieldName}}',\n                        context_value: '{{entityName}}',\n                        feature: '{{anomalyTypeFieldName}}',\n                        'function': 'vpnLateralMovement'\n                    },\n                    templates: {},\n                    preProcessData: function (response, indicator) {\n                        var data = response.data;\n                        // create user index list\n                        var usersList = _.map(_.groupBy(data, 'value'), function (userGroup, key) {\n                            return key;\n                        });\n                        // the session item would have two keys\n                        var sessionItems = _.filter(data, function (eventItem) { return eventItem.keys && eventItem.keys.length === 2; });\n                        if (sessionItems && sessionItems.length === 1) {\n                            // pull out the the session item from the usersList and place it in the end of the list\n                            var sessionItem = sessionItems[0];\n                            var userIndex = usersList.indexOf(sessionItem.value);\n                            usersList.splice(userIndex, 1);\n                            usersList.push(sessionItem.value);\n                            // Split session into two event items\n                            _.remove(data, sessionItem);\n                            var startDate = moment(parseInt(sessionItem.keys[0], 10)).utc()\n                                .format(\"MMM D, YYYY, h:mm:ss a\");\n                            var endDate = moment(parseInt(sessionItem.keys[1], 10)).utc()\n                                .format(\"MMM D, YYYY, h:mm:ss a\");\n                            var splitSessionItem1 = _.cloneDeep(sessionItem);\n                            splitSessionItem1.sessionUserIndex = usersList.indexOf(sessionItem.value) + 1;\n                            splitSessionItem1.keys.pop();\n                            splitSessionItem1.additionalInformation.session_start_date = startDate;\n                            splitSessionItem1.bullet = 'triangleRight';\n                            data.push(splitSessionItem1);\n                            var splitSessionItem2 = _.cloneDeep(sessionItem);\n                            splitSessionItem2.keys.shift();\n                            splitSessionItem2.additionalInformation.session_end_date = endDate;\n                            splitSessionItem2.sessionUserIndex = usersList.indexOf(sessionItem.value) + 1;\n                            splitSessionItem2.bullet = 'triangleLeft';\n                            data.push(splitSessionItem2);\n                        }\n                        // Add user index to each of the items in the list\n                        _.each(data, function (eventItem) {\n                            if (!eventItem.sessionUserIndex) {\n                                eventItem.userIndex = usersList.indexOf(eventItem.value) + 1;\n                            }\n                        });\n                        // Convert into list by date with the desired schema\n                        response.data = _.map(response.data, function (eventItem) {\n                            var date = moment(parseInt(eventItem.keys[0], 10));\n                            var dataItem = {\n                                date: new Date(parseInt(eventItem.keys[0], 10)),\n                                formatted_date: date.utc().format(\"MMM D, YYYY, h:mm:ss a\"),\n                                username: eventItem.value,\n                                target_machine: eventItem.additionalInformation.target_machine,\n                                normalized_username: eventItem.additionalInformation.normalized_username,\n                                entity_id: eventItem.additionalInformation.entity_id,\n                                display_name: eventItem.additionalInformation.display_name ||\n                                    eventItem.additionalInformation.normalized_username || eventItem.value,\n                                usersList: usersList,\n                                data_source_id: eventItem.additionalInformation.data_source,\n                                data_source: $filter('entityIdToName')(eventItem.additionalInformation.data_source),\n                                source_machine: eventItem.additionalInformation.source_machine,\n                                event_score: eventItem.additionalInformation.event_score,\n                                country_name: eventItem.additionalInformation.country_name,\n                                local_ip: eventItem.additionalInformation.local_ip,\n                                source_ip: eventItem.additionalInformation.source_ip,\n                                session_end_date: eventItem.additionalInformation.session_end_date,\n                                session_start_date: eventItem.additionalInformation.session_start_date,\n                                bullet: eventItem.bullet\n                            };\n                            if (eventItem.sessionUserIndex) {\n                                dataItem.sessionUserIndex = eventItem.sessionUserIndex;\n                            }\n                            if (eventItem.userIndex) {\n                                dataItem.userIndex = eventItem.userIndex;\n                            }\n                            return dataItem;\n                        });\n                        return response;\n                    },\n                    sortData: function (data) {\n                        return _.orderBy(data, [function (dataItem) { return dataItem.date.valueOf(); }], ['asc']);\n                    },\n                    dataAdapter: function (indicator, dataItem) {\n                        return dataItem;\n                    },\n                    chartSettings: {\n                        \"type\": \"serial\",\n                        \"fontFamily\": \"'Open Sans', sans-serif\",\n                        \"valueAxes\": [{\n                                \"id\": \"v1\",\n                                \"title\": \"Users\",\n                                \"titleColor\": \"#989191\",\n                                \"position\": \"left\",\n                                \"precision\": 0,\n                                \"tickLength\": 1,\n                                \"labelFunction\": function (value, stringValue, axisObject) {\n                                    // return the username as label\n                                    var username = axisObject.data[0].dataContext.usersList[parseInt(stringValue, 10) -\n                                        1];\n                                    var item = _.find(axisObject.data, function (axisData) {\n                                        return axisData.dataContext.username === username;\n                                    });\n                                    return (item && item.dataContext && item.dataContext.display_name) || '';\n                                },\n                                \"stackType\": \"regular\",\n                                \"axisColor\": \"#BCB5B5\",\n                                \"gridColor\": \"#989191\",\n                                \"showFirstLabel\": false\n                            }],\n                        \"graphs\": [{\n                                \"id\": \"g1\",\n                                \"valueAxis\": \"v2\",\n                                \"hideBulletsCount\": 50,\n                                \"lineThickness\": 40,\n                                \"lineColor\": \"#20acd4\",\n                                \"type\": \"smoothedLine\",\n                                \"valueField\": \"sessionUserIndex\",\n                                balloonFunction: function (item) {\n                                    var value = moment(new Date(item.category)).utc()\n                                        .format(\"MMM D, YYYY, h:mm:ss a\");\n                                    var context = item.dataContext;\n                                    var balloonText = \"(\" + context.data_source + \") \" + context.display_name + \" <br>logged on from <span style='color: red;'>\" + context.source_ip + \"</span><br>\";\n                                    if (context.country_name) {\n                                        balloonText += \"originating from \" + context.country_name + \"<br>\";\n                                    }\n                                    if (context.session_start_date) {\n                                        balloonText += \"Start Time: \" + context.session_start_date + \"<br>\";\n                                    }\n                                    if (context.session_end_date) {\n                                        balloonText += \"End Time: \" + context.session_end_date + \"<br>\";\n                                    }\n                                    balloonText += \"Event Score: \" + context.event_score;\n                                    return balloonText;\n                                },\n                                \"bulletField\": \"bullet\",\n                                \"bulletColor\": \"#098cb4\",\n                                \"bulletSize\": 20,\n                            },\n                            {\n                                \"id\": \"g2\",\n                                \"valueAxis\": \"v2\",\n                                \"bullet\": \"diamond\",\n                                \"bulletBorderAlpha\": 1,\n                                \"bulletColor\": \"#FF0000\",\n                                \"bulletSize\": 20,\n                                \"hideBulletsCount\": 50,\n                                \"lineThickness\": 0,\n                                \"lineColor\": \"#ff0000\",\n                                \"type\": \"smoothedLine\",\n                                \"useLineColorForBulletBorder\": true,\n                                \"valueField\": \"userIndex\",\n                                \"balloonText\": \"([[data_source]]) [[display_name]] <br>logged on from <span style='color: red;'>[[source_ip]]</span><br>using [[source_machine]]<br>to [[target_machine]]<br>Event Time: [[formatted_date]]<br>Event Score: [[event_score]]\"\n                            }],\n                        \"categoryField\": \"date\",\n                        \"categoryAxis\": {\n                            \"dashLength\": 1,\n                            \"minorGridEnabled\": true,\n                            \"gridPosition\": \"start\",\n                            \"axisAlpha\": 0,\n                            \"axisThickness\": 0,\n                            \"gridColor\": \"#989191\",\n                            \"gridThickness\": 0,\n                            \"title\": \"\",\n                            \"titleColor\": \"#989191\",\n                            \"parseDates\": false,\n                            \"equalSpacing\": false,\n                            \"labelFunction\": function (stringValue, dateObj) {\n                                return moment(dateObj.dataContext.date).utc().format(\"MMM D HH:mm\");\n                            }\n                        },\n                        \"balloon\": {\n                            \"borderThickness\": 1,\n                            \"shadowAlpha\": 0\n                        },\n                        \"titles\": [\n                            {\n                                \"color\": \"#989191\",\n                                \"id\": \"Title-1\",\n                                \"size\": 15,\n                                \"text\": \"Lateral Movement\"\n                            }\n                        ]\n                    }\n                },\n            };\n        }]);\n}());\n","/**\n *\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var deviceUtilsService;\n            (function (deviceUtilsService) {\n                'use strict';\n                var OTHERS_NAME = 'Others';\n                var DeviceUtilsService = (function () {\n                    function DeviceUtilsService() {\n                    }\n                    /**\n                     * Calculates a device's percent, and store on the device object\n                     * @param {number} sum\n                     * @param {Array<IUserDevice>} device\n                     * @private\n                     */\n                    DeviceUtilsService.prototype._calcDevicePercent = function (sum, device) {\n                        if (sum) {\n                            device.percent = Math.round(device.count / sum * 10000) / 100;\n                        }\n                        else {\n                            device.percent = 0;\n                        }\n                    };\n                    /**\n                     * This method calculate the sum of all count fields on user device,\n                     * and for each device calculate its count / sum * 100 and save it as percentage field on the device\n                     * @param devices\n                     * @returns {IUserDevice[]}\n                     */\n                    DeviceUtilsService.prototype.updatePercentageOnDevice = function (devices) {\n                        // calc sum\n                        var sum = _.sumBy(devices, 'count');\n                        // iterate and calc percent\n                        _.each(devices, this._calcDevicePercent.bind(this, sum));\n                        return devices;\n                    };\n                    /**\n                     * Create and return new device list which not contain the devices with count  = 0\n                     * @param devices\n                     * @returns {T[]}\n                     */\n                    DeviceUtilsService.prototype.removeZeroCount = function (devices) {\n                        return _.filter(devices, function (device) { return device.count > 0; });\n                    };\n                    /**\n                     * Pulls out 'other' member and puts it in the end of the list.\n                     * @param devices\n                     * @private\n                     */\n                    DeviceUtilsService.prototype.repositionOthers = function (devices) {\n                        var pluckIndex = -1;\n                        _.some(devices, function (device, index) {\n                            if (device.deviceName === OTHERS_NAME) {\n                                pluckIndex = index;\n                                return true;\n                            }\n                        });\n                        if (pluckIndex !== -1) {\n                            var device = devices[pluckIndex];\n                            device.deviceName = 'Others';\n                            devices.splice(pluckIndex, 1);\n                            devices.push(device);\n                        }\n                    };\n                    return DeviceUtilsService;\n                }());\n                angular.module('Fortscale.shared.services')\n                    .service('deviceUtilsService', DeviceUtilsService);\n            })(deviceUtilsService = services.deviceUtilsService || (services.deviceUtilsService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * indicator-type.map is an angular factory.\n * It is consumed by indicatorTypeMapper service.\n * Its purpose is to provide a mapper object for indicatorTypeMapper service, so the service will be\n * able to decide which indicator correlates to which indicator type.\n * When an indicator type is ascertained, the type object is then returned to the caller of the\n * indicatorTypeMapper service to be used as the caller sees fit.\n *\n * The type objects are used as required.\n * Each base property on indicatorTypeMap is an indicator type.\n * It must have 'queries' property which is an array of objects. Each of those should be a key-value\n * JSON, and an indicator must qualify all key-values in a query object\n * (effectively an AND expression).\n * Example:\n 'indicator105': {\n                queries: [\n                    {\n                        dataEntitiesIds: ['vpn'],\n                        anomalyTypeFieldName: 'vpn_geo_hopping',\n                        evidenceType: 'Notification'\n                    }\n                ],\n                templateUrl: 'app/layouts/alert/layouts/indicator-templates/singlecolumn.html',\n                settings: {\n                    singleColumn: {\n                        params: entityTypeAnomalyTypeCount,\n                        chartSettings: {\n\n                            title: {\n                                text: 'Countries For User {{entityName}}<br> Last 90 Days'\n                            },\n                            \"series\": [{}]\n                        }\n                    }\n\n                },\n                indicatorClass: 'gen'\n            }\n * In this example an indicator must have a dataEntitiesIds that equals ['vpn'] and\n * anomalyTypeFieldName that equals 'vpn_geo_hopping' and indicatorType that equals 'Notification' in\n * order to qualify to be 'indicator105' type.\n * 'queries' is an array, so an indicator must qualify to any of the objects in 'queries' to qualify\n * (effectively an OR expression).\n *\n * Once a type has been ascertained, the whole object is returned.\n *\n * 'indicatorClass' is used by alert-tab.controller to determine the entire indicator view. (used by\n * goToindicatorTab method).\n *\n * 'template' or 'templateUrl' is used by indicator-tab-overview.controller . It uses the string\n * (either a direct string in template or a derived string from a template url) to build the\n * chart part of the view (if 'gen' class).\n *\n * 'settings' is an object that holds settingIds, where each id holds 'params' 'styleSettings',\n * and 'chartSettings'.\n *\n * 'params' is used as an interpolation base to build the query params. In the above example params\n * is an object called entityTypeAnomalyTypeCount, which is:\n {\n      context_type: '{{entityTypeFieldName}}',\n      context_value: '{{entityName}}',\n      feature: '{{anomalyTypeFieldName}}',\n      'function': 'Count',\n      num_columns: 5\n  }\n * This will be interpolated against the indicator and set in the query params.\n *\n * 'styleSettings' is used to define the style of the chart container (use in ng-style format).\n *\n * 'chartSettings' is handed over to a fs-chart directive which is merged into the typed settings\n * of a chart type (see shared/components/fs-chart)\n *\n * The settingIds are mapped in the html template. for example:\n * (The singlecoulmn template)\n <fs-dashboard-columns>\n <fs-dashboard-column column-span=\"15\">\n <div class=\"loading\" ng-if=\"sourceCountriesColumn.loading\">Loading...</div>\n <fs-indicator-column settings-id=\"singleColumn\"></fs-indicator-column>\n\n </fs-dashboard-column>\n\n </fs-dashboard-columns>\n\n * singleColumn in the 'settings' property on 'indicator105' is mapped to settings-id=\"singleColumn\"\n *\n * This file uses variables to group common occurrences. For example entityTypeAnomalyTypeCount\n * is used as a common param configuration. Many indicator types use this exact configuration so\n * it makes sense to put it in a variable rather then repeat the code.\n */\n(function () {\n    'use strict';\n    function indicatorTypeMapFactory(aggregatedSerialSettings, dualColumnSettings, singlePieChartSettings, scatterColumnChartSettings, sharedCredentialsSettings, aggregatedSerialDataRateSettings, activityTimeAnomalySettings, geoLocationSettings, geoSequenceSettings, lateralMovementSettings) {\n        /**\n         * This object is returned as angular.value. It holds all indicator types. Type can be a single\n         * indicator or a family of indicator, etc.\n         */\n        var indicatorTypeMap = {\n            'tag': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'tag'\n                    }\n                ],\n                indicatorClass: 'tag'\n            },\n            'sharedCredentials': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'VPN_user_creds_share'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/shared-credentials.html',\n                settings: sharedCredentialsSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'singleColumnDataRate': {\n                queries: [\n                    {\n                        dataEntitiesIds: ['vpn_session'],\n                        anomalyTypeFieldName: 'data_bucket',\n                        evidenceType: 'AnomalySingleEvent'\n                    }\n                ],\n                settings: aggregatedSerialDataRateSettings.settings,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/aggregated-serial.html',\n                indicatorClass: 'gen'\n            },\n            'activityTimeAnomaly': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'event_time',\n                        evidenceType: 'AnomalySingleEvent'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/activity-time-anomaly.html',\n                settings: activityTimeAnomalySettings.settings,\n                indicatorClass: 'gen'\n            },\n            'geoLocation': {\n                queries: [\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'country'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/fs-indicator-am-geo-location/fs-indicator-am-geo-location-template.html',\n                settings: geoLocationSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'geoLocationSequence': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'vpn_geo_hopping'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/fs-indicator-am-geo-location/fs-indicator-am-geo-location-template.html',\n                settings: geoSequenceSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'basicTwoHistogramsUser': {\n                queries: [\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'normalized_src_machine'\n                    },\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'normalized_dst_machine'\n                    },\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'action_code'\n                    },\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'db_object'\n                    },\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'db_username'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/dualcolumn.html',\n                settings: dualColumnSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'singlePieHistogram': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'auth_method',\n                        evidenceType: 'AnomalySingleEvent'\n                    },\n                    {\n                        anomalyTypeFieldName: 'failure_code',\n                        evidenceType: 'AnomalySingleEvent'\n                    },\n                    {\n                        anomalyTypeFieldName: 'action_type',\n                        evidenceType: 'AnomalySingleEvent'\n                    },\n                    {\n                        anomalyTypeFieldName: 'status',\n                        evidenceType: 'AnomalySingleEvent'\n                    },\n                    {\n                        evidenceType: 'AnomalySingleEvent',\n                        anomalyTypeFieldName: 'return_code'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/pie.html',\n                settings: singlePieChartSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'aggregatedIndicatorWithTime': {\n                queries: [\n                    {\n                        evidenceType: 'AnomalyAggregatedEvent'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/aggregated-serial.html',\n                settings: aggregatedSerialSettings.settings,\n                indicatorClass: 'gen'\n            },\n            'lateralMovementIndicator': {\n                queries: [\n                    {\n                        anomalyTypeFieldName: 'VPN_user_lateral_movement'\n                    }\n                ],\n                templateUrl: 'app/layouts/user/components/user-indicator/components/indicator-templates/lateral-movement.html',\n                indicatorClass: 'gen',\n                settings: lateralMovementSettings.settings\n            }\n        };\n        return indicatorTypeMap;\n    }\n    indicatorTypeMapFactory.$inject = [\n        'indicatorTypeMapper.aggregated-serial',\n        'indicatorTypeMapper.dual-column',\n        'indicatorTypeMapper.pie',\n        'indicatorTypeMapper.scatter-column',\n        'indicatorTypeMapper.sharedCredentials',\n        'indicatorTypeMapper.aggregated-serial-data-rate',\n        'indicatorTypeMapper.activityTimeAnomaly',\n        'indicatorTypeMapper.geo-location',\n        'indicatorTypeMapper.geo-sequence',\n        'indicatorTypeMapper.lateralMovement'\n    ];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .factory('indicatorTypeMap', indicatorTypeMapFactory);\n}());\n","/**\n * This service is a mapper service. It returns a type from mapObject if any of the queries\n * meet the condition set in the query.\n * queries list is an 'or' list, meaning that if any of the query objects meet the condition,\n * that type will return.\n * Each query object is an 'And' operator, meaning that all conditions must be fulfilled to match.\n *\n */\n(function () {\n    'use strict';\n    // Dependencies\n    var indicatorTypeMap, assert, URLUtils;\n    /**\n     *\n     * @constructor\n     */\n    function IndicatorTypeMapper(_indicatorTypeMap_, _assert_, _URLUtils_) {\n        // Mount dependencies\n        if (!indicatorTypeMap) {\n            indicatorTypeMap = _indicatorTypeMap_;\n        }\n        if (!assert) {\n            assert = _assert_;\n        }\n        if (!URLUtils) {\n            URLUtils = _URLUtils_;\n        }\n    }\n    _.extend(IndicatorTypeMapper.prototype, {\n        _errMsg: 'Fortscale.shared.services.indicatorTypeMapper: indicatorTypeMapper.service: ',\n        /**\n         * Takes an indicator and returns an indicator type by matching against the queries\n         * in the mapObject.\n         * It returns null if no type was found.\n         *\n         * @param {object} indicator\n         * @returns {string | null}\n         */\n        getType: function (indicator) {\n            // Init indicatorType variable to return\n            var indicatorTypeObject = null;\n            // Using 'every' instead of 'each' allows the process to stop by returning false.\n            // false is returned when a match is made.\n            _.every(indicatorTypeMap, function (mapProperty, indicatorType) {\n                // If any of the queries match, the indicatorType is returned.\n                if (_.some(mapProperty.queries, function (query) {\n                    // Iterate through query properties and all must match.\n                    return _.every(query, function (checkValue, checkName) {\n                        return _.isEqualWith(indicator[checkName], checkValue, \n                        // The customizer is needed because when Restangular holds an array\n                        // it treats it as a list and it adds function and properties to the\n                        // array. Worse still, the array is not recognized as array but as\n                        // an object. This causes the _.isEqual to return false even though\n                        // the arrays are equal. So the arrays need to be converted to\n                        // actual arrays.\n                        function (valA, valB) {\n                            // Convert array-like objects to actual arrays.\n                            if (valA.slice && valA.map) {\n                                valA = valA.slice(0);\n                            }\n                            if (valB.slice && valB.map) {\n                                valB = valB.slice(0);\n                            }\n                            return _.isEqual(valA, valB);\n                        });\n                    });\n                })) {\n                    // If _.some has returned true, then a match was made, and indicatorType can be returned.\n                    indicatorTypeObject = indicatorTypeMap[indicatorType];\n                    return false;\n                }\n                return true; // So as not to stop iteration with undefined\n            });\n            return indicatorTypeObject;\n        },\n        /**\n         * Calculates the desired href of an indicator in alerts page.\n         *\n         * @param {string} alertId\n         * @param {object=} indicator\n         * @param {boolean=} shouldPassSearchParams\n         * @param {string=} subRoute\n         * @returns {string}\n         */\n        getTargetUrl: function (alertId, indicator, shouldPassSearchParams, subRoute) {\n            var errMsg = this._errMsg + 'getTargetUrl: ';\n            // Validations\n            assert.isString(alertId, 'alertId', errMsg);\n            assert.isObject(indicator, 'indicator', errMsg, true);\n            // Set defaults\n            if (shouldPassSearchParams === undefined) {\n                shouldPassSearchParams = true;\n            }\n            var targetUrl = '#/alerts/' + alertId;\n            // Get an indicator type\n            var indicatorType = this.getType(indicator);\n            // Build the target url\n            if (indicatorType !== null && !subRoute) {\n                targetUrl += '/' + indicator.id;\n                // Route to 'gen' for general indicators\n                if (indicatorType.indicatorClass === 'gen') {\n                    targetUrl += '/gen/overview';\n                }\n                else if (indicatorType.indicatorClass === 'tag') {\n                    targetUrl += '/tag';\n                }\n            }\n            else if (subRoute) {\n                targetUrl += '/' + subRoute;\n            }\n            if (shouldPassSearchParams) {\n                targetUrl += URLUtils.getSearchQueryString();\n            }\n            return targetUrl;\n        }\n    });\n    IndicatorTypeMapper.$inject = ['indicatorTypeMap', 'assert', 'URLUtils'];\n    angular.module('Fortscale.shared.services.indicatorTypeMapper')\n        .service('indicatorTypeMapper', IndicatorTypeMapper);\n}());\n","(function () {\n    'use strict';\n    function StringUtils() { }\n    _.extend(StringUtils.prototype, {\n        /**\n         * Converts a string to an integer hash\n         *\n         * @param {string} str\n         * @returns {number}\n         */\n        toIntHash: function (str) {\n            var hash = 0, i, chr, len;\n            if (str.length === 0) {\n                return hash;\n            }\n            for (i = 0, len = str.length; i < len; i++) {\n                chr = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + chr;\n                hash |= 0; // Convert to 32bit integer\n            }\n            return hash;\n        },\n        /**\n         * Converts string to a hash in a certain base.\n         *\n         * @param {string} str\n         * @param {integer=} base Will default to 35\n         * @returns {string}\n         */\n        toBaseHash: function (str, base) {\n            base = base || 35;\n            return this.toIntHash(str).toString(base);\n        },\n        // Converts camel case to slug case. Example: convertThis  :  convert-this\n        toSlugCase: function (str) {\n            var rgx = /([A-Z])/g;\n            return str.replace(rgx, function (res) { return '-' + res.toLowerCase(); });\n        }\n    });\n    angular.module('Fortscale.shared.services.stringUtils', [])\n        .service('stringUtils', StringUtils);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.services.modelUtils', []);\n}());\n","(function () {\n    'use strict';\n    function EntityUtils(assert, $http, BASE_URL, fsModals, URLUtils) {\n        this.MINIMAL_OPEN_TIME = 1000;\n        this._validateEntity = function (entity, errMsg) {\n            errMsg = errMsg ? errMsg : '';\n            assert.isObject(entity, 'entity', errMsg);\n            assert.isString(entity.id, 'entityId', errMsg);\n        };\n        /**\n         * Fetches entity id and type and navigates to user overview if the entity is \"User\"\n         * *\n         * @param {String} entityType - alert / coumputer etc...\n         * @param {String} entityId (user ID)\n         */\n        this.navigateToEntityProfile = function (entityType, entityId) {\n            // Go to user overview if entity type is User\n            if (entityType === 'User') {\n                URLUtils.setUrl('user/' + entityId + '/user_overview', false);\n            }\n        };\n        /**\n         * Changes a user's follow state\n         *\n         * @param {object} entity Must be a user\n         * @param {boolean} followState If true user followed will be set to true,\n         * @param {function=} finalCb A callback function that is invoked at the end of the chain\n         * @param {function=} errorCb A callback function that is invoked on error\n         * otherwise to false.\n         */\n        this.changeUserFollowState = function (entity, followState, finalCb, errorCb) {\n            var ctrl = this;\n            var processPopup, state, status;\n            // Validations\n            ctrl._validateEntity(entity);\n            // Flow methods:\n            // Changes the state of followed flag on the user\n            function setUserFollowedState() {\n                entity.followed = state;\n            }\n            // Closes the processing modal in minimal time\n            function closeModalInMinialTime() {\n                return fsModals.minimalClose(processPopup, openTime, ctrl.MINIMAL_OPEN_TIME);\n            }\n            // Opens a success modal\n            function openSuccessModal() {\n                return fsModals.openTimedPopup({\n                    title: 'Success',\n                    text: 'User is now ' + status + '.',\n                    topColor: 'green'\n                });\n            }\n            // Opens an error modal\n            function openErrorModal() {\n                return fsModals.openTimedPopup({\n                    title: 'Server error',\n                    text: 'There was a server error. Please try again later.',\n                    topColor: 'red'\n                });\n            }\n            // Returns the entity\n            function returnEntity() {\n                return entity;\n            }\n            // Sets defaults to call backs\n            finalCb = finalCb || returnEntity;\n            errorCb = errorCb || function () {\n                closeModalInMinialTime()\n                    .then(openErrorModal);\n            };\n            // assignments\n            state = !!followState;\n            status = state ? 'followed' : 'unfollowed';\n            // Opens a processing modal\n            processPopup = fsModals\n                .openProcessingPopup('Processing', 'Changing user status to ' + status + '.');\n            // Open time is now\n            var openTime = Date.now().valueOf();\n            // Change the user's followed state on the server\n            return $http.get(BASE_URL + '/analyst/followUser', {\n                params: {\n                    follow: state,\n                    userId: entity.id\n                }\n            })\n                .then(closeModalInMinialTime)\n                .then(setUserFollowedState)\n                .then(openSuccessModal)\n                .then(returnEntity)\n                .then(finalCb)\n                .catch(errorCb);\n        };\n    }\n    EntityUtils.$inject = ['assert', '$http', 'BASE_URL', 'fsModals', 'URLUtils'];\n    angular.module('Fortscale.shared.services.modelUtils')\n        .service('entityUtils', EntityUtils);\n}());\n","(function () {\n    'use strict';\n    function UserUtils(BASE_URL, $http, assert, appConfig, $cacheFactory, $state, $log) {\n        this.BASE_URL = BASE_URL;\n        this.$http = $http;\n        this.assert = assert;\n        this.appConfig = appConfig;\n        this.$cacheFactory = $cacheFactory;\n        this.$state = $state;\n        this.$log = $log;\n    }\n    UserUtils.$inject = ['BASE_URL', '$http', 'assert', 'appConfig', '$cacheFactory', '$state', '$log'];\n    /**\n     * Takes the order from appConfig and tries to find a username match.\n     *\n     * @param user\n     * @returns {*}\n     */\n    UserUtils.prototype.getFallBackDisplayNames = function (user) {\n        // Set default value\n        var fallbackDisplayName = user.id;\n        // Get the default order value and convert to list of properties\n        var propsCSV = this.appConfig.getConfigValue('default', 'userNameFallbackOrder');\n        var props;\n        if (propsCSV) {\n            props = propsCSV.split(',');\n        }\n        else {\n            props = ['id'];\n        }\n        // Iterate through list of properties and return the first value found on User\n        _.some(props, function (prop) {\n            var propTrim = prop.trim();\n            if (user[propTrim] && user[propTrim] !== '') {\n                fallbackDisplayName = user[propTrim];\n                return true;\n            }\n        });\n        // Return the value\n        return fallbackDisplayName;\n    };\n    /**\n     * Sets fall back display name property. displayName or noDomainUsername or username\n     *\n     * @param {*} user\n     * @private\n     */\n    UserUtils.prototype._setFallBackDisplayName = function (user) {\n        user.fallBackDisplayName = this.getFallBackDisplayNames(user);\n    };\n    /**\n     * Sets fall back display name property for all users. displayName or noDomainUsername or username\n     *\n     * @param {array<{displayName: string=, noDomainUsername: string=, username:string}>} users\n     */\n    UserUtils.prototype.setFallBackDisplayNames = function (users) {\n        _.each(users, _.bind(this._setFallBackDisplayName, this));\n    };\n    /**\n     * Prevent duplicated display names for a single user and its duplicates for any list of users.\n     *\n     * @param {{fallBackDisplayName: string, username: string}} user\n     * @param {number} index\n     * @param {array<{fallBackDisplayName: string, username: string}>} users\n     * @private\n     */\n    UserUtils.prototype._preventUserDisplayNameDuplication = function (user, index, users) {\n        // Create duplications list\n        var duplications = _.filter(users.slice(index), function (itUser) {\n            return itUser.fallBackDisplayName === user.fallBackDisplayName;\n        });\n        // If duplications list's length is greater than one, duplications exists and should be handled.\n        if (duplications.length > 1) {\n            // Handle duplications by adding username in braces.\n            _.each(duplications, function (dupUser) {\n                dupUser.fallBackDisplayName += ' (' + dupUser.username + ')';\n            });\n        }\n    };\n    /**\n     * Prevent duplicated display names in any list of users.\n     *\n     * @param {array<{displayName: string=, noDomainUsername: string=, username:string}>} users\n     */\n    UserUtils.prototype.preventFallBackDisplayNameDuplications = function (users) {\n        _.each(users, this._preventUserDisplayNameDuplication, this);\n    };\n    /**\n     *\n     * @param {string} userIds\n     * @returns {Promise<T>|*|Promise.<T>|IPromise<TResult>}\n     */\n    UserUtils.prototype.getUsersDetails = function (userIds) {\n        var _this = this;\n        // validate user ids\n        _.each(userIds, function (userId) {\n            _this.assert.isString(userId, 'userId', 'UserUtilsService: getUsersDetails: ');\n        });\n        // fetch user details\n        return this.$http.get(this.BASE_URL + \"/user/\" + userIds.join(',') + \"/details\")\n            .then(function (res) {\n            if (!res.data || !res.data.data) {\n                console.error('UserUtilsService: getUsersDetails: Server response does not have data.', res);\n                return [];\n            }\n            return res.data.data;\n        })\n            .catch(function (err) {\n            console.error('UserUtilsService: getUsersDetails: Server response error.', err);\n            return [];\n        });\n    };\n    /**\n     * Returns a psomise that is resolved on system user tags groups.\n     *\n     * @returns {Promise<*>}\n     */\n    UserUtils.prototype.getUsersTagsCount = function () {\n        return this.$http.get(this.BASE_URL + \"/user/usersTagsCount\")\n            .then(function (res) {\n            // Validate data\n            if (!res.data || !res.data.data) {\n                console.error('UserUtilsService: getUsersTagsCount: Server response does not have data.', res);\n                return {};\n            }\n            return _.keyBy(res.data.data, 'key');\n        })\n            .catch(function (err) {\n            console.error('UserUtilsService: getUsersTagsCount: Server response error.', err);\n            return {};\n        });\n    };\n    UserUtils.prototype.getUserAddress = function (user) {\n        var adressItems = [];\n        var addressKeys = ['streetAddress', 'adL', 'adC'];\n        _.each(addressKeys, function (addressKey) {\n            if (user[addressKey]) {\n                adressItems.push(user[addressKey]);\n            }\n        });\n        return adressItems.join(', ');\n    };\n    UserUtils.prototype.setFullAddress = function (user, addressKey) {\n        addressKey = addressKey || 'fullAddress';\n        user[addressKey] = this.getUserAddress(user);\n    };\n    UserUtils.prototype.setUsersFullAddress = function (users, addressKey) {\n        var _this = this;\n        _.each(users, function (user) {\n            _this.setFullAddress(user, addressKey);\n        });\n    };\n    UserUtils.prototype.getUserByUsername = function (username) {\n        return this.$http.get(this.BASE_URL + \"/user\", {\n            params: {\n                page: 1,\n                size: 1,\n                search_field_contains: username\n            }\n        })\n            .then(function (res) {\n            return res.data.data[0];\n        });\n    };\n    angular.module('Fortscale.shared.services.modelUtils')\n        .service('userUtils', UserUtils);\n}());\n","(function () {\n    'use strict';\n    var CLOSE_POPUP_DEFAULT_TIME = 3000;\n    function FsModals($rootScope, $modal, $timeout, $q) {\n        /**\n         * Closes a modal. The modal will be opened for the minimal time provided.\n         * @example fsModals.minimalClose(modalInstance, Date.now().valueOf(), 1000);\n         *\n         * @param {object} modal\n         * @param {number} openTime\n         * @param {number} minimalTime\n         * @param {object=} rslv\n         * @param {object=} rjct\n         * @returns {Promise}\n         */\n        this.minimalClose = function (modal, openTime, minimalTime, rslv, rjct) {\n            // Returns a promise that is resolved or rejected when modal closes.\n            return $q(function (resolve, reject) {\n                // When it is time to close, close or dismiss and resolve or reject the promise\n                function conclude() {\n                    if (!rjct) {\n                        modal.close(rslv);\n                        resolve(rslv);\n                    }\n                    else {\n                        modal.dismiss(rjct);\n                        reject(rslv);\n                    }\n                }\n                // How much time has passed from openTime until now\n                var timePassed = Date.now().valueOf() - openTime;\n                // If the time passed is less then the minimal time, use timeout to fill extra time,\n                // otherwise conclude now.\n                if (timePassed < minimalTime) {\n                    $timeout(function () {\n                        conclude();\n                    }, minimalTime - timePassed);\n                }\n                else {\n                    conclude();\n                }\n            });\n        };\n        /**\n         * Opens a \"processing\" modal.\n         *\n         * @param {string} title\n         * @param {string} text\n         * @returns {*}\n         */\n        this.openProcessingPopup = function (title, text) {\n            var scope = $rootScope.$new();\n            scope.loadingModal = {\n                title: title,\n                text: text\n            };\n            return $modal.open({\n                animation: true,\n                templateUrl: 'app/shared/services/fs-modals/layouts/processing.view.html',\n                scope: scope,\n                windowClass: 'loading-modal-container'\n            });\n        };\n        /**\n         * Opened a timed popup that closes after closeTime has passed\n         *\n         * @param {{title: string=, text: string=, imageSrc: string=, topColor: string=, closeTime: number=}} config\n         * @returns {*}\n         */\n        this.openTimedPopup = function (config) {\n            var scope = $rootScope.$new();\n            var windowClass = 'timed-popup-container';\n            // Create a scope\n            scope.popup = {\n                title: config.title,\n                text: config.text,\n                imageSrc: config.imageSrc\n            };\n            // Open the modal\n            var popup = $modal.open({\n                animation: true,\n                templateUrl: 'app/shared/services/fs-modals/layouts/timed-popup.view.html',\n                scope: scope,\n                windowClass: windowClass\n            });\n            // Determine the duration of the popup open time\n            var closeTime = config.closeTime || CLOSE_POPUP_DEFAULT_TIME;\n            // Create a tentative timeout to close the popup\n            $timeout(function () {\n                if (popup) {\n                    closePopup();\n                }\n            }, closeTime);\n            // Popup close function\n            function closePopup() {\n                popup.close();\n                // Cleanup\n                popup = null;\n                window.removeEventListener('click', closePopup);\n            }\n            // Close on click event listener\n            window.addEventListener('click', closePopup);\n            // Return the popup instance\n            return popup;\n        };\n        /**\n         * Opened a popup with \"Ok\" and \"Cancel\" buttons\n         *\n         * @param {{title: string=, text: string=}} config\n         * @returns {*}\n         */\n        this.openOkCancelPopup = function (config) {\n            var scope = $rootScope.$new();\n            var windowClass = 'ok-cancel-popup-container';\n            var popup;\n            function modalClose() {\n                popup.close();\n            }\n            function modalDismiss() {\n                popup.dismiss();\n            }\n            // Create a scope\n            scope.modalScope = {\n                title: config.title,\n                clickCancel: modalDismiss,\n                clickOk: modalClose\n            };\n            // Open the modal\n            popup = $modal.open({\n                animation: true,\n                templateUrl: 'app/shared/services/fs-modals/layouts/ok-cancel.view.html',\n                scope: scope,\n                windowClass: windowClass\n            });\n            return popup.result;\n        };\n        /**\n         * Opened a popup with \"Ok\" button\n         *\n         * @param {{title: string=}} config\n         * @returns {*}\n         */\n        this.openOkPopup = function (config) {\n            var scope = $rootScope.$new();\n            var windowClass = 'ok-popup-container';\n            var popup;\n            function modalClose() {\n                popup.close();\n            }\n            // Create a scope\n            scope.modalScope = {\n                title: config.title,\n                clickOk: modalClose\n            };\n            // Open the modal\n            popup = $modal.open({\n                animation: true,\n                templateUrl: 'app/shared/services/fs-modals/layouts/ok.view.html',\n                scope: scope,\n                windowClass: windowClass\n            });\n            return popup.result;\n        };\n    }\n    FsModals.$inject = ['$rootScope', '$modal', '$timeout', '$q'];\n    angular.module('Fortscale.shared.services.fsModals', [])\n        .service('fsModals', FsModals);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var fsNanobarAutomation;\n            (function (fsNanobarAutomation) {\n                'use strict';\n                var ERR_MSG = 'Fortscale.shared.services.fsNanobarAutomation: ';\n                var NanobarAutomation = (function () {\n                    function NanobarAutomation(_nanobarCtrl) {\n                        this._nanobarCtrl = _nanobarCtrl;\n                        this._ticks = 0;\n                        this._tickIndex = 0;\n                    }\n                    NanobarAutomation.prototype._updateProgress = function () {\n                        this._tickIndex += 1;\n                        if (this._tickIndex > this._ticks) {\n                            this._tickIndex = this._ticks;\n                        }\n                        this._nanobarCtrl.updateProgress((this._tickIndex / this._ticks * 100) || 0);\n                    };\n                    NanobarAutomation.prototype.addPromise = function (promise, doNotUpdateOnError) {\n                        var _this = this;\n                        if (this._ticks === 0) {\n                            this._ticks = 2;\n                            this._updateProgress();\n                        }\n                        else {\n                            this._ticks += 1;\n                        }\n                        return promise\n                            .then(function () {\n                            _this._updateProgress();\n                        })\n                            .catch(function (err) {\n                            if (!doNotUpdateOnError) {\n                                _this._updateProgress();\n                            }\n                            console.error(err);\n                        });\n                    };\n                    NanobarAutomation.prototype.close = function () {\n                        this._tickIndex = this._ticks;\n                        this._nanobarCtrl.updateProgress(this._ticks / this._tickIndex * 100);\n                    };\n                    NanobarAutomation.prototype.reset = function () {\n                        this._ticks = 0;\n                        this._tickIndex = 0;\n                    };\n                    return NanobarAutomation;\n                }());\n                var NanobarAutomationService = (function () {\n                    function NanobarAutomationService() {\n                        this._nanobars = {};\n                        this._promiseQue = {};\n                    }\n                    NanobarAutomationService.prototype._getNanobar = function (nanobarId) {\n                        return this._nanobars[nanobarId] || null;\n                    };\n                    NanobarAutomationService.prototype.addNanobar = function (nanobarId, nanobarCtrl) {\n                        this._nanobars[nanobarId] = new NanobarAutomation(nanobarCtrl);\n                        if (this._promiseQue[nanobarId] && this._promiseQue[nanobarId].length) {\n                            this.addPromises(nanobarId, this._promiseQue[nanobarId]);\n                            this._promiseQue[nanobarId] = null;\n                        }\n                    };\n                    NanobarAutomationService.prototype.destroyNanobar = function (nanobarId) {\n                        var nanobar = this._getNanobar(nanobarId);\n                        if (!nanobar) {\n                            console.error(ERR_MSG + 'Nanobar id does not point to a valid nanobar.');\n                        }\n                        nanobar.close();\n                        this._nanobars[nanobarId] = null;\n                    };\n                    NanobarAutomationService.prototype.addPromise = function (nanobarId, promise, doNotUpdateOnError) {\n                        if (doNotUpdateOnError === void 0) { doNotUpdateOnError = false; }\n                        var nanobar = this._getNanobar(nanobarId);\n                        if (nanobar) {\n                            return nanobar.addPromise(promise, doNotUpdateOnError);\n                        }\n                        else {\n                            this._promiseQue[nanobarId] = this._promiseQue[nanobarId] || [];\n                            this._promiseQue[nanobarId].push(promise);\n                        }\n                    };\n                    NanobarAutomationService.prototype.addPromises = function (nanobarId, promises, doNotUpdateOnError) {\n                        var _this = this;\n                        if (doNotUpdateOnError === void 0) { doNotUpdateOnError = false; }\n                        return _.map(promises, function (promise) {\n                            return _this.addPromise(nanobarId, promise, doNotUpdateOnError);\n                        });\n                    };\n                    NanobarAutomationService.prototype.reset = function (nanobarId) {\n                        var nanobar = this._getNanobar(nanobarId);\n                        if (nanobar) {\n                            nanobar.reset();\n                        }\n                    };\n                    return NanobarAutomationService;\n                }());\n                angular.module('Fortscale.shared.services.fsNanobarAutomation', [])\n                    .service('fsNanobarAutomationService', NanobarAutomationService);\n            })(fsNanobarAutomation = services.fsNanobarAutomation || (services.fsNanobarAutomation = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function FsIndexedDBService($q) {\n        var service = this;\n        /**\n         * Cross platform\n         */\n        service.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n        service.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n        service.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n        service.log = console.log.bind(console);\n        service.error = console.error.bind(console);\n        /**\n         * Standard handler for a request. Adds success, complete, and error failures.\n         *\n         * @param {*} req\n         * @param {function} resolve\n         * @param {function} reject\n         * @private\n         */\n        service._standardPromiseHandler = function (req, resolve, reject) {\n            req.addEventListener('success', function (res) { return resolve(res); });\n            req.addEventListener('complete', function (res) { return resolve(res); });\n            req.addEventListener('error', function (err) {\n                service.error(err);\n                reject(err);\n            });\n        };\n        /**\n         * Returns a specific store (or null if no transaction)\n         * @param {IDBDatabase} db\n         * @param {string} objectStoreName\n         * @param {function} resolve\n         * @param {function} reject\n         * @param {string} errMsg\n         * @returns {IDBObjectStore|null}\n         * @private\n         */\n        service._getStore = function (db, objectStoreName, resolve, reject, errMsg) {\n            var transaction = service.getTransaction(db, objectStoreName);\n            // Validate transaction was made successfully. If not, log and reject promise.\n            if (!transaction) {\n                service.error(errMsg);\n                reject(new Error(errMsg));\n                return null;\n            }\n            service._standardPromiseHandler(transaction, resolve, reject);\n            return transaction.objectStore(objectStoreName);\n        };\n        /**\n         * Opens an existing database, or creates a new one for a specific table (dbStore).\n         *\n         * @param {string} dbName\n         * @param {string} dbStoreName\n         * @param {string} dbStoreConfig\n         * @param {Array<{indexName: string, keyPath: string, options: {}=}>} indices\n         * @param {number} rev\n         * @returns {Promise}\n         */\n        service.openDb = function (dbName, dbStoreName, dbStoreConfig, indices, rev) {\n            // Set defaults\n            dbStoreConfig = dbStoreConfig || {};\n            indices = indices || [];\n            rev = rev || 1;\n            // Create a promise\n            return $q(function (resolve, reject) {\n                var req = service.indexedDB.open(dbName, rev);\n                service._standardPromiseHandler(req, resolve, reject);\n                /**\n                 * Handler for db upgrade. Will fire when db doesn't exists or revolution is higher than current.\n                 * @param evt\n                 */\n                req.onupgradeneeded = function (evt) {\n                    // get the db\n                    var db = evt.currentTarget.result;\n                    try {\n                        // delete the old store\n                        db.deleteObjectStore(dbStoreName);\n                    }\n                    catch (err) {\n                    }\n                    try {\n                        // Create a new store\n                        var objectStore = db.createObjectStore(dbStoreName, dbStoreConfig);\n                        // Add indices\n                        _.each(indices, function (indexObj) {\n                            objectStore.createIndex(indexObj.indexName, indexObj.keyPath, indexObj.options || {});\n                        });\n                    }\n                    catch (err) {\n                        service.error(err);\n                        throw err;\n                    }\n                };\n            })\n                .then(function (evt) { return evt.target.result; })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n        /**\n         * Deletes a database\n         *\n         * @param {string} dbName\n         * @returns {*}\n         */\n        service.deleteDB = function (dbName) {\n            return $q(function (resolve, reject) {\n                var req = service.indexedDB.deleteDatabase(dbName);\n                service._standardPromiseHandler(req, resolve, reject);\n            })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n        /**\n         * Returns a transaction, or null if transaction was unsuccessful\n         * @param {IDBDatabase} db\n         * @param {string} objectStoreName\n         * @returns {IDBTransaction|null}\n         */\n        service.getTransaction = function (db, objectStoreName) {\n            try {\n                return db.transaction([objectStoreName], 'readwrite');\n            }\n            catch (err) {\n                service.error(err);\n                return null;\n            }\n        };\n        /**\n         * Adds an object to a store\n         *\n         * @param {IDBDatabase} db\n         * @param {string} objectStoreName\n         * @param {{}} obj\n         * @returns {Promise}\n         */\n        service.addObject = function (db, objectStoreName, obj) {\n            return $q(function (resolve, reject) {\n                var errMsg = 'FsIndexedDBService: addObject: No transaction';\n                // get object store\n                var objectStore = service._getStore(db, objectStoreName, resolve, reject, errMsg);\n                if (!objectStore) {\n                    return reject(errMsg);\n                }\n                // add the object to store\n                var request = objectStore.add(obj);\n                // log on any error in request\n                request.onerror = function (err) {\n                    service.error(err);\n                };\n            })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n        /**\n         * Counts the number of objects in a store by index\n         * @param {IDBDatabase} db\n         * @param {string} objectStoreName\n         * @param {string=} indexName\n         * @returns {Promise}\n         */\n        service.count = function (db, objectStoreName, indexName) {\n            var countRequest;\n            return $q(function (resolve, reject) {\n                var errMsg = 'FsIndexedDBService: count: No transaction';\n                // get object store\n                var objectStore = service._getStore(db, objectStoreName, resolve, reject, errMsg);\n                if (!objectStore) {\n                    return reject(errMsg);\n                }\n                // get index (indexName either received or the first index in store)\n                var index = objectStore.index(indexName || objectStore.indexNames[0]);\n                // count the item in the store\n                countRequest = index.count();\n            })\n                .then(function () {\n                return countRequest.result;\n            })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n        /**\n         * Gets all items from a store.\n         *\n         * @param {IDBDatabase} db\n         * @param {string} objectStoreName\n         * @returns {Promise|*}\n         */\n        service.findAll = function (db, objectStoreName) {\n            return $q(function (resolve, reject) {\n                var transaction = db.transaction(objectStoreName, service.IDBTransaction.READ_ONLY);\n                var store = transaction.objectStore(objectStoreName);\n                var items = [];\n                service._standardPromiseHandler(transaction, function () { return resolve(items); }, reject);\n                var cursorRequest = store.openCursor();\n                cursorRequest.onerror = function (err) {\n                    service.error(err);\n                };\n                cursorRequest.onsuccess = function (evt) {\n                    var cursor = evt.target.result;\n                    if (cursor) {\n                        items.push(cursor.value);\n                        cursor.continue();\n                    }\n                };\n            })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n        service.deleteAll = function (db, objectStoreName) {\n            var errMsg = 'FsIndexedDBService: deleteAll: ';\n            return $q(function (resolve, reject) {\n                // get object store\n                var objectStore = service._getStore(db, objectStoreName, resolve, reject, errMsg);\n                if (!objectStore) {\n                    return reject(errMsg);\n                }\n                // add the object to store\n                var request = objectStore.clear();\n                // log on any error in request\n                request.onerror = function (err) {\n                    throw err;\n                };\n            })\n                .catch(function (err) {\n                service.error(err);\n                throw err;\n            });\n        };\n    }\n    FsIndexedDBService.$inject = ['$q'];\n    angular.module('Fortscale.shared.services.fsIndexedDBService', [])\n        .service('fsIndexedDBService', FsIndexedDBService);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    (function () {\n        'use strict';\n        var IndicatorErrorCodesService = (function () {\n            function IndicatorErrorCodesService(assert) {\n                this.assert = assert;\n                // Holds the error codes map\n                this._errorCodesMap = new Map();\n                // Holds the error message for validations\n                this._errorMsg = 'IndicatorErrorCodesService: ';\n            }\n            /**\n             * Gets the errors object that relates to the data entity id\n             * @param dataEntityId\n             * @private\n             */\n            IndicatorErrorCodesService.prototype._getErrorsObject = function (dataEntityId) {\n                var errorsObject = this._errorCodesMap.get(dataEntityId);\n                return errorsObject || null;\n            };\n            /**\n             * Adds an error object to error object map\n             * @param dataEntityId\n             * @param errorCodesObject\n             */\n            IndicatorErrorCodesService.prototype.addErrorObject = function (dataEntityId, errorCodesObject) {\n                // Validations\n                var errMsg = this._errorMsg + \"addErrorObject: \";\n                this.assert.isString(dataEntityId, 'dataEntityId', errMsg);\n                this.assert.isObject(errorCodesObject, 'errorCodesObject', errMsg);\n                // Add error codes object\n                this._errorCodesMap.set(dataEntityId, errorCodesObject);\n            };\n            /**\n             * Returns a prettified error code if supplied properties are correct,\n             * otherwise the original errorCode is returned.\n             *\n             * @param dataEntityId\n             * @param errorCode\n             * @returns {string}\n             */\n            IndicatorErrorCodesService.prototype.getDisplayMessage = function (dataEntityId, errorCode) {\n                // Validations\n                var errMsg = this._errorMsg + \"getDisplayMessage: \";\n                this.assert.isString(dataEntityId, 'dataEntityId', errMsg);\n                this.assert.isString(errorCode, 'errorCode', errMsg);\n                // Get the error object\n                var errorObject = this._getErrorsObject(dataEntityId);\n                if (errorObject) {\n                    // Get the error message treating the errorCode as string\n                    var errorDisplayObject = errorObject[errorCode];\n                    // If not found try the errorCode as HEX\n                    if (_.isUndefined(errorDisplayObject)) {\n                        errorDisplayObject = errorObject[parseInt(errorCode)];\n                    }\n                    return errorDisplayObject ? errorDisplayObject.displayMessage : errorCode;\n                }\n                // Return null if no errorObject\n                return errorCode;\n            };\n            IndicatorErrorCodesService.NAME_SPACE = 'fsIndicatorErrorCodes';\n            IndicatorErrorCodesService.$inject = ['assert'];\n            return IndicatorErrorCodesService;\n        }());\n        angular.module('Fortscale.shared.services.fsIndicatorErrorCodes', [])\n            .service('fsIndicatorErrorCodes', IndicatorErrorCodesService);\n    }());\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    (function () {\n        'use strict';\n        var NTLMErrorCodes = {\n            0: {\n                \"description\": \"Success\",\n                \"displayMessage\": \"Success\"\n            },\n            3221225572: {\n                \"description\": \"user name does not exist\",\n                \"displayMessage\": \"Username doesn't exist\"\n            },\n            3221225578: {\n                \"description\": \"user name is correct but the password is wrong\",\n                \"displayMessage\": \"Wrong password\"\n            },\n            3221226036: {\n                \"description\": \"user is currently locked out\",\n                \"displayMessage\": \"User is locked out\"\n            },\n            3221225586: {\n                \"description\": \"account is currently disabled\",\n                \"displayMessage\": \"Account is disabled\"\n            },\n            3221225583: {\n                \"description\": \"user tried to logon outside his day of week or time of day restrictions\",\n                \"displayMessage\": \"Logon day/time restrictions\"\n            },\n            3221225584: {\n                \"description\": \"workstation restriction\",\n                \"displayMessage\": \"Workstation restriction\"\n            },\n            3221225875: {\n                \"description\": \"account expiration\",\n                \"displayMessage\": \"Account expiration\"\n            },\n            3221225585: {\n                \"description\": \"expired password\",\n                \"displayMessage\": \"Expired password\"\n            },\n            3221226020: {\n                \"description\": \"user is required to change password at next logon\",\n                \"displayMessage\": \"Change password required\"\n            },\n            3221226021: {\n                \"description\": \"evidently a bug in Windows and not a risk\",\n                \"displayMessage\": \"Windows issue\"\n            }\n        };\n        angular.module('Fortscale.shared.services.fsIndicatorErrorCodes')\n            .run(['fsIndicatorErrorCodes',\n            function (fsIndicatorErrorCodes) {\n                fsIndicatorErrorCodes.addErrorObject('ntlm', NTLMErrorCodes);\n            }]);\n    }());\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    (function () {\n        'use strict';\n        var KerberosErrorCodes = {\n            0x1: {\n                \"description\": \"Client's entry in KDC database has expired\",\n                \"displayMessage\": \"Client's entry in KDC database has expired\"\n            },\n            0x2: {\n                \"description\": \"Server's entry in KDC database has expired\",\n                \"displayMessage\": \"Server's entry in KDC database has expired\"\n            },\n            0x3: {\n                \"description\": \"Requested Kerberos version number not supported\",\n                \"displayMessage\": \"Requested Kerberos version number not supported\"\n            },\n            0x4: {\n                \"description\": \"Client's key encrypted in old master key\",\n                \"displayMessage\": \"Client's key encrypted in old master key\"\n            },\n            0x5: {\n                \"description\": \"Server's key encrypted in old master key\",\n                \"displayMessage\": \"Server's key encrypted in old master key\"\n            },\n            0x6: {\n                \"description\": \"Client not found in Kerberos database\",\n                \"displayMessage\": \"Client not found in Kerberos database\"\n            },\n            0x7: {\n                \"description\": \"Server not found in Kerberos database\",\n                \"displayMessage\": \"Server not found in Kerberos database\"\n            },\n            0x8: {\n                \"description\": \"Multiple principal entries in KDC database\",\n                \"displayMessage\": \"Multiple principal entries in KDC database\"\n            },\n            0x9: {\n                \"description\": \"The client or server has a null key (master key)\",\n                \"displayMessage\": \"The client or server has a null key (master key)\"\n            },\n            0xA: {\n                \"description\": \"Ticket (TGT) not eligible for postdating\",\n                \"displayMessage\": \"Ticket (TGT) not eligible for postdating\"\n            },\n            0xB: {\n                \"description\": \"Requested start time is later than end time\",\n                \"displayMessage\": \"Requested start time is later than end time\"\n            },\n            0xC: {\n                \"description\": \"KDC policy rejects request\",\n                \"displayMessage\": \"KDC policy rejects request\"\n            },\n            0xD: {\n                \"description\": \"KDC cannot accommodate requested option\",\n                \"displayMessage\": \"KDC cannot accommodate requested option\"\n            },\n            0xE: {\n                \"description\": \"KDC has no support for encryption type\",\n                \"displayMessage\": \"KDC has no support for encryption type\"\n            },\n            0xF: {\n                \"description\": \"KDC has no support for checksum type\",\n                \"displayMessage\": \"KDC has no support for checksum type\"\n            },\n            0x10: {\n                \"description\": \"KDC has no support for PADATA type (pre-authentication data)\",\n                \"displayMessage\": \"KDC has no support for PADATA type\"\n            },\n            0x11: {\n                \"description\": \"KDC has no support for transited type\",\n                \"displayMessage\": \"KDC has no support for transited type\"\n            },\n            0x12: {\n                \"description\": \"Client’s credentials have been revoked\",\n                \"displayMessage\": \"Client’s credentials have been revoked\"\n            },\n            0x13: {\n                \"description\": \"Credentials for server have been revoked\",\n                \"displayMessage\": \"Credentials for server have been revoked\"\n            },\n            0x14: {\n                \"description\": \"TGT has been revoked\",\n                \"displayMessage\": \"TGT has been revoked\"\n            },\n            0x15: {\n                \"description\": \"Client not yet valid—try again later\",\n                \"displayMessage\": \"Client not yet valid\"\n            },\n            0x16: {\n                \"description\": \"Server not yet valid—try again later\",\n                \"displayMessage\": \"Server not yet valid\"\n            },\n            0x17: {\n                \"description\": \"Password has expired—change password to reset\",\n                \"displayMessage\": \"Password has expired\"\n            },\n            0x18: {\n                \"description\": \"Pre-authentication information was invalid\",\n                \"displayMessage\": \"Pre-authentication information was invalid\"\n            },\n            0x19: {\n                \"description\": \"Additional preauthentication required\",\n                \"displayMessage\": \"Additional preauthentication required\"\n            },\n            0x1A: {\n                \"description\": \"KDC does not know about the requested server\",\n                \"displayMessage\": \"KDC does not know about the requested server\"\n            },\n            0x1B: {\n                \"description\": \"KDC is unavailable\",\n                \"displayMessage\": \"KDC is unavailable\"\n            },\n            0x1F: {\n                \"description\": \"Integrity check on decrypted field failed\",\n                \"displayMessage\": \"Integrity check on decrypted field failed\"\n            },\n            0x20: {\n                \"description\": \"The ticket has expired\",\n                \"displayMessage\": \"The ticket has expired\"\n            },\n            0x21: {\n                \"description\": \"The ticket is not yet valid\",\n                \"displayMessage\": \"The ticket is not yet valid\"\n            },\n            0x22: {\n                \"description\": \"The request is a replay\",\n                \"displayMessage\": \"The request is a replay\"\n            },\n            0x23: {\n                \"description\": \"The ticket is not for us\",\n                \"displayMessage\": \"The ticket is not for us\"\n            },\n            0x24: {\n                \"description\": \"The ticket and authenticator do not match\",\n                \"displayMessage\": \"The ticket and authenticator do not match\"\n            },\n            0x25: {\n                \"description\": \"The clock skew is too great\",\n                \"displayMessage\": \"The clock skew is too great\"\n            },\n            0x26: {\n                \"description\": \"Network address in network layer header doesn't match address inside ticket\",\n                \"displayMessage\": \"Incorrect network address\"\n            },\n            0x27: {\n                \"description\": \"Protocol version numbers don't match (PVNO)\",\n                \"displayMessage\": \"Protocol version numbers don't match\"\n            },\n            0x28: {\n                \"description\": \"Message type is unsupported\",\n                \"displayMessage\": \"Message type is unsupported\"\n            },\n            0x29: {\n                \"description\": \"Message stream modified and checksum didn't match\",\n                \"displayMessage\": \"Message stream modified and checksum didn't match\"\n            },\n            0x2A: {\n                \"description\": \"Message out of order (possible tampering)\",\n                \"displayMessage\": \"Message out of order (possible tampering)\"\n            },\n            0x2C: {\n                \"description\": \"Specified version of key is not available\",\n                \"displayMessage\": \"Specified version of key is not available\"\n            },\n            0x2D: {\n                \"description\": \"Service key not available\",\n                \"displayMessage\": \"Service key not available\"\n            },\n            0x2E: {\n                \"description\": \"Mutual authentication failed\",\n                \"displayMessage\": \"Mutual authentication failed\"\n            },\n            0x2F: {\n                \"description\": \"Incorrect message direction\",\n                \"displayMessage\": \"Incorrect message direction\"\n            },\n            0x30: {\n                \"description\": \"Alternative authentication method required\",\n                \"displayMessage\": \"Alternative authentication method required\"\n            },\n            0x31: {\n                \"description\": \"Incorrect sequence number in message\",\n                \"displayMessage\": \"Incorrect sequence number in message\"\n            },\n            0x32: {\n                \"description\": \"Inappropriate type of checksum in message (checksum may be unsupported)\",\n                \"displayMessage\": \"Inappropriate type of checksum in message\"\n            },\n            0x33: {\n                \"description\": \"Desired path is unreachable\",\n                \"displayMessage\": \"Desired path is unreachable\"\n            },\n            0x34: {\n                \"description\": \"Too much data\",\n                \"displayMessage\": \"Too much data\"\n            },\n            0x3C: {\n                \"description\": \"Generic error; the description is in the e-data field\",\n                \"displayMessage\": \"Generic error; the description is in the e-data field\"\n            },\n            0x3D: {\n                \"description\": \"Field is too long for this implementation\",\n                \"displayMessage\": \"Field is too long for this implementation\"\n            },\n            0x3E: {\n                \"description\": \"The client trust failed or is not implemented\",\n                \"displayMessage\": \"The client trust failed or is not implemented\"\n            },\n            0x3F: {\n                \"description\": \"The KDC server trust failed or could not be verified\",\n                \"displayMessage\": \"The KDC server trust failed or could not be verified\"\n            },\n            0x40: {\n                \"description\": \"The signature is invalid\",\n                \"displayMessage\": \"The signature is invalid\"\n            },\n            0x41: {\n                \"description\": \"A higher encryption level is needed\",\n                \"displayMessage\": \"A higher encryption level is needed\"\n            },\n            0x42: {\n                \"description\": \"User-to-user authorization is required\",\n                \"displayMessage\": \"User-to-user authorization is required\"\n            },\n            0x43: {\n                \"description\": \"No TGT was presented or available\",\n                \"displayMessage\": \"No TGT was presented or available\"\n            },\n            0x44: {\n                \"description\": \"Incorrect domain or principal\",\n                \"displayMessage\": \"Incorrect domain or principal\"\n            }\n        };\n        angular.module('Fortscale.shared.services.fsIndicatorErrorCodes')\n            .run(['fsIndicatorErrorCodes',\n            function (fsIndicatorErrorCodes) {\n                fsIndicatorErrorCodes.addErrorObject('kerberos_logins', KerberosErrorCodes);\n                fsIndicatorErrorCodes.addErrorObject('kerberos_tgt', KerberosErrorCodes);\n            }]);\n    }());\n})(Fortscale || (Fortscale = {}));\n","/**\n * This is an angular-typescript wrapper on top of toastr library.\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var toastrService;\n            (function (toastrService) {\n                'use strict';\n                var ToastrService = (function () {\n                    function ToastrService() {\n                        // Set timeOut and extendedTimeOut to 0 to make it sticky\n                        toastr.options = _.merge({}, toastr.options, {\n                            toastClass: 'fs-toast',\n                            showMethod: 'fadeIn',\n                            hideMethod: 'fadeOut',\n                            hideDuration: 500,\n                            positionClass: 'toast-top-center',\n                            closeButton: true,\n                            timeOut: 3000,\n                            iconClasses: {\n                                error: 'toast-error',\n                                info: 'toast-info',\n                                success: 'toast-success',\n                                warning: 'toast-warning'\n                            }\n                        });\n                    }\n                    Object.defineProperty(ToastrService.prototype, \"options\", {\n                        get: function () {\n                            return toastr.options;\n                        },\n                        set: function (options) {\n                            toastr.options = options;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(ToastrService.prototype, \"version\", {\n                        get: function () {\n                            return toastr.version;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    ToastrService.prototype.subscribe = function (callback) {\n                        toastr.subscribe(callback);\n                    };\n                    ToastrService.prototype.clear = function ($toastElement, clearOptions) {\n                        toastr.clear($toastElement, clearOptions);\n                    };\n                    ToastrService.prototype.remove = function ($toastElement) {\n                        toastr.remove($toastElement);\n                    };\n                    ToastrService.prototype.getContainer = function (options, create) {\n                        return toastr.getContainer(options, create);\n                    };\n                    ToastrService.prototype.error = function (message, title, optionsOverride) {\n                        return toastr.error(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.info = function (message, title, optionsOverride) {\n                        return toastr.info(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.success = function (message, title, optionsOverride) {\n                        return toastr.success(message, title, optionsOverride);\n                    };\n                    ToastrService.prototype.warning = function (message, title, optionsOverride) {\n                        return toastr.warning(message, title, optionsOverride);\n                    };\n                    ToastrService.$inject = [];\n                    return ToastrService;\n                }());\n                angular.module('Fortscale.shared.services.toastrService', [])\n                    .service('toastrService', ToastrService);\n            })(toastrService = services.toastrService || (services.toastrService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n/**\n *\n * These are the options default values:\n *\n{\n    tapToDismiss: true,\n        toastClass: 'toast',\n    containerId: 'toast-container',\n    debug: false,\n\n    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n    showDuration: 300,\n    showEasing: 'swing', //swing and linear are built into jQuery\n    onShown: undefined,\n    hideMethod: 'fadeOut',\n    hideDuration: 1000,\n    hideEasing: 'swing',\n    onHidden: undefined,\n    closeMethod: false,\n    closeDuration: false,\n    closeEasing: false,\n\n    extendedTimeOut: 1000,\n    iconClasses: {\n    error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning'\n},\n    iconClass: 'toast-info',\n        positionClass: 'toast-top-right',\n    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    escapeHtml: false,\n    target: 'body',\n    closeHtml: '<button type=\"button\">&times;</button>',\n    newestOnTop: true,\n    preventDuplicates: false,\n    progressBar: false\n}\n **/\n","/**\n *\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var alertUpdatesService;\n            (function (alertUpdatesService) {\n                'use strict';\n                /**\n                 * Enums\n                 */\n                (function (AlertFeedback) {\n                    AlertFeedback[AlertFeedback[\"Approved\"] = 0] = \"Approved\";\n                    AlertFeedback[AlertFeedback[\"Rejected\"] = 1] = \"Rejected\";\n                    AlertFeedback[AlertFeedback[\"None\"] = 2] = \"None\";\n                })(alertUpdatesService.AlertFeedback || (alertUpdatesService.AlertFeedback = {}));\n                var AlertFeedback = alertUpdatesService.AlertFeedback;\n                (function (AlertStatus) {\n                    AlertStatus[AlertStatus[\"Open\"] = 0] = \"Open\";\n                    AlertStatus[AlertStatus[\"Closed\"] = 1] = \"Closed\";\n                })(alertUpdatesService.AlertStatus || (alertUpdatesService.AlertStatus = {}));\n                var AlertStatus = alertUpdatesService.AlertStatus;\n                var AlertUpdatesService = (function () {\n                    function AlertUpdatesService($http, BASE_URL) {\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.ALERT_URL = this.BASE_URL + '/alerts';\n                    }\n                    AlertUpdatesService.prototype._getPostUrl = function (alertId) {\n                        return this.ALERT_URL + '/' + alertId + '/comments';\n                    };\n                    AlertUpdatesService.prototype._getDeleteAndUpdateUrl = function (alertId, commentId) {\n                        return this._getPostUrl(alertId) + '/' + commentId;\n                    };\n                    /**\n                     * Send HTTP post for adding comment\n                     * @param alertId\n                     * @param comment\n                     * @returns {IHttpPromise<T>} - return promise which contain the comment\n                     */\n                    AlertUpdatesService.prototype.addComment = function (alertId, comment) {\n                        return this.$http.post(this._getPostUrl(alertId), comment);\n                    };\n                    /**\n                     * Send comment delete request and return promise without any bady\n                     * @param alertId\n                     * @param comment\n                     * @returns {IHttpPromise<T>}\n                     */\n                    AlertUpdatesService.prototype.deleteComment = function (alertId, comment) {\n                        var url = this._getDeleteAndUpdateUrl(alertId, comment.commentId);\n                        return this.$http.delete(url);\n                    };\n                    /**\n                     * Send comment update request and return promise without any body\n                     * @param alertId\n                     * @param comment\n                     * @returns {IHttpPromise<T>}\n                     */\n                    AlertUpdatesService.prototype.updateComment = function (alertId, comment) {\n                        return this.$http.patch(this._getDeleteAndUpdateUrl(alertId, comment.commentId), comment);\n                    };\n                    /**\n                     * Update the status and feedback of the alert and return promise without any body\n                     * @param alertId\n                     * @param feedbackBody\n                     * @returns {IHttpPromise<T>}\n                     */\n                    AlertUpdatesService.prototype.updateFeedback = function (alertId, feedbackBody) {\n                        /**\n                         * Extract the values as string instead of number represents the enum\n                         * @type {{status: any, feedback: any}}\n                         */\n                        var body = {\n                            status: AlertStatus[feedbackBody.status],\n                            feedback: AlertFeedback[feedbackBody.feedback]\n                        };\n                        // Create the patch request url\n                        var url = this.BASE_URL + '/alerts/' + alertId;\n                        return this.$http.patch(url, body);\n                    };\n                    AlertUpdatesService.$inject = ['$http', 'BASE_URL'];\n                    return AlertUpdatesService;\n                }());\n                angular.module('Fortscale.shared.services')\n                    .service('alertUpdatesService', AlertUpdatesService);\n            })(alertUpdatesService = services.alertUpdatesService || (services.alertUpdatesService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var entityActivityUtils;\n            (function (entityActivityUtils) {\n                (function (eEntityType) {\n                    eEntityType[eEntityType[\"USER\"] = 0] = \"USER\";\n                    eEntityType[eEntityType[\"DEVICE\"] = 1] = \"DEVICE\";\n                    eEntityType[eEntityType[\"ORGANIZATION\"] = 2] = \"ORGANIZATION\";\n                })(entityActivityUtils.eEntityType || (entityActivityUtils.eEntityType = {}));\n                var eEntityType = entityActivityUtils.eEntityType;\n                var EntityActivityUtilsService = (function () {\n                    function EntityActivityUtilsService($http, $q, BASE_URL) {\n                        this.$http = $http;\n                        this.$q = $q;\n                        this.BASE_URL = BASE_URL;\n                    }\n                    /**\n                     * Returns the url for user activity\n                     * @param {{id: string}} user\n                     * @param {string} endPoint\n                     * @returns {string}\n                     * @private\n                     */\n                    EntityActivityUtilsService.prototype._getUserActivityUrl = function (user, endPoint) {\n                        return this.BASE_URL + \"/user/\" + user.id + \"/activity\" + (endPoint ? '/' + endPoint : '');\n                    };\n                    /**\n                     * Returns the url for organization activity\n                     * @param {string} endPoint\n                     * @returns {string}\n                     * @private\n                     */\n                    EntityActivityUtilsService.prototype._getOrganizationActivityUrl = function (endPoint) {\n                        return this.BASE_URL + \"/organization/activity\" + (endPoint ? '/' + endPoint : '');\n                    };\n                    ;\n                    /**\n                     * Returns a promise that resolves on a user's Top-Countries activity\n                     * @param {{}=} user\n                     * @param {number=} daysRange\n                     * @param {number=} limit\n                     * @returns {IHttpPromise<IEntityActivityLocationUser>}\n                     * @private\n                     */\n                    EntityActivityUtilsService.prototype._getUserTopCountries = function (user, daysRange, limit) {\n                        var url = this._getUserActivityUrl(user, 'locations');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange,\n                                limit: limit\n                            }\n                        });\n                    };\n                    /**\n                     * Returns a promise that resolves on organization Top-Countries activity\n                     * @param {number=} daysRange\n                     * @param {number=} limit\n                     * @returns {IHttpPromise<IEntityActivityLocationOrganization>}\n                     * @private\n                     */\n                    EntityActivityUtilsService.prototype._getOrganizationTopCountries = function (daysRange, limit) {\n                        var url = this._getOrganizationActivityUrl('locations');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange,\n                                limit: limit\n                            }\n                        });\n                    };\n                    /**\n                     * Returns a promise that resolves on a user's authentications activity\n                     * @param {{}=} user\n                     * @param {number=} daysRange\n                     * @returns {IHttpPromise<IEntityActivityLocationUser>}\n                     * @private\n                     */\n                    EntityActivityUtilsService.prototype._getUserAuthentications = function (user, daysRange) {\n                        var url = this._getUserActivityUrl(user, 'authentications');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange\n                            }\n                        });\n                    };\n                    EntityActivityUtilsService.prototype._getUserWorkingHours = function (user, daysRange) {\n                        var url = this._getUserActivityUrl(user, 'working-hours');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange\n                            }\n                        });\n                    };\n                    EntityActivityUtilsService.prototype._getUserSourceDevices = function (user, daysRange) {\n                        var url = this._getUserActivityUrl(user, 'source-devices');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange\n                            }\n                        });\n                    };\n                    EntityActivityUtilsService.prototype._getUserTargetDevices = function (user, daysRange) {\n                        var url = this._getUserActivityUrl(user, 'target-devices');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange\n                            }\n                        });\n                    };\n                    EntityActivityUtilsService.prototype._getUserDataUsages = function (user, daysRange) {\n                        var url = this._getUserActivityUrl(user, 'data-usage');\n                        return this.$http.get(url, {\n                            params: {\n                                time_range: daysRange\n                            }\n                        });\n                    };\n                    /**\n                     * Returns a promise that resolves on Top-Countries activity\n                     *\n                     * @param {number} entityType\n                     * @param {{}=} entity\n                     * @param {number=} daysRange\n                     * @param {number=} limit\n                     * @returns {IPromise<any>}\n                     */\n                    EntityActivityUtilsService.prototype.getTopCountries = function (entityType, entity, daysRange, limit) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        if (limit === void 0) { limit = 3; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserTopCountries(entity, daysRange, limit);\n                                case eEntityType.ORGANIZATION:\n                                    return this._getOrganizationTopCountries(daysRange, limit);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            return res.data.data;\n                        });\n                    };\n                    /**\n                     * Returns a promise that resolves on authentications activity\n                     *\n                     * @param {number} entityType\n                     * @param {{}=} entity\n                     * @param {number=} daysRange\n                     * @returns {IPromise<any>}\n                     */\n                    EntityActivityUtilsService.prototype.getAuthentications = function (entityType, entity, daysRange) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserAuthentications(entity, daysRange);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            if (res.data && res.data.data && res.data.data.length === 1) {\n                                return res.data.data[0];\n                            }\n                            return {\n                                success: 0,\n                                failed: 0\n                            };\n                        });\n                    };\n                    EntityActivityUtilsService.prototype.getWorkingHours = function (entityType, entity, daysRange) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserWorkingHours(entity, daysRange);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            return res.data.data;\n                        });\n                    };\n                    EntityActivityUtilsService.prototype.getSourceDevices = function (entityType, entity, daysRange) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserSourceDevices(entity, daysRange);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            return res.data.data;\n                        });\n                    };\n                    EntityActivityUtilsService.prototype.getTargetDevices = function (entityType, entity, daysRange) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserTargetDevices(entity, daysRange);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            return res.data.data;\n                        });\n                    };\n                    EntityActivityUtilsService.prototype.getDataUsages = function (entityType, entity, daysRange) {\n                        if (daysRange === void 0) { daysRange = 90; }\n                        var entityTypeSwitch = function () {\n                            switch (entityType) {\n                                case eEntityType.USER:\n                                    return this._getUserDataUsages(entity, daysRange);\n                                default:\n                                    return null;\n                            }\n                        }.bind(this);\n                        return this.$q.when(entityTypeSwitch())\n                            .then(function (res) {\n                            return res.data.data;\n                        });\n                    };\n                    EntityActivityUtilsService.$inject = ['$http', '$q', 'BASE_URL'];\n                    return EntityActivityUtilsService;\n                }());\n                angular.module('Fortscale.shared.services.entityActivityUtils', [])\n                    .service('entityActivityUtils', EntityActivityUtilsService);\n            })(entityActivityUtils = services.entityActivityUtils || (services.entityActivityUtils = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n *  This new state management service as a few assumption, that you need to be aware when using it:\n *  1. It tested and ment to be only with flat states (each state member should be string, number, or boolean),\n *     working with object might worked but need to be tested mainly when saved to session storage or url.\n *  2. When component loaded, we first try to retrive the state from URL, if no state on URL we try to load it from session storage,\n *     and if it also not exists on the session storage we use the defualt.\n *  3. null values saved on the URL and session storage as empty string. The assumption is empty string always be \"no value\"\n *     because the rest calls are not diffriniate between empty attribute and not sent attribute.\n *\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var stateManagementService;\n            (function (stateManagementService) {\n                'use strict';\n                var SESSION_STORAGE_KEY_PREFIX = \"fs.state.\";\n                var StateManagementService = (function () {\n                    function StateManagementService(assert, urlStateManager, $window) {\n                        this.assert = assert;\n                        this.urlStateManager = urlStateManager;\n                        this.$window = $window;\n                        //Contains map from state id to IStateDefinition\n                        this.stateMap = {};\n                    }\n                    StateManagementService.prototype.initState = function (stateId, initialStateSettings) {\n                        //Verify state and stateId\n                        this.assert.isString(stateId, \"StateId\");\n                        this.assert.isObject(initialStateSettings, \"InitialStateSettings\");\n                        //Create the state object\n                        var state = {\n                            initialState: initialStateSettings,\n                            currentState: _.clone(initialStateSettings),\n                            id: stateId,\n                            registeredDelegates: []\n                        };\n                        //Load the saved state if such exists\n                        var previousState = this._getPreviousState(stateId, state.initialState);\n                        //Update the changes with the saved state\n                        _.merge(state.currentState, previousState);\n                        //Create the state map\n                        this.stateMap[stateId] = state;\n                        //Update the url / session storage + trigger the registerd components if such exists\n                        this.updateState(stateId, state.currentState);\n                        return state.currentState;\n                    };\n                    /**\n                     * Fetch the prvious state, if such state exists.\n                     * Take it from the URL first,\n                     * if not on the URL try to take if from the session storage\n                     * If not exists on the session storage return empty object\n                     * @param stateId\n                     * @returns {*}\n                     * @private\n                     */\n                    StateManagementService.prototype._getPreviousState = function (stateId, initialState) {\n                        var previousState = this.urlStateManager.getStateByContainerId(stateId);\n                        if (!previousState) {\n                            previousState = this.$window.sessionStorage.getItem(SESSION_STORAGE_KEY_PREFIX + stateId);\n                            if (previousState) {\n                                previousState = JSON.parse(previousState);\n                            }\n                        }\n                        _.forOwn(previousState, function (value, key) {\n                            var originalIsEmpty = initialState[key] === null || typeof initialState[key] === \"undefined\";\n                            if (value === \"\" && !originalIsEmpty) {\n                                previousState[key] = null;\n                            }\n                        });\n                        return previousState;\n                    };\n                    /**\n                     * Return merge between the current state and the changes\n                     * @param stateId\n                     * @returns {any}\n                     */\n                    StateManagementService.prototype.readCurrentState = function (stateId) {\n                        var state = this.stateMap[stateId];\n                        if (typeof state === \"undefined\") {\n                            return state;\n                        }\n                        //Merged state- the full state, come from merging the currentState without null into initialState\n                        //return _.merge({}, state.initialState, _.omitBy(state.stateChanges, _.isNil));\n                        return state.currentState;\n                    };\n                    /**\n                     * Clear all the local user states\n                     */\n                    StateManagementService.prototype.clearAllStates = function () {\n                        var _this = this;\n                        var stateId = _.keys(this.stateMap);\n                        _.each(stateId, function (sateId) {\n                            _this.stateMap[sateId].registeredDelegates = [];\n                            delete _this.stateMap[sateId];\n                            _this.$window.sessionStorage.removeItem(SESSION_STORAGE_KEY_PREFIX + stateId);\n                        });\n                    };\n                    /**\n                     *\n                     *\n                     * @param stateId -  the id of the state\n                     * @param newState - the state values which deffer from the initial values.\n                     * @param triggerImmediately - default value is true\n                     */\n                    StateManagementService.prototype.updateState = function (stateId, newCurrentState, triggerImmediately) {\n                        //Verify stateId and newState\n                        var ctrl = this;\n                        ctrl.assert.isString(stateId, \"StateId\");\n                        ctrl.assert.isObject(newCurrentState, \"newState\");\n                        var state = ctrl.stateMap[stateId];\n                        this.assert(state, \"State is not initiated\", TypeError);\n                        state.currentState = newCurrentState;\n                        //Take accation immedietly:\n                        if (!triggerImmediately) {\n                            //Iterate all listeners and execute them with new state\n                            _.each(state.registeredDelegates, function (delegate) { return delegate(ctrl.readCurrentState(stateId)); });\n                            var currentStateChanges = this._getStateChanges(state);\n                            //Update URL and sessopn storage\n                            this.urlStateManager.updateUrlStateParameters(stateId, currentStateChanges, true);\n                            this.$window.sessionStorage.setItem(SESSION_STORAGE_KEY_PREFIX + stateId, JSON.stringify(currentStateChanges));\n                        }\n                    };\n                    /**\n                     *This method return the changes\n                     * There is an assumption that the state is flat object.\n                     */\n                    StateManagementService.prototype._getStateChanges = function (state) {\n                        var changesWithNulls = _.pickBy(state.currentState, function (value, key) {\n                            return value !== state.initialState[key];\n                        });\n                        _.forOwn(changesWithNulls, function (value, key) {\n                            var originalIsEmpty = state.initialState[key] === null || typeof state.initialState[key] === \"undefined\";\n                            if (value === null && !originalIsEmpty) {\n                                changesWithNulls[key] = \"\";\n                            }\n                        });\n                        return changesWithNulls;\n                    };\n                    /**\n                     * Test if state is different the inital state\n                     */\n                    StateManagementService.prototype.isStateChanged = function (stateId) {\n                        var state = this.stateMap[stateId];\n                        var differences = _.omitBy(_.pickBy(state.currentState, function (value, key) {\n                            return value !== state.initialState[key];\n                        }), _.isNil);\n                        return _.keys(differences).length > 0;\n                    };\n                    StateManagementService.prototype.clearState = function (stateId, override) {\n                        var state = this.stateMap[stateId];\n                        var newState = _.clone(state.initialState);\n                        newState = _.merge(newState, override);\n                        this.updateState(stateId, newState);\n                    };\n                    /**\n                     * Add listener to specific state by id.\n                     * When state will change, all listeners of the state will be triggered with the new state\n                     * @param stateId\n                     * @param onStateChangeDelegate - function which get the new state and do something, and don't return anything\n                     */\n                    StateManagementService.prototype.registerToStateChanges = function (stateId, onStateChangeDelegate) {\n                        this.assert.isString(stateId, \"StateId\");\n                        this.assert.isFunction(onStateChangeDelegate, \"onStateChangeDelegate\");\n                        var state = this.stateMap[stateId];\n                        this.assert(state, \"State is not initiated\", TypeError);\n                        state.registeredDelegates.push(onStateChangeDelegate);\n                    };\n                    StateManagementService.$inject = ['assert', 'urlStateManager', '$window'];\n                    return StateManagementService;\n                }());\n                angular.module('Fortscale.shared.services')\n                    .service('stateManagementService', StateManagementService);\n            })(stateManagementService = services.stateManagementService || (services.stateManagementService = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","/*\n although ammap has methos like getAreaCenterLatitude and getAreaCenterLongitude,\n they are not suitable in quite a lot of cases as the center of some countries\n is even outside the country itself (like US, because of Alaska and Hawaii)\n That's why we have the coordinates stored here\n */\nvar Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var amMaps;\n            (function (amMaps) {\n                'use strict';\n                var latlong = {};\n                latlong[\"AD\"] = { \"latitude\": 42.5, \"longitude\": 1.5 };\n                latlong[\"AE\"] = { \"latitude\": 24, \"longitude\": 54 };\n                latlong[\"AF\"] = { \"latitude\": 33, \"longitude\": 65 };\n                latlong[\"AG\"] = { \"latitude\": 17.05, \"longitude\": -61.8 };\n                latlong[\"AI\"] = { \"latitude\": 18.25, \"longitude\": -63.1667 };\n                latlong[\"AL\"] = { \"latitude\": 41, \"longitude\": 20 };\n                latlong[\"AM\"] = { \"latitude\": 40, \"longitude\": 45 };\n                latlong[\"AN\"] = { \"latitude\": 12.25, \"longitude\": -68.75 };\n                latlong[\"AO\"] = { \"latitude\": -12.5, \"longitude\": 18.5 };\n                latlong[\"AP\"] = { \"latitude\": 35, \"longitude\": 105 };\n                latlong[\"AQ\"] = { \"latitude\": -90, \"longitude\": 0 };\n                latlong[\"AR\"] = { \"latitude\": -34, \"longitude\": -64 };\n                latlong[\"AS\"] = { \"latitude\": -14.3333, \"longitude\": -170 };\n                latlong[\"AT\"] = { \"latitude\": 47.3333, \"longitude\": 13.3333 };\n                latlong[\"AU\"] = { \"latitude\": -27, \"longitude\": 133 };\n                latlong[\"AW\"] = { \"latitude\": 12.5, \"longitude\": -69.9667 };\n                latlong[\"AZ\"] = { \"latitude\": 40.5, \"longitude\": 47.5 };\n                latlong[\"BA\"] = { \"latitude\": 44, \"longitude\": 18 };\n                latlong[\"BB\"] = { \"latitude\": 13.1667, \"longitude\": -59.5333 };\n                latlong[\"BD\"] = { \"latitude\": 24, \"longitude\": 90 };\n                latlong[\"BE\"] = { \"latitude\": 50.8333, \"longitude\": 4 };\n                latlong[\"BF\"] = { \"latitude\": 13, \"longitude\": -2 };\n                latlong[\"BG\"] = { \"latitude\": 43, \"longitude\": 25 };\n                latlong[\"BH\"] = { \"latitude\": 26, \"longitude\": 50.55 };\n                latlong[\"BI\"] = { \"latitude\": -3.5, \"longitude\": 30 };\n                latlong[\"BJ\"] = { \"latitude\": 9.5, \"longitude\": 2.25 };\n                latlong[\"BM\"] = { \"latitude\": 32.3333, \"longitude\": -64.75 };\n                latlong[\"BN\"] = { \"latitude\": 4.5, \"longitude\": 114.6667 };\n                latlong[\"BO\"] = { \"latitude\": -17, \"longitude\": -65 };\n                latlong[\"BR\"] = { \"latitude\": -10, \"longitude\": -55 };\n                latlong[\"BS\"] = { \"latitude\": 24.25, \"longitude\": -76 };\n                latlong[\"BT\"] = { \"latitude\": 27.5, \"longitude\": 90.5 };\n                latlong[\"BV\"] = { \"latitude\": -54.4333, \"longitude\": 3.4 };\n                latlong[\"BW\"] = { \"latitude\": -22, \"longitude\": 24 };\n                latlong[\"BY\"] = { \"latitude\": 53, \"longitude\": 28 };\n                latlong[\"BZ\"] = { \"latitude\": 17.25, \"longitude\": -88.75 };\n                latlong[\"CA\"] = { \"latitude\": 54, \"longitude\": -100 };\n                latlong[\"CC\"] = { \"latitude\": -12.5, \"longitude\": 96.8333 };\n                latlong[\"CD\"] = { \"latitude\": 0, \"longitude\": 25 };\n                latlong[\"CF\"] = { \"latitude\": 7, \"longitude\": 21 };\n                latlong[\"CG\"] = { \"latitude\": -1, \"longitude\": 15 };\n                latlong[\"CH\"] = { \"latitude\": 47, \"longitude\": 8 };\n                latlong[\"CI\"] = { \"latitude\": 8, \"longitude\": -5 };\n                latlong[\"CK\"] = { \"latitude\": -21.2333, \"longitude\": -159.7667 };\n                latlong[\"CL\"] = { \"latitude\": -30, \"longitude\": -71 };\n                latlong[\"CM\"] = { \"latitude\": 6, \"longitude\": 12 };\n                latlong[\"CN\"] = { \"latitude\": 35, \"longitude\": 105 };\n                latlong[\"CO\"] = { \"latitude\": 4, \"longitude\": -72 };\n                latlong[\"CR\"] = { \"latitude\": 10, \"longitude\": -84 };\n                latlong[\"CU\"] = { \"latitude\": 21.5, \"longitude\": -80 };\n                latlong[\"CV\"] = { \"latitude\": 16, \"longitude\": -24 };\n                latlong[\"CX\"] = { \"latitude\": -10.5, \"longitude\": 105.6667 };\n                latlong[\"CY\"] = { \"latitude\": 35, \"longitude\": 33 };\n                latlong[\"CZ\"] = { \"latitude\": 49.75, \"longitude\": 15.5 };\n                latlong[\"DE\"] = { \"latitude\": 51, \"longitude\": 9 };\n                latlong[\"DJ\"] = { \"latitude\": 11.5, \"longitude\": 43 };\n                latlong[\"DK\"] = { \"latitude\": 56, \"longitude\": 10 };\n                latlong[\"DM\"] = { \"latitude\": 15.4167, \"longitude\": -61.3333 };\n                latlong[\"DO\"] = { \"latitude\": 19, \"longitude\": -70.6667 };\n                latlong[\"DZ\"] = { \"latitude\": 28, \"longitude\": 3 };\n                latlong[\"EC\"] = { \"latitude\": -2, \"longitude\": -77.5 };\n                latlong[\"EE\"] = { \"latitude\": 59, \"longitude\": 26 };\n                latlong[\"EG\"] = { \"latitude\": 27, \"longitude\": 30 };\n                latlong[\"EH\"] = { \"latitude\": 24.5, \"longitude\": -13 };\n                latlong[\"ER\"] = { \"latitude\": 15, \"longitude\": 39 };\n                latlong[\"ES\"] = { \"latitude\": 40, \"longitude\": -4 };\n                latlong[\"ET\"] = { \"latitude\": 8, \"longitude\": 38 };\n                latlong[\"EU\"] = { \"latitude\": 47, \"longitude\": 8 };\n                latlong[\"FI\"] = { \"latitude\": 62, \"longitude\": 26 };\n                latlong[\"FJ\"] = { \"latitude\": -18, \"longitude\": 175 };\n                latlong[\"FK\"] = { \"latitude\": -51.75, \"longitude\": -59 };\n                latlong[\"FM\"] = { \"latitude\": 6.9167, \"longitude\": 158.25 };\n                latlong[\"FO\"] = { \"latitude\": 62, \"longitude\": -7 };\n                latlong[\"FR\"] = { \"latitude\": 46, \"longitude\": 2 };\n                latlong[\"GA\"] = { \"latitude\": -1, \"longitude\": 11.75 };\n                latlong[\"GB\"] = { \"latitude\": 54, \"longitude\": -2 };\n                latlong[\"GD\"] = { \"latitude\": 12.1167, \"longitude\": -61.6667 };\n                latlong[\"GE\"] = { \"latitude\": 42, \"longitude\": 43.5 };\n                latlong[\"GF\"] = { \"latitude\": 4, \"longitude\": -53 };\n                latlong[\"GH\"] = { \"latitude\": 8, \"longitude\": -2 };\n                latlong[\"GI\"] = { \"latitude\": 36.1833, \"longitude\": -5.3667 };\n                latlong[\"GL\"] = { \"latitude\": 72, \"longitude\": -40 };\n                latlong[\"GM\"] = { \"latitude\": 13.4667, \"longitude\": -16.5667 };\n                latlong[\"GN\"] = { \"latitude\": 11, \"longitude\": -10 };\n                latlong[\"GP\"] = { \"latitude\": 16.25, \"longitude\": -61.5833 };\n                latlong[\"GQ\"] = { \"latitude\": 2, \"longitude\": 10 };\n                latlong[\"GR\"] = { \"latitude\": 39, \"longitude\": 22 };\n                latlong[\"GS\"] = { \"latitude\": -54.5, \"longitude\": -37 };\n                latlong[\"GT\"] = { \"latitude\": 15.5, \"longitude\": -90.25 };\n                latlong[\"GU\"] = { \"latitude\": 13.4667, \"longitude\": 144.7833 };\n                latlong[\"GW\"] = { \"latitude\": 12, \"longitude\": -15 };\n                latlong[\"GY\"] = { \"latitude\": 5, \"longitude\": -59 };\n                latlong[\"HK\"] = { \"latitude\": 22.25, \"longitude\": 114.1667 };\n                latlong[\"HM\"] = { \"latitude\": -53.1, \"longitude\": 72.5167 };\n                latlong[\"HN\"] = { \"latitude\": 15, \"longitude\": -86.5 };\n                latlong[\"HR\"] = { \"latitude\": 45.1667, \"longitude\": 15.5 };\n                latlong[\"HT\"] = { \"latitude\": 19, \"longitude\": -72.4167 };\n                latlong[\"HU\"] = { \"latitude\": 47, \"longitude\": 20 };\n                latlong[\"ID\"] = { \"latitude\": -5, \"longitude\": 120 };\n                latlong[\"IE\"] = { \"latitude\": 53, \"longitude\": -8 };\n                latlong[\"IL\"] = { \"latitude\": 31.5, \"longitude\": 34.75 };\n                latlong[\"IN\"] = { \"latitude\": 20, \"longitude\": 77 };\n                latlong[\"IO\"] = { \"latitude\": -6, \"longitude\": 71.5 };\n                latlong[\"IQ\"] = { \"latitude\": 33, \"longitude\": 44 };\n                latlong[\"IR\"] = { \"latitude\": 32, \"longitude\": 53 };\n                latlong[\"IS\"] = { \"latitude\": 65, \"longitude\": -18 };\n                latlong[\"IT\"] = { \"latitude\": 42.8333, \"longitude\": 12.8333 };\n                latlong[\"JM\"] = { \"latitude\": 18.25, \"longitude\": -77.5 };\n                latlong[\"JO\"] = { \"latitude\": 31, \"longitude\": 36 };\n                latlong[\"JP\"] = { \"latitude\": 36, \"longitude\": 138 };\n                latlong[\"KE\"] = { \"latitude\": 1, \"longitude\": 38 };\n                latlong[\"KG\"] = { \"latitude\": 41, \"longitude\": 75 };\n                latlong[\"KH\"] = { \"latitude\": 13, \"longitude\": 105 };\n                latlong[\"KI\"] = { \"latitude\": 1.4167, \"longitude\": 173 };\n                latlong[\"KM\"] = { \"latitude\": -12.1667, \"longitude\": 44.25 };\n                latlong[\"KN\"] = { \"latitude\": 17.3333, \"longitude\": -62.75 };\n                latlong[\"KP\"] = { \"latitude\": 40, \"longitude\": 127 };\n                latlong[\"KR\"] = { \"latitude\": 37, \"longitude\": 127.5 };\n                latlong[\"KW\"] = { \"latitude\": 29.3375, \"longitude\": 47.6581 };\n                latlong[\"KY\"] = { \"latitude\": 19.5, \"longitude\": -80.5 };\n                latlong[\"KZ\"] = { \"latitude\": 48, \"longitude\": 68 };\n                latlong[\"LA\"] = { \"latitude\": 18, \"longitude\": 105 };\n                latlong[\"LB\"] = { \"latitude\": 33.8333, \"longitude\": 35.8333 };\n                latlong[\"LC\"] = { \"latitude\": 13.8833, \"longitude\": -61.1333 };\n                latlong[\"LI\"] = { \"latitude\": 47.1667, \"longitude\": 9.5333 };\n                latlong[\"LK\"] = { \"latitude\": 7, \"longitude\": 81 };\n                latlong[\"LR\"] = { \"latitude\": 6.5, \"longitude\": -9.5 };\n                latlong[\"LS\"] = { \"latitude\": -29.5, \"longitude\": 28.5 };\n                latlong[\"LT\"] = { \"latitude\": 55, \"longitude\": 24 };\n                latlong[\"LU\"] = { \"latitude\": 49.75, \"longitude\": 6 };\n                latlong[\"LV\"] = { \"latitude\": 57, \"longitude\": 25 };\n                latlong[\"LY\"] = { \"latitude\": 25, \"longitude\": 17 };\n                latlong[\"MA\"] = { \"latitude\": 32, \"longitude\": -5 };\n                latlong[\"MC\"] = { \"latitude\": 43.7333, \"longitude\": 7.4 };\n                latlong[\"MD\"] = { \"latitude\": 47, \"longitude\": 29 };\n                latlong[\"ME\"] = { \"latitude\": 42.5, \"longitude\": 19.4 };\n                latlong[\"MG\"] = { \"latitude\": -20, \"longitude\": 47 };\n                latlong[\"MH\"] = { \"latitude\": 9, \"longitude\": 168 };\n                latlong[\"MK\"] = { \"latitude\": 41.8333, \"longitude\": 22 };\n                latlong[\"ML\"] = { \"latitude\": 17, \"longitude\": -4 };\n                latlong[\"MM\"] = { \"latitude\": 22, \"longitude\": 98 };\n                latlong[\"MN\"] = { \"latitude\": 46, \"longitude\": 105 };\n                latlong[\"MO\"] = { \"latitude\": 22.1667, \"longitude\": 113.55 };\n                latlong[\"MP\"] = { \"latitude\": 15.2, \"longitude\": 145.75 };\n                latlong[\"MQ\"] = { \"latitude\": 14.6667, \"longitude\": -61 };\n                latlong[\"MR\"] = { \"latitude\": 20, \"longitude\": -12 };\n                latlong[\"MS\"] = { \"latitude\": 16.75, \"longitude\": -62.2 };\n                latlong[\"MT\"] = { \"latitude\": 35.8333, \"longitude\": 14.5833 };\n                latlong[\"MU\"] = { \"latitude\": -20.2833, \"longitude\": 57.55 };\n                latlong[\"MV\"] = { \"latitude\": 3.25, \"longitude\": 73 };\n                latlong[\"MW\"] = { \"latitude\": -13.5, \"longitude\": 34 };\n                latlong[\"MX\"] = { \"latitude\": 23, \"longitude\": -102 };\n                latlong[\"MY\"] = { \"latitude\": 2.5, \"longitude\": 112.5 };\n                latlong[\"MZ\"] = { \"latitude\": -18.25, \"longitude\": 35 };\n                latlong[\"NA\"] = { \"latitude\": -22, \"longitude\": 17 };\n                latlong[\"NC\"] = { \"latitude\": -21.5, \"longitude\": 165.5 };\n                latlong[\"NE\"] = { \"latitude\": 16, \"longitude\": 8 };\n                latlong[\"NF\"] = { \"latitude\": -29.0333, \"longitude\": 167.95 };\n                latlong[\"NG\"] = { \"latitude\": 10, \"longitude\": 8 };\n                latlong[\"NI\"] = { \"latitude\": 13, \"longitude\": -85 };\n                latlong[\"NL\"] = { \"latitude\": 52.5, \"longitude\": 5.75 };\n                latlong[\"NO\"] = { \"latitude\": 62, \"longitude\": 10 };\n                latlong[\"NP\"] = { \"latitude\": 28, \"longitude\": 84 };\n                latlong[\"NR\"] = { \"latitude\": -0.5333, \"longitude\": 166.9167 };\n                latlong[\"NU\"] = { \"latitude\": -19.0333, \"longitude\": -169.8667 };\n                latlong[\"NZ\"] = { \"latitude\": -41, \"longitude\": 174 };\n                latlong[\"OM\"] = { \"latitude\": 21, \"longitude\": 57 };\n                latlong[\"PA\"] = { \"latitude\": 9, \"longitude\": -80 };\n                latlong[\"PE\"] = { \"latitude\": -10, \"longitude\": -76 };\n                latlong[\"PF\"] = { \"latitude\": -15, \"longitude\": -140 };\n                latlong[\"PG\"] = { \"latitude\": -6, \"longitude\": 147 };\n                latlong[\"PH\"] = { \"latitude\": 13, \"longitude\": 122 };\n                latlong[\"PK\"] = { \"latitude\": 30, \"longitude\": 70 };\n                latlong[\"PL\"] = { \"latitude\": 52, \"longitude\": 20 };\n                latlong[\"PM\"] = { \"latitude\": 46.8333, \"longitude\": -56.3333 };\n                latlong[\"PR\"] = { \"latitude\": 18.25, \"longitude\": -66.5 };\n                latlong[\"PS\"] = { \"latitude\": 32, \"longitude\": 35.25 };\n                latlong[\"PT\"] = { \"latitude\": 39.5, \"longitude\": -8 };\n                latlong[\"PW\"] = { \"latitude\": 7.5, \"longitude\": 134.5 };\n                latlong[\"PY\"] = { \"latitude\": -23, \"longitude\": -58 };\n                latlong[\"QA\"] = { \"latitude\": 25.5, \"longitude\": 51.25 };\n                latlong[\"RE\"] = { \"latitude\": -21.1, \"longitude\": 55.6 };\n                latlong[\"RO\"] = { \"latitude\": 46, \"longitude\": 25 };\n                latlong[\"RS\"] = { \"latitude\": 44, \"longitude\": 21 };\n                latlong[\"RU\"] = { \"latitude\": 60, \"longitude\": 100 };\n                latlong[\"RW\"] = { \"latitude\": -2, \"longitude\": 30 };\n                latlong[\"SA\"] = { \"latitude\": 25, \"longitude\": 45 };\n                latlong[\"SB\"] = { \"latitude\": -8, \"longitude\": 159 };\n                latlong[\"SC\"] = { \"latitude\": -4.5833, \"longitude\": 55.6667 };\n                latlong[\"SD\"] = { \"latitude\": 15, \"longitude\": 30 };\n                latlong[\"SE\"] = { \"latitude\": 62, \"longitude\": 15 };\n                latlong[\"SG\"] = { \"latitude\": 1.3667, \"longitude\": 103.8 };\n                latlong[\"SH\"] = { \"latitude\": -15.9333, \"longitude\": -5.7 };\n                latlong[\"SI\"] = { \"latitude\": 46, \"longitude\": 15 };\n                latlong[\"SJ\"] = { \"latitude\": 78, \"longitude\": 20 };\n                latlong[\"SK\"] = { \"latitude\": 48.6667, \"longitude\": 19.5 };\n                latlong[\"SL\"] = { \"latitude\": 8.5, \"longitude\": -11.5 };\n                latlong[\"SM\"] = { \"latitude\": 43.7667, \"longitude\": 12.4167 };\n                latlong[\"SN\"] = { \"latitude\": 14, \"longitude\": -14 };\n                latlong[\"SO\"] = { \"latitude\": 10, \"longitude\": 49 };\n                latlong[\"SR\"] = { \"latitude\": 4, \"longitude\": -56 };\n                latlong[\"ST\"] = { \"latitude\": 1, \"longitude\": 7 };\n                latlong[\"SV\"] = { \"latitude\": 13.8333, \"longitude\": -88.9167 };\n                latlong[\"SY\"] = { \"latitude\": 35, \"longitude\": 38 };\n                latlong[\"SZ\"] = { \"latitude\": -26.5, \"longitude\": 31.5 };\n                latlong[\"TC\"] = { \"latitude\": 21.75, \"longitude\": -71.5833 };\n                latlong[\"TD\"] = { \"latitude\": 15, \"longitude\": 19 };\n                latlong[\"TF\"] = { \"latitude\": -43, \"longitude\": 67 };\n                latlong[\"TG\"] = { \"latitude\": 8, \"longitude\": 1.1667 };\n                latlong[\"TH\"] = { \"latitude\": 15, \"longitude\": 100 };\n                latlong[\"TJ\"] = { \"latitude\": 39, \"longitude\": 71 };\n                latlong[\"TK\"] = { \"latitude\": -9, \"longitude\": -172 };\n                latlong[\"TM\"] = { \"latitude\": 40, \"longitude\": 60 };\n                latlong[\"TN\"] = { \"latitude\": 34, \"longitude\": 9 };\n                latlong[\"TO\"] = { \"latitude\": -20, \"longitude\": -175 };\n                latlong[\"TR\"] = { \"latitude\": 39, \"longitude\": 35 };\n                latlong[\"TT\"] = { \"latitude\": 11, \"longitude\": -61 };\n                latlong[\"TV\"] = { \"latitude\": -8, \"longitude\": 178 };\n                latlong[\"TW\"] = { \"latitude\": 23.5, \"longitude\": 121 };\n                latlong[\"TZ\"] = { \"latitude\": -6, \"longitude\": 35 };\n                latlong[\"UA\"] = { \"latitude\": 49, \"longitude\": 32 };\n                latlong[\"UG\"] = { \"latitude\": 1, \"longitude\": 32 };\n                latlong[\"UM\"] = { \"latitude\": 19.2833, \"longitude\": 166.6 };\n                latlong[\"US\"] = { \"latitude\": 38, \"longitude\": -97 };\n                latlong[\"UY\"] = { \"latitude\": -33, \"longitude\": -56 };\n                latlong[\"UZ\"] = { \"latitude\": 41, \"longitude\": 64 };\n                latlong[\"VA\"] = { \"latitude\": 41.9, \"longitude\": 12.45 };\n                latlong[\"VC\"] = { \"latitude\": 13.25, \"longitude\": -61.2 };\n                latlong[\"VE\"] = { \"latitude\": 8, \"longitude\": -66 };\n                latlong[\"VG\"] = { \"latitude\": 18.5, \"longitude\": -64.5 };\n                latlong[\"VI\"] = { \"latitude\": 18.3333, \"longitude\": -64.8333 };\n                latlong[\"VN\"] = { \"latitude\": 16, \"longitude\": 106 };\n                latlong[\"VU\"] = { \"latitude\": -16, \"longitude\": 167 };\n                latlong[\"WF\"] = { \"latitude\": -13.3, \"longitude\": -176.2 };\n                latlong[\"WS\"] = { \"latitude\": -13.5833, \"longitude\": -172.3333 };\n                latlong[\"YE\"] = { \"latitude\": 15, \"longitude\": 48 };\n                latlong[\"YT\"] = { \"latitude\": -12.8333, \"longitude\": 45.1667 };\n                latlong[\"ZA\"] = { \"latitude\": -29, \"longitude\": 24 };\n                latlong[\"ZM\"] = { \"latitude\": -15, \"longitude\": 30 };\n                latlong[\"ZW\"] = { \"latitude\": -20, \"longitude\": 30 };\n                angular.module('Fortscale.shared.services')\n                    .constant('amMapsCountryLatLong', latlong);\n            })(amMaps = services.amMaps || (services.amMaps = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var services;\n        (function (services) {\n            var amMaps;\n            (function (amMaps) {\n                'use strict';\n                var amMapsUtilsInsertConfigDefault = {\n                    minBubbleSize: 10,\n                    maxBubbleSize: 30\n                };\n                var AmMapsUtils = (function () {\n                    function AmMapsUtils(assert, amMapsCountryLatLong) {\n                        this.assert = assert;\n                        this.amMapsCountryLatLong = amMapsCountryLatLong;\n                    }\n                    /**\n                     * Validates inser config countries\n                     * @param {Array<IAmMapsUtilsInsertCountriesConfig>} countries\n                     * @param {string} errMsg\n                     * @private\n                     */\n                    AmMapsUtils.prototype._validateCountries = function (countries, errMsg) {\n                        var _this = this;\n                        this.assert.isArray(countries, 'countries', errMsg);\n                        _.each(countries, function (country, index) {\n                            _this.assert.isString(country.alpha2, \"countries: index: \" + index + \", country.alpha2\", errMsg);\n                            _this.assert.isString(country.name, \"countries: index: \" + index + \", country.name\", errMsg);\n                            _this.assert(_.isNumber(country.value), errMsg + (\"countries: index: \" + index + \", country.value: Must be a number.\"), TypeError);\n                        });\n                    };\n                    AmMapsUtils.prototype._validateInsertConfig = function (config, errMsg, mapIsOptional) {\n                        // validate config\n                        this.assert.isObject(config, 'config', errMsg);\n                        // validate map\n                        this.assert.isObject(config.map, 'map', errMsg, mapIsOptional);\n                        if (config.map) {\n                            this.assert(config.map.dataProvider, errMsg + 'config.map object is not a valid map object.');\n                        }\n                        // validate minBubbleSize\n                        if (!_.isUndefined(config.minBubbleSize)) {\n                            this.assert(_.isNumber(config.minBubbleSize), errMsg + \"config.minBubbleSize must be a number.\", TypeError);\n                            this.assert(config.minBubbleSize > 0, errMsg + \"config.minBubbleSize must be greater than zero.\", TypeError);\n                        }\n                        // validate maxBubbleSize\n                        if (!_.isUndefined(config.maxBubbleSize)) {\n                            this.assert(_.isNumber(config.maxBubbleSize), errMsg + \"config.maxBubbleSize must be a number.\", TypeError);\n                            this.assert(config.maxBubbleSize > 0, errMsg + \"config.maxBubbleSize must be greater than zero.\", TypeError);\n                        }\n                        // validate maxBubbleSize relation to minBubbleSize\n                        if (!_.isUndefined(config.minBubbleSize) && !_.isUndefined(config.maxBubbleSize)) {\n                            this.assert(config.maxBubbleSize >= 0, config.minBubbleSize + \"config.maxBubbleSize must be greater or equal to config.minBubbleSize.\", TypeError);\n                        }\n                        // validate maxBubbleSize when no minBubbleSize\n                        if (_.isUndefined(config.minBubbleSize) && !_.isUndefined(config.maxBubbleSize)) {\n                            this.assert(config.maxBubbleSize >= amMapsUtilsInsertConfigDefault.minBubbleSize, errMsg +\n                                \"config.maxBubbleSize must be greater or equal to config.minBubbleSize default which is \" +\n                                amMapsUtilsInsertConfigDefault.minBubbleSize, RangeError);\n                        }\n                        // validate minBubbleSize when no maxBubbleSize\n                        if (!_.isUndefined(config.minBubbleSize) && _.isUndefined(config.maxBubbleSize)) {\n                            this.assert(config.minBubbleSize <= amMapsUtilsInsertConfigDefault.maxBubbleSize, errMsg +\n                                \"config.maxBubbleSize must be greater or equal to config.minBubbleSize default which is \" +\n                                amMapsUtilsInsertConfigDefault.minBubbleSize, RangeError);\n                        }\n                    };\n                    /**\n                     * Returns a merged new object with the defaults and user config\n                     *\n                     * @param {IAmMapsUtilsInsertConfig} config\n                     * @returns {IAmMapsUtilsInsertConfig}\n                     * @private\n                     */\n                    AmMapsUtils.prototype._getInsertConfig = function (config) {\n                        return _.merge({}, amMapsUtilsInsertConfigDefault, config);\n                    };\n                    AmMapsUtils.prototype.getBubbleDef = function (country, maxSquare, minSquare, maxValue, minValue) {\n                        var value = country.value;\n                        // calculate size of a bubble\n                        var square = ((value - minValue) || 0.001) / ((maxValue - minValue) || 0.001) * (maxSquare - minSquare) +\n                            minSquare;\n                        if (square < minSquare) {\n                            square = minSquare;\n                        }\n                        var size = Math.sqrt(square / (Math.PI * 2));\n                        var def = {\n                            title: country.name,\n                            value: country.value,\n                            color: country.color || '#FF0000',\n                            longitude: this.amMapsCountryLatLong[country.alpha2].longitude,\n                            latitude: this.amMapsCountryLatLong[country.alpha2].latitude,\n                        };\n                        if (country.anomaly) {\n                            def.imageURL = 'assets/images/location_anomaly.png';\n                            def.width = 24;\n                            def.height = 24;\n                        }\n                        else {\n                            def.type = 'circle';\n                            def.width = size;\n                            def.height = size;\n                        }\n                        return def;\n                    };\n                    AmMapsUtils.prototype._getBubblesDef = function (config) {\n                        var _this = this;\n                        if (config.countries.length === 0) {\n                            return [];\n                        }\n                        // get config options\n                        config = this._getInsertConfig(config);\n                        var images = (config.map && config.map.dataProvider.images) || [];\n                        // it's better to use circle square to show difference between values, not a radius\n                        var maxSquare = config.maxBubbleSize * config.maxBubbleSize * 2 * Math.PI;\n                        var minSquare = config.minBubbleSize * config.minBubbleSize * 2 * Math.PI;\n                        var maxValue = _.maxBy(config.countries, 'value').value;\n                        var minValue = _.minBy(config.countries, 'value').value;\n                        _.each(config.countries, function (country) {\n                            images.push(_this.getBubbleDef(country, maxSquare, minSquare, maxValue, minValue));\n                        });\n                        return images;\n                    };\n                    /**\n                     * Returns a LatLong object for a specific alpha2 country code. Returns null if no country code is found\n                     *\n                     * @param {string} Alpha2\n                     * @returns {{latitude: number, longitude: number}|null}\n                     */\n                    AmMapsUtils.prototype.getLatLongByAlpha2Code = function (Alpha2) {\n                        return this.amMapsCountryLatLong[Alpha2] || null;\n                    };\n                    AmMapsUtils.prototype.getBubbles = function (config) {\n                        // validate config\n                        var errMsg = this._ERR_MSG + 'getBubbles: ';\n                        this._validateInsertConfig(config, errMsg, true);\n                        this._validateCountries(config.countries, errMsg + 'config: ');\n                        return this._getBubblesDef(config);\n                    };\n                    /**\n                     * Inserts bubbles into a map.\n                     *\n                     * @param {IAmMapsUtilsInsertConfig} config\n                     */\n                    AmMapsUtils.prototype.insertBubbles = function (config) {\n                        // validate config\n                        var errMsg = this._ERR_MSG + 'insertBubbles: ';\n                        this._validateInsertConfig(config, errMsg, false);\n                        this._validateCountries(config.countries, errMsg + 'config: ');\n                        config.map.dataProvider.images = this._getBubblesDef(config);\n                    };\n                    AmMapsUtils.prototype._getCountriesLatLong = function (config) {\n                        var _this = this;\n                        return _.map(\n                        // filter countries to only include countries that exist in amMapsCountryLatLong\n                        _.filter(config.countries, function (country) { return _this.amMapsCountryLatLong[country.alpha2]; }), \n                        // return\n                        function (country) {\n                            return {\n                                longitude: _this.amMapsCountryLatLong[country.alpha2].longitude,\n                                latitude: _this.amMapsCountryLatLong[country.alpha2].latitude\n                            };\n                        });\n                    };\n                    AmMapsUtils.prototype.getLines = function (config) {\n                        // validate config\n                        var errMsg = this._ERR_MSG + 'getBubbles: ';\n                        this._validateInsertConfig(config, errMsg, true);\n                        var lines = this._getCountriesLatLong(config);\n                        this._getCountriesLatLong(config);\n                        return [\n                            {\n                                id: \"plane-line\",\n                                arc: -0.85,\n                                alpha: 0.3,\n                                latitudes: _.map(lines, 'latitude'),\n                                longitudes: _.map(lines, 'longitude')\n                            },\n                            {\n                                id: \"plane-shadow\",\n                                arc: 0,\n                                alpha: 0,\n                                latitudes: _.map(lines, 'latitude'),\n                                longitudes: _.map(lines, 'longitude')\n                            }\n                        ];\n                    };\n                    AmMapsUtils.prototype.getAlertImage = function () {\n                        return {\n                            svgPath: \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\n                            color: \"#AA0000\",\n                            scale: 0.03,\n                            positionScale: 1.8\n                        };\n                    };\n                    AmMapsUtils.prototype.getPlaneImage = function () {\n                        return [\n                            {\n                                svgPath: \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\n                                positionOnLine: 0,\n                                color: \"#AA0000\",\n                                animateAlongLine: true,\n                                lineId: \"plane-line\",\n                                flipDirection: true,\n                                loop: true,\n                                scale: 0.03,\n                                positionScale: 1.8\n                            },\n                            {\n                                svgPath: \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\n                                positionOnLine: 0,\n                                color: \"#000000\",\n                                alpha: 0.1,\n                                animateAlongLine: true,\n                                lineId: \"plane-shadow\",\n                                flipDirection: true,\n                                loop: true,\n                                scale: 0.03,\n                                positionScale: 1.3\n                            }\n                        ];\n                    };\n                    AmMapsUtils.$inject = ['assert', 'amMapsCountryLatLong'];\n                    return AmMapsUtils;\n                }());\n                angular.module('Fortscale.shared.services')\n                    .service('amMapsUtils', AmMapsUtils);\n            })(amMaps = services.amMaps || (services.amMaps = {}));\n        })(services = shared.services || (shared.services = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.filters', []);\n}());\n","(function () {\n    'use strict';\n    var _errMsg = 'Fortscale.shared.filters: pageToOffset: ';\n    function pageToOffset(assert) {\n        /**\n         * Filter\n         * takes a pageNum and pageAmount and converts it to offset\n         *\n         * @param {string | number} pageNumStr\n         * @param {string | number} pageSizeStr\n         * @returns {number | undefined}\n         */\n        function pageToOffsetFilter(pageNumStr, pageSizeStr) {\n            // Return undefined if no pageNum is received\n            if (!angular.isDefined(pageNumStr)) {\n                return undefined;\n            }\n            // Convert values to integers if they are not integers\n            var pageNum = parseInt(pageNumStr);\n            var pageSize = parseInt(pageSizeStr);\n            // Validate values\n            assert(!_.isNaN(pageNum) && angular.isNumber(NaN), _errMsg +\n                'pageNumStr argument must be a number.', TypeError);\n            assert(angular.isDefined(pageSizeStr), _errMsg +\n                'pageSize argument must be provided.', ReferenceError);\n            assert(!_.isNaN(pageSize) && angular.isNumber(pageSize), _errMsg +\n                'pageSize argument must be a number.', TypeError);\n            assert(pageSize !== 0, _errMsg +\n                'pageSize argument must not be equal to 0.', RangeError);\n            // return the offset\n            return (pageNum - 1) * pageSize;\n        }\n        return pageToOffsetFilter;\n    }\n    pageToOffset.$inject = ['assert'];\n    angular.module('Fortscale.shared.filters')\n        .filter('pageToOffset', pageToOffset);\n}());\n","(function () {\n    'use strict';\n    function unixToTimeStamp() {\n        /**\n         * Takes a unix time stamp and convert it to timestamp in milliseconds\n         *\n         * @param {string|undefined} val\n         * @returns {string|undefined}\n         */\n        function unixToTimeStampFilter(val) {\n            // If val is falsy return it.\n            if (!val) {\n                return val;\n            }\n            var values = val.split(',');\n            var timeStamps = _.map(values, function (timeStr) {\n                var trimmedTimeStr = timeStr.trim();\n                // If its a string and the length of unix, add '000' and return\n                if (/^(\\d{10})$/.test(trimmedTimeStr)) {\n                    return trimmedTimeStr + '000';\n                }\n                // If previous condition is false then return the value as is.\n                throw new RangeError('unixToTimeStamp.filter: csv must be of 10 ' +\n                    'chars long unix time stamps. \"' + trimmedTimeStr + '\" is not.');\n            });\n            // Return a CSV\n            return timeStamps.join(',');\n        }\n        return unixToTimeStampFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('unixToTimeStamp', unixToTimeStamp);\n}());\n","(function () {\n    'use strict';\n    function entityIdToName(dataEntities) {\n        function entityIdToNameFilter(id) {\n            var entityObject = dataEntities.getEntityById(id);\n            return (entityObject && entityObject.name) || id;\n        }\n        return entityIdToNameFilter;\n    }\n    entityIdToName.$inject = ['dataEntities'];\n    angular.module('Fortscale.shared.filters')\n        .filter('entityIdToName', entityIdToName);\n}());\n","(function () {\n    'use strict';\n    function durationToPrettyTime(utils) {\n        function durationToPrettyTimeFilter(duration) {\n            if (duration === undefined || duration === null) {\n                return duration;\n            }\n            return utils.duration.prettyTime(duration * 1000);\n        }\n        return durationToPrettyTimeFilter;\n    }\n    durationToPrettyTime.$inject = ['utils'];\n    angular.module('Fortscale.shared.filters')\n        .filter('durationToPrettyTime', durationToPrettyTime);\n}());\n","(function () {\n    'use strict';\n    function pascalCase() {\n        function pascalCaseFilter(val) {\n            if (val !== undefined && _.isString(val) && val !== '') {\n                var str = val.toLowerCase();\n                str = str.charAt(0).toUpperCase() + str.slice(1);\n                return str;\n            }\n            return val;\n        }\n        return pascalCaseFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('pascalCase', pascalCase);\n}());\n","(function () {\n    'use strict';\n    function ouDisplay() {\n        function ouDisplayFilter(val) {\n            var rgx = /=/;\n            if (rgx.test(val)) {\n                return val.split('=')[1];\n            }\n            return val;\n        }\n        return ouDisplayFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('ouDisplay', ouDisplay);\n}());\n","/**\n * Based on this solution:\n * http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\n *\n * Converts Bytes to pretty bytes.\n */\n(function () {\n    'use strict';\n    function prettyBytes() {\n        return function (bytes, precision) {\n            if (bytes === null || bytes === undefined) {\n                return bytes;\n            }\n            if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {\n                return '-';\n            }\n            bytes = parseFloat(bytes);\n            if (bytes === 0) {\n                return '0 Byte';\n            }\n            if (typeof precision !== 'number') {\n                precision = 1;\n            }\n            var k = 1000; // or 1024 for binary\n            var dm = precision + 1 || 3;\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n            var i = Math.floor(Math.log(bytes) / Math.log(k));\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('prettyBytes', prettyBytes);\n}());\n","(function () {\n    'use strict';\n    function prettyOU($sce) {\n        /**\n         * Converts a raw string to pretty ou string\n         * @example this: \"ou=admin\" will be this: \"Admin\"\n         *\n         * @param {string} ouValue\n         * @returns {string}\n         */\n        function valToPrettyOu(ouValue) {\n            // If starts with OU=\n            if (/^ou=/i.test(ouValue)) {\n                // Remove first three chars and trim\n                ouValue = ouValue.substr(3).trim();\n                if (ouValue.length === 0) {\n                    return '';\n                }\n                // If length is one\n                if (ouValue.length === 1) {\n                    return ouValue.toUpperCase();\n                }\n                // If length greater then one, uppercase first letter and return\n                return ouValue.charAt(0).toUpperCase() + ouValue.substr(1);\n            }\n            return ouValue;\n        }\n        /**\n         * Create an ou group element with href\n         *\n         * @param {string} ouValue\n         * @returns {IAugmentedJQuery}\n         */\n        function createGroupElement(ouValue) {\n            // Create the pretty ou value\n            var prettyVal = valToPrettyOu(ouValue);\n            // create an anchor element\n            var el = angular.element(\"<a>\" + prettyVal + \"</a>\");\n            // add ng-href attribute\n            el.attr('href', \"#/d/explore/users?filters=users.ou=~\" + prettyVal);\n            // return the element\n            return el;\n        }\n        /**\n         * Create ou groups container element that holds all ou groups element.\n         * @param {string} ouValues\n         * @returns {IAugmentedJQuery}\n         */\n        function createGroupsElement(ouValues) {\n            // Create a span element to contain the groups\n            var containerEl = angular.element('<span class=\"ou-groups-container\" style=\"display: flex; flex-flow: column nowrap;\"></span>');\n            // populate the element\n            var ouGroups = _.map(ouValues, createGroupElement);\n            _.each(ouGroups, function (ouGroup) {\n                containerEl.append(ouGroup);\n            });\n            return containerEl;\n        }\n        /**\n         * If received string starts with OU= then remove it and uppercase first letter\n         *\n         * @param {string} ouStr\n         * @returns {IAugmentedJQuery|string}\n         */\n        function prettyOUFilter(ouStr) {\n            // Return the value as is if its not a sting.\n            if (!_.isString(ouStr)) {\n                return ouStr;\n            }\n            //Split into csv\n            var ouValues = ouStr.split(',');\n            // If length is zero\n            if (ouValues.length === 0) {\n                return 'No Organizational unit';\n            }\n            var el = createGroupsElement(ouValues);\n            return $sce.trustAsHtml(el);\n        }\n        return prettyOUFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('prettyOU', ['$sce', prettyOU]);\n}());\n","(function () {\n    'use strict';\n    function stringToDate(assert) {\n        function stringToDateFilter(stringDate, dateFormat) {\n            assert.isString(stringDate, 'stringDate', 'stringToDate.filter: ');\n            assert.isString(dateFormat, 'dateFormat', 'stringToDate.filter: ');\n            return moment(stringDate).format(dateFormat);\n        }\n        return stringToDateFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('stringToDate', ['assert', stringToDate]);\n}());\n","(function () {\n    'use strict';\n    function prettyMessage($filter, assert, appConfig) {\n        var _CONFIG_LOCALE_KEY = 'system.locale.settings';\n        /**\n         * This filter will look for the key in the messages and return the message\n         * If the message exists - return the value of the message\n         * If the value is not exists - return valueIfNotExits.\n         * If the value is not exists and valueIfNotExists is not defined - return the original key\n         *\n         * @param {*} value\n         * @param {{}} valueIfNotExists - optional value\n         * @returns {*}\n         */\n        function prettyMessageFilter(messageKey, valueIfNotExists) {\n            assert.isString(messageKey, 'message key is not defined');\n            var messagePrefix = 'messages.' + appConfig.getConfigItem(_CONFIG_LOCALE_KEY).value;\n            var fullMessageKey = messagePrefix + \".\" + messageKey;\n            var configItem = appConfig.getConfigItem(fullMessageKey);\n            if (configItem !== undefined && configItem !== null) {\n                return configItem.value;\n            }\n            else {\n                if ((valueIfNotExists !== undefined) && (valueIfNotExists !== '')) {\n                    return valueIfNotExists;\n                }\n                else {\n                    return messageKey;\n                }\n            }\n        }\n        return prettyMessageFilter;\n    }\n    prettyMessage.$inject = ['$filter', 'assert', 'appConfig'];\n    angular.module('Fortscale.shared.filters')\n        .filter('prettyMessage', prettyMessage);\n}());\n","(function () {\n    'use strict';\n    function prettyAlertName($filter, assert) {\n        /**\n         * This filter will look for the alert name in messages and return the message\n         * If the message exists - return the value of the message\n         * or the original key if not exists\n         *\n         * @param {{name: string, timeframe: string}} alert\n         * @returns {string}\n         */\n        function prettyAlertNameFilter(alert) {\n            if (!alert) {\n                return '';\n            }\n            assert.isString(alert.name, 'alert.name', 'prettyAlertNameFilter: ');\n            var fullKey = \"alert.\" + alert.name + \".name\";\n            var prettyAlertName = $filter('prettyMessage')(fullKey, alert.name);\n            if (alert && alert.timeframe) {\n                prettyAlertName = \"\\n                    \" + prettyAlertName + \" | <span class=\\\"alert-timeframe-tag alert-timeframe-tag--\" + alert.timeframe.toLowerCase() + \"\\\">\\n                        \" + alert.timeframe + \"\\n                    </span>\";\n            }\n            return prettyAlertName;\n        }\n        return prettyAlertNameFilter;\n    }\n    prettyAlertName.$inject = ['$filter', 'assert'];\n    angular.module('Fortscale.shared.filters')\n        .filter('prettyAlertName', prettyAlertName);\n}());\n","(function () {\n    'use strict';\n    function round() {\n        function roundFilter(value) {\n            var parsedVal = parseInt(value, 10);\n            if (isNaN(parsedVal)) {\n                return value;\n            }\n            return Math.round(parsedVal);\n        }\n        return roundFilter;\n    }\n    round.$inject = [];\n    angular.module('Fortscale.shared.filters')\n        .filter('round', round);\n}());\n","(function () {\n    'use strict';\n    function encodeUrlComponent() {\n        function encodeUrlComponentFilter(value) {\n            if (!_.isString(value)) {\n                return value;\n            }\n            return window.encodeURIComponent(value);\n        }\n        return encodeUrlComponentFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('encodeUrlComponent', encodeUrlComponent);\n}());\n","(function () {\n    'use strict';\n    function trancateDecimal() {\n        /**\n         * This function get a string, if the string is number,\n         * and the fraction part is equals to zero, return the number without the fraction part.\n         * For any other scenario, return the string as it is.\n         * @param valueAsString\n         * @returns {*}\n         */\n        function trancateDecimalFilter(valueAsString) {\n            //IF not a number - return the value as it is\n            var trimmedValueAsString = valueAsString.trim();\n            if (isNaN(trimmedValueAsString) ||\n                !/[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/.test(valueAsString) || /^0x/.test(valueAsString)) {\n                return valueAsString;\n            }\n            var numberAsInt = parseInt(trimmedValueAsString);\n            var numberAsFloat = parseFloat(trimmedValueAsString);\n            if (numberAsInt - numberAsFloat === 0) {\n                return numberAsInt;\n            }\n            else {\n                return numberAsFloat;\n            }\n        }\n        return trancateDecimalFilter;\n    }\n    trancateDecimal.$inject = [];\n    angular.module('Fortscale.shared.filters')\n        .filter('trancateDecimal', trancateDecimal);\n}());\n","(function () {\n    'use strict';\n    function orNA() {\n        function orNAFilter(val) {\n            if (val === null || val === undefined || val === \"\") {\n                return \"N/A\";\n            }\n            return val;\n        }\n        return orNAFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('orNA', orNA);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Returns a filter\n     *\n     * @returns {function(any): number}\n     */\n    function orZero() {\n        /**\n         * if val is \"falsy\" return 0\n         *\n         * @param {any} number\n         * @returns number\n         */\n        return function (val) {\n            if (!val) {\n                return 0;\n            }\n            return val;\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('orZero', [orZero]);\n}());\n","(function () {\n    'use strict';\n    var errMsg = 'anomalyTypeFormatter.filter: ';\n    function anomalyTypeFormatter($filter, assert, fsIndicatorErrorCodes) {\n        function pipeNumberFormatterFilter(value) {\n            return $filter('trancateDecimal')(value);\n        }\n        function pipeShortDateFilter(value) {\n            return $filter('date')(new Date(value), 'yyyy-MM-dd HH:mm');\n        }\n        function pipeDataUsageAnomalyFilter(value) {\n            return value + '/s';\n        }\n        function pipeFailureCodeAnomalyFilter(errorCode, indicator) {\n            var dataEntityId = indicator.dataEntitiesIds[0];\n            return fsIndicatorErrorCodes.getDisplayMessage(dataEntityId, errorCode);\n        }\n        function pipeFormatByIndicator(value, indicator) {\n            /**\n             * The filter config list.\n             * @type {Array<{name: string, queries: Array<{}>, filter: function}>}\n             */\n            var filterConfigList = [\n                {\n                    name: \"Bytes\",\n                    queries: [\n                        {\n                            anomalyType: \"Downloaded Bytes\"\n                        },\n                        {\n                            anomalyType: \"Data Usage Anomaly\"\n                        },\n                        {\n                            anomalyType: \"High Volume of Printed Data\"\n                        }\n                    ],\n                    filter: $filter('prettyBytes')\n                },\n                {\n                    name: \"Data Usage Anomaly\",\n                    queries: [\n                        {\n                            anomalyType: \"Data Usage Anomaly\"\n                        }\n                    ],\n                    filter: pipeDataUsageAnomalyFilter\n                },\n                {\n                    name: \"Short Time\",\n                    queries: [\n                        {\n                            anomalyType: \"Time\"\n                        },\n                        {\n                            anomalyType: \"Activity Time Anomaly\"\n                        }\n                    ],\n                    filter: pipeShortDateFilter\n                },\n                {\n                    name: \"Failure Code\",\n                    queries: [\n                        {\n                            anomalyTypeFieldName: \"failure_code\"\n                        }\n                    ],\n                    filter: pipeFailureCodeAnomalyFilter\n                }\n            ];\n            /**\n             * Checks if indicator.key equals the provided value\n             *\n             * @param {*} value\n             * @param {string} key\n             * @returns {boolean}\n             */\n            function matchQueryField(value, key) {\n                return indicator[key] === value;\n            }\n            /**\n             * Iterates through query field and return true if all query fields match\n             *\n             * @param {{}} query\n             * @returns {boolean}\n             */\n            function matchQuery(query) {\n                return _.every(query, matchQueryField);\n            }\n            /**\n             * Returns true if any of the queries is a match\n             *\n             * @param {Array<{}>} queries\n             * @returns {boolean}\n             */\n            function isAnyFilterQueryMatch(queries) {\n                return _.some(queries, matchQuery);\n            }\n            /**\n             * If any of the queries in the filter config object match the indicator, pipe the value through filter\n             *\n             * @param {{name: string, queries: Array<{}>, filter: function}} filterConfigObj\n             * @param {*} value\n             * @returns {*}\n             */\n            function tentativelyPipeFilter(filterConfigObj, value) {\n                if (isAnyFilterQueryMatch(filterConfigObj.queries)) {\n                    return filterConfigObj.filter(value, indicator);\n                }\n                return value;\n            }\n            // Iterate through queryConfigList and pipe the value through any filter that has a query match\n            _.each(filterConfigList, function (filterConfigObj) {\n                value = tentativelyPipeFilter(filterConfigObj, value);\n            });\n            return value;\n        }\n        /**\n         * This filter will find if any filter query matches the indicator. If it does, the value will be piped via the\n         * filter.\n         *\n         * @param {*} value\n         * @param {{}} indicator\n         * @returns {*}\n         */\n        function anomalyTypeFormatterFilter(value, indicator) {\n            // Make sure indicator is provided\n            assert.isObject(indicator, 'indicator', errMsg);\n            // Convert numbers to integer (default formatter)\n            value = pipeNumberFormatterFilter(value);\n            // Match filter queries and pipe the filters\n            value = pipeFormatByIndicator(value, indicator);\n            // Return the formatted value\n            return value;\n        }\n        return anomalyTypeFormatterFilter;\n    }\n    anomalyTypeFormatter.$inject = ['$filter', 'assert', 'fsIndicatorErrorCodes'];\n    angular.module('Fortscale.shared.filters')\n        .filter('anomalyTypeFormatter', anomalyTypeFormatter);\n}());\n","/**\n * Based on https://github.com/jdpedrie/angularjs-ordinal-filter\n * This filter converts val into an ordinal value.\n * Example: 1 => st\n * Example: 2 => nd\n */\n(function () {\n    'use strict';\n    function fsOrdinal() {\n        /**\n         *\n         * @param {string} val\n         * @returns {string}\n         */\n        function fsOrdinalFilter(val) {\n            val = parseInt(val, 10);\n            return Math.floor(val / 10) === 1 ? 'th' :\n                (val % 10 === 1 ? 'st' :\n                    (val % 10 === 2 ? 'nd' :\n                        (val % 10 === 3 ? 'rd' : 'th')));\n        }\n        return fsOrdinalFilter;\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsOrdinal', fsOrdinal);\n}());\n","/**\n * Converts integer value to a humanized moment duration.\n * Example: 60, \"days\" => 2 months\n * example: 7, \"days\" => 1 week\n */\n(function () {\n    'use strict';\n    var allowedUnits = ['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years'];\n    function fsPrettyDuration(assert) {\n        function fsPrettyDurationFilter(val, sourceUnits) {\n            // Validations\n            assert.isString(sourceUnits, 'sourceUnits', 'fsPrettyDuration.filter: ', false, false);\n            assert(allowedUnits.indexOf(sourceUnits.trim()) !== -1, \"fsPrettyDuration.filter: sourceUnits argument must be on of the following: \" + allowedUnits.join(', '), RangeError);\n            val = parseInt(val, 10);\n            assert(!isNaN(val), \"fsPrettyDuration.filter: value could not be parsed to int.\", TypeError);\n            // Convert val to string\n            var s = moment.duration(val, sourceUnits).humanize();\n            // Remove \"a \", for example \"a month\" will become \"month\"\n            s = s.replace('a ', '');\n            return s;\n        }\n        return fsPrettyDurationFilter;\n    }\n    fsPrettyDuration.$inject = [\n        'assert'\n    ];\n    angular.module('Fortscale.shared.filters')\n        .filter('fsPrettyDuration', fsPrettyDuration);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Returns a filter\n     *\n     * @returns {function(any): number}\n     */\n    function fsDTHumanize() {\n        return function (val, timeUnit) {\n            if (!timeUnit) {\n                return val;\n            }\n            var durationInt = parseInt(val, 10);\n            var duration = moment.duration(durationInt, timeUnit);\n            var humanized = duration.humanize();\n            if (humanized.indexOf('a ') === 0) {\n                return \"Last \" + humanized.substr(2);\n            }\n            return \"Last \" + humanized;\n        };\n    }\n    function fsDTDiffHumanize() {\n        return function (val) {\n            var time = parseInt(val, 10);\n            var diff = moment().diff(time);\n            var duration = moment.duration(diff, 'milliseconds');\n            return duration.humanize();\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsDTHumanize', [fsDTHumanize])\n        .filter('fsDTDiffHumanize', [fsDTDiffHumanize]);\n}());\n","/**\n * Filter that returns only items without matching items in the provided list.\n */\n(function () {\n    'use strict';\n    function notIn(assert) {\n        /**\n         *\n         * @param {Array<*>} val\n         * @param {{compareKey: string, list: Array<*>}} mapObj\n         * @returns {Array<*>}\n         */\n        function argIsObject(val, mapObj) {\n            if (!mapObj || !mapObj.list) {\n                return val;\n            }\n            // Validations\n            assert.isString(mapObj.compareKey, 'mapObj.compareKey', 'fsNotIn.filter: ');\n            assert.isArray(mapObj.list, 'mapObj.list', 'fsNotIn.filter: ');\n            // Returns only items that have no matching item in mapObj.list\n            return _.filter(val, function (item) {\n                return _.every(mapObj.list, function (listItem) {\n                    return listItem[mapObj.compareKey] !== item[mapObj.compareKey];\n                });\n            });\n        }\n        return function (val, arg2) {\n            if (!val) {\n                return val;\n            }\n            // Validations\n            if (!_.isArray(val)) {\n                console.warn('fsNotIn.filter: Trying to filter a non Array argument', val);\n                return val;\n            }\n            // Check overloading and invoke right method\n            if (_.isArray(arg2)) {\n            }\n            else if (_.isObject(arg2)) {\n                return argIsObject(val, arg2);\n            }\n            else {\n                console.error('fsNotIn.filter: Second argument must be an array or an object.');\n                return val;\n            }\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsNotIn', ['assert', notIn]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Returns a filter\n     *\n     * @returns {function(any): number}\n     */\n    function fsPartialStrong($sce) {\n        /**\n         * This filter get text, and part of substring of this text,\n         * it returns html which emphasis the the sub text (if such given).\n         * Pay attention that angular process html only if you use it has ng-html-bind and not {{}}\n         *\n         *  prefixOnly - IF TRUE - mark only textToMakeStronger which is in the begining of the text\n         *  condition-optional. If false, return the original value\n         *\n         */\n        return function (val, textToMakeStronger, prefixOnly, allowBoldCondition) {\n            if (allowBoldCondition === false) {\n                return val;\n            }\n            //If no val or no textToMakeStronger return the value.\n            if (!textToMakeStronger || !val) {\n                return val;\n            }\n            var fullTextLower = val.toLowerCase();\n            var strongTextLower = textToMakeStronger.toLowerCase();\n            var startIndex = -1;\n            if (prefixOnly) {\n                startIndex = fullTextLower.startsWith(strongTextLower) ? 0 : -1;\n            }\n            else {\n                //Extract the start and end indexes of the part which should be emphasis\n                startIndex = fullTextLower.indexOf(strongTextLower);\n            }\n            if (startIndex === -1) {\n                return val;\n            }\n            var endIndex = startIndex + strongTextLower.length;\n            //Rebuild the string with the strong part\n            var beforeStrongPart = val.substr(0, startIndex);\n            var strongPart = val.substr(startIndex, strongTextLower.length);\n            var afterStrongPart = val.substring(endIndex);\n            var newHTMLUntrusted = beforeStrongPart + \"<span style='color: #024d89;font-weight: 700;'>\" + strongPart + \"</span>\" + afterStrongPart;\n            return $sce.trustAsHtml(newHTMLUntrusted);\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsPartialStrong', ['$sce', fsPartialStrong]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Returns a filter\n     *\n     * @returns {function(any): number}\n     */\n    function fsRemoveIsExists() {\n        /**\n         * This filter get text, and part of substring of this text,\n         * it returns the text without the prefix\n\n         *\n         *  prefixOnly - IF TRUE - mark only textToRemove which is in the beginning of the text\n         *  condition-optional. If false, return the original value\n         *\n         */\n        return function (val, textToRemove, prefixOnly) {\n            //If no val or no textToMakeStronger return the value.\n            if (!textToRemove || !val) {\n                return val;\n            }\n            var fullTextLower = val.toLowerCase();\n            var strongTextLower = textToRemove.toLowerCase();\n            var startIndex = -1;\n            if (prefixOnly) {\n                startIndex = fullTextLower.startsWith(strongTextLower) ? 0 : -1;\n            }\n            else {\n                //Extract the start and end indexes of the part which should be emphasis\n                startIndex = fullTextLower.indexOf(strongTextLower);\n            }\n            if (startIndex === -1) {\n                return val;\n            }\n            var endIndex = startIndex + strongTextLower.length;\n            //Rebuild the string without the removed part\n            var beforeRemovePart = val.substr(0, startIndex);\n            var afterRemovePart = val.substring(endIndex);\n            var newText = beforeRemovePart + afterRemovePart;\n            return newText;\n        };\n    }\n    angular.module('Fortscale.shared.filters')\n        .filter('fsRemoveIsExists', fsRemoveIsExists);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.directives', [\n        'Fortscale.shared.directives.fsStateContainer',\n        'Fortscale.shared.components.fsResourceStore',\n        'Fortscale.shared.directives.fsHrefAlert',\n        'Fortscale.shared.directives.fsUserTagDetails'\n    ]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Holds a default state adapter. Used when fetching data. Causes any _NONE_ or _ALL_ values\n     * to be null\n     *\n     * @type {Array}\n     */\n    var DEFAULT_STATE_ADAPTER = [\n        {\n            queryValue: '_NONE_',\n            changeTo: null\n        },\n        {\n            queryValue: '_ALL_',\n            changeTo: null\n        }\n    ];\n    /**\n     * StateContainerController constructor\n     *\n     * @param {angular.$scope} $scope\n     * @param {angular.$element} $element\n     * @param {object} dependencyMounter\n     * @constructor\n     */\n    function StateContainerController($scope, $element, dependencyMounter) {\n        var ctrl = this;\n        ctrl._isStateInitialized = false;\n        ctrl._init($scope, $element, dependencyMounter);\n        /**\n         * Used as a delegate for anything that wants to notify pre-state to state change.\n         * It's an instance property so it would be possible to preserve binding to the instance.\n         *\n         */\n        ctrl.applyPreState = function () {\n            return ctrl._applyPreState();\n        };\n        /**\n         * Used as a delegate for anything that wants to update a specific control state\n         * It's an instance property so it would be possible to preserve binding to the instance.\n         *\n         * @param {{id: string, type: string, value: *, immediate: boolean=}} ctrlState\n         */\n        ctrl.updateCtrlState = function (ctrlState) {\n            return ctrl._updateCtrlState(ctrlState);\n        };\n        /**\n         * Used as a delegate for anything that needs to get its own state from stateModel\n         * Returns the value of a specific property on the state object.\n         * It's an instance property so it would be possible to preserve binding to the instance.\n         *\n         * @param {string} controlId\n         * @returns {*}\n         */\n        ctrl.fetchStateById = function (controlId) {\n            return ctrl._fetchStateById(controlId);\n        };\n        /**\n         * Start data fetching service, and places the result on the control instance as dataModel\n         * Used as a delegate by anything that needs to refresh the data.\n         * It's an instance property so it would be possible to preserve binding to the instance.\n         *\n         * @returns {HttpPromise}\n         */\n        ctrl.refreshData = function () {\n            return ctrl._fetchData();\n        };\n    }\n    // Controller prototype\n    angular.extend(StateContainerController.prototype, {\n        /**\n         * PRIVATE METHODS\n         */\n        /**\n         * Initiates state object by duplicating provided stateModel\n         * and placing it on instance as stateModel\n         *\n         * @private\n         */\n        _initState: function () {\n            this.stateModel = null;\n        },\n        /**\n         * Initiates the child state controllers reference list on instance\n         * as _childStateContainerCtrls\n         *\n         * @private\n         */\n        _initChildStateRefList: function () {\n            this._childStateContainerCtrls = [];\n        },\n        /**\n         * Initiates the parent state controllers reference on instance\n         * as _parentStateContainerCtrl\n         *\n         * @private\n         */\n        _initParenStateRef: function () {\n            this._parentStateContainerCtrl = null;\n        },\n        /**\n         * Inits a resource, using resourceFactory\n         *\n         * @private\n         */\n        _initResource: function () {\n            if (this._resourceSettings) {\n                // Validate resource settings if not string\n                if (!_.isString(this._resourceSettings)) {\n                    this._validateResourceSettings('_initResource', this._resourceSettings);\n                }\n                // interpolate the settings\n                var interpolated = this.interpolation.interpolate(this._resourceSettings, this.stateModel);\n                // create the resource and store it as _resource\n                this._resource = this.resourceFactory.create(interpolated.entity);\n            }\n        },\n        /**\n         * Registers a (potentially) parent StateContainerController controller\n         * by placing it on instance as _parentStateContainerCtrl\n         *\n         * @param  {StateContainerController} stateContainerCtrl\n         * @private\n         */\n        _registerParentController: function (stateContainerCtrl) {\n            var errMsgStart = 'StateContainerController: _registerParentController: ';\n            // Validate stateContainerCtrl is an instance of StateContainerController\n            if (!(stateContainerCtrl instanceof StateContainerController)) {\n                throw new TypeError(errMsgStart +\n                    'stateContainerCtrl argument must be an instance of StateContainerController.');\n            }\n            this._parentStateContainerCtrl = stateContainerCtrl;\n        },\n        /**\n         * Iterates through _childStateContainerCtrls,\n         * and for each child-control invokes updateState(this.stateModel, doNotOverride)\n         *\n         * @param {boolean=} doNotOverride If true, the new state will not override existing values.\n         * @param {boolean=} doNotFetchData If true, _fetchData will not be invoked.\n         * @param {boolean=} doGetFromUrl If true, merge with state from url\n         * @param {object=} alterState An object that should be used instead of the instance's\n         * stateModel\n         * @private\n         */\n        _updateChildStates: function (doNotOverride, doNotFetchData, doGetFromUrl, alterState) {\n            var ctrl = this;\n            angular.forEach(this._childStateContainerCtrls, function (childCtrl) {\n                // This is used to determine which state to pass\n                var targetState = alterState || ctrl.stateModel;\n                // if true will tell updateState to permeate only the received state,\n                // and not the entire state\n                var doPermeateGottenState = angular.isDefined(alterState);\n                childCtrl.updateState(targetState, doNotOverride, doNotFetchData, doGetFromUrl, doPermeateGottenState);\n            });\n        },\n        /**\n         * Iterates through _childStateContainerCtrls,\n         * and for each ctrl it invokes its updateCtrlsState.\n         *\n         * @param {{id: string, type: string, value: *, immediate: boolean=}} ctrlState\n         * @private\n         */\n        _ctrlUpdateChildStates: function (ctrlState) {\n            angular.forEach(this._childStateContainerCtrls, function (ctrl) {\n                ctrl._updateCtrlState(ctrlState, true);\n            });\n        },\n        /**\n         * Checks if the instance has a parent controller\n         *\n         * @returns {boolean} true if instance has no parent controller\n         * @private\n         */\n        _isRootState: function () {\n            return !this._parentStateContainerCtrl;\n        },\n        /**\n         * For each data fetching type, fetch data and return an http promise\n         *\n         * @returns {Promise}\n         * @private\n         */\n        _initDataFetchingService: function () {\n            // Validate\n            this.assert(angular.isDefined(this._resourceSettings), this._validateStartMessage +\n                ' _initDataFetchingService: _resourceSettings must be defined.', ReferenceError);\n            // interpolate the settings\n            var interpolated = this.interpolation.interpolate(this._resourceSettings, this.stateModel, this._stateAdapter);\n            this.objectUtils.removeNulls(interpolated.params, '');\n            // If it has an id then we need to get a single resource\n            if (interpolated.id) {\n                return this._resource.get(interpolated.id, interpolated.params);\n            }\n            else {\n                return this._resource.getList(interpolated.params);\n            }\n        },\n        /**\n         * Checks if the state container needs to get data.\n         * It checks if it has any _queryTemplate\n         *\n         * @returns {boolean}\n         * @private\n         */\n        _isDataRequired: function () {\n            return !!this._resource;\n        },\n        /**\n         * Start data fetching service, and places the result on the control instance as dataModel\n         *\n         * @private\n         */\n        _fetchData: function () {\n            var ctrl = this;\n            ctrl.errorModel = null;\n            ctrl.isLoading = true;\n            var promise = ctrl._initDataFetchingService()\n                .then(function (data) {\n                if (ctrl._resourceAdapter) {\n                    return ctrl._resourceAdapter(data);\n                }\n                return data;\n            })\n                .then(function (data) {\n                ctrl.isLoading = false;\n                ctrl.dataModel = data;\n            })\n                .catch(function (res) {\n                ctrl.isLoading = false;\n                ctrl.dataModel = null;\n                ctrl.errorModel = res || {\n                    message: 'Connection error'\n                };\n                ctrl.$log.error(ctrl.errorModel);\n            });\n            // Give back promise to dataFetchDelegate\n            ctrl.onDataFetch({ promise: promise });\n            return promise;\n        },\n        /**\n         * Should be invoked when the controller is root controller\n         * and data permeation process needs to begin.\n         * Updates all child states.\n         *\n         * @private\n         */\n        _startInitialStateUpdate: function () {\n            // Get state from url if state has not yet initialized\n            if (!this._isStateInitialized) {\n                var urlState = this.urlStateManager.getStateByContainerId(this.containerId);\n                var convertedUrlState;\n                if (urlState) {\n                    var urlStateKeys = Object.keys(urlState);\n                    convertedUrlState = {};\n                    urlStateKeys.forEach(function (urlStateKey) {\n                        convertedUrlState[urlStateKey] = {\n                            value: urlState[urlStateKey]\n                        };\n                    });\n                }\n                this.stateModel = angular.merge(this.stateModel, convertedUrlState);\n            }\n            // Update all children states\n            this._updateChildStates(true, false, true);\n            // Get data if required and _isStateInitialized is false\n            // We use '_isStateInitialized is false' because there can be several calls to\n            // _startInitialStateUpdate in the initial render of the page.\n            // So !this._isStateInitialized will make sure no unwanted calls to the server are made\n            if (this._isDataRequired() && !this._isStateInitialized) {\n                this._fetchData();\n            }\n            // Set flag to let everyone in contact with this container know that it's state has\n            // been initialized.\n            this._isStateInitialized = true;\n        },\n        /**\n         * Validation error message start\n         * @type string\n         * @private\n         */\n        _validateStartMessage: 'fs-state-container: ',\n        /**\n         * Validates ctrlState object. It verifies id, and type.\n         *\n         * @param {string} caller\n         * @param {{id: string, type: string, value: *, immediate: boolean=}} ctrlState\n         * @private\n         */\n        _validateCtrlState: function (caller, ctrlState) {\n            var message = this._validateStartMessage + caller + ': ';\n            // Validate ctrlState object\n            this.assert(angular.isDefined(ctrlState), message + 'ctrlState argument must be provided.', ReferenceError);\n            this.assert(angular.isObject(ctrlState), message + 'ctrlState argument must be an object.', TypeError);\n            // Validate ctrlState.id\n            this.assert(angular.isDefined(ctrlState.id), message +\n                'ctrlState argument must have an \"id\" property.', ReferenceError);\n            this.assert(angular.isString(ctrlState.id), message +\n                'ctrlState.id must be a string.', TypeError);\n            this.assert(ctrlState.id !== '', message +\n                'ctrlState.id must not be an empty string.', RangeError);\n            // Validate ctrlState.type\n            this.assert(angular.isDefined(ctrlState.type), message +\n                'ctrlState argument must have an \"type\" property.', ReferenceError);\n            this.assert(angular.isString(ctrlState.type), message +\n                'ctrlState.type must be a string.', TypeError);\n            // Validate against known types which are listed on control-types.const.js\n            var controlTypes = Object.keys(this.controlTypes);\n            this.assert(controlTypes.indexOf(ctrlState.type.toUpperCase()) > -1, message + 'ctrlState.type must be a valid type: ' + controlTypes.join(', ') +\n                ', and it is \"' + ctrlState.type.toUpperCase() + '\"', RangeError);\n        },\n        _validateResourceSettings: function (caller, resourceSettings) {\n            var message = this._validateStartMessage + caller + ': ';\n            // resource settings must have an entity string\n            this.assert(angular.isDefined(resourceSettings.entity), message +\n                'resourceSettings must have an \"entity\" property.', ReferenceError);\n            this.assert(angular.isString(resourceSettings.entity), message +\n                'resourceSettings.entity must be a string.', TypeError);\n            this.assert(resourceSettings.entity !== '', message +\n                'resourceSettings.entity must not be an empty string.', RangeError);\n            // If resourceSettings.id is defined, it must be a non empty string\n            if (angular.isDefined(resourceSettings.id)) {\n                this.assert(angular.isString(resourceSettings.id), message +\n                    'resourceSettings.id must be a string.', TypeError);\n                this.assert(resourceSettings.id !== '', message +\n                    'resourceSettings.id must not be an empty string.', RangeError);\n            }\n        },\n        /**\n         * Gets the specific state object for this ctrl (by id).\n         * Iterates through the url state keys, and sets the values on the stateModel.\n         *\n         * @private\n         */\n        _mergeUrlState: function () {\n            var ctrl = this;\n            // Get this container's state from the url\n            var urlState = ctrl.urlStateManager.getStateByContainerId(ctrl.containerId);\n            // If this container has no state then early return\n            if (!urlState) {\n                return;\n            }\n            // Get the url state's keys\n            var urlStateKeys = Object.keys(urlState);\n            // Iterate through the keys\n            urlStateKeys.forEach(function (urlStateKey) {\n                // Set the object's value property to the value of urlState[urlStateKey]\n                // Example: If ctrl.stateModel is {},\n                // and urlState is {control: 'someValue'} then\n                // ctrl.stateModel will hold {control1: {value: 'someValue'}}\n                // For each key create an object if one does not exist\n                ctrl.stateModel[urlStateKey] = ctrl.stateModel[urlStateKey] ?\n                    ctrl.stateModel[urlStateKey] : {};\n                // For each key set the value\n                ctrl.stateModel[urlStateKey].value = urlState[urlStateKey];\n            });\n        },\n        /**\n         * Takes an object that is the target state, a state object, and a property name.\n         * The method will set the targetState with the preValue value of the state's object\n         * property. For example targetState = {}, state = {control1: {preValue: 'someValue'}},\n         * stateProperty = 'control1'. After this function targetState will look like this:\n         * targetState = {control1: {value: 'someValue'}}\n         *\n         * @param {object} targetState\n         * @param {object} state\n         * @param {string} stateProperty\n         * @private\n         */\n        _populateActionStateObject: function (targetState, state, stateProperty) {\n            // Create container object if one does not exist\n            targetState[stateProperty] = targetState[stateProperty] ?\n                targetState[stateProperty] : {};\n            // Put preValue into stateObject that should be permeated\n            targetState[stateProperty].value = state[stateProperty].preValue;\n        },\n        /**\n         * Takes a name of a property (on stateModel) and deletes its property's preValue property.\n         *\n         * @param {string} stateProperty\n         * @private\n         */\n        _deletePreValue: function (stateProperty) {\n            delete this.stateModel[stateProperty].preValue;\n        },\n        /**\n         * Takes a targetState object, iterates through it to create a hashMap and updates the url\n         *\n         * @param {object} targetState\n         * @private\n         */\n        _applyTargetStateToUrl: function (targetState) {\n            // Convert targetState format to urlState format\n            var urlTargetState = {};\n            var targetStateKeys = Object.keys(targetState);\n            targetStateKeys.forEach(function (targetStateKey) {\n                if (targetState[targetStateKey].value !== undefined) {\n                    urlTargetState[targetStateKey] = targetState[targetStateKey].value;\n                }\n            });\n            // Update url if urlTargetState has keys\n            if (Object.keys(urlTargetState).length) {\n                this.urlStateManager\n                    .updateUrlStateParameters(this.containerId, urlTargetState);\n            }\n        },\n        /**\n         * Applies the pre-state.\n         * Iterates through stateModel and applies the pre-value state to the state.\n         *\n         * @private\n         */\n        _applyPreState: function () {\n            var ctrl = this;\n            var actionState = {};\n            var isActionStateUpdated = false;\n            //iterate through stateModel\n            var stateProperties = Object.keys(ctrl.stateModel);\n            //forEach property, check if it has preValue defined\n            stateProperties.forEach(function (stateProperty) {\n                if (angular.isDefined(ctrl.stateModel[stateProperty].preValue)) {\n                    // Set flag that state was updated for future reference\n                    if (!isActionStateUpdated) {\n                        isActionStateUpdated = true;\n                    }\n                    // Put preValue into stateObject that should be permeated\n                    ctrl._populateActionStateObject(actionState, ctrl.stateModel, stateProperty);\n                    // Delete preValue\n                    ctrl._deletePreValue(stateProperty);\n                }\n            });\n            // Only update state if any pre-state were digested\n            if (isActionStateUpdated) {\n                // update Url\n                ctrl._applyTargetStateToUrl(actionState);\n                // Update state\n                ctrl.updateState(actionState, false, false, false, true);\n            }\n        },\n        /**\n         * Takes a ctrlState object, and updates the state based on the id of the control.\n         * If update is flagged as immediate, state permeation will begin.\n         * If update is flagged as not DATA (ctrlState.type), then permeation process will be\n         * flagged with doNotFetchData, which would mean not data will be fetched.\n         *\n         *\n         * @param {{id: string, type: string, value: *, immediate: boolean=}} ctrlState\n         * @param {boolean=} invokedByParent If true no validation and url update will happen\n         */\n        _updateCtrlState: function (ctrlState, invokedByParent) {\n            // Validate (if invokedByIterator is not true) ctrlState\n            if (!invokedByParent) {\n                this._validateCtrlState('updateCtrlState', ctrlState);\n            }\n            // Make sure control object exists\n            if (!this.stateModel) {\n                this.stateModel = {};\n            }\n            if (!angular.isDefined(this.stateModel[ctrlState.id])) {\n                this.stateModel[ctrlState.id] = {};\n            }\n            // Create path to be updated.\n            var path = ctrlState.id + (ctrlState.immediate ? '.value' : '.preValue');\n            // Update the state\n            this.updateStateByPath(path, ctrlState.value);\n            // If update is flagged as immediate,\n            // and this function was not invoked by updateCtrlsState.\n            if (ctrlState.immediate) {\n                // If not invoked by a parent controller then update the url\n                if (!invokedByParent) {\n                    this.urlStateManager\n                        .updateUrlStateParameter(this.containerId, ctrlState.id, ctrlState.value);\n                }\n                // Update children\n                this._ctrlUpdateChildStates(ctrlState);\n                // If isDataRequired and is of type data, fetch data\n                if (this._isDataRequired() &&\n                    ctrlState.type.toUpperCase() === this.controlTypes.DATA) {\n                    this._fetchData();\n                }\n            }\n        },\n        /**\n         * Returns the value of a specific property on the state object.\n         * The value returned is stateModel[controlId].value or null if\n         * stateModel[controlId] is undefined.\n         *\n         * @param {string} controlId\n         * @returns {*|null}\n         */\n        _fetchStateById: function (controlId) {\n            if (this.stateModel && this.stateModel[controlId]) {\n                if (this.stateModel[controlId].value !== undefined) {\n                    return this.stateModel[controlId].value;\n                }\n            }\n            return null;\n        },\n        /**\n         * PUBLIC METHODS\n         */\n        /**\n         * Updates the state model on the instance, and all its subsequent children\n         * If it needs to get data (_isDataRequired), _fetchData is invoked.\n         *\n         * @param {object} state The state to be digested\n         * @param {boolean=} doNotOverride If true, the new state will not override existing values.\n         * @param {boolean=} doNotFetchData If true, _fetchData will not be invoked.\n         * @param {boolean=} doGetFromUrl If true, merge with state from url\n         * @param {boolean=} doPermeateGottenState If true, permeates only the recieved state and\n         * not its entire instance's state. Used when permeating a cluster of pre-values.\n         */\n        updateState: function (state, doNotOverride, doNotFetchData, doGetFromUrl, doPermeateGottenState) {\n            if (doNotOverride) {\n                this.stateModel = angular.merge({}, state, this.stateModel);\n            }\n            else {\n                this.stateModel = angular.merge({}, this.stateModel, state);\n            }\n            if (doGetFromUrl) {\n                // Get state from url\n                this._mergeUrlState();\n            }\n            this._initResource();\n            // update children states\n            if (doPermeateGottenState) {\n                this._updateChildStates(doNotOverride, doNotFetchData, doGetFromUrl, state);\n            }\n            else {\n                this._updateChildStates(doNotOverride, doNotFetchData, doGetFromUrl);\n            }\n            // Get data if required\n            if (this._isDataRequired() && !doNotFetchData) {\n                this._fetchData();\n            }\n            this._isStateInitialized = true;\n        },\n        /**\n         * Returns a value from state model based on a received path\n         *\n         * @returns {object}\n         */\n        fetchStateByPath: function (path) {\n            // $parse returns a link function.\n            // The link function is invoked with stateModel as context.\n            return this.$parse(path)(this.stateModel);\n        },\n        /**\n         * Provides a precision tool for setting a value in a specific path in the state\n         *\n         * Please do not delete this function for now even if its not in use.\n         * If you do, angles will loose their wings.\n         * Puppies will die. Rivers will dry. Mothers will cry. Grandmas will sigh.\n         * Delete after september 2015 (only if not in use)\n         *\n         * @param {string} path\n         * @param {*} value\n         */\n        updateStateByPath: function (path, value) {\n            // Puts temporarily the value to assign on __assignValue\n            this.stateModel.__assignValue = value;\n            // Create the assignment expression to be parsed\n            var assignmentExpression = path + '=__assignValue';\n            // $parse returns a link function.\n            // The link function is invoked with stateModel as context.\n            this.$scope.$eval(assignmentExpression, this.stateModel);\n            // Remove temporary property\n            delete this.stateModel.__assignValue;\n        },\n        /**\n         * Registers a (potentially) child StateContainerController controller\n         * by adding it to _childStateContainerCtrls\n         *\n         * @param {StateContainerController} childStateContainerCtrl\n         */\n        registerChildController: function (childStateContainerCtrl) {\n            var errMsgStart = 'StateContainerController: _registerChildController: ';\n            // Validate childStateContainerCtrl is an instance of StateContainerController\n            if (!(childStateContainerCtrl instanceof StateContainerController)) {\n                throw new TypeError(errMsgStart +\n                    'stateContainerCtrl argument must be an instance of StateContainerController.');\n            }\n            // Verify it is not already on the array\n            if (this._childStateContainerCtrls.indexOf(childStateContainerCtrl) > -1) {\n                return;\n            }\n            // Add stateContainerCtrl to list\n            this._childStateContainerCtrls.push(childStateContainerCtrl);\n        },\n        /**\n         * Removes child state container controller from _childStateContainerCtrls if its there.\n         * Returns true if successfully spliced, and false if not spliced.\n         *\n         * @param {StateContainerController} childStateContainerCtrl\n         * @returns {boolean}\n         */\n        unregisterChildController: function (childStateContainerCtrl) {\n            var pos = this._childStateContainerCtrls.indexOf(childStateContainerCtrl);\n            if (pos === -1) {\n                return false;\n            }\n            this._childStateContainerCtrls.splice(pos, 1);\n            return true;\n        },\n        /**\n         * Init function\n         *\n         * @private\n         */\n        _init: function _init($scope, $element, dependencyMounter) {\n            this._initState();\n            this._initChildStateRefList();\n            this._initParenStateRef();\n            this.$scope = $scope;\n            this.$element = $element;\n            // This will place on the prototype the following dependencies.\n            // Dependencies can be accessed via the instance's 'this'\n            dependencyMounter.mountOnConstructor(StateContainerController, [\n                '$parse', 'assert', 'controlTypes', 'urlStateManager', '$log',\n                'resourceFactory', 'interpolation', 'objectUtils'\n            ]);\n        }\n    });\n    function fsStateContainer(assert) {\n        function linkFn(scope, element, attr, parentCtrl) {\n            /**\n             * VARIABLES\n             */\n            // Reference the controller\n            var ctrl = scope.stateContainer;\n            /**\n             * METHODS\n             */\n            /**\n             * Register parent and child controllers if parent controller exists.\n             */\n            function registerCtrls() {\n                if (parentCtrl) {\n                    ctrl._registerParentController(parentCtrl);\n                    parentCtrl.registerChildController(ctrl);\n                }\n            }\n            /**\n             * Stores the value of queryTemplate attribute onto _queryTemplate\n             */\n            function initStateValues() {\n                // We use this method to create a bind-value-once-one-way :)\n                //ctrl.stateModel = scope.$eval(attr.stateModel);\n                ctrl.stateModel = angular.merge({}, ctrl._stateModel);\n            }\n            /**\n             * Stores the value of queryTemplate attribute onto _queryTemplate\n             */\n            function initQueryValues() {\n                // We use this method to create a bind-value-once-one-way :)\n                ctrl._queryTemplate = scope.$eval(attr.queryTemplate);\n            }\n            /**\n             * Creates a local state adapter from DEFAULT_STATE_ADAPTER and a received state adapter\n             */\n            function initStateAdapter() {\n                ctrl._stateAdapter = _.merge({}, DEFAULT_STATE_ADAPTER, ctrl.stateAdapter);\n            }\n            /**\n             * WATCHERS\n             */\n            /**\n             * Init watch on destroy\n             */\n            function initWatchDestroy() {\n                // When invoked will remove the current controller from the parent\n                function unregisterChildFromParent() {\n                    if (parentCtrl) {\n                        parentCtrl.unregisterChildController(ctrl);\n                    }\n                }\n                // When invoked will cause a $destroy on the current scope\n                function destroyScope() {\n                    scope.$destroy();\n                }\n                scope.$on('$destroy', unregisterChildFromParent);\n                // Make sure that if element is removed (with element.remove())\n                // its scope will be destroyed\n                element.on('$destroy', destroyScope);\n            }\n            /**\n             * Inits all watchers\n             */\n            function initWatchers() {\n                initWatchDestroy();\n            }\n            /**\n             * INIT\n             */\n            function init() {\n                assert(angular.isDefined(attr.containerId), 'fsStateContainer: linkFn: ' +\n                    'directive must be provided with a containerId', ReferenceError);\n                // Register the parent controller if one exists.\n                registerCtrls();\n                // Init values\n                initStateValues();\n                initQueryValues();\n                initStateAdapter();\n                // Init resource\n                ctrl._initResource();\n                // Init watchers\n                initWatchers();\n                // Start initial state update if state is root\n                if (ctrl._isRootState()) {\n                    ctrl._startInitialStateUpdate();\n                }\n                // If the parent has an _isStateInitialized flag set to true,\n                // this means that state permeation has already occurred for the parent.\n                // In this case, this ctrl must start its own initialization process.\n                if (ctrl._parentStateContainerCtrl &&\n                    ctrl._parentStateContainerCtrl._isStateInitialized) {\n                    // Get the parent's state\n                    ctrl.stateModel = angular.merge({}, ctrl._parentStateContainerCtrl.stateModel, ctrl.stateModel);\n                    ctrl._startInitialStateUpdate();\n                }\n            }\n            init();\n        }\n        StateContainerController.$inject = ['$scope', '$element', 'dependencyMounter'];\n        return {\n            restrict: 'E',\n            scope: true,\n            require: '?^^fsStateContainer',\n            controller: StateContainerController,\n            controllerAs: 'stateContainer',\n            bindToController: {\n                _stateModel: '=stateModel',\n                _resourceSettings: '=resourceSettings',\n                _resourceAdapter: '=resourceAdapter',\n                stateAdapter: '=stateAdapter',\n                containerId: '@containerId',\n                onDataFetch: '&'\n            },\n            link: linkFn\n        };\n    }\n    angular.module('Fortscale.shared.directives.fsStateContainer', [\n        'Fortscale.shared.services.dependencyMounter',\n        'Fortscale.shared.services.assert',\n        'Fortscale.shared.fsStateContainer.controlTypes',\n        'Fortscale.shared.fsStateContainer.urlStateManager',\n        'Fortscale.shared.services.objectUtils',\n        'Fortscale.shared.services',\n        'restangular'\n    ])\n        .directive('fsStateContainer', ['assert', fsStateContainer]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.fsStateContainer.controlTypes', [])\n        .constant('controlTypes', {\n        UI: 'UI',\n        DATA: 'DATA'\n    });\n}());\n","(function () {\n    'use strict';\n    function UrlStateManager($location, objectUtils) {\n        /**\n         * The object returned by $location.search\n         *\n         * @type {object|null}\n         * @private\n         */\n        this._locationSearchObject = null;\n        /**\n         * The object built for the app's use.\n         * Where the _locationSearchObject might hold something like {'state1.value1': 'someValue'}\n         * this object will hole {state1: {value1: 'someValue'}};\n         *\n         * @type {object|null}\n         * @private\n         */\n        this._searchObject = null;\n        /**\n         * This method recursively builds _searchObject.\n         * It will turn {'state1.value1': 'someValue'} into\n         * {state1: {value1: 'someValue'}}\n         *\n         * @param {object} obj The object that will host the values\n         * @param {string} path Dot delimited namespace\n         * @param {*} value The value to be hosted\n         * @returns {object}\n         * @private\n         */\n        this._setValueByPath = function (obj, path, value) {\n            function parseValue(value) {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (e) {\n                    return value;\n                }\n            }\n            // Split path into path nodes\n            var pathNodes = path.split('.');\n            // If there is only one node, then the object will hold the node as\n            // key, and set value to it. This ends the recursion.\n            if (pathNodes.length === 1) {\n                obj[pathNodes] = parseValue(value);\n                return obj;\n            }\n            // Take the first node out of the array\n            var currentPathNode = pathNodes.shift();\n            // Set a new object to the path (or use existing object)\n            // If for any reason the previous value is not an object,\n            // The value will be overridden.\n            obj[currentPathNode] = angular.isObject(obj[currentPathNode]) ?\n                obj[currentPathNode] : {};\n            // Rejoin the path into dot delimited string, and run the recursion with\n            // The relevant object, the relevant path, and the value.\n            this._setValueByPath(obj[currentPathNode], pathNodes.join('.'), value);\n        };\n        /**\n         * Returns the interpreted search object\n         *\n         * @returns {Object|null}\n         * @private\n         */\n        this._getSearchObject = function () {\n            var self = this;\n            // Get angular's search object\n            var searchObject = $location.search();\n            // Check if the angular's search object and the stored search object\n            // are the same. If they are, this means that the interpreted search\n            // object is valid and can be returned without reinterpreting the\n            // search object\n            if (angular.equals(self._locationSearchObject, searchObject)) {\n                return self._searchObject;\n            }\n            // This branch happens if the stored locationSearchObject and angular's\n            // Search object are not the same. This means that _searchObject is no\n            // longer valid, and needs to be reinterpreted.\n            // Create a new object for _searchObject\n            self._searchObject = {};\n            // Set the new searchObject to _locationSearchObject for future comparison\n            self._locationSearchObject = searchObject;\n            objectUtils.createFromFlattened(searchObject, self._searchObject);\n            return self._searchObject;\n        };\n        /**\n         * Takes a containerId and returns the state object of that container.\n         *\n         * @param {string} containerId The name (id) of the stateContainer.\n         * @returns {*|null}\n         */\n        this.getStateByContainerId = function (containerId) {\n            // Get the entire state\n            var state = this._getSearchObject();\n            // Return the relevant state object\n            return angular.isDefined(state[containerId]) ? state[containerId] : null;\n        };\n        /**\n         * Takes stateId (state container name) and a paramId (param name)\n         * and sets the value to the search string in the url.\n         * A new history will be added.\n         *\n         * @param {string} containerId The name of the state\n         * @param {string} paramId The name of the paramater\n         * @param {*} value Any value to be stored\n         */\n        this.updateUrlStateParameter = function (containerId, paramId, value) {\n            // Create the key string\n            var hashMap = {};\n            hashMap[paramId] = value;\n            var futureState = objectUtils.flattenToNamespace(hashMap, containerId);\n            // Merge futureState into current state (so current state will not be lost)\n            futureState = angular.merge({}, $location.search(), futureState);\n            // Set the value to the search string\n            $location.search(futureState);\n        };\n        /**\n         * Takes stateId (state container name) and a hashMap object\n         * and sets the values of the hashMap to the url search string.\n         *\n         * @param containerId The name of the state\n         * @param {object} hashMap A key-value object, where the key is the paramId\n         */\n        this.updateUrlStateParameters = function (containerId, hashMap, rebuildStateCompletly) {\n            // Create a new object for the future state\n            var futureState = objectUtils.flattenToNamespace(hashMap, containerId);\n            if (rebuildStateCompletly) {\n                var locationWithoutState = _.pickBy($location.search(), function (value, key) {\n                    return !_.startsWith(key, containerId);\n                });\n                futureState = angular.merge({}, locationWithoutState, futureState);\n            }\n            else {\n                // Merge futureState into current state (so current state will not be lost)\n                futureState = angular.merge({}, $location.search(), futureState);\n            }\n            // Set new search string\n            $location.search(futureState);\n        };\n    }\n    UrlStateManager.$inject = [\n        '$location',\n        'objectUtils'\n    ];\n    angular.module('Fortscale.shared.fsStateContainer.urlStateManager', [\n        'Fortscale.shared.services.objectUtils'\n    ])\n        .service('urlStateManager', UrlStateManager);\n}());\n","(function () {\n    'use strict';\n    function ResourceFactory(Restangular) {\n        var self = this;\n        self.create = function (entity) {\n            // validate setting\n            return Restangular.all(entity);\n        };\n    }\n    ResourceFactory.$inject = ['Restangular'];\n    angular.module('Fortscale.shared.directives.fsStateContainer')\n        .service('resourceFactory', ResourceFactory);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components', [\n        'Fortscale.shared.components.fsControls',\n        'Fortscale.shared.components.fsTable',\n        'Fortscale.shared.components.fsChart',\n        'Fortscale.shared.components.fsSplitter',\n        'Fortscale.shared.components.fsMultiselect',\n        'Fortscale.shared.components.fsSeverityTag',\n        'Fortscale.shared.components.fsMultiselectAutocomplete',\n        'Fortscale.shared.components.alertFeedback',\n        'Fortscale.shared.components.fsScoreIcon',\n        'Fortscale.shared.components.fsFlag',\n        'Fortscale.shared.components.fsSvgIcon',\n        'Fortscale.shared.components.fsNanobar',\n        // Controls\n        'Fortscale.shared.components.fsDatePicker',\n        'Fortscale.shared.components.fsDateRange',\n        'Fortscale.shared.components.fsSimpleTabsStrip',\n        'Fortscale.shared.components.fsDateRange',\n        'Fortscale.shared.components.fsMinScore',\n        'Fortscale.shared.components.fsSelect',\n        'Fortscale.shared.components.fsAutocomplete',\n        'Fortscale.shared.components.fsGenInput'\n    ]);\n}());\n","(function () {\n    'use strict';\n    function fsControlsDirective() {\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsControlsController() { }\n        angular.extend(FsControlsController.prototype, {\n            /**\n             * PUBLIC METHODS\n             */\n            /**\n             * On submit, it resets the form (to disable submit button until next change),\n             * then invokes submitDelegate if it's defined\n             */\n            submit: function submit(formCtrl) {\n                // Reset form\n                formCtrl.$setPristine();\n                // If submitDelegate was provided, and it is a function,\n                // invoke it.\n                if (angular.isFunction(this.submitDelegate)) {\n                    this.submitDelegate();\n                }\n            }\n        });\n        return {\n            restrict: 'E',\n            templateUrl: 'app/shared/components/fs-controls/fs-controls.view.html',\n            scope: true,\n            transclude: true,\n            controller: FsControlsController,\n            controllerAs: 'controls',\n            bindToController: {\n                title: '@',\n                className: '@',\n                hideUpdate: '@',\n                submitDelegate: '='\n            }\n        };\n    }\n    fsControlsDirective.$inject = [];\n    angular.module('Fortscale.shared.components.fsControls', [])\n        .directive('fsControls', fsControlsDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsTable', ['kendo.directives', 'Fortscale.shared.services.dateRanges', 'Utils']);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Holds custom sorting\n     */\n    var customSort = {\n        generic: function (fieldName) {\n            return function (a, b, descending) {\n                return ((descending !== undefined) ? -1 : 1) * (a[fieldName] - b[fieldName]);\n            };\n        }\n    };\n    customSort.number = customSort.generic;\n    function fsTableDirective() {\n        function linkFn(scope, element, attrs, ctrl) {\n            // Binding to the table data\n            scope.$watch(function () {\n                return ctrl._watchTableModel();\n            }, function () {\n                return ctrl._watchTableModelAction();\n            });\n            ctrl._initPagingSettings();\n            if (ctrl.fetchStateDelegate) {\n                scope.$watch(function () {\n                    return ctrl.fetchStateDelegate(ctrl.tableId);\n                }, ctrl._fetchStateDelegateWatchAction.bind(ctrl));\n            }\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsTableController($element, $scope, $compile) {\n            this.init($element, $scope, $compile);\n        }\n        angular.extend(FsTableController.prototype, {\n            /**\n             * Validations\n             */\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateFetchStateDelegate: function _validateFetchStateDelegate() {\n                if (this.fetchStateDelegate && !angular.isFunction(this.fetchStateDelegate)) {\n                    throw new TypeError('fsTable.directive: FsTableController: ' +\n                        'If fetchStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Validate updateStateDelegate.\n             * Throw TypeError if updateStateDelegate is received and is not a function\n             * @private\n             */\n            _validateUpdateStateDelegate: function _validateUpdateStateDelegate() {\n                if (this.updateStateDelegate && !angular.isFunction(this.updateStateDelegate)) {\n                    throw new TypeError('fsTable.directive: FsTableController: ' +\n                        'If updateStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Validate values of sort direction\n             * @private\n             */\n            _validateSortDirection: function _validateSortDirection() {\n                if (this.sortDirection &&\n                    this.sortDirection !== 'DESC' &&\n                    this.sortDirection !== 'ASC') {\n                    throw new Error('fsTable.directive: FsTableController: ' +\n                        'If updateStateDelegate is provided, it must be \"DESC\" or \"ASC\".');\n                }\n            },\n            /**\n             * Validate page size\n             * @private\n             */\n            _validatePageSize: function _validatePageSize() {\n                if (this.pageSize) {\n                    if (!angular.isNumber(this.pageSize)) {\n                        throw new TypeError('fsTable.directive: FsTableController: ' +\n                            'If pageSize is provided, it must be a number.');\n                    }\n                    if (this.pageSize < 1) {\n                        throw new RangeError('fsTable.directive: FsTableController: ' +\n                            'If pageSize is provided, it must greater then 0.');\n                    }\n                }\n            },\n            /**\n             * Validate the page number\n             * @private\n             */\n            _validatePage: function _validatePage() {\n                if (this.page) {\n                    if (!angular.isNumber(this.page)) {\n                        throw new TypeError('fsTable.directive: FsTableController: ' +\n                            'If page is provided, it must be a number.');\n                    }\n                    if (this.page < 1) {\n                        throw new RangeError('fsTable.directive: FsTableController: ' +\n                            'If page is provided, it must greater then 0.');\n                    }\n                }\n            },\n            /**\n             * Initial validation of the controller's constructor.\n             * Flow:\n             * Invoke _validateFetchStateDelegate\n             * Invoke _validateUpdateStateDelegate\n             *\n             * @private\n             */\n            _validate: function _validate() {\n                this._validateFetchStateDelegate();\n                this._validateUpdateStateDelegate();\n                this._validateSortDirection();\n                this._validatePageSize();\n                this._validatePage();\n            },\n            /**\n             * PRIVATE METHODS\n             */\n            /**\n             * Places data on tableSettings model (this is a kendo-ui requirement).\n             *\n             * @param {array<object>} data\n             * @private\n             */\n            _expandTableSettings: function _expandTableSettings(data) {\n                var ctrl = this;\n                var meta = data._meta;\n                var gridData = {\n                    data: data,\n                    total: meta.page ? meta.page.totalElements : meta.total\n                };\n                //Display paging footer with it's abilities, only if\n                // this.tableSettings.alwaysPageable set to true, or total amount of rows greater\n                // then the page size.\n                var pageable = false;\n                var sortable = false;\n                if ((this.tableSettings && this.tableSettings.alwaysPageable) ||\n                    gridData.total && gridData.total > ctrl.pageSize) {\n                    pageable = {\n                        pageSizes: ctrl.pageSizes,\n                        pageSize: ctrl.pageSize,\n                        page: ctrl.page\n                    };\n                }\n                if (this.tableSettings && this.tableSettings.sortable) {\n                    sortable = this.tableSettings.sortable;\n                }\n                ctrl.localTableSettings = _.merge({}, {\n                    dataSource: {\n                        data: gridData,\n                        schema: {\n                            data: \"data\",\n                            total: \"total\"\n                        },\n                        page: ctrl.page,\n                        serverPaging: true,\n                        serverSorting: false\n                    },\n                    pageable: pageable,\n                    sortable: sortable,\n                    detailExpand: function (e) {\n                        e.detailRow.addClass('expanded');\n                    },\n                    detailCollapse: function (e) {\n                        e.detailRow.removeClass('expanded');\n                    }\n                }, this.tableSettings, this._localSort);\n                // If detailTableSettings exists, this means that hierarchy is required\n                if (this.detailTableModelName) {\n                    ctrl.localTableSettings.detailInit = ctrl._detailInit.bind(ctrl);\n                }\n                // Add custom sorting\n                this._setCustomSort(ctrl.localTableSettings.columns);\n            },\n            /**\n             * Create and render the sub table.\n             *\n             * @param e\n             * @private\n             */\n            _detailInit: function (e) {\n                var ctrl = this;\n                e.detailRow.addClass('expanded');\n                //e.detailRow.find('.k-hierarchy-cell')\n                //    .append('<span class=\"l-shape-vertical\"></span>')\n                //    .append('<span class=\"l-shape-horizontal\"></span>');\n                e.detailRow.find('.k-hierarchy-cell').remove();\n                e.detailRow.find('.k-detail-cell').attr('colspan', '9');\n                ctrl.localDetailTableSettings = _.merge({}, this.detailTableSettings, {\n                    dataSource: {\n                        data: e.data[ctrl.detailTableModelName],\n                        serverPaging: false,\n                        serverSorting: false\n                    },\n                    pageable: false,\n                    sortable: true\n                });\n                // Create an angular table element from kendo-grid directive\n                var tableElement = this._createKendoGridElement();\n                tableElement.attr('options', 'table.localDetailTableSettings');\n                tableElement.addClass('details-table');\n                // Compile and link table element\n                tableElement = this._compileKendoGridElement(tableElement);\n                // Add distinction to header\n                tableElement.find('tr').first().addClass('details-table-header');\n                //var element = $(\"<div/>\").kendoGrid(this.localDetailTableSettings);\n                //element = ctrl.$compile(element)(ctrl.$scope);\n                tableElement.appendTo(e.detailCell);\n                ctrl.detailTableWrapper = tableElement;\n            },\n            /**\n             * Creates an angular element from a kendo-grid tag and returns it.\n             *\n             * @returns {angular.element}\n             * @private\n             */\n            _createKendoGridElement: function _createKendoGridElement() {\n                return angular.element('<kendo-grid class=\"fs-table\" options=' +\n                    '\"table.localTableSettings\"  ' +\n                    'k-on-data-bound=\"table.onDataBound(kendoEvent)\"' +\n                    '>' +\n                    '</kendo-grid>');\n            },\n            /**\n             * Sets grouping dynamically. Returns true if new grouping has been set, otherwise it returns false.\n             *\n             * @param {} dataSource\n             * @param {Array<{}>} sortList\n             * @param {Array<{}>} columnsList\n             * @returns {boolean}\n             * @private\n             */\n            _setGrouping: function (dataSource, sortList, columnsList) {\n                var groupingList = [];\n                // Make sure all lists are populated as required\n                if (sortList && sortList[0] && columnsList && columnsList.length) {\n                    // Find the column that corresponds to the sort field\n                    var column = _.find(columnsList, { field: sortList[0].field });\n                    if (column && column.groupField) {\n                        // populate a grouping object\n                        groupingList = [{\n                                field: column.groupField,\n                                dir: sortList[0].dir\n                            }];\n                    }\n                }\n                // If no group is made, them remove groups from dataSource and return true\n                if (groupingList.length === 0 && dataSource.group().length !== 0) {\n                    dataSource.group(groupingList);\n                    return true;\n                }\n                // If the newly created grouping object equals the current, then return false without setting\n                if (groupingList.length === 0 ||\n                    (dataSource.group()[0] &&\n                        dataSource.group()[0].field === groupingList[0].field &&\n                        dataSource.group()[0].dir === groupingList[0].dir)) {\n                    return false;\n                }\n                // Set new grouping and return true\n                dataSource.group(groupingList);\n                return true;\n            },\n            /**\n             * Iterates through columns, and if any have \"customSort\" it will mount a custom sort function on the\n             * column.\n             *\n             * @param {Array<{}>} columns\n             * @private\n             */\n            _setCustomSort: function (columns) {\n                _.each(columns, function (column) {\n                    if (column.customSort && column.field) {\n                        column.sortable = {\n                            compare: customSort[column.customSort](column.field)\n                        };\n                    }\n                });\n            },\n            /**\n             * Kendo's event - triggers when page size changed, page changed, column sorted or other things\n             * changed.\n             * If page or page size changed- we like to update the state immediately\n             * @param arg\n             */\n            onDataBound: function (arg) {\n                var ctrl = this;\n                var ds = arg.sender.dataSource;\n                // Add class to last and one to last tr's\n                var tableRows = arg.sender.items();\n                var tableRowsLength = tableRows.length;\n                if (tableRowsLength > 5) {\n                    $([tableRows[tableRowsLength - 1], tableRows[tableRowsLength - 2]])\n                        .addClass('fs-table-last-rows');\n                }\n                if (this._setGrouping(arg.sender.dataSource, ds.sort(), arg.sender.columns)) {\n                    return;\n                }\n                //User change the page size\n                if (ds._pageSize && ds._pageSize !== ctrl.pageSize) {\n                    //Page size changed\n                    ctrl._updateStateAndExecuteUpdateStateDelegate(ds._pageSize, 1);\n                    return; //End function\n                }\n                //User click on column sort\n                if (ds.sort() && ds.sort()[0] &&\n                    // The sorting is different for details-table\n                    !arg.sender.element.hasClass('details-table')) {\n                    // Make sure is not inner table\n                    if (this.detailTableWrapper &&\n                        arg.sender.wrapper[0] === this.detailTableWrapper[0]) {\n                        return;\n                    }\n                    var sortData = ds.sort()[0];\n                    var sortDir = sortData.dir.toUpperCase();\n                    var sortField = sortData.field;\n                    if (sortField !== ctrl.sortBy || sortDir !== ctrl.sortDirection) {\n                        // Create a new local sort object\n                        ctrl._localSort = {\n                            dataSource: {\n                                sort: {\n                                    dir: sortDir.toLowerCase(),\n                                    field: sortField\n                                }\n                            }\n                        };\n                        ctrl._updateStateAndExecuteUpdateStateDelegate(null, 1, sortData.field, sortDir);\n                        return; //End function\n                    }\n                }\n                //User change page\n                if (ds._page && ds._page !== +ctrl.page) {\n                    //First page is 1.\n                    ctrl._updateStateAndExecuteUpdateStateDelegate(null, ds._page);\n                    return; //End function\n                }\n            },\n            /**\n             * @param pageSize -           The new size of the page\n             * @param page -               The new page number\n             * @param sortBy -             Field id - to sort by\n             * @param sortDirection -      Sort direction - DESC / ASC\n             * @private\n             *\n             * This method get the abouve parameters, set them on the controller + state\n             * and execute the updateStateDelegate\n             */\n            _updateStateAndExecuteUpdateStateDelegate: function (pageSize, page, sortBy, sortDirection) {\n                var ctrl = this;\n                var state = {};\n                //Update the controller and state\n                ctrl._setToStateAndController(ctrl, state, 'pageSize', pageSize);\n                ctrl._setToStateAndController(ctrl, state, 'page', page);\n                ctrl._setToStateAndController(ctrl, state, 'sortBy', sortBy);\n                ctrl._setToStateAndController(ctrl, state, 'sortDirection', sortDirection);\n                // If _updatedInternalState flag is true, this means that state was updated from\n                // the external state (by fetchStateDelegate) and it does not need to update the\n                // external state.\n                if (ctrl.updateStateDelegate) {\n                    //Invoke ctrl.updateStateDelegate\n                    ctrl.updateStateDelegate({\n                        id: ctrl.tableId,\n                        type: 'DATA',\n                        value: state,\n                        immediate: true\n                    });\n                }\n            },\n            /**\n             *  That method get property and value, and if it's not null it set it on the controller.\n             *  After that it take the value of the property ---from the controller---\n             *  and set it on the state object.\n             *\n             * @param ctrl\n             * @param stateObject\n             * @param propertyName\n             * @param value\n             * @private\n             */\n            _setToStateAndController: function (ctrl, stateObject, propertyName, value) {\n                if (angular.isDefined(value) && value !== null) {\n                    ctrl[propertyName] = value;\n                }\n                stateObject[propertyName] = ctrl[propertyName];\n            },\n            /**\n             * Takes a tableElement angular element, compiles it, and returns it.\n             *\n             * @param {angular.element} tableElement\n             * @returns {angular.element}\n             * @private\n             */\n            _compileKendoGridElement: function _compileKendoGridElement(tableElement) {\n                return this.$compile(tableElement)(this.$scope);\n            },\n            /**\n             * Takes a compiled and linked tableElement, and places it on the DOM, replacing current element.\n             *\n             * @param {angular.element} tableElement\n             * @private\n             */\n            _replaceElementWithKendoElement: function _replaceElementWithKendoElement(tableElement) {\n                var prevKendoElement = this.$element.find('[kendo-grid]');\n                prevKendoElement.remove();\n                this.$element.append(tableElement);\n            },\n            /**\n             * PUBLIC METHODS\n             */\n            renderTable: function renderTable() {\n                var ctrl = this;\n                function _renderSequence() {\n                    // Places data on tableSettings model\n                    ctrl._expandTableSettings(ctrl.tableModel);\n                    // Create an angular table element from kendo-grid directive\n                    var tableElement = ctrl._createKendoGridElement();\n                    // Compile and link table element\n                    tableElement = ctrl._compileKendoGridElement(tableElement);\n                    // Replace element with new table element\n                    ctrl._replaceElementWithKendoElement(tableElement);\n                    ctrl._tableElement = tableElement;\n                }\n                // Make sure data is valid by checking it exists, it has an array data property.\n                if (ctrl.tableModel && angular.isArray(ctrl.tableModel)) {\n                    if (ctrl.tableModel.length) {\n                        _renderSequence();\n                    }\n                    else if (!ctrl.tableModel.length && ctrl.tableModel._meta &&\n                        this.tableModel._meta.total > 0) {\n                        //There is data for filter, but no data for page\n                        //The table will navigate to last exists page.\n                        var lastPageIndex = _.ceil(ctrl.tableModel._meta.total / ctrl.pageSize);\n                        ctrl._updateStateAndExecuteUpdateStateDelegate(ctrl.pageSize, lastPageIndex);\n                    }\n                    else {\n                        // Clean out the directive's element if no alerts are found in model or its meta.\n                        ctrl.$element[0].innerHTML = '';\n                    }\n                }\n            },\n            /**\n             * WATCHERS\n             */\n            /**\n             * A watch function. Returns instance's tableModel property\n             *\n             * @returns {object}\n             * @private\n             */\n            _watchTableModel: function _watchTableModel() {\n                return this.tableModel;\n            },\n            /**\n             * A watch action function. Fires when this.tableModel changes.\n             * Invokes renderTable, to render the table when data changes.\n             *\n             * @private\n             */\n            _watchTableModelAction: function _watchTableModelAction() {\n                if (this.tableModel) {\n                    this.renderTable();\n                }\n            },\n            /**\n             * This method triggered each time that fetchStateDelegate(ctrl.tableId)\n             * return different answer.\n             * The method update the controller\n             *\n             * @param newVal - state object\n             * @param oldVal - state object\n             * @private\n             */\n            _fetchStateDelegateWatchAction: function (newVal, oldVal) {\n                var ctrl = this;\n                if (newVal && (ctrl.pageSize !== newVal.pageSize ||\n                    ctrl.page !== newVal.page ||\n                    ctrl.sortDirection !== newVal.sortDirection ||\n                    ctrl.sortBy !== newVal.sortBy)) {\n                    ctrl.page = newVal.page;\n                    ctrl.pageSize = newVal.pageSize;\n                    ctrl.sortBy = newVal.sortBy;\n                    ctrl.sortDirection = newVal.sortDirection;\n                    // Create a local search object\n                    if (_.isString(ctrl.sortDirection) && ctrl.sortDirection !== '') {\n                        ctrl._localSort = {\n                            dataSource: {\n                                sort: {\n                                    dir: ctrl.sortDirection.toLowerCase(),\n                                    field: ctrl.sortBy\n                                }\n                            }\n                        };\n                    }\n                }\n            },\n            /**\n             * Set default values for paging\n             * @private\n             */\n            _initPagingSettings: function _initPagingSettings() {\n                if (!this.pageSizes) {\n                    this.pageSizes = [10, 20, 50, 100];\n                }\n                if (!this.pageSize) {\n                    this.pageSize = 10;\n                }\n            },\n            /**\n             * Init\n             */\n            init: function init($element, $scope, $compile) {\n                // Put dependencies on the instance\n                var ctrl = this;\n                ctrl.$element = $element;\n                ctrl.$scope = $scope;\n                ctrl.$compile = $compile;\n                ctrl._validate();\n            }\n        });\n        FsTableController.$inject = ['$element', '$scope', '$compile'];\n        return {\n            restrict: 'E',\n            scope: true,\n            link: linkFn,\n            controller: FsTableController,\n            controllerAs: 'table',\n            bindToController: {\n                tableId: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                tableSettings: '=',\n                detailTableSettings: '=',\n                tableModel: '=',\n                detailTableModelName: '@',\n                pageSizes: '=?',\n                pageSize: '=?',\n                sortBy: '=?',\n                sortDirection: '=?'\n            },\n            require: 'fsTable'\n        };\n    }\n    fsTableDirective.$inject = [];\n    angular.module('Fortscale.shared.components.fsTable')\n        .directive('fsTable', fsTableDirective);\n}());\n","(function () {\n    'use strict';\n    function fsTableCollapsibleList() {\n        /**\n        * The directive's controller function\n        *\n        * @constructor\n        */\n        function FsTableCollapsibleListController() {\n            this.maxDisplayLength = 3;\n            this.showFullList = false;\n        }\n        angular.extend(FsTableCollapsibleListController.prototype, {\n            /**\n             * This method controls if we see only the first 3 items in the list or all of them\n             */\n            showFullListFn: function showFullList() {\n                var ctrl = this;\n                if (ctrl.showFullList) {\n                    ctrl.showFullList = false;\n                    this.maxDisplayLength = 3;\n                }\n                else {\n                    ctrl.showFullList = true;\n                    this.maxDisplayLength = ctrl.listCollection.length;\n                }\n            }\n        });\n        return {\n            templateUrl: 'app/shared/components/fs-table/fs-table-collapsible-list/' +\n                'fs-table-collapsible-list.view.html',\n            restrict: 'E',\n            controller: FsTableCollapsibleListController,\n            controllerAs: 'entity',\n            scope: {},\n            bindToController: {\n                titleId: '=',\n                titleName: '=',\n                listCollection: '=',\n                listCollectionDisplayField: '='\n            }\n        };\n    }\n    fsTableCollapsibleList.$inject = [];\n    angular.module('Fortscale.shared.components.fsTable')\n        .directive('fsTableCollapsibleList', fsTableCollapsibleList);\n}());\n","(function () {\n    'use strict';\n    function fsTableActionsDirective(assert, URLUtils, fsResourceStore, indicatorTypeMapper) {\n        /**\n        * The directive's controller function\n        *\n        * @constructor\n        */\n        function FsTableActionsController() {\n            this.init();\n        }\n        angular.extend(FsTableActionsController.prototype, {\n            /**\n             * Validations\n             */\n            _validate: function _validate() {\n                var errStart = 'FsTableActionsController._validate: ';\n                // Validate `exploreId`\n                assert(angular.isString(this.exploreId), errStart + '`exploreId` must be a String', TypeError);\n                assert(this.exploreId.length, errStart + '`exploreId` must not be empty', RangeError);\n                // Validate `baseUrl`\n                assert(angular.isString(this.baseUrl), errStart + '`baseUrl` must be a String', TypeError);\n                assert(this.baseUrl.length, errStart + '`baseUrl` must not be empty', RangeError);\n            },\n            /**\n             * PUBLIC METHODS\n             */\n            /**\n             * Trigger a URL change to explore a specific Alert\n             */\n            exploreAlert: function () {\n                var targetUrl = this.baseUrl + '/' + this.exploreId;\n                var alert = fsResourceStore.fetchResourceItemById('alerts', this.exploreId);\n                // Find an indicator that has an indicator type\n                var indicator = null;\n                var indicatorType = null;\n                _.every(alert.evidences, function (iIndicator) {\n                    var iIndicatorType = indicatorTypeMapper.getType(iIndicator);\n                    if (iIndicatorType !== null) {\n                        indicator = iIndicator;\n                        indicatorType = iIndicatorType;\n                    }\n                });\n                // Build the target url\n                if (indicatorType !== null) {\n                    targetUrl += '/' + indicator.id;\n                    // Route to 'gen' for general indicators\n                    if (indicatorType.indicatorClass === 'gen') {\n                        targetUrl += '/gen/overview';\n                    }\n                    else if (indicatorType.indicatorClass === 'tag') {\n                        targetUrl += '/tag';\n                    }\n                }\n                URLUtils.setUrl(targetUrl, true);\n            },\n            /**\n             * Init\n             */\n            init: function () {\n                this._validate();\n            }\n        });\n        return {\n            templateUrl: 'app/shared/components/fs-table/fs-table-actions/' +\n                'fs-table-actions.view.html',\n            restrict: 'E',\n            controller: FsTableActionsController,\n            controllerAs: 'actions',\n            scope: {},\n            bindToController: {\n                exploreId: '=',\n                baseUrl: '='\n            }\n        };\n    }\n    fsTableActionsDirective.$inject = ['assert', 'URLUtils', 'fsResourceStore',\n        'indicatorTypeMapper'];\n    angular.module('Fortscale.shared.components.fsTable')\n        .directive('fsTableActions', fsTableActionsDirective);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Uses example:\n     * \t<fs-date-range date-range-id=\"dr1\" fetch-state-delegate=\"::overview.getRangeState\"\n     * \tupdate-state-delegate=\"::overview.setRangeState\"></fs-date-range>\n     */\n    function fsDateRangeDirective() {\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsDateRangeController($scope, $timeout, utils, $filter) {\n            this.init($scope, $timeout, utils, $filter);\n        }\n        angular.extend(FsDateRangeController.prototype, {\n            //Set the \"from\" and \"to\" to cover the last 7 dats\n            setLast7Days: function () {\n                var currentMoment = this.utils.date.getMoment('now');\n                this.endTime = currentMoment.toDate();\n                currentMoment = this.utils.date.getMoment('now');\n                this.startTime = currentMoment.subtract(7, 'days').toDate();\n            },\n            //Set the \"from\" and \"to\" to cover the last month\n            setLastMonth: function () {\n                var currentMoment = this.utils.date.getMoment('now');\n                this.endTime = currentMoment.toDate();\n                currentMoment = this.utils.date.getMoment('now');\n                this.startTime = currentMoment.subtract(1, 'months').toDate();\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                if (this.fetchStateDelegate && !angular.isFunction(this.fetchStateDelegate)) {\n                    throw new TypeError('fsDateRange.directive: FsDateRangeController: ' +\n                        'If fetchStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                if (this.updateStateDelegate && !angular.isFunction(this.updateStateDelegate)) {\n                    throw new TypeError('fsDateRange.directive: FsDateRangeController: ' +\n                        'If updateStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * update start and end time when fetchStateDelegate changed\n             * @param newVal\n             * @private\n             */\n            _fetchStateDelegateWatchAction: function (newVal) {\n                var ctrl = this;\n                if (angular.isString(newVal)) {\n                    var values = newVal.split(',');\n                    var startTimeUnix = values[0];\n                    var endTimeUnix = values[1];\n                    if (ctrl.startTimeUnix !== startTimeUnix || ctrl.endTimeUnix !== endTimeUnix) {\n                        ctrl.startTimeUnix = startTimeUnix;\n                        ctrl.endTimeUnix = endTimeUnix;\n                        var startTimeDateText = ctrl.$filter('date')(startTimeUnix * 1000, 'MM/dd/yyyy', 'UTC');\n                        ctrl.startTime = ctrl.utils.date.getMoment(startTimeDateText, false, 'MM/DD/YYYY').toDate();\n                        var endTimeDateText = ctrl.$filter('date')(endTimeUnix * 1000, 'MM/dd/yyyy', 'UTC');\n                        ctrl.endTime = ctrl.utils.date.getMoment(endTimeDateText, false, 'MM/DD/YYYY').toDate();\n                    }\n                }\n            },\n            /**\n             * when startTime or endTime changed- this method invoke updateStateDelegate\n             * with the new values, and convert to long value of the date.\n             * If the system use UTC - we also convert the time to UTC using\n             * ctrl.utils.date.getMoment\n             *\n             * @param newValues - array of [startTime, endTime]\n             * @param oldValues - array of [startTime, endTime]\n             * @private\n             */\n            _startTimeEndTimeWatchAction: function (newValues, oldValues) {\n                var ctrl = this;\n                if (newValues && newValues[0] && newValues[1] &&\n                    (oldValues[0] !== newValues[0] || oldValues[1] !== newValues[1])) {\n                    //invoke updateStateDelegate only if it defined\n                    if (this.updateStateDelegate) {\n                        var startTimeMoment = ctrl._prepareSelectedDate(newValues[0]);\n                        var endTimeMoment = ctrl._prepareSelectedDate(newValues[1]);\n                        if (endTimeMoment) {\n                            endTimeMoment.endOf('day');\n                        }\n                        var value = '' +\n                            ctrl.utils.date.toUnixTimestamp(startTimeMoment) + ',' +\n                            ctrl.utils.date.toUnixTimestamp(endTimeMoment);\n                        this.updateStateDelegate({\n                            id: ctrl.dateRangeId,\n                            type: 'DATA',\n                            value: value,\n                            immediate: this._immediate\n                        });\n                    }\n                    if (this.formCtrl) {\n                        this.formCtrl.$setDirty();\n                    }\n                }\n            },\n            /**\n             * This method get a date object, truncate the hours/minutes/seconds etc...,\n             * and convert the date to the time zone according to configuration.\n             * The method ignores the original time zone\n             *\n             * @param {Date} time date object, in any timeozne\n             * @return  The method returns a moment object,\n             * representing the selected date with the application\n             * timezone according to application's configuration.\n             *\n             * Throw TypeError if time is not a date or not defined\n             * @private\n             *\n             */\n            _prepareSelectedDate: function (time) {\n                if (!(time instanceof Date)) {\n                    throw new TypeError('fsDateRange.directive: FsDateRangeController: ' +\n                        'time must be defined and be an Object of type Date');\n                }\n                var ctrl = this;\n                var dateFormat = 'MM/dd/yyyy';\n                var dateFilterFn = ctrl.$filter('date');\n                var timeText = dateFilterFn(time, dateFormat);\n                return ctrl.utils.date.getMoment(timeText, null, 'MM/DD/YYYY');\n            },\n            /**\n             * This function compare start time and end time\n             * (and ignores hours, minutes, seconds ...),\n             * and return true if they are not the same\n             *\n             * @returns {boolean} true when start time and end time on different days,\n             * false if they are on the same day\n             */\n            isStartTimeAndEndTimeOnDifferentDays: function () {\n                var ctrl = this;\n                var dateFilterFn = ctrl.$filter('date');\n                if (!angular.isDefined(ctrl.startTime) || !angular.isDefined(ctrl.endTime)) {\n                    return false;\n                }\n                return dateFilterFn(ctrl.startTime).valueOf() !==\n                    dateFilterFn(ctrl.endTime).valueOf();\n            },\n            /**\n             * Init\n             */\n            init: function init($scope, $timeout, utils, $filter) {\n                var ctrl = this;\n                ctrl._immediate = this._immediate ? ctrl._immediate : false; //this._immediate is false by default\n                // Put dependencies on the instance\n                ctrl.$scope = $scope;\n                ctrl.utils = utils;\n                ctrl.$filter = $filter;\n                ctrl._validateGetStateFn();\n                ctrl._validateSetStateFn();\n                //Init default values\n                ctrl.setLast7Days();\n                //Listen when state delegate return different value\n                if (ctrl.fetchStateDelegate) {\n                    $scope.$watch(function () {\n                        return ctrl.fetchStateDelegate(ctrl.dateRangeId);\n                    }, ctrl._fetchStateDelegateWatchAction.bind(ctrl));\n                }\n                //When startTime or endTime changed - \t update the state\n                $scope.$watchGroup([\n                    function () {\n                        return ctrl.startTime;\n                    },\n                    function () {\n                        return ctrl.endTime;\n                    }\n                ], ctrl._startTimeEndTimeWatchAction.bind(ctrl));\n                $scope.$on('control:reset', function (event, eventData) {\n                    if (eventData.controlId === ctrl.dateRangeId) {\n                        ctrl.setLast7Days();\n                    }\n                });\n            }\n        });\n        FsDateRangeController.$inject = ['$scope', '$timeout', 'utils', '$filter'];\n        function linkFn(scope, element, attr, formCtrl) {\n            scope.dateRange.formCtrl = formCtrl;\n        }\n        return {\n            restrict: 'E',\n            scope: {},\n            controller: FsDateRangeController,\n            controllerAs: 'dateRange',\n            templateUrl: 'app/shared/components/controls/fs-daterange/fs-daterange.view.html',\n            bindToController: {\n                dateRangeId: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                label: '@',\n                _immediate: '@?immediate',\n            },\n            link: linkFn,\n            require: '?^^form'\n        };\n    }\n    fsDateRangeDirective.$inject = [];\n    angular.module('Fortscale.shared.components.fsDateRange', [\"kendo.directives\", 'Utils'])\n        .directive('fsDateRange', fsDateRangeDirective);\n}());\n","(function () {\n    'use strict';\n    function fsSimpleTabsStripDirective($state) {\n        function FsSimpleTabsStripController() {\n        }\n        FsSimpleTabsStripController.prototype.isTabActive = function (stateName) {\n            return $state.includes(stateName);\n        };\n        return {\n            restrict: 'E',\n            scope: {},\n            controller: FsSimpleTabsStripController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                bullets: '=',\n                getHrefDelegate: '='\n            },\n            templateUrl: 'app/shared/components/controls/fs-simple-tabs-strip/fs-simple-tabs-strip.html'\n        };\n    }\n    fsSimpleTabsStripDirective.$inject = ['$state'];\n    angular.module('Fortscale.shared.components.fsSimpleTabsStrip', [])\n        .directive('fsSimpleTabsStrip', fsSimpleTabsStripDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsDatePicker', [\n        //Dependencies\n        'Utils'\n    ]);\n}());\n","(function () {\n    'use strict';\n    function fsDatePickerDirective(dateRanges) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrls) {\n            var ctrl = ctrls[0];\n            ctrl.formCtrl = ctrls[1];\n            ctrl._renderDatePicker();\n            ctrl._setPickerDefaultValue();\n            ctrl._setInputChangeHandler();\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsDatePickerController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsDatePickerController.prototype, {\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateGetStateFn: function () {\n                if (this.fetchStateDelegate && !angular.isFunction(this.fetchStateDelegate)) {\n                    throw new TypeError('fsDatePicker.directive: FsDatePickerController: ' +\n                        'If fetchStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Validate fetchStateDelegate.\n             * Throw TypeError if fetchStateDelegate is received and is not a function\n             * @private\n             */\n            _validateSetStateFn: function () {\n                if (this.updateStateDelegate && !angular.isFunction(this.updateStateDelegate)) {\n                    throw new TypeError('fsDatePicker.directive: FsDatePickerController: ' +\n                        'If updateStateDelegate is provided, it must be a function.');\n                }\n            },\n            /**\n             * Directive validation sequence\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateGetStateFn();\n                this._validateSetStateFn();\n            },\n            /**\n             * Tests for all digits string. Returns true if all digits\n             *\n             * @param value\n             * @returns {boolean}\n             * @private\n             */\n            _isStringInteger: function (value) {\n                return /^\\d*$/.test(value);\n            },\n            /**\n             */\n            /**\n             * Returns a date value (timestamp) from a Date, a string, a string representing an int, or an int.\n             *\n             * @param {string|number|Date} value\n             * @returns {*}\n             * @private\n             */\n            _getDateValueFromGenericValue: function (value) {\n                if (_.isString(value) && this._isStringInteger(value)) {\n                    value = parseInt(value, 10);\n                }\n                return new Date(value).valueOf();\n            },\n            /**\n             * Returns the value of the the state by the id\n             * @returns {*}\n             * @private\n             */\n            _stateWatchFn: function () {\n                return this.fetchStateDelegate(this.datePickerId);\n            },\n            /**\n             * Watch action function . Sets the value to the picker if state has changed.\n             *\n             * @param newState\n             */\n            stateWatchActionFn: function (newState) {\n                if (newState && this._getDateValueFromGenericValue(newState) !== this.getPickerValue().valueOf()) {\n                    this.setPickerValue(newState);\n                }\n            },\n            /**\n             * Initiates state watch\n             *\n             * @returns {*|function()}\n             * @private\n             */\n            _initStateWatch: function () {\n                return this.$scope.$watch(this._stateWatchFn.bind(this), this.stateWatchActionFn.bind(this));\n            },\n            /**\n             * Init watches sequence\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._watchStateDeregister = this._initStateWatch();\n            },\n            /**\n             * Handler function for picker value change. Updates state (via updateStateDelegate), and sets the form\n             * dirty, if form was recognized.\n             *\n             * @param {Event} evt\n             * @private\n             */\n            _pickerChangeHandler: function (evt) {\n                var date = this.getPickerValue().valueOf();\n                this.updateStateDelegate({\n                    id: this.datePickerId,\n                    type: 'DATA',\n                    value: date,\n                    immediate: false\n                });\n                if (this.formCtrl) {\n                    this.$scope.$apply(this.formCtrl.$setDirty.bind(this.formCtrl));\n                }\n            },\n            /**\n             * Finds the date-picker element, and renders the date range picker with kendoDatePicker\n             *\n             * @private\n             */\n            _renderDatePicker: function () {\n                this.datePickerElement = this.$element.find('.date-picker').kendoDatePicker({\n                    change: this._pickerChangeHandler.bind(this)\n                });\n                this.datePickerKendoController = this.datePickerElement.data(\"kendoDatePicker\");\n            },\n            /**\n             * Sets the default value to the picker. In no default value is provided, the default value will be today.\n             *\n             * @returns {*}\n             * @private\n             */\n            _setPickerDefaultValue: function () {\n                var initVal = this.initialValue || dateRanges.getStartOfDayByDaysAgo(0);\n                return this.setPickerValue(initVal);\n            },\n            /**\n             * input change handler. When the input element changes, will change the value of the picker and fire\n             * 'change' event.\n             *\n             * @param {Event} evt\n             * @private\n             */\n            _inputChangeHandler: function (evt) {\n                var newDate = new Date(evt.target.value);\n                if (newDate.valueOf() !== this.getPickerValue().valueOf()) {\n                    this.setPickerValue(newDate);\n                    this.datePickerKendoController.trigger('change');\n                }\n            },\n            /**\n             * Sets an input change handler.\n             *\n             * @private\n             */\n            _setInputChangeHandler: function () {\n                this.$element.find('input').on('change', this._inputChangeHandler.bind(this));\n            },\n            /**\n             * Sets the picker value.\n             *\n             * @param {string|number|Date} value\n             * @returns {*}\n             */\n            setPickerValue: function (value) {\n                value = this._getDateValueFromGenericValue(value);\n                return this.datePickerKendoController.value(new Date(value));\n            },\n            /**\n             * Gets the picker value\n             *\n             * @returns {Date}\n             */\n            getPickerValue: function () {\n                return this.datePickerKendoController.value();\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                ctrl._validations();\n                ctrl._initWatches();\n            }\n        });\n        FsDatePickerController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<input class=\"date-picker\" />',\n            scope: {},\n            link: linkFn,\n            controller: FsDatePickerController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                datePickerId: '@',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                initialValue: '@'\n            },\n            require: ['fsDatePicker', '?^^form']\n        };\n    }\n    fsDatePickerDirective.$inject = ['dateRanges'];\n    angular.module('Fortscale.shared.components.fsDatePicker')\n        .directive('fsDatePicker', fsDatePickerDirective);\n}());\n","(function () {\n    'use strict';\n    function fsSplitter(assert, utils) {\n        function linkFn(scope, element, attrs, ctrl, transclude) {\n            // Init splitter\n            var settings = _.merge({}, ctrl._settings, {\n                collapse: function () {\n                    ctrl._splitterCollapseHandler();\n                },\n                expand: function () {\n                    ctrl._splitterExpandHandler();\n                }\n            });\n            element.kendoSplitter(settings);\n            ctrl.splitterElement = element.data('kendoSplitter');\n            // Init watches\n            if (ctrl.fetchStateDelegate) {\n                scope.$watch(ctrl._watchState.bind(ctrl), ctrl._watchStateAction.bind(ctrl));\n            }\n        }\n        /**\n         * The directive's controller function\n         * Added instead of using a Link function\n         * Properties are bound on the Controller instance and available in the view\n         *\n         * @constructor\n         */\n        function FsSplitterController($scope, $element, $attrs) {\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n            this.init();\n        }\n        _.merge(FsSplitterController.prototype, {\n            /**\n             * Action for state.collapsed.\n             *\n             * @param {string} collapsed When 'true' its the same as true\n             * @private\n             */\n            _watchStateCollapseAction: function (collapsed) {\n                if (collapsed !== undefined &&\n                    collapsed !== this.state.collapsed) {\n                    if (collapsed === 'true') {\n                        this._collapsePane();\n                    }\n                    else {\n                        this._expandPane();\n                    }\n                    this.state.collapsed = collapsed;\n                }\n            },\n            /**\n             * A watch state function (registered with $watch)\n             *\n             * @returns {*}\n             * @private\n             */\n            _watchState: function () {\n                return this.fetchStateDelegate(this._id);\n            },\n            /**\n             * A watch state action function. Fires when state changes.\n             *\n             * @param {object} newVal\n             * @private\n             */\n            _watchStateAction: function (newVal) {\n                if (newVal) {\n                    if (!this.state) {\n                        this.state = {};\n                    }\n                    this._watchStateCollapseAction(newVal.collapsed);\n                }\n            },\n            /**\n             * Updates the state's control.\n             *\n             * @private\n             */\n            _updateControl: function () {\n                this.updateStateDelegate({\n                    id: this._id,\n                    type: 'ui',\n                    value: this.state,\n                    immediate: 'true'\n                });\n            },\n            /**\n             * Collapses the first pane.\n             *\n             * @private\n             */\n            _collapsePane: function () {\n                this.splitterElement.collapse(\".k-pane\");\n            },\n            /**\n             * Expands the first pane.\n             *\n             * @private\n             */\n            _expandPane: function () {\n                this.splitterElement.expand(\".k-pane\");\n            },\n            /**\n             * Splitter collapse event handler. Sets internal state (for dirty checking)\n             * and updates the control.\n             *\n             * @private\n             */\n            _splitterCollapseHandler: function () {\n                this.state = this.state || {};\n                this.state.collapsed = 'true';\n                // Trigger apply because the event is not an angular event.\n                this.$scope.$apply(function () {\n                    this._updateControl();\n                }.bind(this));\n            },\n            /**\n             * Splitter expand event handler. Sets internal state (for dirty checking)\n             * and updates the control.\n             *\n             * @private\n             */\n            _splitterExpandHandler: function () {\n                this.state = this.state || {};\n                this.state.collapsed = 'false';\n                // Trigger apply because the event is not an angular event.\n                this.$scope.$apply(function () {\n                    this._updateControl();\n                }.bind(this));\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n            }\n        });\n        FsSplitterController.$inject = ['$scope', '$element', '$attrs'];\n        return {\n            restrict: 'A',\n            scope: true,\n            controller: FsSplitterController,\n            controllerAs: 'splitter',\n            bindToController: {\n                _settings: '=splitterSettings',\n                _id: '@splitterId',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '='\n            },\n            link: linkFn\n        };\n    }\n    fsSplitter.$inject = ['assert', 'utils'];\n    angular.module('Fortscale.shared.components.fsSplitter', [])\n        .directive('fsSplitter', fsSplitter);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Holds the global state of all multiselect drop downs. Used to determine if any are opened.\n     *\n     * @type {boolean}\n     * @private\n     */\n    var _anyDropdownOpened = false;\n    function fsMultiselect(assert) {\n        /**\n         * The link function\n         *\n         * @param scope\n         * @param element\n         * @param attrs\n         * @param ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl /**, transclude**/) {\n            ctrl._linkInit();\n        }\n        /**\n         * The directive's controller function\n         * Added instead of using a Link function\n         * Properties are bound on the Controller instance and available in the view\n         *\n         * @constructor\n         */\n        function FsMultiselectController($scope, $element, $attrs, $timeout) {\n            var ctrl = this;\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n            this.$timeout = $timeout;\n            // Bind to controller instance\n            this.windowClickHandler = function (evt) {\n                ctrl._windowClickHandler(evt);\n            };\n            this._ctrlInit();\n        }\n        _.merge(FsMultiselectController.prototype, {\n            _errMsg: 'fsMultiselect.directive: ',\n            /**\n             * Validates listData. Validates each item for value id and unique.\n             *\n             * @param {array<{id: string, value: string}>} listData\n             * @param errMsg\n             * @private\n             */\n            _validateListData: function (listData, errMsg) {\n                // Validate values and ids\n                _.each(listData, function (dataItem) {\n                    // validate value\n                    assert.isString(dataItem.value, 'dataItem.value', errMsg);\n                    // Validate ids\n                    assert.isString(dataItem.id, 'dataItem.id', errMsg);\n                });\n                // Validate uniques\n                var values = _.map(listData, 'value');\n                var ids = _.map(listData, 'id');\n                assert(values.length === _.uniq(values).length, errMsg + 'value property\\'s values must be unique.', RangeError);\n                assert(ids.length === _.uniq(ids).length, errMsg + 'id property\\'s values must be unique.', RangeError);\n            },\n            /**\n             * Control init validations. Validates directive's arguments\n             * @param errMsg\n             * @private\n             */\n            _ctrlValidations: function (errMsg) {\n                assert.isString(this.multiselectId, 'multiselectId', errMsg);\n                assert.isString(this._initialState, '_initialState', errMsg, true);\n                assert.isString(this.label, 'label', errMsg, true);\n                assert.isArray(this._listData, 'listData', errMsg);\n                this._validateListData(this._listData, errMsg + 'listData argument: ');\n                assert.isFunction(this.fetchStateDelegate, 'fetchStateDelegate', errMsg);\n                assert.isFunction(this.updateStateDelegate, 'updateStateDelegate', errMsg);\n            },\n            /**\n             * A handler for any window click. Should close the dropdown if the click is outside the dropdown.\n             *\n             * @param evt\n             * @private\n             */\n            _windowClickHandler: function (evt) {\n                // If the click is outside the dropdown - fire cancelClickHandler\n                if (!this.$element.find('.fs-multiselect-dropdown-list')[0].contains(evt.target)) {\n                    this.cancelClickHandler();\n                }\n                // If the click is on the drop-down openener, stop propagation so drop down will not reopen\n                if (this.$element.find('.fs-multiselect-value')[0].contains(evt.target)) {\n                    evt.stopImmediatePropagation();\n                }\n            },\n            /**\n             * Initates window click listener\n             * @private\n             */\n            _initWindowClickListener: function () {\n                window.addEventListener('click', this.windowClickHandler, true);\n            },\n            /**\n             * Removes window click listener\n             * @private\n             */\n            _removeWindowClickListener: function () {\n                window.removeEventListener('click', this.windowClickHandler, true);\n            },\n            /**\n             * Watch state function.\n             *\n             * @returns {*}\n             * @private\n             */\n            _watchStateFn: function () {\n                return this.fetchStateDelegate(this.multiselectId);\n            },\n            /**\n             * Watch state action function.\n             * Handles digestion of incoming state (which items are checked), and select all state.\n             *\n             * @param state\n             * @private\n             */\n            _watchStateActionFn: function (state) {\n                if (state) {\n                    this._setAllUnchecked();\n                    this._digestIncomingState(state);\n                    this._setAllSelected();\n                }\n                else {\n                    this._initAllSelectedState();\n                }\n            },\n            /**\n             * Watch list data\n             *\n             * @returns {*}\n             * @private\n             */\n            _watchListDataFn: function () {\n                return this._listData;\n            },\n            /**\n             * Watch list data action function.\n             * Handles digestion of incoming state (which items are checked), and select all state.\n             *\n             * @param state\n             * @private\n             */\n            _watchListDataActionFn: function (listData) {\n                if (listData && listData.length > 0) {\n                    //this._ctrlInit();\n                    this.listData = _.cloneDeep(this._listData);\n                    this._watchStateActionFn(this.fetchStateDelegate(this.multiselectId));\n                }\n            },\n            /**\n             * Fires when 'control:reset' event is broadcasted.\n             * It resets the control to its initial state and updates state.\n             *\n             * @param event\n             * @param eventData\n             * @private\n             */\n            _controlResetRequestHandler: function (event, eventData) {\n                var ctrl = this;\n                if (eventData.controlId && eventData.controlId === ctrl.multiselectId) {\n                    // Since this is like receiving external state,\n                    // _watchStateActionFn is the perfect method to use\n                    ctrl._watchStateActionFn(ctrl._initialState);\n                    // Clear the form\n                    ctrl.$scope.dropdownForm.$setPristine();\n                    // Get the value to set it to the pre-state\n                    var state = ctrl._getMultiselectState();\n                    // Set pre-state\n                    ctrl.updateStateDelegate({\n                        id: ctrl.multiselectId,\n                        immediate: this._immediate,\n                        type: 'data',\n                        value: state\n                    });\n                }\n            },\n            /**\n             * Handler for scope destroy.\n             * Sets _anyDropdownOpened to false.\n             *\n             * @private\n             */\n            _scopeDestroyHandler: function () {\n                _anyDropdownOpened = false;\n                this._removeWindowClickListener();\n            },\n            /**\n             * Initates all relevan watches.\n             *\n             * @private\n             */\n            _initWatches: function () {\n                var ctrl = this;\n                // Init state watch\n                ctrl.$scope.$watch(ctrl._watchStateFn.bind(ctrl), ctrl._watchStateActionFn.bind(ctrl));\n                //Init list options change watcher\n                ctrl.$scope.$watch(ctrl._watchListDataFn.bind(ctrl), ctrl._watchListDataActionFn.bind(ctrl));\n                ctrl.$scope.$on('$destroy', ctrl._scopeDestroyHandler.bind(ctrl));\n                ctrl.$scope.$on('control:reset', ctrl._controlResetRequestHandler.bind(ctrl));\n            },\n            /**\n             * Before receiving external state, set the default to all selected.\n             *initToSelectAll - if true - all be selected, if false, nothing will be selected\n             * @private\n             */\n            _initAllSelectedState: function () {\n                var dataItems = this._listData.concat(this.listData);\n                var shouldSelectAll = this.lastSelected === 'All'; //If selectAll is false, none will be selected\n                // Iterate through concatinated array and turn on checked for each item.\n                _.each(dataItems, function (dataItem) {\n                    dataItem.checked = shouldSelectAll;\n                });\n                // Put the view value in value property on the controller instance.\n                this.value = this._getMultiselectViewValue();\n                this.allSelected = shouldSelectAll;\n            },\n            /**\n             * Sel all items as unchecked.\n             *\n             * @private\n             */\n            _setAllUnchecked: function () {\n                var dataItems = this._listData.concat(this.listData);\n                // Iterate through concatinated array and turn on checked for each item.\n                _.each(dataItems, function (dataItem) {\n                    dataItem.checked = false;\n                });\n            },\n            /**\n             * Returns the multiselect state. Multiselect state is a csv string of\n             * checked items ids. If all or none are selected, the return value is null.\n             *\n             * @returns {string|null}\n             * @private\n             */\n            _getMultiselectState: function () {\n                // Get all checked items from model state\n                var checked = _.filter(this.listData, { checked: true });\n                // init value variable\n                // If value has an initial state, the value needs to be explicitly '_NONE_'\n                // or '_ALL_'\n                var value = (this._initialState === undefined) ? null : '_NONE_';\n                // If there are any checked and not all are checked in :\n                if (checked.length > 0 && checked.length < this.listData.length) {\n                    // The value is a csv string of all checked items ids.\n                    value = _.map(checked, function (item) {\n                        return item.id;\n                    }).join(',');\n                }\n                else if (checked.length === this.listData.length) {\n                    value = (this._initialState === undefined) ? null : '_ALL_';\n                }\n                // Return a csv or null\n                return value;\n            },\n            /**\n             * Receives a list of checked view items. Returns a csv of item.value.\n             * Used in 'short' lists.\n             *\n             * @param {Array<{value: string}>} checkedItems\n             * @returns {string}\n             * @private\n             */\n            _getShortViewValue: function (checkedItems) {\n                return _.map(checkedItems, function (item) {\n                    return item.value;\n                }).join('; ');\n            },\n            keyPress: function (e) {\n                if (e.keyCode === 27) {\n                    this.okClickHandler();\n                }\n            },\n            /**\n             * Receives a list of checked view items. Returns  '1 item' if there is only one item,\n             * or it returns '<n> items' if there are more then one item. Used in 'long' lists.\n             *\n             * @param {Array<{value: string}>} checkedItems\n             * @returns {string}\n             * @private\n             */\n            _getLongViewValue: function (checkedItems) {\n                if (checkedItems.length > 1) {\n                    return checkedItems.length + ' items';\n                }\n                else {\n                    return '1 item';\n                }\n            },\n            /**\n             * Returns the view value to be displayed in the drop down button.\n             * If all are selected, 'All' is returned.\n             * If none are selected, 'None' is returned.\n             * If list is short, a ';' delimited string of item.value is returnd.\n             * if list is long, '<n> items' (or '1 item') is returned.\n             *\n             * @returns {string}\n             * @private\n             */\n            _getMultiselectViewValue: function () {\n                // Gets a list of all checked items\n                var checked = _.filter(this._listData, { checked: true });\n                // If there are any checked items and non all items are checked:\n                if (checked.length > 0 && checked.length < this._listData.length) {\n                    //Per Uri's request - always show the values, seperated\n                    return this._getShortViewValue(checked);\n                }\n                else if (checked.length === this._listData.length) {\n                    return 'All';\n                }\n                else {\n                    return 'None';\n                }\n            },\n            /**\n             * Takes a csv string, an creates an id list. Turns on 'checked' for each of the\n             * received items in both model state and view state.\n             *\n             * @param {string} state a csv string\n             * @private\n             */\n            _digestIncomingState: function (state) {\n                var ids;\n                // Get ids from csv\n                if (state === '_NONE_') {\n                    ids = '';\n                }\n                else if (state === '_ALL_') {\n                    ids = _.map(this._listData, 'id');\n                }\n                else {\n                    ids = state.split(',');\n                }\n                // Iterate through ids\n                _.each(ids, _.bind(function (id) {\n                    // Create one array that holds both model state objects and view state objects,\n                    // that have a received id.\n                    // This works because the lists hold objects and changes are made by reference.\n                    var dataItems = [];\n                    dataItems = dataItems.concat(_.filter(this._listData, { id: id }));\n                    dataItems = dataItems.concat(_.filter(this.listData, { id: id }));\n                    // Iterate through concatinated array and turn on checked for each item.\n                    _.each(dataItems, function (dataItem) {\n                        dataItem.checked = true;\n                    });\n                }, this));\n                // Put the view value in value property on the controller instance.\n                this.value = this._getMultiselectViewValue();\n            },\n            /**\n             * Checks if all checked are true in a received list.\n             *\n             * @param {Array<{checked: boolean}>} listData\n             * @returns {boolean}\n             * @private\n             */\n            _isAllSelected: function (listData) {\n                return _.every(listData, function (dataItem) {\n                    return dataItem.checked;\n                });\n            },\n            /**\n             * Set allSelected property with true or false based on the result of isAllSelected.\n             *\n             * @private\n             */\n            _setAllSelected: function () {\n                this.allSelected = this._isAllSelected(this.listData);\n            },\n            /**\n             * Sets all checked to true/false (based on the received 'checked' argument)\n             * in view model.\n             *\n             * @param {boolean} checked\n             * @private\n             */\n            _checkAllInView: function (checked) {\n                _.each(this.listData, function (dataItem) {\n                    dataItem.checked = checked;\n                });\n            },\n            /**\n             * Finds the drop down element and returns it.\n             *\n             * @returns {*}\n             * @private\n             */\n            _getDropdownElement: function () {\n                return this.$element.find('.fs-multiselect-dropdown-list');\n            },\n            /**\n             * This method is exposed for testing purposes only!\n             * Sets the value of _anyDropdownOpened\n             *\n             * @param {*} val\n             * @private\n             */\n            __setAnyDropdownOpened: function (val) {\n                _anyDropdownOpened = val;\n            },\n            /**\n             * This method is exposed for testing purposes only!\n             * Gets the value of _anyDropdownOpened\n             *\n             * @returns {boolean}\n             * @private\n             */\n            __getAnyDropdownOpened: function () {\n                return _anyDropdownOpened;\n            },\n            /**\n             * This variable holds threshold number between 'long' list and 'short' list\n             */\n            longListThreshold: 10,\n            /**\n             * Hides the drop-down menu, and sets the global _anyDropdownOpened to false.\n             */\n            hideDropdown: function () {\n                this._dropDownElement.removeClass('show');\n                _anyDropdownOpened = false;\n                this._removeWindowClickListener();\n            },\n            /**\n             * Shows the drop down menu if no drop downs are opened globally.\n             * Sets the global _anyDropdownOpened to true so no other drop-downs may be opened.\n             */\n            showDropdown: function () {\n                if (!(this._dropDownElement.hasClass('show') ||\n                    _anyDropdownOpened)) {\n                    this._dropDownElement.addClass('show');\n                    _anyDropdownOpened = true;\n                    this.setLocation();\n                    // Init document click watch\n                    this._initWindowClickListener();\n                }\n            },\n            /**\n             * Handler for 'Select all' item click. If sets all view items to checked/unchecked.\n             */\n            selectAllHandler: function () {\n                // if all view items are selected: deselect all\n                if (this._isAllSelected(this.listData)) {\n                    this._checkAllInView(false);\n                    this.allSelected = false;\n                }\n                else {\n                    this._checkAllInView(true);\n                    this.allSelected = true;\n                }\n                // Set the form to dirty so 'Ok' button will be activated.\n                this.$scope.dropdownForm.$setDirty();\n            },\n            /**\n             * Single item select handler. Fires _setAllSelected to determine the state of\n             * 'Select all'.\n             */\n            selectSingleHandler: function (evt) {\n                this._setAllSelected();\n                // If original top was registered then use it to set the scroll to the original position\n                // This takes care of a bug where clicking on the list caused the scroll of the list to\n                // drop to the bottom\n                if (this._originalScrollTop) {\n                    this._originalScrollTop.element.scrollTop = this._originalScrollTop.scrollTop;\n                    this._originalScrollTop = null;\n                }\n            },\n            /**\n             * A precursor to selectSingleHandler method. This registers the original scroll top so\n             * selectSingleHandler can then use it to set the scroll back to when it was started before\n             * clicking had changed it\n             * @param element\n             * @param evt\n             */\n            setListContainerScroll: function (element, evt) {\n                var container = element.parentElement;\n                this._originalScrollTop = { element: container, scrollTop: container.scrollTop };\n            },\n            /**\n             * OK Click handler.\n             * Hides the drop-down, merges the view state into the model state, sets the view\n             * value, sets the form pristine, and updates the state in the state container.\n             */\n            okClickHandler: function () {\n                this.hideDropdown();\n                this._listData = _.cloneDeep(this.listData);\n                this.value = this._getMultiselectViewValue();\n                this.lastSelected = this.value;\n                this.$scope.dropdownForm.$setPristine();\n                var state = this._getMultiselectState();\n                this.updateStateDelegate({\n                    id: this.multiselectId,\n                    immediate: this._immediate,\n                    type: 'data',\n                    value: state\n                });\n            },\n            /**\n             * Cancel click handler.\n             * Hides the drop-down, sets the form pristine to disable OK button, resets view\n             * state to the model state, and determine allSelected state.\n             */\n            cancelClickHandler: function () {\n                this.hideDropdown();\n                this.$scope.dropdownForm.$setPristine();\n                this.listData = _.cloneDeep(this._listData);\n                this._setAllSelected();\n            },\n            setLocation: function (setTransition) {\n                var _this = this;\n                var _setLocation = function () {\n                    var windowHeight = window.innerHeight;\n                    var dropdownBottom = _this._dropDownElement[0].getBoundingClientRect().bottom;\n                    var transform = _this._dropDownElement[0].style.transform.split(',');\n                    var translateY = transform.length > 1 ? parseFloat(transform[1]) : 0;\n                    if (windowHeight - 120 < dropdownBottom) {\n                        var delta = (dropdownBottom + translateY) - windowHeight + 120;\n                        _this._dropDownElement.css('transform', \"translate3d(0, -\" + delta + \"px, 0)\");\n                    }\n                    if (windowHeight - 120 > dropdownBottom) {\n                        _this._dropDownElement.css('transform', \"translate3d(0, 0, 0)\");\n                    }\n                };\n                if (setTransition) {\n                    this._dropDownElement.css('transition', 'transform 0.5s ease-in-out');\n                    this.$timeout(_setLocation, 200);\n                }\n                else {\n                    this._dropDownElement.css('transition', '');\n                    _setLocation();\n                }\n            },\n            /**\n             * Inits\n             */\n            /**\n             * Controller init function\n             *\n             * @private\n             */\n            _ctrlInit: function _ctrlInit() {\n                this._ctrlValidations(this._errMsg + '_ctrlInit: ');\n                // Clone states\n                // _listData is the model state\n                // listData is the view state\n                this._listData = _.cloneDeep(this._listData);\n                this.listData = _.cloneDeep(this._listData);\n                this._immediate = this._immediate ? this._immediate : false; //this._immediate is false by default\n            },\n            /**\n             * Link function init function\n             *\n             * @private\n             */\n            _linkInit: function () {\n                // Get dropdown element\n                this._dropDownElement = this._getDropdownElement();\n                // Init watches\n                this.lastSelected = 'None'; //Init with none\n                this._initWatches();\n            }\n        });\n        FsMultiselectController.$inject = ['$scope', '$element', '$attrs', '$timeout'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/shared/components/fs-multiselect/fs-multiselect.view.html',\n            scope: {},\n            controller: FsMultiselectController,\n            controllerAs: 'multiselect',\n            bindToController: {\n                _listData: '=listData',\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                multiselectId: '@multiselectId',\n                label: '@label',\n                _initialState: '@initialState',\n                _immediate: '@?immediate',\n                //Count labels should be array of two strings, the first one is the label for count one item (I.E. User)\n                //The second string should be the label for count of more then one item (I.E Users)\n                //To display the count, each item in listData must have attribute of 'count' on it.\n                countLabels: '=countLabels'\n            },\n            link: linkFn\n        };\n    }\n    fsMultiselect.$inject = ['assert'];\n    angular.module('Fortscale.shared.components.fsMultiselect', [\n        'kendo.directives'\n    ])\n        .directive('fsMultiselect', fsMultiselect);\n}());\n","(function () {\n    'use strict';\n    function fsMultiselectAutocomplete(assert, $http, Restangular) {\n        /**\n         * The link function\n         *\n         * @param scope\n         * @param element\n         * @param attrs\n         * @param ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl /**, transclude**/) {\n            ctrl._linkInit();\n        }\n        /**\n         * The directive's controller function\n         * Added instead of using a Link function\n         * Properties are bound on the Controller instance and available in the view\n         *\n         * @constructor\n         */\n        function FsMultiselectAutocompleteController($scope, $element, $attrs, $timeout) {\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n            this.$timeout = $timeout;\n            this._ctrlInit();\n        }\n        _.merge(FsMultiselectAutocompleteController.prototype, {\n            _errMsg: 'fsMultiselectAutocomplete.directive: ',\n            /**\n             * Control init validations. Validates directive's arguments\n             * @param errMsg\n             * @private\n             */\n            _ctrlValidations: function (errMsg) {\n                assert.isString(this.multiselectAutocompleteId, 'multiselectAutocompleteId', errMsg);\n                assert.isString(this.label, 'label', errMsg, true);\n                assert.isString(this.entity, 'entity', errMsg);\n                assert.isString(this.textField, 'textField', errMsg);\n                assert.isString(this.valueField, 'valueField', errMsg);\n                assert.isString(this.queryTextField, 'queryTextField', errMsg, true);\n                assert.isString(this.queryValueField, 'queryValueField', errMsg, true);\n                assert.isFunction(this.fetchStateDelegate, 'fetchStateDelegate', errMsg);\n                assert.isFunction(this.updateStateDelegate, 'updateStateDelegate', errMsg);\n            },\n            /**\n             * Watch state function.\n             *\n             * @returns {*}\n             * @private\n             */\n            _watchStateFn: function () {\n                return this.fetchStateDelegate(this.multiselectAutocompleteId);\n            },\n            /**\n             * Watch state action function.\n             * Handles digestion of incoming state.\n             *\n             * @param state\n             * @private\n             */\n            _watchStateActionFn: function (state) {\n                if (state === null) {\n                    return;\n                }\n                var ctrl = this;\n                // Create query\n                var query = {};\n                if (ctrl.queryTextField) {\n                    query[ctrl.queryTextField] = state;\n                }\n                // Get list of entities\n                Restangular.all(ctrl.entity).getList(query)\n                    .then(function (entities) {\n                    // Add and select list of entities to multi select\n                    var el = ctrl._getElementData();\n                    var data = el.dataSource.data();\n                    _.each(entities, function (entity) {\n                        data.push(entity);\n                    });\n                    el.dataSource.data(data);\n                    el.value(state.split(','));\n                    // Register the state for future diff examination\n                    ctrl._lastMultiselectValue = el.value();\n                });\n            },\n            /**\n             * Fires when 'control:reset' event is broadcasted.\n             * It resets the control to its initial state and updates state.\n             *\n             * @param event\n             * @param eventData\n             * @private\n             */\n            _controlResetRequestHandler: function (event, eventData) {\n                // Set the data array to empty array\n                this._multiselectValue([]);\n                this._setState(null);\n                this._initMultiselect();\n            },\n            /**\n             * Calculates the total of the returned entities. Used by multiselect options.\n             *\n             * @param {object} data\n             * @returns {number}\n             * @private\n             */\n            _multiselectOptionsTotal: function (data) {\n                return (data.data && data.data.length) || 0;\n            },\n            /**\n             * Mapper function to create a filter. Used by multiselect options.\n             *\n             * @param data\n             * @param type\n             * @returns {{} | undefined}\n             * @private\n             */\n            _multiselectOptionsParameterMap: function (data, type) {\n                if (!this.queryValueField) {\n                    return;\n                }\n                if (type === 'read') {\n                    if (data && data.filter && data.filter.filters &&\n                        data.filter.filters[0]) {\n                        var value = data.filter.filters[0].value;\n                        var paramMap = {};\n                        paramMap[this.queryValueField] = value;\n                        return paramMap;\n                    }\n                }\n            },\n            /**\n             * Multi select select handler. Used by multiselect options. Calcs the desired state\n             * and sets it.\n             *\n             * @param {Object} e\n             * @private\n             */\n            _multiselectOptionsSelectHandler: function (e) {\n                var dataItem = e.sender.dataSource.view()[e.item.index()];\n                var ids = this._multiselectValue();\n                //detect if id is in ids\n                if (!_.some(ids, function (id, index) {\n                    // If item's id is in ids, splice it out\n                    if (id === dataItem.id) {\n                        ids.splice(index, 1);\n                        return true;\n                    }\n                    return false;\n                })) {\n                    // If item's id is not in ids, put it in\n                    ids.push(dataItem[this.valueField]);\n                }\n                this._setState(ids.join(','));\n            },\n            /**\n             * Multi select change handler. Used by multiselect options. Finds if\n             * there is a difference between the last registered value and the current.\n             * If there's a difference then an item was removed, and state needs to be updated.\n             *\n             * @param e\n             * @private\n             */\n            _multiselectOptionsChangeHandler: function (e) {\n                var diff = _.difference(this._lastMultiselectValue || [], e.sender.value());\n                if (diff.length > 0) {\n                    var ids = this._multiselectValue();\n                    this._setState(ids.join(','));\n                }\n                this._lastMultiselectValue = e.sender.value();\n            },\n            /**\n             * Creates the multiselect options\n             *\n             * @private\n             */\n            _initMultiselectOptions: function () {\n                var ctrl = this;\n                this.multiselectOptions = {\n                    placeholder: this.label ? this.label : 'Enter Text',\n                    dataTextField: ctrl.textField,\n                    dataValueField: ctrl.valueField,\n                    valuePrimitive: true,\n                    autoBind: false,\n                    minLength: 3,\n                    dataSource: {\n                        type: 'odata',\n                        serverFiltering: true,\n                        schema: {\n                            data: 'data',\n                            total: ctrl._multiselectOptionsTotal\n                        },\n                        transport: {\n                            read: {\n                                url: '/fortscale-webapp/api/entities',\n                                type: 'GET',\n                                dataType: 'json'\n                            },\n                            parameterMap: ctrl._multiselectOptionsParameterMap.bind(ctrl)\n                        }\n                    },\n                    select: ctrl._multiselectOptionsSelectHandler.bind(ctrl),\n                    change: ctrl._multiselectOptionsChangeHandler.bind(ctrl),\n                    filtering: function (e) {\n                        // Make sure that backspace does not break the code\n                        if (!e.filter || !e.filter.value) {\n                            e.preventDefault();\n                        }\n                    }\n                };\n            },\n            /**\n             * Returns the multiselect api.\n             *\n             * @returns {*}\n             * @private\n             */\n            _getElementData: function () {\n                return this.multiselectAutocompleteSelectElement.data('kendoMultiSelect');\n            },\n            /**\n             * Gets or sets the multiselect value.\n             *\n             * @param {Array=} val\n             * @returns {Array}\n             * @private\n             */\n            _multiselectValue: function (val) {\n                // Get kendo element controller\n                var kendoElementCtrl = this._getElementData();\n                // Set value if value is provided\n                if (!_.isNil(val)) {\n                    kendoElementCtrl.value(val);\n                    kendoElementCtrl.refresh();\n                }\n                return kendoElementCtrl.value();\n            },\n            _initMultiselect: function () {\n                this.multiselectAutocompleteSelectElement = this.$element\n                    .find('.multiselectAutocompleteSelect');\n                this.multiselectAutocompleteSelectElement\n                    .kendoMultiSelect(this.multiselectOptions);\n            },\n            /**\n             * Initates all relevan watches.\n             *\n             * @private\n             */\n            _initWatches: function () {\n                var ctrl = this;\n                // Init state watch\n                ctrl.$scope.$watch(ctrl._watchStateFn.bind(ctrl), ctrl._watchStateActionFn.bind(ctrl));\n                ctrl.$scope.$on('control:reset', ctrl._controlResetRequestHandler.bind(ctrl));\n            },\n            /**\n             * Sets state to state container\n             *\n             * @param {string} state\n             * @private\n             */\n            _setState: function (state) {\n                this.updateStateDelegate({\n                    id: this.multiselectAutocompleteId,\n                    immediate: this._immediate,\n                    type: 'data',\n                    value: state\n                });\n            },\n            /**\n             * Controller init function\n             *\n             * @private\n             */\n            _ctrlInit: function _ctrlInit() {\n                this._ctrlValidations(this._errMsg + '_ctrlInit: ');\n                this._immediate = this._immediate ? this._immediate : false; //this._immediate is false by default\n            },\n            /**\n             * Link function init function\n             *\n             * @private\n             */\n            _linkInit: function () {\n                // Init multiselect options\n                this._initMultiselectOptions();\n                // Init multiselect\n                this._initMultiselect();\n                // Init watches\n                this._initWatches();\n            }\n        });\n        FsMultiselectAutocompleteController.$inject = ['$scope', '$element', '$attrs', '$timeout'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/shared/components/fs-multiselect-autocomplete/fs-multiselect-autocomplete.view.html',\n            scope: {},\n            controller: FsMultiselectAutocompleteController,\n            controllerAs: 'multiselectAutocomplete',\n            bindToController: {\n                fetchStateDelegate: '=',\n                updateStateDelegate: '=',\n                multiselectAutocompleteId: '@',\n                label: '@',\n                entity: '@',\n                textField: '@',\n                valueField: '@',\n                queryTextField: '@',\n                queryValueField: '@',\n                _immediate: '@?immediate',\n            },\n            link: linkFn\n        };\n    }\n    fsMultiselectAutocomplete.$inject = ['assert', '$http', 'Restangular'];\n    angular.module('Fortscale.shared.components.fsMultiselectAutocomplete', [\n        'kendo.directives'\n    ])\n        .directive('fsMultiselectAutocomplete', fsMultiselectAutocomplete);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsSeverityTag;\n            (function (fsSeverityTag) {\n                var fsSeverityTagComponent = {\n                    templateUrl: 'app/shared/components/fs-severity-tag/fs-severity-tag.component.html',\n                    bindings: {\n                        severity: '@'\n                    }\n                };\n                angular.module('Fortscale.shared.components.fsSeverityTag', [])\n                    .component('fsSeverityTag', fsSeverityTagComponent);\n            })(fsSeverityTag = components.fsSeverityTag || (components.fsSeverityTag = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsNanobar;\n            (function (fsNanobar) {\n                var NanobarController = (function () {\n                    function NanobarController($scope, $element, assert, fsNanobarAutomationService, $timeout) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.fsNanobarAutomationService = fsNanobarAutomationService;\n                        this.$timeout = $timeout;\n                        this.ERR_MSG = 'fsNanobarDirective: fsNanobarController: ';\n                    }\n                    NanobarController.prototype._validateId = function () {\n                        this.assert.isString(this.nanobarId, this.ERR_MSG + \"Directive must receive a nanobar Id.\");\n                    };\n                    NanobarController.prototype._validateOptions = function () {\n                        if (this.nanobarOptions) {\n                            this.assert.isString(this.nanobarOptions.classname, 'nanobarOptions.classname', this.ERR_MSG, true);\n                            this.assert.isString(this.nanobarOptions.id, 'nanobarOptions.id', this.ERR_MSG, true);\n                            this.assert.isString(this.nanobarOptions.color, 'nanobarOptions.color', this.ERR_MSG, true);\n                        }\n                    };\n                    /**\n                     * Validates 'progress' argument.\n                     * @private\n                     */\n                    NanobarController.prototype._validateProgress = function () {\n                        this.assert(_.isNumber(this.nanobarProgress), this.ERR_MSG + \"progress argument must be a number\", TypeError);\n                        this.assert(this.nanobarProgress >= 0, this.ERR_MSG + \"progress argument must be => 0. its \" + this.nanobarProgress, RangeError);\n                        this.assert(this.nanobarProgress <= 100, this.ERR_MSG + \"progress argument must be <= 100. its \" + this.nanobarProgress, RangeError);\n                    };\n                    /**\n                     * Updates progress to nanobar\n                     * @private\n                     */\n                    NanobarController.prototype._updateProgress = function () {\n                        if (this.nanobar) {\n                            $(this.nanobar.el).find('.bar').css({ backgroundColor: this.nanobarOptions.color || '#000000' });\n                            this.nanobar.go(this.nanobarProgress);\n                        }\n                    };\n                    /**\n                     * Handler for 'progress' change\n                     * @private\n                     */\n                    NanobarController.prototype._progressHandler = function () {\n                        var _this = this;\n                        if (this.nanobarProgress === null || this.nanobarProgress === undefined) {\n                            return;\n                        }\n                        // validate progress\n                        this._validateProgress();\n                        this._updateProgress();\n                        if (this.nanobarProgress === 100) {\n                            this.$timeout(function () {\n                                if (_this.nanobarProgress === 100) {\n                                    _this.fsNanobarAutomationService.reset(_this.nanobarId);\n                                }\n                            }, 1000);\n                        }\n                    };\n                    /**\n                     * Creates a nanobar options. target is taken from the provided options or from the element\n                     * @returns {INanobarOptions}\n                     * @private\n                     */\n                    NanobarController.prototype._createNanobarOptions = function () {\n                        if (this.nanobarOptions) {\n                            // Copy options\n                            var options = _.merge({}, this.nanobarOptions);\n                            // decide on target element. If not targetGlobal then target is either explicit or parent of element\n                            if (!this.nanobarOptions.targetGlobal) {\n                                options.target = (this.nanobarOptions || {}).target || this.$element.parent()[0];\n                            }\n                            return options;\n                        }\n                    };\n                    /**\n                     * Set the bar color if received in options\n                     * @private\n                     */\n                    NanobarController.prototype._setBarColor = function () {\n                        // Set color\n                        if (this.nanobarOptions && this.nanobarOptions.color) {\n                            $(this.nanobar.el).find('.bar').css('background-color', this.nanobarOptions.color);\n                        }\n                    };\n                    /**\n                     * Creates a nanobar instance\n                     */\n                    NanobarController.prototype.renderNanobar = function () {\n                        var nanobarOptions = this._createNanobarOptions();\n                        this.nanobar = new Nanobar(nanobarOptions);\n                        this._setBarColor();\n                    };\n                    NanobarController.prototype.updateProgress = function (progress) {\n                        this.nanobarProgress = progress;\n                        this._progressHandler();\n                    };\n                    NanobarController.prototype.$onInit = function () {\n                        var _this = this;\n                        // Validations\n                        this._validateId();\n                        this._validateOptions();\n                        this.fsNanobarAutomationService.addNanobar(this.nanobarId, this);\n                        // init cleanup\n                        this.$scope.$on('$destroy', function () {\n                            $(_this.nanobar.el).remove();\n                            _this.nanobar = null;\n                        });\n                    };\n                    ;\n                    NanobarController.$inject = ['$scope', '$element', 'assert', 'fsNanobarAutomationService', '$timeout'];\n                    return NanobarController;\n                }());\n                var linkFn = function (scope, instanceElement, instanceAttributes, controller, transclude) {\n                    controller.renderNanobar();\n                };\n                var fsNanobarFn = function () {\n                    var nanobarDirective = {\n                        controller: NanobarController,\n                        controllerAs: 'nanobarCtrl',\n                        bindToController: {\n                            nanobarId: '@',\n                            // nanobarProgress: '<',\n                            nanobarOptions: '<'\n                        },\n                        link: linkFn\n                    };\n                    return nanobarDirective;\n                };\n                angular.module('Fortscale.shared.components.fsNanobar', [])\n                    .directive('fsNanobar', fsNanobarFn);\n            })(fsNanobar = components.fsNanobar || (components.fsNanobar = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function FsScoreIcon() {\n        function linkFn(scope, element, attr, ctrl) {\n            element.addClass(ctrl._getScoreRangeClass(ctrl.score));\n            if (ctrl.score) {\n                element.parent().attr('title', 'score: ' + ctrl.score);\n            }\n        }\n        function FsScoreIconController() {\n        }\n        _.merge(FsScoreIconController.prototype, {\n            /**\n             * Holds the color ranges. gte -> greater then or equal\n             */\n            _scoreRanges: [\n                {\n                    gte: 95,\n                    className: 'fs-score-icon-red'\n                },\n                {\n                    gte: 80,\n                    className: 'fs-score-icon-orange'\n                },\n                {\n                    gte: 50,\n                    className: 'fs-score-icon-yellow'\n                }\n            ],\n            /**\n             * Takes a score, and iterates through _scoreRanges to find the first condition it\n             * matches. Once a match is made, _scoreRanges.className is returned.\n             * If no match is found, fs-score-icon-hide is returned\n             *\n             * @param {number} score\n             * @returns {string}\n             * @private\n             */\n            _getScoreRangeClass: function (score) {\n                var scoreRangeClass = 'fs-score-icon-hide';\n                _.some(this._scoreRanges, function (scoreRange) {\n                    if (score >= scoreRange.gte) {\n                        scoreRangeClass = scoreRange.className;\n                        return true;\n                    }\n                    return false;\n                });\n                return scoreRangeClass;\n            }\n        });\n        FsScoreIconController.$inject = [];\n        return {\n            restrict: 'E',\n            replace: true,\n            template: '<div class=\"fs-score-icon\" title=\"{{\\'Score: \\' + scoreIcon.score}}\">' +\n                '<i class=\"fa fa-square\"></i></div>',\n            link: linkFn,\n            scope: {},\n            controller: FsScoreIconController,\n            controllerAs: 'scoreIcon',\n            bindToController: {\n                score: '='\n            }\n        };\n    }\n    FsScoreIcon.$inject = [];\n    angular.module('Fortscale.shared.components.fsScoreIcon', [])\n        .directive('fsScoreIcon', FsScoreIcon);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsCardHeader;\n            (function (fsCardHeader) {\n                var CardHeaderController = (function () {\n                    function CardHeaderController() {\n                    }\n                    return CardHeaderController;\n                }());\n                var CardHeaderComponent = {\n                    controller: CardHeaderController,\n                    bindings: {\n                        cardTitle: '@'\n                    },\n                    templateUrl: 'app/shared/components/fs-card-header/fs-card-header.component.html'\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsCardHeader', CardHeaderComponent);\n            })(fsCardHeader = components.fsCardHeader || (components.fsCardHeader = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart', []);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.general', {\n        chart: {\n            plotBackgroundColor: null,\n            plotBorderWidth: null,\n            plotShadow: false\n        },\n        credits: {\n            enabled: false\n        }\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.pie', {\n        chart: {\n            type: 'pie'\n        },\n        tooltip: {\n            pointFormat: '</div>{series.name}: <b>{point.y}</b>',\n            backgroundColor: 'rgba(245, 245, 245, 0.8)'\n        },\n        plotOptions: {\n            pie: {\n                allowPointSelect: true,\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: true,\n                    format: '<span class=\"pie-chart-data-label\">{point.name}: ' +\n                        '<span style=\"color: blue;\">{point.y}</span>' +\n                        ' ({point.percentage:.1f} %)<span>',\n                    shadow: false,\n                    useHTML: false,\n                    style: {\n                        textShadow: false,\n                        fontFamily: '\"Open Sans\", sans-serif'\n                    }\n                }\n            }\n        },\n        series: [{\n                \"colorByPoint\": true\n            }]\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.heatmap', {\n        chart: {\n            type: 'heatmap'\n        },\n        tooltip: {\n            pointFormat: 'Logged in <b>{point.value}</b> times'\n        },\n        series: [{\n                borderWidth: 1,\n                dataLabels: {\n                    enabled: true,\n                    color: '#fff',\n                    style: {\n                        textShadow: '1px 1px 0 #777, -1px -1px 0 #777'\n                    }\n                }\n            }]\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.column', {\n        chart: {\n            type: 'column'\n        },\n        legend: {\n            enabled: false\n        },\n        xAxis: {\n            type: 'category',\n            labels: {\n                style: {\n                    fontSize: '12px',\n                    fontFamily: 'Verdana, sans-serif'\n                }\n            }\n        },\n        tooltip: {\n            enabled: false\n        },\n        plotOptions: {\n            column: {\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: true,\n                    style: {\n                        textShadow: ''\n                    },\n                    useHTML: true\n                }\n            },\n            series: {\n                color: '#373298'\n            }\n        }\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.scatter', {\n        chart: {\n            type: 'scatter',\n            zoomType: 'xy'\n        },\n        legend: {\n            enabled: false\n        },\n        tooltip: {\n            pointFormat: '{series.name}: <b>{point.y}</b>'\n        },\n        plotOptions: {\n            scatter: {\n                marker: {\n                    radius: 3,\n                    states: {\n                        hover: {\n                            enabled: true,\n                            lineColor: 'rgba(143,189.228,0.5)'\n                        }\n                    }\n                },\n                states: {\n                    hover: {\n                        marker: {\n                            enabled: false\n                        }\n                    }\n                }\n            }\n        },\n        series: [{\n                turboThreshold: 4000\n            }],\n        xAxis: [{\n                type: 'datetime',\n                color: 'rgba(143,189.228,0.5)',\n                startOnTick: false,\n                lineWidth: 0,\n                minorGridLineWidth: 0,\n                lineColor: 'transparent',\n                minorTickLength: 0,\n                tickLength: 0\n            }],\n        yAxis: {\n            minTickInterval: 1\n        }\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.columnRange', {\n        chart: {\n            type: 'columnrange'\n        },\n        legend: {\n            enabled: false\n        },\n        colors: [\n            'rgba(103, 132, 185, 0.8)',\n            'rgba(195, 124, 183, 0.8)',\n            'rgba(245, 164, 153, 0.8)',\n            'rgba(176, 199, 94, 0.8)',\n            'rgba(242, 196, 70, 0.8)',\n            'rgba(103, 185, 181, 0.8)',\n            'rgba(233, 152, 72, 0.8)',\n            'rgba(162, 141, 214, 0.8)',\n            'rgba(143, 189, 228, 0.8)',\n            'rgba(129, 206, 158, 0.8)'\n        ],\n        plotOptions: {\n            series: {\n                colorByPoint: true,\n                pointWidth: 20\n            }\n        },\n        xAxis: {\n            type: 'category',\n            labels: {\n                style: {\n                    fontSize: '12px',\n                    fontFamily: '\\'Roboto\\', sans-serif',\n                    color: '#818285'\n                }\n            }\n        },\n        yAxis: {\n            labels: {\n                style: {\n                    fontSize: '12px',\n                    fontFamily: '\\'Roboto\\', sans-serif',\n                    color: '#818285'\n                }\n            }\n        },\n        tooltip: {\n            enabled: false\n        }\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsChart')\n        .value('fsChart.settings.line', {\n        series: [\n            {\n                data: []\n            }\n        ]\n    });\n}());\n","(function () {\n    'use strict';\n    function ChartModelMapping() {\n    }\n    _.merge(ChartModelMapping.prototype, {\n        /**\n         * An adapter that takes the data model and creates a new array with new objects\n         * that are mapped according to the provided mapObject.\n         *\n         * @param {object} mapObject\n         * @param {Array<object>} data\n         * @returns {Array<object>}\n         */\n        mapData: function (mapObject, data) {\n            // Return a map\n            return _.map(data, function (dataRow) {\n                // Create a new object for each member in the array\n                var obj = {};\n                // Iterate through the map object, and attach a new property to obj\n                // for each property on mapObject\n                _.each(mapObject, function (mapProp, key) {\n                    // When the map property value is a string,\n                    // use key as prop name on the new obj, and then use the string value\n                    // as key name for dataRow, and set the value to the object.\n                    // Example: if mapObject is {y: 'count'} then new object will be:\n                    // {y: dataRow.count}\n                    if (_.isString(mapProp)) {\n                        obj[key] = dataRow[mapProp];\n                    }\n                    else if (_.isObject(mapProp)) {\n                        // If mapProp is an object, this means that we need to do something\n                        // more complex then simple mapping.\n                        // The value of the map property should be an object\n                        // that has two properties: key, fn. Key will be the key on dataRow,\n                        // and fn will be a function that takes:\n                        // dataRow[mapProp.key], dataRow, data, mapProp\n                        // and should return a value. That value will be set to obj.\n                        obj[key] = mapProp.fn(dataRow[mapProp.key], dataRow, data, mapObject);\n                    }\n                    else {\n                        // This will throw if mapProp is not a string or an object.\n                        throw new Error('map property must be a string or an object.');\n                    }\n                    if (obj[key] === undefined) {\n                        delete obj[key];\n                    }\n                });\n                return obj;\n            });\n        }\n    });\n    ChartModelMapping.$inject = [];\n    angular.module('Fortscale.shared.components.fsChart')\n        .service('chartModelMapping', ChartModelMapping);\n}());\n","(function () {\n    'use strict';\n    function ChartSettings($injector) {\n        this.$injector = $injector;\n    }\n    _.merge(ChartSettings.prototype, {\n        getSettings: function (type, settings) {\n            var generalSettings = this.$injector.get('fsChart.settings.general');\n            var defaultSettings = this.$injector.get('fsChart.settings.' + type);\n            settings = settings || {};\n            return _.merge({}, generalSettings, defaultSettings, settings);\n        }\n    });\n    ChartSettings.$inject = ['$injector'];\n    angular.module('Fortscale.shared.components.fsChart')\n        .service('chartSettings', ChartSettings);\n}());\n","(function () {\n    'use strict';\n    function fsChartDirective(assert, chartSettings, chartModelMapping) {\n        var errorMsg = 'fsChart.directive: ';\n        /**\n         * Controller constructor\n         *\n         * @constructor\n         */\n        function FsChartController($scope, $element, $attrs) {\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n            this.init();\n        }\n        angular.extend(FsChartController.prototype, {\n            /**\n             * Validations\n             */\n            /**\n             * @param {string=} errorMsg\n             * @private\n             */\n            _validateModel: function (errorMsg) {\n                errorMsg = errorMsg || '';\n                // model should be an array\n                assert(_.isArray(this._model), errorMsg + 'provided model must be an array.', TypeError);\n            },\n            /**\n             * @param {string=} errorMsg\n             * @private\n             */\n            _validateSettings: function (errorMsg) {\n                errorMsg = errorMsg || '';\n                // Settings - if provided - should be an object.\n                assert(_.isObject(this.settings), errorMsg + 'provided settings must be an object.', TypeError);\n            },\n            _validateMapSettings: function (errorMsg) {\n                errorMsg = errorMsg || '';\n                // Settings - if provided - should be an object.\n                if (this._mapSettings) {\n                    assert(_.isObject(this._mapSettings), errorMsg + 'provided map settings must be an object.', TypeError);\n                }\n            },\n            _validateStyleSettings: function (errorMsg) {\n                errorMsg = errorMsg || '';\n                // Settings - if provided - should be an object.\n                if (this._styleSettings) {\n                    assert(_.isObject(this._styleSettings), errorMsg + 'provided style settings must be an object.', TypeError);\n                }\n            },\n            /**\n             * Validates a required string type attribute\n             *\n             * @param {string} name\n             * @param {string=} errorMsg\n             * @private\n             */\n            _validateString: function (name, errorMsg) {\n                errorMsg = errorMsg || '';\n                // should be provided\n                assert(!_.isUndefined(this[name]), errorMsg + name + ' must be provided in the directive html declaration.', ReferenceError);\n                // should be a string\n                assert(_.isString(this[name]), errorMsg + 'provided ' + name + ' must be a string.', TypeError);\n                // should not be an empty string\n                assert(this[name] !== '', errorMsg + 'provided ' + name + ' must not be an empty string.', RangeError);\n            },\n            /**\n             * Runs through required directive validations\n             *\n             * @param {string=} errorMsg\n             * @private\n             */\n            _validations: function (errorMsg) {\n                errorMsg = errorMsg || '';\n                this._validateSettings(errorMsg);\n                this._validateMapSettings(errorMsg);\n                this._validateStyleSettings(errorMsg);\n                this._validateString('_chartType', errorMsg);\n            },\n            /**\n             * Init functions\n             */\n            /**\n             * Initiates settings. These are common pie chart settings and can be overridden.\n             *\n             * @private\n             */\n            _initSettings: function () {\n                this._settings = chartSettings.getSettings(this._chartType, this.settings);\n            },\n            /**\n             * Sets style object to be used for styling the graphs container\n             *\n             * @private\n             */\n            _initStyling: function () {\n                this._containerStyle = _.merge({\n                    'minWidth': '25%', 'width': 'auto', 'maxWidth': '100%', margin: '0 auto', height: '20vw'\n                }, this._styleSettings);\n            },\n            /**\n             * Watch functions\n             */\n            /**\n             * watch function. returns _model. Will cause _watchModelAction (implicitly) to fire\n             * when _model changes.\n             *\n             * @returns {*}\n             * @private\n             */\n            _watchModel: function () {\n                return this._model;\n            },\n            /**\n             * watch model action. When _model changes, the directive will render the graph.\n             *\n             * @param {*} newVal\n             * @private\n             */\n            _watchModelAction: function (newVal) {\n                // Only render if newVal exists\n                if (newVal !== undefined) {\n                    this._validateModel(errorMsg + '_watchModelAction: ');\n                    this._render();\n                }\n            },\n            /**\n             * Set a $watch for _model\n             *\n             * @private\n             */\n            _initModelWatch: function () {\n                this.$scope.$watch(this._watchModel.bind(this), this._watchModelAction.bind(this));\n            },\n            /**\n             * Creates a timeout that is cleared on the next invocation, which creates a throttle.\n             * After 500ms fires _resizeHandler\n             *\n             * @private\n             */\n            _watchResizeAction: function () {\n                clearTimeout(this._preResizeTimeout);\n                this._preResizeTimeout = setTimeout(this._resizeHandler.bind(this), 200);\n            },\n            /**\n             * Redraws the chart.\n             *\n             * @private\n             */\n            _resizeHandler: function () {\n                // Remove animation from settings\n                var settings = _.merge({}, this._settings, {\n                    plotOptions: {\n                        series: {\n                            animation: false\n                        }\n                    }\n                });\n                // Redraw table\n                this._chartContainer.highcharts(settings);\n            },\n            /**\n             * Should rerender the chart when resize has finished\n             *\n             * @private\n             */\n            _initResizeWatch: function () {\n                var ctrl = this;\n                function resizeAction() {\n                    ctrl._watchResizeAction();\n                }\n                window.addEventListener('resize', resizeAction, false);\n                // Cleanup\n                ctrl.$scope.$on('$destroy', function () {\n                    window.removeEventListener('resize', resizeAction, false);\n                });\n            },\n            /**\n             * Initiates watches\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._initModelWatch();\n                this._initResizeWatch();\n            },\n            /**\n             * Takes generic data list, and by using _mapName and _mapY it creates a new list of\n             * objects that is given as data to the chart.\n             *\n             * @param {array} dataList\n             * @returns {array}\n             * @private\n             */\n            _mapData: function (dataList) {\n                if (this._mapSettings) {\n                    return chartModelMapping.mapData(this._mapSettings, dataList);\n                }\n                return dataList;\n            },\n            /**\n             * Processes the data and renders the chart.\n             *\n             * @private\n             */\n            _render: function () {\n                // Sometimes highcharts does not render the chart. We use $applyAsync to delay\n                // render till the end of the current digest cycle, giving highchart the time\n                // it needs.\n                this.$scope.$applyAsync(function () {\n                    // If no series, create an empty array\n                    this._settings.series = this._settings.series || [];\n                    if (this._settings.isMultiSeries) {\n                        this._settings.series = _.map(this._model, _.bind(function (serie) {\n                            var obj = {};\n                            if (serie.name) {\n                                obj.name = serie.name;\n                            }\n                            if (serie.color) {\n                                obj.color = serie.color;\n                            }\n                            if (serie.data) {\n                                obj.data = this._mapData(serie.data);\n                            }\n                            return obj;\n                        }, this));\n                    }\n                    else {\n                        this._settings.series[0].data = this._mapData(this._model);\n                    }\n                    this._chartContainer.highcharts(this._settings);\n                }.bind(this));\n            },\n            /**\n             * A deep merge of received settings with default settings.\n             * The received settings take precedence.\n             *\n             * @private\n             */\n            _mergeExternalSettings: function () {\n                _.merge(this._settings, this.settings);\n            },\n            /**\n             * The init function.\n             */\n            init: function init() {\n                this._chartContainer = this.$element.find('.container');\n                this._validations(errorMsg + 'init: ');\n                this._initSettings();\n                this._initStyling();\n                this._mergeExternalSettings();\n                this._initWatches();\n            }\n        });\n        FsChartController.$inject = ['$scope', '$element', '$attrs'];\n        return {\n            templateUrl: 'app/shared/components/fs-chart/fs-chart.view.html',\n            restrict: 'E',\n            scope: true,\n            controller: FsChartController,\n            controllerAs: 'chart',\n            bindToController: {\n                _chartType: '@chartType',\n                _mapSettings: '=mapSettings',\n                settings: '=',\n                _styleSettings: '=styleSettings',\n                _model: '=model'\n            }\n        };\n    }\n    fsChartDirective.$inject = ['assert', 'chartSettings', 'chartModelMapping'];\n    angular.module('Fortscale.shared.components.fsChart')\n        .directive('fsChart', fsChartDirective);\n}());\n","(function () {\n    'use strict';\n    function FsUserTagDetails() {\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsUserTagDetailsController($scope, $element, $attrs) {\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n        }\n        FsUserTagDetailsController.$inject = ['$scope', '$element', '$attrs'];\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'app/shared/directives/fs-user-tag-details/fs-user-tag-details.html',\n            scope: {},\n            controller: FsUserTagDetailsController,\n            controllerAs: 'details',\n            bindToController: {\n                bottomLabel: '@',\n                rightLeftCornerLabel: '@',\n                imgSrc: '@',\n                tagHref: '@'\n            }\n        };\n    }\n    FsUserTagDetails.$inject = [];\n    angular.module('Fortscale.shared.directives.fsUserTagDetails', [])\n        .directive('fsUserTagDetails', FsUserTagDetails);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsResourceStore', [\n        'Fortscale.shared.services.assert'\n    ]);\n}());\n","(function () {\n    'use strict';\n    function FsResourceStore(fsResourceStoreService) {\n        /**\n         * Controller constructor\n         *\n         * @param $scope\n         * @constructor\n         */\n        function FsResourceController($scope) {\n            this.$scope = $scope;\n            this.init();\n        }\n        _.merge(FsResourceController.prototype, {\n            /**\n             * resource watch function.\n             *\n             * @returns {*}\n             *\n             * @private\n             */\n            _resourceWatchFn: function () {\n                return this._resource;\n            },\n            /**\n             * resource watch action function. Invokes fsResourceStoreService.storeResource with\n             * the resource.\n             *\n             * @param {*} resource\n             * @private\n             */\n            _resourceWatchActionFn: function (resource) {\n                if (resource !== undefined) {\n                    fsResourceStoreService.storeResource(this._resourceName, resource, !!this._purgeOnExpire);\n                }\n            },\n            /**\n             * Initiates resource watch\n             *\n             * @private\n             */\n            _initResourceWatch: function () {\n                this.$scope.$watch(this._resourceWatchFn.bind(this), this._resourceWatchActionFn.bind(this));\n            },\n            /**\n             * Initiate all watches\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this._initResourceWatch();\n            },\n            /**\n             * Controller init function.\n             */\n            init: function () {\n                this._initWatches();\n            }\n        });\n        FsResourceController.$inject = ['$scope'];\n        return {\n            restrict: 'E',\n            scope: {},\n            controller: FsResourceController,\n            controllerAs: 'fsResource',\n            bindToController: {\n                _resourceName: '@resourceName',\n                _resource: '=resource',\n                _purgeOnExpire: '@purgeOnExpire'\n            }\n        };\n    }\n    FsResourceStore.$inject = ['fsResourceStore'];\n    angular.module('Fortscale.shared.components.fsResourceStore')\n        .directive('fsResourceStore', FsResourceStore);\n}());\n","(function () {\n    'use strict';\n    function FsResourceStoreProvider() {\n        /**\n         * Determines the expiration duration. Defaults to one hour in milliseconds.\n         *\n         * @type {number}\n         * @private\n         */\n        var _expireDuration = 1000 * 60 * 60;\n        /**\n         * Sets the expiration duration.\n         *\n         * @param {number} duration\n         */\n        this.setExpireDuration = function (duration) {\n            _expireDuration = duration;\n        };\n        /**\n         * Gets the expiration duration.\n         *\n         * @returns {number}\n         */\n        this.getExpireDuration = function () {\n            return _expireDuration;\n        };\n        /**\n         * Flag that states if the resource should be purged on expiration. Defaults to false.\n         *\n         * @type {boolean}\n         * @private\n         */\n        var _purgeOnExpire = false;\n        /**\n         * Sets purge on expire flag.\n         *\n         * @param {boolean} val\n         */\n        this.setPurgeOnExpire = function (val) {\n            _purgeOnExpire = val;\n        };\n        /**\n         * Gets purge on expire flag.\n         *\n         * @returns {boolean}\n         */\n        this.getPurgeOnExpire = function () {\n            return _purgeOnExpire;\n        };\n        /**\n         *\n         * @constructor\n         */\n        function FsResourceStoreService(assert) {\n            /**\n             * Holds all the reources.\n             *\n             * @private\n             */\n            this._resources = {};\n            /**\n             * Checks if a resource is expired.\n             *\n             * @param {object} resourceWrapper\n             * @returns {boolean}\n             * @private\n             */\n            this._isExpired = function (resourceWrapper) {\n                var now = new Date();\n                return (resourceWrapper.updateTime.valueOf() + _expireDuration < now.valueOf());\n            };\n            /**\n             *\n             * @param {string} resourceName\n             * @param {object} resource\n             * @param {boolean=} purgeOnExpire\n             */\n            this.storeResource = function (resourceName, resource, purgeOnExpire) {\n                if (purgeOnExpire === undefined) {\n                    purgeOnExpire = _purgeOnExpire;\n                }\n                this._resources[resourceName] = {\n                    updateTime: new Date(),\n                    resource: resource,\n                    purgeOnExpire: purgeOnExpire\n                };\n            };\n            /**\n             * Gets a resource by its name. If expired and purgeOnExpire is true,\n             * the resource is purged, and null is returned. If expired an purgeOnExpire is false,\n             * a '_isExpired' property will be added to the resource and set to true.\n             * If no resource is found, null is returned.\n             *\n             * @param {string} resourceName\n             * @returns {object|null}\n             */\n            this.fetchResource = function (resourceName) {\n                // Get the resource\n                var resourceWrapper = this._resources[resourceName];\n                // if no resource is found return null\n                if (!resourceWrapper) {\n                    return null;\n                }\n                // If resource is expired\n                if (this._isExpired(resourceWrapper)) {\n                    // If purgeOnExpire is true, delete the resource and return null\n                    if (resourceWrapper.purgeOnExpire) {\n                        delete this._resources[resourceName];\n                        return null;\n                    }\n                    // If pureOnExpire is false, add '_isExpired' property to resource\n                    resourceWrapper.resource._isExpired = true;\n                }\n                // Return the resource\n                return resourceWrapper.resource;\n            };\n            /**\n             * Returns a specific resource item by its id. It fetches the resource by its name.\n             * If resource is null, null is returned.\n             * The resource is queried for a specific resource item, and if a resource is not found,\n             * null is returned. If resource is expired, _isExpired will be added to the resource\n             * item.\n             *\n             * @param {string} resourceName\n             * @param {string} resourceId\n             * @param {string=} idKey Defaults to 'id'\n             * @returns {* | null}\n             */\n            this.fetchResourceItemById = function (resourceName, resourceId, idKey) {\n                // set idKey default value if false\n                idKey = idKey || 'id';\n                // Get the resource\n                var resource = this.fetchResource(resourceName);\n                // If resource is null return null\n                if (resource === null) {\n                    return null;\n                }\n                // Build the query\n                var query = {};\n                query[idKey] = resourceId;\n                // Get resource item\n                var resourceItem = _.find(resource, query);\n                // If resourceItem is undefined return null\n                if (resourceItem === undefined) {\n                    return null;\n                }\n                // If resource is expired, set _isExpired on resourceItem\n                if (resource._isExpired) {\n                    resourceItem._isExpired = true;\n                }\n                // Return the resourceItem\n                return resourceItem;\n            };\n        }\n        this.$get = ['assert', function (assert) {\n                return new FsResourceStoreService(assert);\n            }];\n    }\n    angular.module('Fortscale.shared.components.fsResourceStore')\n        .provider('fsResourceStore', FsResourceStoreProvider);\n}());\n","(function () {\n    'use strict';\n    function fsHrefAlertDirective(indicatorTypeMapper) {\n        function linkFn($scope, $element, $attr, ctrl) {\n            // Set mouseClickHandler. Its set as an instance method so it will have the ctrl in its\n            // context\n            ctrl.mouseClickHandler = function () {\n                var alert = ctrl.alertModel;\n                var subRoute = $attr.subRoute;\n                // Set the element's href\n                $element.attr('href', ctrl._getInvestigateHref(alert, subRoute));\n            };\n            ctrl._init();\n        }\n        /**\n         *\n         * @param $scope\n         * @param $element\n         * @constructor\n         */\n        function FsHrefAlertController($scope, $element) {\n            this.$scope = $scope;\n            this.$element = $element;\n        }\n        _.merge(FsHrefAlertController.prototype, {\n            /**\n             * Generates a url for the <a>'s href. It uses the\n             *\n             * @param {object} alert\n             * @returns {string}\n             */\n            _getInvestigateHref: function (alert, subRoute) {\n                var indicators = _.orderBy(alert.evidences, 'startDate', 'desc');\n                var indicator = this.indicatorModel || indicators[0];\n                return indicatorTypeMapper.getTargetUrl(alert.id, indicator, undefined, subRoute);\n            },\n            /**\n             * Initiates watches on the element. Watch for click and context menu. On either\n             * populates href attribute.\n             *\n             * @private\n             */\n            _initWatches: function () {\n                this.$element.on('click', this.mouseClickHandler);\n                this.$element.on('contextmenu', this.mouseClickHandler);\n                // Cleanup watch\n                this.$scope.$on('$destroy', this._watchCleanup.bind(this));\n            },\n            /**\n             * Removes watches\n             *\n             * @private\n             */\n            _watchCleanup: function () {\n                this.$element.off('click', this.mouseClickHandler);\n                this.$element.off('contextmenu', this.mouseClickHandler);\n            },\n            _init: function () {\n                this._initWatches();\n            }\n        });\n        FsHrefAlertController.$inject = ['$scope', '$element'];\n        return {\n            restrict: 'A',\n            link: linkFn,\n            controller: FsHrefAlertController,\n            controllerAs: 'hrefAlertCtrl',\n            bindToController: {\n                alertModel: '=',\n                indicatorModel: '=',\n                subRoute: '@'\n            }\n        };\n    }\n    fsHrefAlertDirective.$inject = ['indicatorTypeMapper'];\n    angular.module('Fortscale.shared.directives.fsHrefAlert', [])\n        .directive('fsHrefAlert', fsHrefAlertDirective);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.shared.components.fsFlag', []);\n}());\n","(function () {\n    'use strict';\n    function fsFlagDirective(countryCodesUtil) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         */\n        function linkFn(scope, element, attrs) {\n            // Link function logic\n            var alpha2Code = scope.ctrl._getAlpha2Code();\n            if (alpha2Code) {\n                element.addClass('flag-icon-' + alpha2Code);\n            }\n            if (!!scope.ctrl.squared) {\n                element.addClass('flag-icon-squared');\n            }\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsFlagController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsFlagController.prototype, {\n            /**\n             * Returns alpha-2 code from directive statement\n             *\n             * @returns {String|null}\n             * @private\n             */\n            _getAlpha2Code: function () {\n                var ctrl = this;\n                var alpha2Code = null;\n                if (ctrl.countryName) {\n                    alpha2Code = countryCodesUtil.getAlpha2ByCountryName(ctrl.countryName);\n                }\n                else if (ctrl.countryCode) {\n                    alpha2Code = countryCodesUtil.getAlpha2ByCountryCode(ctrl.countryCode);\n                }\n                else if (ctrl.countryAlpha2) {\n                    alpha2Code = ctrl.countryAlpha2;\n                }\n                alpha2Code = alpha2Code ? alpha2Code.trim().toLowerCase() : null;\n                return alpha2Code;\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                // Init logic\n            }\n        });\n        FsFlagController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            template: '<div class=\"fs-flag flag-icon\"></div>',\n            replace: true,\n            scope: {},\n            link: linkFn,\n            controller: FsFlagController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                countryName: '@',\n                countryAlpha2: '@',\n                countryCode: '@',\n                squared: '@'\n            }\n        };\n    }\n    fsFlagDirective.$inject = ['countryCodesUtil'];\n    angular.module('Fortscale.shared.components.fsFlag')\n        .directive('fsFlag', fsFlagDirective);\n}());\n","var fortscale;\n(function (fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsHeaderBar;\n            (function (fsHeaderBar) {\n                var FsHeaderBarController = (function () {\n                    function FsHeaderBarController($element, $scope, userUtils, $state, auth, stateManagementService) {\n                        var _this = this;\n                        this.$element = $element;\n                        this.$scope = $scope;\n                        this.userUtils = userUtils;\n                        this.$state = $state;\n                        this.auth = auth;\n                        this.stateManagementService = stateManagementService;\n                        // Defined in constructor so the 'this' will be bound to the instance\n                        this.goToUserProfile = function (updateObj) {\n                            // Clear user search control\n                            $('#main_user_search').find('input').val('');\n                            // Go to state\n                            _this.$state.go('user.baseline', { userId: updateObj.value });\n                        };\n                    }\n                    FsHeaderBarController.prototype._initSettingsMenu = function () {\n                        var el = this.$element.find('.fs-header-bar-component--icons-container--settings-menu');\n                        el.kendoMenu({});\n                    };\n                    FsHeaderBarController.prototype._initUserControllSettings = function () {\n                        var ctrl = this;\n                        ctrl.userControlSettings = {\n                            dataValueField: 'id',\n                            dataTextField: 'fallBackDisplayName',\n                            /**\n                             * Takes received users and creates fallBack display name for each, and prevents duplications.\n                             * @param users\n                             */\n                            dataTextFn: function (users) {\n                                ctrl.userUtils.setFallBackDisplayNames(users);\n                                ctrl.userUtils.preventFallBackDisplayNameDuplications(users);\n                            },\n                            placeholder: 'Search User'\n                        };\n                    };\n                    FsHeaderBarController.prototype._initUserControlResource = function () {\n                        this.userControlResource = {\n                            entity: 'user',\n                            params: {\n                                page: 1,\n                                size: 10,\n                                sort_field: 'displayName',\n                                sort_direction: 'ASC',\n                                search_field_contains: '{{search}}'\n                            }\n                        };\n                    };\n                    FsHeaderBarController.prototype.toggleSearch = function () {\n                        this.searchBoxElement.toggleClass('active');\n                        // Set focus to search\n                        if (this.searchBoxElement.hasClass('active')) {\n                            this.searchBoxElement.find('input').focus();\n                        }\n                    };\n                    FsHeaderBarController.prototype.closeSearch = function () {\n                        this.searchBoxElement.removeClass('active');\n                    };\n                    FsHeaderBarController.prototype.logout = function () {\n                        var stateManagementService = this.stateManagementService;\n                        stateManagementService.clearAllStates();\n                        this.auth.logout();\n                    };\n                    FsHeaderBarController.prototype.$onInit = function () {\n                        this._initUserControllSettings();\n                        this._initUserControlResource();\n                        this._initSettingsMenu();\n                        this.searchBoxElement = this.$element.find('.main-user-search');\n                        this.$scope.$root.$on('$stateChangeSuccess', this.closeSearch.bind(this));\n                    };\n                    FsHeaderBarController.$inject = ['$element', '$scope', 'userUtils', '$state', 'auth', 'stateManagementService'];\n                    return FsHeaderBarController;\n                }());\n                var fsHeaderBarComponent = {\n                    templateUrl: 'app/shared/components/fs-header-bar/fs-header-bar.component.html',\n                    controller: FsHeaderBarController,\n                    bindings: {\n                        loggedInUser: '<'\n                    }\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsHeaderBar', fsHeaderBarComponent);\n            })(fsHeaderBar = components.fsHeaderBar || (components.fsHeaderBar = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = fortscale.shared || (fortscale.shared = {}));\n})(fortscale || (fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsLoader;\n            (function (fsLoader) {\n                var LOADER_SHOW_FIELD_NAME = 'loaderShow';\n                var LOADER_COLOR_FIELD_NAME = 'loaderColor';\n                var LOADER_MASK_COLOR_FIELD_NAME = 'loaderMaskColor';\n                var SPINNER_SELECTOR = '.fs-loader-spinner';\n                var MASK_OVERLAY_SELECTOR = '.fs-loader-overlay';\n                var FsLoaderController = (function () {\n                    function FsLoaderController() {\n                    }\n                    return FsLoaderController;\n                }());\n                function fsLoaderDirectiveFunction() {\n                    var fsLoaderDirective = {\n                        templateUrl: 'app/shared/components/fs-loader/fs-loader.component.html',\n                        controller: FsLoaderController,\n                        controllerAs: '$ctrl',\n                        bindToController: (_a = {},\n                            _a[LOADER_SHOW_FIELD_NAME] = '<',\n                            _a[LOADER_COLOR_FIELD_NAME] = '@',\n                            _a[LOADER_MASK_COLOR_FIELD_NAME] = '@',\n                            _a\n                        ),\n                        compile: function (templateElement, templateAttributes) {\n                            // Set box color\n                            if (templateAttributes[LOADER_COLOR_FIELD_NAME]) {\n                                var cubes = templateElement.find(SPINNER_SELECTOR);\n                                cubes.css('background-color', templateAttributes[LOADER_COLOR_FIELD_NAME]);\n                            }\n                            // Set mask color\n                            if (templateAttributes[LOADER_MASK_COLOR_FIELD_NAME]) {\n                                var mask = templateElement.find(MASK_OVERLAY_SELECTOR);\n                                mask.css('background-color', templateAttributes[LOADER_MASK_COLOR_FIELD_NAME]);\n                            }\n                            return {};\n                        }\n                    };\n                    return fsLoaderDirective;\n                    var _a;\n                }\n                angular.module('Fortscale.shared.components')\n                    .directive('fsLoader', fsLoaderDirectiveFunction);\n            })(fsLoader = components.fsLoader || (components.fsLoader = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsSvgIcon;\n            (function (fsSvgIcon) {\n                var ERR_MSG = 'fsSvgIcon.directive: ';\n                var SVGIconController = (function () {\n                    function SVGIconController($scope, $element, assert) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                    }\n                    /**\n                     * Adds '#' to symbol name\n                     * @private\n                     */\n                    SVGIconController.prototype._setSymbolNameSelector = function () {\n                        this.symbolNameSelector = '#' + this.symbolName;\n                    };\n                    /**\n                     * Takes the attributes object, iterates and sets attributes on the svg element\n                     * @private\n                     */\n                    SVGIconController.prototype._assignAttributes = function () {\n                        if (this.attributes) {\n                            this.$element.find('svg').attr(this.attributes);\n                        }\n                    };\n                    SVGIconController.prototype.$onInit = function () {\n                        this.assert.isString(this.symbolName, 'symbolName', ERR_MSG + 'init: ', false, false);\n                        this.assert.isObject(this.attributes, 'attributes', ERR_MSG + 'init: ', true);\n                        this._setSymbolNameSelector();\n                        this._assignAttributes();\n                    };\n                    SVGIconController.$inject = ['$scope', '$element', 'assert'];\n                    return SVGIconController;\n                }());\n                var FsSvgIconOptions = {\n                    template: \"<svg\\n        viewBox=\\\"0 0 20 20\\\"\\n        preserveAspectRatio=\\\"none\\\"\\n        width=\\\"16\\\"\\n        height=\\\"16\\\"\\n        ng-class=\\\"$ctrl.symbolName\\\">\\n            <use xlink:href=\\\"{{$ctrl.symbolNameSelector}}\\\"></use>\\n        </svg>\",\n                    bindings: {\n                        symbolName: '@',\n                        attributes: '<',\n                    },\n                    controller: SVGIconController\n                };\n                angular.module('Fortscale.shared.components.fsSvgIcon', [])\n                    .component('fsSvgIcon', FsSvgIconOptions);\n            })(fsSvgIcon = components.fsSvgIcon || (components.fsSvgIcon = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsUserTooltip;\n            (function (fsUserTooltip) {\n                var TEMPLATE_URL = 'app/shared/components/fs-alerts-tooltip/fs-alerts-tooltip-internal.template.html';\n                function fsAlertsTooltipDirective($compile, $templateCache) {\n                    var AlertsTooltipController = (function () {\n                        function AlertsTooltipController($scope, $element) {\n                            this.$scope = $scope;\n                            this.$element = $element;\n                            this.alreadyConstructed = false;\n                            /**\n                             * Tooltip local settings object\n                             *\n                             * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                             * @private\n                             */\n                            this._tooltipSettings = {\n                                className: 'user-tooltip',\n                                stem: true,\n                                stemLength: 8,\n                                stemBase: 12,\n                                hideDelay: 0.3,\n                                tipJoint: 'top',\n                                fixed: true,\n                                removeElementsOnHide: false,\n                                group: 'users',\n                                background: '#f0f7f8',\n                                borderRadius: 3,\n                                borderColor: '#f0f7f8',\n                                shadow: true,\n                                shadowBlur: 15,\n                                shadowOffset: [0, 0],\n                                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                                containInViewport: true,\n                                offset: [0, 0],\n                                showOn: \"creation\"\n                            };\n                        }\n                        /**\n                         * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                         *\n                         * @returns {HTMLElement|null}\n                         * @private\n                         */\n                        AlertsTooltipController.prototype._getTargetElement = function () {\n                            if (this.tooltipTargetSelector) {\n                                var closest = this.$element.closest(this.tooltipTargetSelector);\n                                var inner = this.$element.find(this.tooltipTargetSelector);\n                                return closest.length ? closest[0] :\n                                    inner.length ? inner[0] : null;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Initiates the tooltip settings (creates an instance settings)\n                         *\n                         * @private\n                         */\n                        AlertsTooltipController.prototype._initSettings = function () {\n                            this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                                target: this._getTargetElement(),\n                            }, this._externalTooltipSettings ? this._externalTooltipSettings : {});\n                        };\n                        /**\n                         * Renders the tooltip\n                         *\n                         * @private\n                         */\n                        AlertsTooltipController.prototype._initTooltip = function () {\n                            // Set this as ctrl for the callbacks\n                            var ctrl = this;\n                            var template = $templateCache.get(TEMPLATE_URL);\n                            var tooltipContent = $compile(angular.element(template))(ctrl.$scope);\n                            ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                            ctrl._tooltip.setContent(tooltipContent);\n                            // Prevent close on mouseover tooltip\n                            ctrl._tooltip.content.on({\n                                mouseenter: function () {\n                                    ctrl._tooltip._abortHiding();\n                                },\n                                mouseleave: function () {\n                                    ctrl._tooltip.prepareToHide();\n                                }\n                            });\n                            ctrl._tooltip.activate();\n                        };\n                        /**\n                         * Cleansup the tooltip when the scope is destroyed\n                         *\n                         * @private\n                         */\n                        AlertsTooltipController.prototype._initCleanup = function () {\n                            var _this = this;\n                            this.$scope.$on('$destroy', function () {\n                                _this._tooltip.adapter.remove(_this._tooltip.container);\n                                _this._tooltip.container = null;\n                                _this._tooltip.tooltipElement = null;\n                                _this._tooltip = null;\n                            });\n                        };\n                        AlertsTooltipController.prototype.showTooltip = function () {\n                            this._initTooltip();\n                            this._initCleanup();\n                        };\n                        AlertsTooltipController.prototype.$onInit = function () {\n                            this.tooltipTargetSelector = \"user-alerts-for-tooltip\";\n                            this._initSettings();\n                        };\n                        AlertsTooltipController.$inject = ['$scope', '$element'];\n                        return AlertsTooltipController;\n                    }());\n                    return {\n                        restrict: 'A',\n                        controller: AlertsTooltipController,\n                        controllerAs: '$ctrl',\n                        template: '<div class=\"user-alerts-for-tooltip\" ng-mouseover=\"$ctrl.showTooltip()\"><ng-transclude></ng-transclude></a>',\n                        transclude: true,\n                        scope: {},\n                        bindToController: {\n                            alerts: '<',\n                            userId: '<',\n                            _externalTooltipSettings: '<tooltipSettings',\n                            internalHtml: '<'\n                        }\n                    };\n                }\n                fsAlertsTooltipDirective.$inject = ['$compile', '$templateCache'];\n                angular.module('Fortscale.shared.components')\n                    .directive('fsAlertsTooltip', fsAlertsTooltipDirective);\n            })(fsUserTooltip = components.fsUserTooltip || (components.fsUserTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsUserTooltip;\n            (function (fsUserTooltip) {\n                var TEMPLATE_URL = 'app/shared/components/fs-user-devices-tooltip/fs-user-devices-tooltip-internal.template.html';\n                function fsUserDevicesTooltipDirective($compile, $templateCache) {\n                    var UserDevicesTooltipController = (function () {\n                        function UserDevicesTooltipController($scope, $element) {\n                            this.$scope = $scope;\n                            this.$element = $element;\n                            /**\n                             * Tooltip local settings object\n                             *\n                             * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                             * @private\n                             */\n                            this._tooltipSettings = {\n                                className: 'user-tooltip',\n                                stem: true,\n                                stemLength: 8,\n                                stemBase: 12,\n                                hideDelay: 0.3,\n                                tipJoint: 'top',\n                                fixed: true,\n                                removeElementsOnHide: false,\n                                group: 'users',\n                                background: '#f0f7f8',\n                                borderRadius: 3,\n                                borderColor: '#f0f7f8',\n                                shadow: true,\n                                shadowBlur: 15,\n                                shadowOffset: [0, 0],\n                                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                                containInViewport: true,\n                                offset: [0, 0]\n                            };\n                        }\n                        /**\n                         * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                         *\n                         * @returns {HTMLElement|null}\n                         * @private\n                         */\n                        UserDevicesTooltipController.prototype._getTargetElement = function () {\n                            if (this.tooltipTargetSelector) {\n                                var closest = this.$element.closest(this.tooltipTargetSelector);\n                                var inner = this.$element.find(this.tooltipTargetSelector);\n                                return closest.length ? closest[0] :\n                                    inner.length ? inner[0] : null;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Initiates the tooltip settings (creates an instance settings)\n                         *\n                         * @private\n                         */\n                        UserDevicesTooltipController.prototype._initSettings = function () {\n                            this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                                target: this._getTargetElement(),\n                            }, this._externalTooltipSettings ? this._externalTooltipSettings : {});\n                        };\n                        /**\n                         * Renders the tooltip\n                         *\n                         * @private\n                         */\n                        UserDevicesTooltipController.prototype._initTooltip = function () {\n                            // Set this as ctrl for the callbacks\n                            var ctrl = this;\n                            var template = $templateCache.get(TEMPLATE_URL);\n                            var tooltipContent = $compile(angular.element(template))(ctrl.$scope);\n                            ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                            ctrl._tooltip.setContent(tooltipContent);\n                            // Prevent close on mouseover tooltip\n                            ctrl._tooltip.content.on({\n                                mouseenter: function () {\n                                    ctrl._tooltip._abortHiding();\n                                },\n                                mouseleave: function () {\n                                    ctrl._tooltip.prepareToHide();\n                                }\n                            });\n                        };\n                        /**\n                         * Cleansup the tooltip when the scope is destroyed\n                         *\n                         * @private\n                         */\n                        UserDevicesTooltipController.prototype._initCleanup = function () {\n                            var _this = this;\n                            this.$scope.$on('$destroy', function () {\n                                if (_this._tooltip != null) {\n                                    _this._tooltip.adapter.remove(_this._tooltip.container);\n                                    _this._tooltip.container = null;\n                                    _this._tooltip.tooltipElement = null;\n                                    _this._tooltip = null;\n                                }\n                            });\n                        };\n                        UserDevicesTooltipController.prototype.showTooltip = function () {\n                            this._initTooltip();\n                            this._initCleanup();\n                        };\n                        UserDevicesTooltipController.prototype.$onInit = function () {\n                            this.tooltipTargetSelector = \"user-devices-for-tooltip\";\n                            this._initSettings();\n                        };\n                        UserDevicesTooltipController.$inject = ['$scope', '$element'];\n                        return UserDevicesTooltipController;\n                    }());\n                    return {\n                        restrict: 'A',\n                        controller: UserDevicesTooltipController,\n                        controllerAs: '$ctrl',\n                        scope: {},\n                        transclude: true,\n                        template: '<div class=\"user-devices-for-tooltip\" ng-mouseover=\"$ctrl.showTooltip()\"><ng-transclude></ng-transclude></a>',\n                        bindToController: {\n                            devices: '<',\n                            _externalTooltipSettings: '<tooltipSettings'\n                        }\n                    };\n                }\n                fsUserDevicesTooltipDirective.$inject = ['$compile', '$templateCache'];\n                angular.module('Fortscale.shared.components')\n                    .directive('fsUserDevicesTooltip', fsUserDevicesTooltipDirective);\n            })(fsUserTooltip = components.fsUserTooltip || (components.fsUserTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsUserTooltip;\n            (function (fsUserTooltip) {\n                var TEMPLATE_URL = 'app/shared/components/fs-user-tooltip/fs-user-tooltip.template.html';\n                function fsUserTooltipDirective($compile, $templateCache) {\n                    var UserTooltipController = (function () {\n                        function UserTooltipController($scope, $element) {\n                            this.$scope = $scope;\n                            this.$element = $element;\n                            /**\n                             * Tooltip local settings object\n                             *\n                             * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                             * @private\n                             */\n                            this._tooltipSettings = {\n                                className: 'user-tooltip',\n                                stem: true,\n                                stemLength: 8,\n                                stemBase: 12,\n                                hideDelay: 0.3,\n                                tipJoint: 'top',\n                                fixed: true,\n                                removeElementsOnHide: false,\n                                group: 'users',\n                                background: '#f0f7f8',\n                                borderRadius: 3,\n                                borderColor: '#f0f7f8',\n                                shadow: true,\n                                shadowBlur: 15,\n                                shadowOffset: [0, 0],\n                                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                                containInViewport: true,\n                                offset: [0, 0]\n                            };\n                        }\n                        /**\n                         * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                         *\n                         * @returns {HTMLElement|null}\n                         * @private\n                         */\n                        UserTooltipController.prototype._getTargetElement = function () {\n                            if (this.tooltipTargetSelector) {\n                                var closest = this.$element.closest(this.tooltipTargetSelector);\n                                var inner = this.$element.find(this.tooltipTargetSelector);\n                                return closest.length ? closest[0] :\n                                    inner.length ? inner[0] : null;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Initiates the tooltip settings (creates an instance settings)\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initSettings = function () {\n                            this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                                target: this._getTargetElement(),\n                            }, this._externalTooltipSettings ? this._externalTooltipSettings : {});\n                        };\n                        /**\n                         * Renders the tooltip\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initTooltip = function () {\n                            // Set this as ctrl for the callbacks\n                            var ctrl = this;\n                            var template = $templateCache.get(TEMPLATE_URL);\n                            var tooltipContent = $compile(angular.element(template))(ctrl.$scope);\n                            ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                            ctrl._tooltip.setContent(tooltipContent);\n                            // Prevent close on mouseover tooltip\n                            ctrl._tooltip.content.on({\n                                mouseenter: function () {\n                                    ctrl._tooltip._abortHiding();\n                                },\n                                mouseleave: function () {\n                                    ctrl._tooltip.prepareToHide();\n                                }\n                            });\n                        };\n                        /**\n                         * Cleansup the tooltip when the scope is destroyed\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initCleanup = function () {\n                            var _this = this;\n                            this.$scope.$on('$destroy', function () {\n                                _this._tooltip.adapter.remove(_this._tooltip.container);\n                                _this._tooltip.container = null;\n                                _this._tooltip.tooltipElement = null;\n                                _this._tooltip = null;\n                            });\n                        };\n                        UserTooltipController.prototype.$onInit = function () {\n                            this._initSettings();\n                            this._initTooltip();\n                            this._initCleanup();\n                        };\n                        UserTooltipController.$inject = ['$scope', '$element'];\n                        return UserTooltipController;\n                    }());\n                    return {\n                        restrict: 'A',\n                        controller: UserTooltipController,\n                        controllerAs: '$ctrl',\n                        scope: {},\n                        bindToController: {\n                            user: '<fsUserTooltip',\n                            tooltipTargetSelector: '@',\n                            tooltipAlert: '<',\n                            miniTooltip: '<',\n                            _externalTooltipSettings: '<tooltipSettings'\n                        }\n                    };\n                }\n                fsUserTooltipDirective.$inject = ['$compile', '$templateCache'];\n                angular.module('Fortscale.shared.components')\n                    .directive('fsUserTooltip', fsUserTooltipDirective);\n            })(fsUserTooltip = components.fsUserTooltip || (components.fsUserTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsIndicatorsTooltip;\n            (function (fsIndicatorsTooltip) {\n                var TEMPLATE_URL = 'app/shared/components/fs-indicators-tooltip/fs-indicators-tooltip.template.html';\n                function fsIndicatorsTooltipDirective($compile, $templateCache) {\n                    var UserTooltipController = (function () {\n                        function UserTooltipController($scope, $element) {\n                            this.$scope = $scope;\n                            this.$element = $element;\n                            /**\n                             * Tooltip local settings object\n                             *\n                             * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                             * @private\n                             */\n                            this._tooltipSettings = {\n                                className: 'indicators-tooltip',\n                                stem: true,\n                                stemLength: 8,\n                                stemBase: 12,\n                                hideDelay: 0.3,\n                                tipJoint: 'top',\n                                fixed: true,\n                                removeElementsOnHide: false,\n                                group: 'indicators',\n                                background: '#f0f7f8',\n                                borderRadius: 3,\n                                borderColor: '#f0f7f8',\n                                shadow: true,\n                                shadowBlur: 15,\n                                shadowOffset: [0, 0],\n                                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                                containInViewport: true,\n                                offset: [0, 0]\n                            };\n                        }\n                        /**\n                         * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                         *\n                         * @returns {JQuery|null}\n                         * @private\n                         */\n                        UserTooltipController.prototype._getTargetElement = function () {\n                            if (this.tooltipTargetSelector) {\n                                var elementFind = this.$element.find(this.tooltipTargetSelector);\n                                var elementClosest = this.$element.closest(this.tooltipTargetSelector);\n                                return (elementFind || elementClosest || this.$element)[0];\n                            }\n                            this.$element;\n                        };\n                        /**\n                         * Initiates the tooltip settings (creates an instance settings)\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initSettings = function () {\n                            this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                                target: this._getTargetElement(),\n                            }, this._externalTooltipSettings ? this._externalTooltipSettings : {});\n                        };\n                        /**\n                         * Renders the tooltip\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initTooltip = function () {\n                            // Set this as ctrl for the callbacks\n                            var ctrl = this;\n                            var template = $templateCache.get(TEMPLATE_URL);\n                            var tooltipContent = $compile(angular.element(template))(ctrl.$scope);\n                            ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                            ctrl._tooltip.setContent(tooltipContent);\n                            // Prevent close on mouseover tooltip\n                            ctrl._tooltip.content.on({\n                                mouseenter: function () {\n                                    ctrl._tooltip._abortHiding();\n                                },\n                                mouseleave: function () {\n                                    ctrl._tooltip.prepareToHide();\n                                }\n                            });\n                        };\n                        /**\n                         * Cleansup the tooltip when the scope is destroyed\n                         *\n                         * @private\n                         */\n                        UserTooltipController.prototype._initCleanup = function () {\n                            var _this = this;\n                            this.$scope.$on('$destroy', function () {\n                                _this._tooltip.adapter.remove(_this._tooltip.container);\n                                _this._tooltip.container = null;\n                                _this._tooltip.tooltipElement = null;\n                                _this._tooltip = null;\n                            });\n                        };\n                        UserTooltipController.prototype.$onInit = function () {\n                            var _this = this;\n                            this.$scope.$applyAsync(function () {\n                                _this._initSettings();\n                                _this._initTooltip();\n                                _this._initCleanup();\n                            });\n                        };\n                        UserTooltipController.$inject = ['$scope', '$element'];\n                        return UserTooltipController;\n                    }());\n                    return {\n                        restrict: 'A',\n                        controller: UserTooltipController,\n                        controllerAs: '$ctrl',\n                        scope: {},\n                        bindToController: {\n                            indicators: '<',\n                            alertModel: '<',\n                            tooltipTargetSelector: '@',\n                            _externalTooltipSettings: '<tooltipSettings'\n                        }\n                    };\n                }\n                fsIndicatorsTooltipDirective.$inject = ['$compile', '$templateCache'];\n                angular.module('Fortscale.shared.components')\n                    .directive('fsIndicatorsTooltip', fsIndicatorsTooltipDirective);\n            })(fsIndicatorsTooltip = components.fsIndicatorsTooltip || (components.fsIndicatorsTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsTag;\n            (function (fsTag) {\n                var ABOUT_TO_REMOVE_CLASS_NAME = 'about-to-remove';\n                var TagController = (function () {\n                    function TagController($element, $scope) {\n                        this.$element = $element;\n                        this.$scope = $scope;\n                    }\n                    /**\n                     * Sets 'about-to-remove' class on the element, or removes it.\n                     *\n                     * @param {boolean} state\n                     */\n                    TagController.prototype.setAboutToRemove = function (state) {\n                        if (state) {\n                            this.$element.addClass(ABOUT_TO_REMOVE_CLASS_NAME);\n                        }\n                        else {\n                            this.$element.removeClass(ABOUT_TO_REMOVE_CLASS_NAME);\n                        }\n                    };\n                    TagController.prototype.$onInit = function () {\n                    };\n                    TagController.$inject = ['$element', '$scope'];\n                    return TagController;\n                }());\n                var fsTagComponent = {\n                    controller: TagController,\n                    templateUrl: 'app/shared/components/fs-tag/fs-tag.component.html',\n                    bindings: {\n                        tag: '<',\n                        removeTagDelegate: '&',\n                    }\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsTag', fsTagComponent);\n            })(fsTag = components.fsTag || (components.fsTag = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsTableScrollable;\n            (function (fsTableScrollable_1) {\n                var FETCH_AHEAD_PAGES = 5;\n                var TableScrollableController = (function () {\n                    function TableScrollableController($scope, $element, $compile, $q, stateManagementService) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$compile = $compile;\n                        this.$q = $q;\n                        this.stateManagementService = stateManagementService;\n                        this.pagesCache = [];\n                    }\n                    /**\n                     * Takes a tableElement angular element, compiles it, and returns it.\n                     *\n                     * @param {angular.element} tableElement\n                     * @returns {angular.element}\n                     * @private\n                     */\n                    TableScrollableController.prototype._compileKendoGridElement = function (tableElement) {\n                        return this.$compile(tableElement)(this.$scope);\n                    };\n                    /**\n                     * Creates an angular element from a kendo-grid tag and returns it.\n                     *\n                     * @returns {angular.element}\n                     * @private\n                     */\n                    TableScrollableController.prototype._createKendoGridElement = function () {\n                        return angular.element('<kendo-grid class=\"fs-table-scrollable\" options=' +\n                            '\"$ctrl.tableSettings\" > ' +\n                            '</kendo-grid>');\n                    };\n                    /**\n                     * Register _reloadTable to be executed when state changed\n                     * @private\n                     */\n                    TableScrollableController.prototype._initStateChangeWatch = function () {\n                        this.stateManagementService.registerToStateChanges(this.stateId, this._reloadTable.bind(this));\n                    };\n                    /**\n                     * Reload the table again.\n                     * Should be called when filter or sort change\n                     * @private\n                     */\n                    TableScrollableController.prototype._reloadTable = function () {\n                        this._removeTableElement();\n                        this._renderTable();\n                    };\n                    /**\n                     * Remove the table from the DOM\n                     * @private\n                     */\n                    TableScrollableController.prototype._removeTableElement = function () {\n                        var prevKendoElement = this.$element.find('[kendo-grid]');\n                        prevKendoElement.remove();\n                    };\n                    /**\n                     * Render the table into the DOM\n                     * @private\n                     */\n                    TableScrollableController.prototype._renderTable = function () {\n                        var tableElement = this._createKendoGridElement();\n                        // Compile and link table element\n                        tableElement = this._compileKendoGridElement(tableElement);\n                        this.$element.append(tableElement);\n                        this._tableElement = tableElement;\n                    };\n                    TableScrollableController.prototype.$onInit = function () {\n                        this._initStateChangeWatch();\n                        this._initReadDataDelegate();\n                        this._renderTable();\n                    };\n                    /**\n                     * This method intiate the read function on the transport.\n                     * If we are not using cache, the transport will be the delegate as retrieved from outside.\n                     * If we are using cache, the delegate will be wrapped by  _readDataWrapper, and read function of the transport\n                     * will be the _readDataWrapper which contain the delegate\n                     *\n                     * if no dataSource.transport configured the user will get an error.\n                     * @private\n                     */\n                    TableScrollableController.prototype._initReadDataDelegate = function () {\n                        this.useCache = !!this.useCache;\n                        if (this.tableSettings.dataSource && this.tableSettings.dataSource.transport) {\n                            this.tableSettings.dataSource.transport.read = this._readDataWrapper.bind(this);\n                        }\n                        else {\n                            throw new Error(\"Table settings must have 'dataSource.trasnport' property\");\n                        }\n                    };\n                    /**\n                     * This method called from the grid when have new page should be loaded (only if useCache = true)\n                     * The method check if the page already in cache. If it does it return the page immedietly,\n                     * if not it called to \"readWithCache\" to load several pages and store the in the cache for future use\n                     * @param options -\n                     * @private\n                     */\n                    TableScrollableController.prototype._readDataWrapper = function (options) {\n                        //page number start from 1. Cache start from index 0.\n                        var pageNumber = options.data.page;\n                        var pageSize = options.data.pageSize;\n                        var pagePromise;\n                        if (!this.useCache) {\n                            pagePromise = this.readDataDelegate({ \"pageNumber\": pageNumber, \"pageSize\": pageSize });\n                        }\n                        else {\n                            pagePromise = this.readWithCache(pageNumber, pageSize);\n                        }\n                        pagePromise.then(function (page) {\n                            options.success(page);\n                        });\n                    };\n                    /**\n                     * That method load FETCH_AHEAD_PAGES number of pages, and add them to the cache.\n                     *\n                     * @param page - start from 1\n                     * @param pageSize\n                     * @returns {function(any=): JQueryPromise<T>|function(string=, Object=): JQueryPromise<any>|IPromise<T>}\n                     */\n                    TableScrollableController.prototype.readWithCache = function (pageNumber, pageSize) {\n                        var ctrl = this;\n                        //If page already loaded\n                        if (typeof ctrl.pagesCache[pageNumber - 1] === \"object\") {\n                            var data = { data: ctrl.pagesCache[pageNumber - 1], total: ctrl.totalPages };\n                            //let deferred:any = this.$q.defer();\n                            //deferred.resolve(data);\n                            //return deferred.promise;\n                            return this.$q.when(data);\n                        }\n                        else {\n                            //Page should be loaded with cache. Each call retrieve \"pagesGroup \" according to amount in FETCH_AHEAD_PAGES\n                            var groupRequestSize = FETCH_AHEAD_PAGES * pageSize; //Each call fetch 3 pages.\n                            var groupRequestPageNumber_1 = Math.ceil(pageNumber / FETCH_AHEAD_PAGES); //The group number for the server request\n                            return this.readDataDelegate({ \"pageNumber\": groupRequestPageNumber_1, \"pageSize\": groupRequestSize })\n                                .then(function (data) {\n                                // Validate data\n                                if (data) {\n                                    var firstResultPageNumber = (groupRequestPageNumber_1 - 1) * FETCH_AHEAD_PAGES + 1;\n                                    ctrl._savePagesToCache(data.data, firstResultPageNumber, pageSize);\n                                    ctrl.totalPages = data.total;\n                                }\n                                return { data: ctrl.pagesCache[pageNumber - 1], total: ctrl.totalPages };\n                            });\n                        }\n                    };\n                    /**\n                     * Split the data retrieved from the server (the response should contain FETCH_AHEAD_PAGES* page_size rows)\n                     * into FETCH_AHEAD_PAGES and add each one to the cache in right index.\n                     * @param data\n                     * @param firstResultPageNumber\n                     * @param pageSize\n                     * @private\n                     */\n                    TableScrollableController.prototype._savePagesToCache = function (data, firstResultPageNumber, pageSize) {\n                        for (var i = 0; i < FETCH_AHEAD_PAGES; i++) {\n                            var pageData = data.splice(0, pageSize);\n                            this.pagesCache[firstResultPageNumber + i - 1] = pageData;\n                        }\n                    };\n                    TableScrollableController.$inject = ['$scope', '$element', '$compile', \"$q\", 'stateManagementService'];\n                    return TableScrollableController;\n                }());\n                var fsTableScrollable = {\n                    controller: TableScrollableController,\n                    templateUrl: 'app/shared/components/fs-table-scrollable/fs-table-scrollable.view.html',\n                    bindings: {\n                        stateId: '<',\n                        tableSettings: '<',\n                        readDataDelegate: '&',\n                        useCache: '<'\n                    }\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsTableScrollable', fsTableScrollable);\n            })(fsTableScrollable = components.fsTableScrollable || (components.fsTableScrollable = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function CloseAlertModalInstanceCtrl($scope, $modalInstance, inputParams) {\n        this.$scope = $scope;\n        this.$modalInstance = $modalInstance;\n        this.inputParams = inputParams;\n        this.init();\n    }\n    angular.extend(CloseAlertModalInstanceCtrl.prototype, {\n        /**\n         * When user click on OK button-\n         * resolve the modal promise and send the model (the feedback of the alert)\n         */\n        clickOk: function () {\n            this.$modalInstance.close(this.model);\n        },\n        /**\n         * When user click on cancel button-\n         * resolve the modal promise and return 'cancel'\n         */\n        clickCancel: function () {\n            this.$modalInstance.dismiss('cancel');\n        },\n        /**\n         * Convert the options of the feedback from enum object to array of \"key\" & \"value\"\n         * @param options\n         * @returns {Array} array of objects with \"key\" and \"value\" for the feedback radio buttons\n         * @private\n         */\n        _getOptionsAsArray: function (options) {\n            var optionsArray = [];\n            _.forIn(options, function (key, value) {\n                optionsArray.push({\n                    value: value,\n                    key: key\n                });\n            });\n            return optionsArray;\n        },\n        /**\n         * Init the controller\n         */\n        init: function () {\n            var ctrl = this;\n            ctrl.alert = ctrl.inputParams.alert;\n            ctrl.model = {\n                closeAlertStatus: '',\n                inputParams: ctrl.inputParams,\n            };\n            //Init the feedback options list for the radio buttons\n            ctrl.optionsList = ctrl._getOptionsAsArray(ctrl.inputParams.options);\n        }\n    });\n    CloseAlertModalInstanceCtrl.$inject = [\n        '$scope',\n        '$modalInstance',\n        'inputParams'\n    ];\n    angular.module('Fortscale.shared.components.alertFeedback')\n        .controller('CloseAlertModalInstanceCtrl', CloseAlertModalInstanceCtrl);\n}());\n","(function () {\n    'use strict';\n    function OpenAlertModalInstanceCtrl($scope, $modalInstance, inputParams) {\n        this.$scope = $scope;\n        this.$modalInstance = $modalInstance;\n        this.inputParams = inputParams;\n        this.init();\n    }\n    angular.extend(OpenAlertModalInstanceCtrl.prototype, {\n        /**\n         * When user click on OK button-\n         * resolve the modal promise and send the model (the feedback of the alert)\n         */\n        clickOk: function () {\n            this.$modalInstance.close(this.model);\n        },\n        /**\n         * When user click on cancel button-\n         * resolve the modal promise and return 'cancel'\n         */\n        clickCancel: function () {\n            this.$modalInstance.dismiss('cancel');\n        },\n        /**\n         * Inits the controller\n         */\n        init: function () {\n            var ctrl = this;\n            ctrl.model = {\n                inputParams: ctrl.inputParams\n            };\n        }\n    });\n    OpenAlertModalInstanceCtrl.$inject = [\n        '$scope',\n        '$modalInstance',\n        'inputParams'\n    ];\n    angular.module('Fortscale.shared.components.alertFeedback').controller('OpenAlertModalInstanceCtrl', OpenAlertModalInstanceCtrl);\n}());\n","(function () {\n    'use strict';\n    /**\n     * This modal show success message after alert was closed or reopened\n     * @param $scope\n     * @param $modalInstance\n     * @param inputParams\n     * @constructor\n     */\n    function FeedbackResultModalInstanceCtrl($scope, $modalInstance, inputParams) {\n        var ctrl = this;\n        ctrl.$scope = $scope;\n        ctrl.$modalInstance = $modalInstance;\n        ctrl.inputParams = inputParams;\n        /**\n         * Used to fixate activation context and invoke _removeClickListener and _closeModal\n         */\n        ctrl.closeModal = function () {\n            ctrl._removeClickListener();\n            ctrl._closeModal();\n        };\n        ctrl.init();\n    }\n    angular.extend(FeedbackResultModalInstanceCtrl.prototype, {\n        /**\n         * Closes the modal\n         *\n         * @private\n         */\n        _closeModal: function () {\n            this.$modalInstance.dismiss();\n        },\n        /**\n         * Removes click event listener\n         *\n         * @private\n         */\n        _removeClickListener: function () {\n            window.removeEventListener('click', this.closeModal, true);\n        },\n        /**\n         * Used to cleanup all listeners\n         *\n         * @private\n         */\n        _cleanup: function () {\n            this._removeClickListener();\n        },\n        /**\n         * Initates watches\n         *\n         * @private\n         */\n        _initWatches: function () {\n            window.addEventListener('click', this.closeModal, true);\n            this.$scope.$on('$destroy', this._cleanup.bind(this));\n        },\n        /**\n         * Init the controller\n         */\n        init: function () {\n            var ctrl = this;\n            ctrl.newAlertStatus = ctrl.inputParams.newAlertStatus;\n            ctrl.specificBodyMessage = ctrl.inputParams.specificBodyMessage;\n            ctrl._initWatches();\n        }\n    });\n    FeedbackResultModalInstanceCtrl.$inject = [\n        '$scope',\n        '$modalInstance',\n        'inputParams'\n    ];\n    angular.module('Fortscale.shared.components.alertFeedback')\n        .controller('FeedbackResultModalInstanceCtrl', FeedbackResultModalInstanceCtrl);\n}());\n","(function () {\n    'use strict';\n    /**\n     * This modal present error message after chagne alert status failed.\n     * @param $scope\n     * @param $modalInstance\n     * @param inputParams\n     * @constructor\n     */\n    function FeedbackFailureModalInstanceCtrl($scope, $modalInstance, inputParams) {\n        this.$scope = $scope;\n        this.$modalInstance = $modalInstance;\n        this.inputParams = inputParams;\n        this.init();\n    }\n    angular.extend(FeedbackFailureModalInstanceCtrl.prototype, {\n        /**\n         * When user click on OK button-\n         * resolve the modal promise close the modal\n         */\n        clickOk: function () {\n            this.$modalInstance.close();\n        },\n        /**\n         * Init the controller\n         */\n        init: function () {\n            var ctrl = this;\n            ctrl.newAlertStatus = ctrl.inputParams.newAlertStatus;\n            ctrl.specificBodyMessage = ctrl.inputParams.specificBodyMessage;\n        }\n    });\n    FeedbackFailureModalInstanceCtrl.$inject = [\n        '$scope',\n        '$modalInstance',\n        'inputParams'\n    ];\n    angular.module('Fortscale.shared.components.alertFeedback')\n        .controller('FeedbackFailureModalInstanceCtrl', FeedbackFailureModalInstanceCtrl);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale')\n        .value('indicatorSeverities', {\n        Critical: {\n            order: 0,\n            id: 'critical',\n            name: 'Critical',\n            count: 0\n        },\n        High: {\n            order: 1,\n            id: 'high',\n            name: 'High',\n            count: 0\n        },\n        Medium: {\n            order: 2,\n            id: 'medium',\n            name: 'Medium',\n            count: 0\n        },\n        Low: {\n            order: 3,\n            id: 'low',\n            name: 'Low',\n            count: 0\n        }\n    });\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.layouts', [\n        'Fortscale.layouts.overview',\n        'Fortscale.layouts.reports',\n        'ui.bootstrap',\n        'Fortscale.layouts.configuration',\n        'Fortscale.layouts.pxgridConfiguration',\n        'Fortscale.layouts.user',\n        'Fortscale.layouts.users'\n    ]);\n}());\n","(function () {\n    'use strict';\n    /**\n     * Handle Alerts page\n     */\n    function AlertsController($scope, $element, alertsResourceSettings, alertsTableSettings, alertsIndicatorsTableSettings, splitterSettings, filtersPaneSettings, alertsMainState, tagsList, indicatorTypeList, dependencyMounter) {\n        var _this = this;\n        var ctrl = this;\n        dependencyMounter.mountOnConstructor(AlertsController, ['interpolation', 'utils',\n            'fsResourceStore', 'BASE_URL', '$http', 'URLUtils', 'indicatorSeverities', 'entityUtils', 'page',\n            'dateRanges', 'appConfig', '$state', 'fsDownloadFile', 'fsNanobarAutomationService']);\n        // Set instance variables\n        ctrl.$scope = $scope;\n        ctrl.$element = $element;\n        ctrl.alertsResourceSettings = _.merge({}, alertsResourceSettings);\n        ctrl.alertsTableSettings = _.merge({}, alertsTableSettings);\n        ctrl.alertsIndicatorsTableSettings = _.merge({}, alertsIndicatorsTableSettings);\n        ctrl.fsSplitterSettings = _.merge({}, splitterSettings);\n        ctrl.filtersPaneSettings = _.merge({}, filtersPaneSettings);\n        ctrl.alertsMainState = _.merge({}, alertsMainState);\n        ctrl.tagsList = _.merge({}, tagsList);\n        ctrl.indicatorTypeList = _.merge([], indicatorTypeList);\n        ctrl._alertsMainStateDefault = _.merge({}, alertsMainState);\n        ctrl._defaultDaysRange = this.appConfig.getConfigValue('ui.' + this.$state.current.name, 'daysRange');\n        ctrl.alertsResourceAdapter = function (data) {\n            return ctrl._alertsResourceAdapter(data);\n        };\n        ctrl.filtersPaneSettings.tagsFilter = ctrl.tagsList;\n        ctrl.NANOBAR_ID = 'alerts';\n        ctrl.dataFetchDelegate = function (promise) {\n            ctrl.fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        ctrl._init();\n    }\n    angular.extend(AlertsController.prototype, {\n        /**\n         * Adds a startOfDay field for grouping purposes\n         *\n         * @param {Array} data\n         * @returns {Array}\n         * @private\n         */\n        _alertsResourceAdapter: function (data) {\n            var ctrl = this;\n            _.each(data, function (row) {\n                row.startDateDay = ctrl.utils.date.getMoment(row.startDate, null)\n                    .startOf('day').unix() + '000';\n                row.indicatorsNum = row.evidences.length;\n                // Add alert id and user id to indicator to populate ui-sref directive\n                _.each(row.evidences, function (indicator) {\n                    indicator.alert = {\n                        id: row.id,\n                        entityId: row.entityId\n                    };\n                });\n            });\n            return data;\n        },\n        _addDefaultDateRange: function () {\n            this.alertsMainState.date_range_filter = {\n                value: this.dateRanges.getByDaysRange(this._defaultDaysRange, 'short')\n            };\n        },\n        /**\n         * Broadcasts an event that requests all controls (by control id) to reset.\n         * It provides on the eventData the control id to reset, and the initial state.\n         *\n         * @param {object} stateContainer\n         * @param {string} tableId\n         * @param {Array<string>} controlIds\n         */\n        clearFilters: function (stateContainer, tableId, controlIds) {\n            var ctrl = this;\n            //   this.resetPreStateTablePageNumber(stateContainer, tableId);\n            _.each(controlIds, function (id) {\n                ctrl.$scope.$broadcast('control:reset', {\n                    controlId: id,\n                    initialState: (ctrl._alertsMainStateDefault[id] &&\n                        ctrl._alertsMainStateDefault[id].value) || null\n                });\n            });\n        },\n        /**\n         * Fetches user id and navigates to user overview\n         * TODO: Replace dataQuery api with entity restful api\n         *\n         * @param {object} alert\n         */\n        navigateToEntityProfile: function (alert) {\n            this.entityUtils.navigateToEntityProfile(alert.entityType, alert.entityId);\n        },\n        getAlertsCSV: function (stateContainer, alertsResourceSettings) {\n            var interpolatedParams = this.interpolation.interpolate(alertsResourceSettings, stateContainer.stateModel);\n            delete interpolatedParams.page;\n            delete interpolatedParams.size;\n            var excludedValues = [\"\", \"_ALL_\"];\n            //Copy all the attributes from interpolatedParams.params to filterParams, Except attributes with values from excludedValues array\n            var filterParams = _.omitBy(interpolatedParams.params, function (value, key) {\n                return _.indexOf(excludedValues, value) > -1;\n            });\n            var query = $.param(filterParams);\n            var src = this.BASE_URL + \"/alerts/export?\" + query;\n            this.fsDownloadFile.openIFrame(src);\n        },\n        /**\n         * Returns a sorted array of severities\n         *\n         * @param {{}} severitiesObj\n         * @returns {Array|undefined}\n         */\n        getSeveritiesCount: function (severitiesObj) {\n            // return an array only if severitiesObj received\n            if (severitiesObj) {\n                // Create a new severities count list: Array<{name: string, count: number}>\n                this._totalSeveritiesCount = _.map(_.sortBy(this.indicatorSeverities, 'order'), function (indicatorSeverity) {\n                    return _.merge({}, indicatorSeverity, { count: severitiesObj[indicatorSeverity.name] });\n                });\n                // The newly created list can not be returned as is, because angular will identify the new object as\n                // a change, and will start a new digest cycle to make sure the object is stable. It will never be\n                // stable if that object is returned. Therefore we need to store the object in a property on the\n                // instance, and compare it manually to the latest object delivered. If the objects are equal,\n                // return the latest one, and not the new one. This will satisfy angular and no unneeded cycles will\n                // occur.\n                // If no _LatestTotalSeveritiesCount then set it and return _totalSeveritiesCount\n                if (this._LatestTotalSeveritiesCount === undefined) {\n                    this._LatestTotalSeveritiesCount = this._totalSeveritiesCount;\n                    return this._totalSeveritiesCount;\n                }\n                // Equate the two lists (_totalSeveritiesCount and _LatestTotalSeveritiesCount). If the values are\n                // not equal set _LatestTotalSeveritiesCount and return _totalSeveritiesCount.\n                if (!_.every(this._totalSeveritiesCount, _.bind(function (sc, index) {\n                    return (sc.count === this._LatestTotalSeveritiesCount[index].count);\n                }, this))) {\n                    this._LatestTotalSeveritiesCount = this._totalSeveritiesCount;\n                    return this._totalSeveritiesCount;\n                }\n                return this._LatestTotalSeveritiesCount;\n            }\n        },\n        /**\n         * Init function of the controller\n         *\n         * @private\n         */\n        _init: function _init() {\n            this.page.setPageTitle(\"Alerts\");\n            this._addDefaultDateRange();\n        }\n    });\n    AlertsController.$inject = ['$scope', '$element', 'alertsResourceSettings',\n        'alertsTableSettings', 'alertsIndicatorsTableSettings', 'splitterSettings',\n        'filtersPaneSettings', 'alertsMainState', 'tagsList', 'indicatorTypeList',\n        'dependencyMounter'];\n    angular.module('Fortscale')\n        .controller('AlertsController', AlertsController);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var alertsPageResolve = {\n        alertsResourceSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/alerts.resource.json');\n            }\n        ],\n        alertsTableSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/alerts-table.settings.json');\n            }\n        ],\n        alertsIndicatorsTableSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/alerts-indicators-table.settings.json');\n            }\n        ],\n        alertsMainState: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/alerts-main.state.json');\n            }\n        ],\n        splitterSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/splitter.settings.json');\n            }\n        ],\n        filtersPaneSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/alerts/settings/filters-pane.settings.json');\n            }\n        ],\n        tagsList: [\n            'BASE_URL',\n            '$http',\n            function (BASE_URL, $http) {\n                return $http\n                    .get(BASE_URL + '/tags/user_tags')\n                    .then(function (res) {\n                    res.data.data = _.map(res.data.data, function (tag) {\n                        return {\n                            id: tag.name,\n                            value: tag.displayName\n                        };\n                    });\n                    return res.data;\n                });\n            }\n        ],\n        indicatorTypeList: [\n            'fsIndicatorTypes',\n            function (fsIndicatorTypes) {\n                return fsIndicatorTypes.getIndicatorsList();\n            }\n        ]\n    };\n    angular.module('Fortscale.layouts')\n        .constant('alertsPageResolve', alertsPageResolve);\n}());\n","(function () {\n    'use strict';\n    //For how long to display the status change success modal\n    var MILISECONDS_TO_DISPLAY_SUCCESS_MODAL = 3000;\n    function FsAlertsRecordMenu(assert, indicatorTypeMapper) {\n        /**\n         * The link function\n         *\n         * @param scope\n         * @param element\n         */\n        function linkFn(scope, element) {\n            // Assign ctrl\n            var ctrl = scope.recordMenuCtrl;\n            assert(_.isObject(ctrl.dataItem), 'FsAlertsRecordMenu.directive: ' +\n                'item must be provided.');\n            // Assign ts and set required class\n            var td = ctrl.td = element.closest('td');\n            td.addClass('fs-alert-record-menu-cell');\n            ctrl.isOpened = false;\n            // Add td click handler (and its deregister)\n            function tdClickHandler(evt) {\n                ctrl._tdClickHandler(evt);\n            }\n            td.on('click', tdClickHandler);\n            // Cleanup\n            function cleanup() {\n                td.off('click', tdClickHandler);\n                ctrl._deregisterGlobalListener();\n            }\n            scope.$on('$destroy', cleanup);\n            element.on('destroy', cleanup);\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsAlertsRecordMenuController($scope, $element, $attrs, alertFeedback, $timeout) {\n            // Put dependencies on the controller instance\n            this.$scope = $scope;\n            this.$element = $element;\n            this.$attrs = $attrs;\n            this.alertFeedback = alertFeedback;\n            this.$timeout = $timeout;\n        }\n        _.merge(FsAlertsRecordMenuController.prototype, {\n            /**\n             * Click handler for the table cell.\n             * Invokes _closeMenu/_openMenu (based on 'opened' class)\n             *\n             * @private\n             */\n            _tdClickHandler: function () {\n                if (this.td.hasClass('opened')) {\n                    this._closeMenu();\n                }\n                else {\n                    this._openMenu();\n                }\n            },\n            /**\n             * Adds a gloabal click listener. This is used to close the menu if clicked outside the\n             * table cell.\n             *\n             * @returns {Function} unregister function\n             * @private\n             */\n            _addGlobalListener: function () {\n                var ctrl = this;\n                function clickHandler(evt) {\n                    // Close only if click is not a part of that specific menu\n                    if ($(evt.target).closest('td')[0] !== ctrl.td[0]) {\n                        ctrl._closeMenu();\n                    }\n                }\n                window.addEventListener('click', clickHandler, false);\n                return function () {\n                    window.removeEventListener('click', clickHandler, false);\n                };\n            },\n            /**\n             * Removes global listener (if one exists)\n             *\n             * @private\n             */\n            _deregisterGlobalListener: function () {\n                if (this._globalListenerDeregister) {\n                    this._globalListenerDeregister();\n                    this._globalListenerDeregister = null;\n                }\n            },\n            /**\n             * Opens the menu\n             *\n             * @private\n             */\n            _openMenu: function () {\n                this.td.addClass('opened');\n                this._globalListenerDeregister = this._addGlobalListener();\n                this.isOpened = true;\n                this.$scope.$apply();\n            },\n            /**\n             * Closes the menu, and deregisters the global listener.\n             *\n             * @private\n             */\n            _closeMenu: function () {\n                this.td.removeClass('opened');\n                this._deregisterGlobalListener();\n                this.isOpened = false;\n                this.$scope.$apply();\n            },\n            /**\n             * This method close opened alert or re-open closed alert\n             * and display success or failure message, and refresh the grid\n             * @param alert -  the alert details\n             */\n            changeAlertStatus: function (alert) {\n                var ctrl = this;\n                var promiseResults;\n                var newStatus;\n                //Trigger the close alert or re-open alert flow\n                if (alert.status === 'Open') {\n                    promiseResults = ctrl.alertFeedback.handleCloseAlertPopupFlow(alert);\n                    newStatus = 'closed';\n                }\n                else {\n                    promiseResults = ctrl.alertFeedback.handleOpenAlertPopupFlow(alert);\n                    newStatus = 'open';\n                }\n                //Update the screen after the operation complete\n                promiseResults.then(function (res) {\n                    ctrl.refreshTable();\n                    ctrl.fireAlertStateUpdated(res);\n                    var responsePopupInstance = ctrl.alertFeedback.showResponseSuccessPopup(newStatus);\n                    ctrl._dismissSuccssFailPopup(responsePopupInstance);\n                })\n                    .catch(function (e) {\n                    //If e equals 'cancel' the user cancel the change.\n                    //If e don't equals 'cancel' - some error has happend.\n                    if (e !== 'cancel') {\n                        ctrl.alertFeedback.showResponseFailurePopup(newStatus);\n                    }\n                });\n            },\n            /**\n             * Dismiss the popup after 3 seconds\n             * @param responsePopupInstance\n             * @private\n             */\n            _dismissSuccssFailPopup: function (responsePopupInstance) {\n                this.$timeout(function () {\n                    responsePopupInstance.dismiss();\n                }, MILISECONDS_TO_DISPLAY_SUCCESS_MODAL);\n            },\n            /**\n             * Generates a url for the <a>'s href. It uses the\n             *\n             * @param {object} alert\n             * @returns {string}\n             */\n            getInvestigateHref: function (alert) {\n                return indicatorTypeMapper.getTargetUrl(alert.id, alert.evidences[0]);\n            },\n            /**\n             * That method refresh the alerts table in the main \"alerts\" page.\n             */\n            refreshTable: function () {\n                var ctrl = this;\n                if (ctrl.stateContainer) {\n                    //Extract the state object of the table\n                    var tableState = ctrl.stateContainer.fetchStateById(ctrl.tableId);\n                    //Update the table\n                    ctrl.stateContainer.updateCtrlState({\n                        id: ctrl.tableId,\n                        immediate: true,\n                        type: 'data',\n                        value: tableState\n                    });\n                }\n            },\n            /**\n             * When alert status changes, an event is emitted with the changed alert\n             *\n             * @param res\n             */\n            fireAlertStateUpdated: function (res) {\n                var modifiedAlert = _.merge({}, this.dataItem);\n                modifiedAlert.status = res.config.data.status === 'open' ? 'Open' : 'Closed';\n                modifiedAlert.feedback = res.config.data.feedback.charAt(0).toUpperCase() +\n                    res.config.data.feedback.substr(1);\n                this.$scope.$root.$broadcast('fsAlertsRecordMenu:alertUpdated', modifiedAlert, res);\n            }\n        });\n        FsAlertsRecordMenuController.$inject = ['$scope', '$element', '$attrs', 'alertFeedback', '$timeout'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/alerts/components/fs-alerts-record-menu/' +\n                'fs-alerts-record-menu.view.html',\n            scope: {},\n            controller: FsAlertsRecordMenuController,\n            controllerAs: 'recordMenuCtrl',\n            bindToController: {\n                dataItem: '=item',\n                tableId: '@',\n                stateContainer: '='\n            },\n            link: linkFn\n        };\n    }\n    FsAlertsRecordMenu.$inject = ['assert', 'indicatorTypeMapper'];\n    angular.module('Fortscale.layouts')\n        .directive('fsAlertsRecordMenu', FsAlertsRecordMenu);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            angular.module('Fortscale.layouts.user', []);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            'use strict';\n            angular.module('Fortscale.layouts.user')\n                .config([\n                '$stateProvider',\n                function ($stateProvider) {\n                    $stateProvider\n                        .state('username', {\n                        url: '/username/:username',\n                        controller: (function () {\n                            function UsernameController($stateParams, userUtils, $location, $log, toastrService) {\n                                userUtils.getUserByUsername($stateParams.username)\n                                    .then(function (user) {\n                                    $location.path(\"/user/\" + user.id + \"/baseline\");\n                                    $location.replace();\n                                })\n                                    .catch(function (err) {\n                                    toastrService.error('There was an unexpected server error while trying to load a user profile', 'User Profile Error');\n                                    $log.error(err);\n                                    $location.path(\"/overview\");\n                                    $location.replace();\n                                });\n                            }\n                            UsernameController.$inject = ['$stateParams', 'userUtils', '$location', '$log', 'toastrService'];\n                            return UsernameController;\n                        }()),\n                    })\n                        .state('user', {\n                        url: '/user/:userId',\n                        templateUrl: 'app/layouts/user/user.view.html',\n                        controller: 'UserController',\n                        controllerAs: 'userCtrl'\n                    })\n                        .state('user.baseline', {\n                        url: '/baseline',\n                        controller: 'userAttributesController',\n                        controllerAs: 'attrCtrl',\n                        templateUrl: 'app/layouts/user/components/user-attributes/user-attributes.view.html'\n                    })\n                        .state('user.alert-overview', {\n                        url: '/alert/:alertId',\n                        templateUrl: 'app/layouts/user/components/user-alert-overview/user-alert-overview.view.html',\n                        controller: 'userAlertOverviewController',\n                        controllerAs: 'userAlertOverviewController'\n                    })\n                        .state('user.indicator', {\n                        url: '/alert/:alertId/indicator/:indicatorId',\n                        templateUrl: 'app/layouts/user/components/user-indicator/user-indicator.view.html',\n                        controller: 'userIndicatorController',\n                        controllerAs: 'userIndicatorCtrl'\n                    });\n                }\n            ]);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var Activities = (function () {\n                function Activities() {\n                    this.organization = {\n                        topCountries: null\n                    };\n                    this.user = {\n                        topCountries: null,\n                        authentications: null,\n                        workingHours: null,\n                        sourceDevices: null,\n                        targetDevices: null,\n                        dataUsages: null\n                    };\n                }\n                return Activities;\n            }());\n            user.Activities = Activities;\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var UserTagsUtilsService = (function () {\n                function UserTagsUtilsService(tagsUtils, toastrService) {\n                    this.tagsUtils = tagsUtils;\n                    this.toastrService = toastrService;\n                }\n                /**\n                 * Removes a tag from a user,\n                 * @param {ITagDefinition} tag\n                 * @param {{}} user\n                 */\n                UserTagsUtilsService.prototype.removeTag = function (tag, user) {\n                    var _this = this;\n                    return this.tagsUtils.removeTag(user.id, tag.name)\n                        .then(function () {\n                        user.tags = _.filter(user.tags, function (userTagName) {\n                            return userTagName !== tag.name;\n                        });\n                        // this.toastrService.info(\n                        //     `Tag <b>${tag.displayName}</b> was successfully removed from <b>${user.fallBackDisplayName}</b>.`);\n                        return user;\n                    })\n                        .catch(function (err) {\n                        console.error(err);\n                        _this.toastrService.error(\"There was an error trying to remove tag <b>\" + tag.displayName + \"</b> to user <b>\" + user.fallBackDisplayName + \"</b>.<br>Please try again later.\");\n                    });\n                };\n                /**\n                 * Adds a tag to the user\n                 * @param {ITagDefinition} tag\n                 * @param {{}} user\n                 * @returns {IPromise<TResult>}\n                 */\n                UserTagsUtilsService.prototype.addTag = function (tagName, user, tagDisplayName) {\n                    var _this = this;\n                    return this.tagsUtils.addTag(user.id, tagName)\n                        .then(function () {\n                        user.tags.push(tagName);\n                        return user;\n                    })\n                        .catch(function (err) {\n                        console.error(err);\n                        _this.toastrService.error(\"There was an error trying to add tag <b>\" + (tagDisplayName ? tagDisplayName : tagName) + \"</b> to user <b>\" + user.fallBackDisplayName + \"</b>.<br>Please try again later.\");\n                    });\n                };\n                /**\n                 * Adds a new tag to system and to user\n                 * @param tagName\n                 * @param tags\n                 * @param user\n                 * @returns {ng.IPromise<any>}\n                 */\n                UserTagsUtilsService.prototype.addNewTag = function (tagName, tags, user) {\n                    var _this = this;\n                    function findTagNameInTags(tags, tagName) {\n                        return (_.find < (tags, { name: tagName }) || _.find(tags, { displayName: tagName }));\n                    }\n                    // find the new tag (if exists)\n                    var tag = findTagNameInTags(tags, tagName);\n                    // If tag is found, validate, if valid add it to user\n                    if (tag) {\n                        // Check if tag is fixed\n                        if (!tag.active) {\n                            this.toastrService.error(\"The tag <b>\" + tag.displayName + \"</b> is an inactive tag, and can not be added.\");\n                            return null;\n                        }\n                        // Check if user has tag\n                        var userHasTag = _.some(user.tags, function (userTag) { return userTag === tag.name; });\n                        if (userHasTag) {\n                            this.toastrService.error(\"The user is already tagged with a tag named <b>\" + (tag.displayName || tagName) + \"</b>.\");\n                            return null;\n                        }\n                        // Add tag to user if tag is not fixed and the user does not already have the tag\n                        return this.addTag(tag.name, user)\n                            .then(function (user) {\n                            return { user: user, tags: tags };\n                        });\n                    }\n                    // Create the new tag and add it to the user\n                    return this.tagsUtils.createNewTag(tagName)\n                        .then(function (_tags) {\n                        //place new tags list in tags variable for future reference\n                        tags = _tags;\n                        // Add tag to user\n                        return _this.addTag(findTagNameInTags(tags, tagName), user);\n                    })\n                        .then(function (user) {\n                        return { user: user, tags: tags };\n                    })\n                        .catch(function (err) {\n                        _this.toastrService.error(\"There was an error trying to add new tag <b>\" + tagName + \"</b> to user <b>\" + user.fallBackDisplayName + \"</b>.<br>Please try again later.\");\n                    });\n                };\n                UserTagsUtilsService.$inject = ['tagsUtils', 'toastrService'];\n                return UserTagsUtilsService;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .service('userTagsUtils', UserTagsUtilsService);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var UserWatchUtil = (function () {\n                function UserWatchUtil(BASE_URL, $http) {\n                    this.BASE_URL = BASE_URL;\n                    this.$http = $http;\n                    this.CHANGE_USER_WATCH_STATE_PATH = this.BASE_URL + '/analyst/followUser';\n                }\n                /**\n                 * Changes a user's watch state\n                 * @param {{}} user\n                 * @param {boolean} state\n                 * @returns {IPromise<TResult>}\n                 */\n                UserWatchUtil.prototype.changeUserWatchState = function (user, state) {\n                    return this.$http.get(this.CHANGE_USER_WATCH_STATE_PATH, {\n                        params: {\n                            follow: state,\n                            userId: user.id\n                        }\n                    })\n                        .then(function (res) {\n                        user.followed = state;\n                        return user;\n                    });\n                };\n                UserWatchUtil.$inject = ['BASE_URL', '$http'];\n                return UserWatchUtil;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .service('userWatchUtil', UserWatchUtil);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserIndicatorsUtilsService = (function () {\n                function UserIndicatorsUtilsService(appConfig, indicatorSymbolMap, $interpolate, $filter) {\n                    this.appConfig = appConfig;\n                    this.indicatorSymbolMap = indicatorSymbolMap;\n                    this.$interpolate = $interpolate;\n                    this.$filter = $filter;\n                    this._CONFIG_LOCALE_KEY = 'system.locale.settings';\n                    this._CONFIG_INDICATOR_KEY_PREFIX = \"messages.\" + this.appConfig.getConfigItem(this._CONFIG_LOCALE_KEY).value + \".evidence\";\n                    this._INDICATOR_CONFIG_DESCRIPTION_KEY = 'desc';\n                    this._INDICATOR_CONFIG_TIME_LINE_KEY = 'timeline';\n                }\n                /**\n                 * Returns an indicator's description\n                 * @param indicator\n                 * @returns {any}\n                 */\n                UserIndicatorsUtilsService.prototype.getIndicatorDescription = function (indicator) {\n                    var configItem = this.appConfig.getConfigItem(this._CONFIG_INDICATOR_KEY_PREFIX + \".\" + indicator.anomalyTypeFieldName + \".\" + this._INDICATOR_CONFIG_DESCRIPTION_KEY);\n                    if (configItem && configItem.value) {\n                        return configItem.value;\n                    }\n                    return '';\n                };\n                /**\n                 * Returns an indicator timeLine description\n                 * @param indicator\n                 * @returns {any}\n                 */\n                UserIndicatorsUtilsService.prototype.getIndicatorTimelineDescription = function (indicator) {\n                    var configItem = this.appConfig.getConfigItem(this._CONFIG_INDICATOR_KEY_PREFIX + \".\" + indicator.anomalyTypeFieldName + \".\" + this._INDICATOR_CONFIG_TIME_LINE_KEY);\n                    if (configItem && configItem.value) {\n                        var filterFn = this.$filter('anomalyTypeFormatter');\n                        var locals = {\n                            value: filterFn(indicator.anomalyValue, indicator)\n                        };\n                        return this.$interpolate(configItem.value)(locals);\n                    }\n                    return '';\n                };\n                /**\n                 * Returns an indicator's symbol name (svg icon)\n                 * @param indicator\n                 * @returns {string}\n                 */\n                UserIndicatorsUtilsService.prototype.getIndicatorSymbolName = function (indicator) {\n                    return this.indicatorSymbolMap.getSymbolName(indicator);\n                };\n                /**\n                 * Orders the indicators list and returns a sorted list\n                 * @param indicators\n                 * @returns {T[]}\n                 */\n                UserIndicatorsUtilsService.prototype.orderIndicators = function (indicators) {\n                    if (!indicators) {\n                        return;\n                    }\n                    return _.orderBy(indicators, ['startDate'], ['asc']);\n                };\n                /**\n                 * Filters the indicators list (takes out 'tag' indicators) and returns the list\n                 * @param indicators\n                 * @returns {any[]|string[]|T[]}\n                 */\n                UserIndicatorsUtilsService.prototype.filterIndicators = function (indicators) {\n                    if (!indicators) {\n                        return;\n                    }\n                    return _.filter(indicators, function (indicator) { return indicator.anomalyTypeFieldName !== 'tag'; });\n                };\n                /**\n                 * Get subset of tag indicators only\n                 * @param indicators\n                 * @returns {any[]|string[]|T[]}\n                 */\n                UserIndicatorsUtilsService.prototype.getTagsIndicators = function (indicators) {\n                    if (!indicators) {\n                        return;\n                    }\n                    return _.filter(indicators, function (indicator) { return indicator.anomalyTypeFieldName === 'tag'; });\n                };\n                UserIndicatorsUtilsService.$inject = ['appConfig', 'indicatorSymbolMap', '$interpolate', '$filter'];\n                return UserIndicatorsUtilsService;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .service('userIndicatorsUtils', UserIndicatorsUtilsService);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserAlertsUtilsService = (function () {\n                function UserAlertsUtilsService(appConfig, $filter, tagUtilsService, $q) {\n                    this.appConfig = appConfig;\n                    this.$filter = $filter;\n                    this.tagUtilsService = tagUtilsService;\n                    this.$q = $q;\n                    this._CONFIG_LOCALE_KEY = 'system.locale.settings';\n                    this._CONFIG_ALERT_KEY_PREFIX = \"messages.\" + this.appConfig.getConfigItem(this._CONFIG_LOCALE_KEY).value + \".alert\";\n                    this._ALERT_CONFIG_DESCRIPTION_KEY = 'desc';\n                }\n                /**\n                 * Returns an alerts's description\n                 * @param indicator\n                 * @returns {any}\n                 */\n                UserAlertsUtilsService.prototype.getAlertDescription = function (alert) {\n                    var configItem = this.appConfig.getConfigItem(this._CONFIG_ALERT_KEY_PREFIX + \".\" + alert.name + \".\" + this._ALERT_CONFIG_DESCRIPTION_KEY);\n                    if (configItem && configItem.value) {\n                        return configItem.value;\n                    }\n                    return alert.name;\n                };\n                /**\n                 * The string for data sources with seperator from all the evidences, without duplication\n                 * @param evidencesList\n                 * @returns {string}\n                 */\n                UserAlertsUtilsService.prototype.getDataSources = function (evidencesList) {\n                    var _this = this;\n                    var dataSources = _.map(evidencesList, function (evidence) {\n                        return _this.$filter(\"entityIdToName\")(evidence.dataEntitiesIds[0]);\n                    });\n                    dataSources = _.uniq(dataSources);\n                    return dataSources.join(\", \");\n                };\n                /**\n                 * The string for tag names with seperator from all tag evidences, without duplication\n                 * @param tagEvidencesList\n                 * @returns {promise}\n                 */\n                UserAlertsUtilsService.prototype.getTags = function (tagEvidencesList) {\n                    var _this = this;\n                    var tags = _.map(tagEvidencesList, function (evidence) {\n                        return evidence.anomalyValue;\n                    });\n                    return this.$q(function (resolve, reject) {\n                        if (_this._checkIfAllTagsInCache(tags)) {\n                            resolve(_this._getTagsDisplayNames(tags));\n                        }\n                        else {\n                            _this.tagUtilsService.getTags().then(function (tagList) {\n                                _this._tagsCache = tagList.data;\n                                resolve(_this._getTagsDisplayNames(tags));\n                            });\n                        }\n                    });\n                };\n                UserAlertsUtilsService.prototype._checkIfAllTagsInCache = function (tags) {\n                    var _this = this;\n                    var allTagExits = true;\n                    _.each(tags, function (tag) {\n                        var tagObject = _.find(_this._tagsCache, { name: tag });\n                        if (!tagObject) {\n                            allTagExits = false;\n                        }\n                    });\n                    return allTagExits;\n                };\n                /*\n                 * We assume that all tags exists in cache\n                 */\n                UserAlertsUtilsService.prototype._getTagsDisplayNames = function (tags) {\n                    var _this = this;\n                    var prettyTags = [];\n                    _.each(tags, function (tagName) {\n                        var tag = _.find(_this._tagsCache, { name: tagName });\n                        if (tag) {\n                            prettyTags.push(tag.displayName);\n                        }\n                        else {\n                            prettyTags.push(tagName);\n                        }\n                    });\n                    return prettyTags.join(\", \");\n                };\n                UserAlertsUtilsService.$inject = ['appConfig', '$filter', 'tagsUtils', '$q'];\n                return UserAlertsUtilsService;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .service('userAlertsUtils', UserAlertsUtilsService);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var IndicatorChartTransitionUtil = (function () {\n                function IndicatorChartTransitionUtil(dateRanges, $location, $rootScope) {\n                    this.dateRanges = dateRanges;\n                    this.$location = $location;\n                    this.$rootScope = $rootScope;\n                    var ctrl = this;\n                    this._transitions = {\n                        columnAnomaly: function (indicator, item) {\n                            ctrl.$rootScope.$applyAsync(function () {\n                                ctrl.$location.path(\"/d/explore/\" + indicator.dataEntitiesIds[0])\n                                    .search({\n                                    filters: ctrl._getFilterFieldNameByAnomalyContext(indicator, item),\n                                    default_filters: ctrl._getDefaultFiltes(indicator, item)\n                                });\n                            });\n                        },\n                        columnEntity: function (indicator, item) {\n                            ctrl.$rootScope.$applyAsync(function () {\n                                ctrl.$location.path(\"/d/explore/\" + indicator.dataEntitiesIds[0])\n                                    .search({\n                                    filters: ctrl._getFilterFieldNameByEntityContext(indicator),\n                                    default_filters: ctrl._getDefaultFiltes(indicator, item)\n                                });\n                            });\n                        }\n                    };\n                }\n                IndicatorChartTransitionUtil.prototype._getFilterFieldNameByAnomalyContext = function (indicator, item) {\n                    return indicator.dataEntitiesIds[0] + \".\" + indicator.anomalyTypeFieldName + \"=\" + (item.item.originalCategory || item.item.category);\n                };\n                IndicatorChartTransitionUtil.prototype._getFilterFieldNameByEntityContext = function (indicator) {\n                    return indicator.dataEntitiesIds[0] + \".normalized_username=\" + indicator.entityName;\n                };\n                IndicatorChartTransitionUtil.prototype._getDefaultFiltes = function (indicator, item) {\n                    var dateRange = this.dateRanges.getByDaysRange(90).replace(',', '::');\n                    return indicator.dataEntitiesIds[0] + \".event_time_utc=:\" + dateRange + \",\" + indicator.dataEntitiesIds[0] + \".event_score=>=0\";\n                };\n                IndicatorChartTransitionUtil.prototype.go = function (type, indicator, item) {\n                    var transitionFn = this._transitions[type];\n                    if (transitionFn) {\n                        transitionFn(indicator, item);\n                    }\n                };\n                IndicatorChartTransitionUtil.$inject = ['dateRanges', '$location', '$rootScope'];\n                return IndicatorChartTransitionUtil;\n            }());\n            angular.module('Fortscale.shared.services.indicatorTypeMapper')\n                .service('indicatorChartTransitionUtil', IndicatorChartTransitionUtil);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var symbolsMap = [\n                {\n                    symbolName: 'indicator-authentication-icon',\n                    anomalyType: [\n                        'auth_method',\n                        'Failure Code Anomaly',\n                        'High Number of Failed Authentications',\n                        'High Number of Successful Authentications',\n                    ]\n                },\n                {\n                    symbolName: 'indicator-data-usage-icon',\n                    anomalyType: [\n                        'Data Usage Anomaly',\n                        'Database Object Anomaly',\n                        'Database Server Anomaly',\n                        'Database Username Anomaly',\n                        'high Number of Accessed Database Objects',\n                        'High Number of Database Servers',\n                        'High Number of Database Users',\n                        'High Number of Printed Pages',\n                        'High Number of Successful Actions',\n                        'High Volume of Printed Data',\n                        'Printer Anomaly'\n                    ]\n                },\n                {\n                    symbolName: 'indicator-location-icon',\n                    anomalyType: [\n                        'Geolocation Anomaly',\n                        'Geolocation Sequence Anomaly',\n                        'High Number of Source Countries'\n                    ]\n                },\n                {\n                    symbolName: 'indicator-user-devices-icon',\n                    anomalyType: [\n                        'High Number of Source Devices',\n                        'Source Device Anomaly',\n                    ]\n                },\n                {\n                    symbolName: 'indicator-target-devices-icon',\n                    anomalyType: [\n                        'High Number of Target Devices',\n                        'Target Device Anomaly',\n                    ]\n                },\n                {\n                    symbolName: 'indicator-working-hours-icon',\n                    anomalyType: [\n                        'Activity Time Anomaly'\n                    ]\n                }\n            ];\n            var DEFAULT_SYMBOL_NAME = 'indicator-general-icon';\n            var IndicatorSymbolMapService = (function () {\n                function IndicatorSymbolMapService() {\n                }\n                /**\n                 * Takes an indicator and tries to find on the SymbolMap if the anomalyType correlates to any of the definitions\n                 * If so the symbolName is returned from the map, otherwise the default symbol name is returned.\n                 * @param indicator\n                 * @returns {string}\n                 */\n                IndicatorSymbolMapService.prototype.getSymbolName = function (indicator) {\n                    var symbolName;\n                    _.some(symbolsMap, function (symbolType) {\n                        if (symbolType.anomalyType.indexOf(indicator.anomalyType) !== -1) {\n                            symbolName = symbolType.symbolName;\n                            return true;\n                        }\n                    });\n                    return symbolName || DEFAULT_SYMBOL_NAME;\n                };\n                return IndicatorSymbolMapService;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .service('indicatorSymbolMap', IndicatorSymbolMapService);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            'use strict';\n            var UpperBarController = (function () {\n                function UpperBarController($scope, $element, $timeout) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$timeout = $timeout;\n                    this.isWatchRequestPending = false;\n                    this.WATCH_BUTTON_SELECTOR = '.watch-user-button-watch';\n                    this.UNWATCH_BUTTON_SELECTOR = '.watch-user-button-unwatch';\n                    this.ANIMATION_TIME = 500;\n                }\n                UpperBarController.prototype._shrinkElement = function (element) {\n                    element.css('transform', 'scaleY(0)');\n                };\n                UpperBarController.prototype._expandElement = function (element) {\n                    element.css('transform', 'scaleY(1)');\n                };\n                UpperBarController.prototype._setTransitions = function (shrinkElement, expandElement) {\n                    shrinkElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.84, 0.15) 0s\";\n                    expandElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.5, 1) \" + this.ANIMATION_TIME / 2 / 1000 + \"s\";\n                };\n                UpperBarController.prototype._initialWatchButtonFlip = function () {\n                    var selector = this.isUserFollowed ? this.UNWATCH_BUTTON_SELECTOR : this.WATCH_BUTTON_SELECTOR;\n                    var element = this.$element.find(selector);\n                    this._expandElement(element);\n                };\n                UpperBarController.prototype._watchButtonFlip = function () {\n                    var _this = this;\n                    var shrinkSelector = this.isUserFollowed ? this.WATCH_BUTTON_SELECTOR : this.UNWATCH_BUTTON_SELECTOR;\n                    var expandSelector = this.isUserFollowed ? this.UNWATCH_BUTTON_SELECTOR : this.WATCH_BUTTON_SELECTOR;\n                    var shrinkElement = this.$element.find(shrinkSelector);\n                    var expandElement = this.$element.find(expandSelector);\n                    this._setTransitions(shrinkElement, expandElement);\n                    this.$scope.$applyAsync(function () {\n                        _this._shrinkElement(shrinkElement);\n                        _this._expandElement(expandElement);\n                    });\n                };\n                UpperBarController.prototype.toggleUserWatchDelegate = function () {\n                    if (this.isWatchRequestPending) {\n                        return;\n                    }\n                    this.isWatchRequestPending = true;\n                    this._toggleUserWatchDelegate();\n                };\n                UpperBarController.prototype.$onInit = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.user && _this.user.followed; }, function (isUserFollowed) {\n                        if (isUserFollowed !== undefined) {\n                            _this.isWatchRequestPending = false;\n                            if (_this.isUserFollowed !== undefined) {\n                                _this.isUserFollowed = isUserFollowed;\n                                _this._watchButtonFlip();\n                            }\n                            else {\n                                _this.isUserFollowed = isUserFollowed;\n                                _this._initialWatchButtonFlip();\n                            }\n                        }\n                    });\n                };\n                UpperBarController.$inject = ['$scope', '$element', '$timeout'];\n                return UpperBarController;\n            }());\n            var userUpperBarComponent = {\n                controller: UpperBarController,\n                templateUrl: 'app/layouts/user/components/user-upper-bar/user-upper-bar.component.html',\n                bindings: {\n                    user: '<userModel',\n                    tags: '<',\n                    removeTagDelegate: '&',\n                    addTagDelegate: '&',\n                    //addNewTagDelegate: '&',\n                    _toggleUserWatchDelegate: '&toggleUserWatchDelegate',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userUpperBar', userUpperBarComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            'use strict';\n            var ProfileController = (function () {\n                function ProfileController() {\n                }\n                ProfileController.prototype.$onInit = function () {\n                };\n                ProfileController.$inject = [];\n                return ProfileController;\n            }());\n            var userProfileComponent = {\n                controller: ProfileController,\n                templateUrl: 'app/layouts/user/components/user-profile/user-profile.component.html',\n                bindings: {\n                    user: '<userModel'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userProfile', userProfileComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            'use strict';\n            var TagsController = (function () {\n                function TagsController($window, $scope, $element, $timeout) {\n                    this.$window = $window;\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$timeout = $timeout;\n                    this.NEW_TAG_INPUT_SELECTOR = '.add-tag-section--new-tag-input';\n                }\n                /**\n                 * Click handler for clicking anywhere. It will check if the click is outside of the dropdown, and if so it will close.\n                 *\n                 * @param {Event} evt\n                 * @private\n                 */\n                TagsController.prototype._dropDownWindowClickHandler = function (evt) {\n                    var _this = this;\n                    if (this.$element[0] === evt.target || !!this.$element.has(evt.target).length) {\n                        return;\n                    }\n                    else {\n                        this.$scope.$applyAsync(function () {\n                            _this._deactivateDropDown();\n                        });\n                    }\n                };\n                /**\n                 * Activate click watch for the entire document. It also contains the deregister assignment, and the cleanup.\n                 * @private\n                 */\n                TagsController.prototype._addDropDownWindowClickWatch = function () {\n                    var ctrl = this;\n                    // click handler function. Wraps the \"real\" function to fix the \"this\" while allowing deregistering.\n                    function dropDownOnWindowClickHandler(evt) {\n                        ctrl._dropDownWindowClickHandler(evt);\n                    }\n                    // Deregister assignment.\n                    this.dropDownWindowClickDeregister = function () {\n                        ctrl.$window.removeEventListener('click', dropDownOnWindowClickHandler, true);\n                    };\n                    // Add click handler\n                    ctrl.$window.addEventListener('click', dropDownOnWindowClickHandler, true);\n                    // Add cleanup handler\n                    ctrl.$scope.$on('$destroy', this.dropDownWindowClickDeregister);\n                };\n                /**\n                 * Activates the dropdown\n                 * @private\n                 */\n                TagsController.prototype._activateDropDown = function () {\n                    this.showAddTag = true;\n                    this._addDropDownWindowClickWatch();\n                };\n                /**\n                 * Deactivates the dropdown\n                 * @private\n                 */\n                TagsController.prototype._deactivateDropDown = function () {\n                    this.showAddTag = false;\n                    if (this.dropDownWindowClickDeregister) {\n                        this.dropDownWindowClickDeregister();\n                    }\n                };\n                /**\n                 * When component holds both the user object and the system tags, it will convert all the user tags into ITagDefinitions\n                 * @private\n                 */\n                TagsController.prototype._initUserTags = function () {\n                    var _this = this;\n                    this.userTags = [];\n                    _.each(this.user.tags, function (tagName) {\n                        var tag = _.filter(_this.tags, { name: tagName })[0];\n                        if (tag) {\n                            _this.userTags.push(tag);\n                        }\n                    });\n                };\n                /**\n                 * Watch for user and tags. Act when both are present.\n                 * @private\n                 */\n                TagsController.prototype._initWatches = function () {\n                    var _this = this;\n                    this.$scope.$watchGroup([\n                        function () { return _this.user; },\n                        function () { return _this.tags; }\n                    ], function (_a) {\n                        var user = _a[0], tags = _a[1];\n                        // // immute states\n                        // this.user = _.cloneDeep(user);\n                        // this.tags = _.cloneDeep(tags);\n                        // init tags if there's a user and tags\n                        if (user && tags) {\n                            _this._initUserTags();\n                        }\n                    });\n                };\n                /**\n                 * Toggles dropdown on and off\n                 */\n                TagsController.prototype.toggleDropDown = function () {\n                    if (this.showAddTag) {\n                        this._deactivateDropDown();\n                    }\n                    else {\n                        this._activateDropDown();\n                    }\n                };\n                /**\n                 * Toggles add-new-tag state\n                 */\n                TagsController.prototype.toggleAddNewTag = function () {\n                    this._deactivateDropDown();\n                    this.showNewTag = !this.showNewTag;\n                    this.newTagModel = null;\n                    if (this.showNewTag) {\n                        this.$timeout(function () {\n                            this.$element.find(this.NEW_TAG_INPUT_SELECTOR).focus();\n                        }.bind(this), 200);\n                    }\n                };\n                /**\n                 * Closes dropdown and invokes delegate\n                 * @param {ITagDefinition} tag\n                 */\n                TagsController.prototype.addTagItem = function (tag) {\n                    this._deactivateDropDown();\n                    this.addTagDelegate({ tag: tag });\n                };\n                /**\n                 * Handler for input keypress. Fires addNewTagDelegate when key is 13 (i.e. Enter)\n                 * @param {KeyboardEvent} evt\n                 */\n                TagsController.prototype.newTagKeyPressHandler = function (evt) {\n                    if (evt.keyCode === 13) {\n                        if (this.newTagModel) {\n                            //this.addNewTagDelegate({tagName: this.newTagModel});\n                            var tag = { name: this.newTagModel, displayName: this.newTagModel, active: true, createsIndicator: false, rules: undefined,\n                                isAssignable: undefined, predefined: false };\n                            this.addTagDelegate({ tag: tag });\n                            this.newTagModel = null;\n                            this.showNewTag = false;\n                        }\n                    }\n                    else if (evt.keyCode === 27) {\n                        this.showNewTag = false;\n                        this.newTagModel = null;\n                    }\n                };\n                /**\n                 * Handler for input lost focus. Fires addNewTagDelegate.\n                 */\n                TagsController.prototype.newTagLostFocusHandler = function () {\n                    this.showNewTag = false;\n                    this.newTagModel = null;\n                };\n                TagsController.prototype.$onInit = function () {\n                    this._initWatches();\n                };\n                TagsController.$inject = ['$window', '$scope', '$element', '$timeout'];\n                return TagsController;\n            }());\n            var userTagsComponent = {\n                controller: TagsController,\n                templateUrl: 'app/layouts/user/components/user-tags/user-tags.component.html',\n                bindings: {\n                    user: '<userModel',\n                    tags: '<tags',\n                    removeTagDelegate: '&',\n                    addTagDelegate: '&',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userTags', userTagsComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            'use strict';\n            var ActivityCountriesController = (function () {\n                function ActivityCountriesController($scope, $element, countryCodesUtil, amMapsUtils) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.countryCodesUtil = countryCodesUtil;\n                    this.amMapsUtils = amMapsUtils;\n                    this.areasOn = true;\n                    this.imagesOn = true;\n                }\n                /**\n                 * Adds percent to each user-country\n                 * @returns {IAugmentedActivityUserCountry[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._AugmentUserCountries = function () {\n                    var _this = this;\n                    var userCountries = _.cloneDeep(this._userCountries);\n                    var sum = _.sumBy(userCountries, 'count');\n                    _.each(userCountries, function (userCountry) {\n                        userCountry.percent = Math.round(userCountry.count / sum * 10000) / 100;\n                        userCountry.alpha2 = _this.countryCodesUtil.getAlpha2ByCountryName(userCountry.country);\n                    });\n                    return userCountries;\n                };\n                /**\n                 * Sorts user countries\n                 *\n                 * @returns {IAugmentedActivityUserCountry[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._sortUserCountries = function () {\n                    return _.orderBy(this.userCountries, [\n                        function (userCountry) { return userCountry.country === 'Others'; },\n                        'count'\n                    ], [\n                        'asc',\n                        'desc'\n                    ]);\n                };\n                /**\n                 * Returns a list of areas to be used in the map\n                 * @returns {Array<{id: string, color: string}>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getAreasForMapDataProvider = function () {\n                    var _this = this;\n                    return _.map(this.organizationCountries, function (orgCountry) {\n                        return {\n                            id: _this.countryCodesUtil.getAlpha2ByCountryName(orgCountry.country),\n                            color: '#024d88'\n                        };\n                    });\n                };\n                /**\n                 * Returns a list of image map config objects.\n                 * @returns {IAmMapsUtilsBubbleConfig[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getBubbles = function () {\n                    return this.amMapsUtils.getBubbles({\n                        map: this.map,\n                        // Filter out countries without alpha2 (i.e. others) and map to return map config objects\n                        countries: _.map(_.filter(this.userCountries, 'alpha2'), function (userCountry) {\n                            return {\n                                alpha2: userCountry.alpha2,\n                                name: userCountry.country,\n                                value: userCountry.percent,\n                                color: 'rgba(83, 194, 228, 0.5)'\n                            };\n                        })\n                    });\n                };\n                /**\n                 * Returns a list of relevant map objects to be used as a zoom group\n                 * @param {{}} map\n                 * @param {boolean=} withoutOrganization\n                 * @param {boolean=} withoutUser\n                 * @returns {Array<{}>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getRelevantMapObjects = function (map, withoutOrganization, withoutUser) {\n                    var _this = this;\n                    var zoomToAreasIds;\n                    // Add organization map ids (if not withoutOrganization)\n                    if (withoutOrganization) {\n                        zoomToAreasIds = [];\n                    }\n                    else {\n                        zoomToAreasIds = _.map(this.organizationCountries, function (oCountry) { return _this.countryCodesUtil.getAlpha2ByCountryName(oCountry.country); });\n                    }\n                    // Add user map ids (if not withoutUser)\n                    if (!withoutUser) {\n                        _.each(this.userCountries, function (userCountry) { return zoomToAreasIds.push(userCountry.alpha2); });\n                    }\n                    // take ids and get map objects. Push map object to zoomToAreas.\n                    var zoomToAreas = [];\n                    _.each(zoomToAreasIds, function (id) {\n                        var area = map.getObjectById(id);\n                        if (area) {\n                            zoomToAreas.push(area);\n                        }\n                    });\n                    return zoomToAreas;\n                };\n                /**\n                 * Initiates the amMap map object\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initMap = function () {\n                    if (!this.userCountries || !this.organizationCountries) {\n                        return;\n                    }\n                    var ctrl = this;\n                    // Create a map\n                    this.map = AmCharts.makeChart('top-countries-map', {\n                        type: 'map',\n                        projection: 'miller',\n                        imagesSettings: {\n                            balloonText: '<span style=\"font-size:14px;\"><b>[[title]]</b>: [[value]]%</span>',\n                            selectable: false\n                        },\n                        areasSettings: {\n                            selectedColor: '#024d88',\n                            color: '#babdbe',\n                            selectable: false\n                        },\n                        listeners: [\n                            {\n                                event: 'rendered',\n                                method: function (evt) {\n                                    ctrl.mapOriginalZoomX = evt.chart.zoomX();\n                                    ctrl.mapOriginalZoomY = evt.chart.zoomY();\n                                    setTimeout(function () {\n                                        evt.chart.zoomToGroup(ctrl._getRelevantMapObjects(evt.chart));\n                                    }, 500);\n                                }\n                            }\n                        ],\n                        zoomControl: {\n                            top: 1,\n                            buttonSize: window.innerHeight < 700 ? 25 :\n                                window.innerHeight < 1000 ? 30 : 35\n                        },\n                        dataProvider: {\n                            map: 'worldHigh',\n                            getAreasFromMap: true,\n                            areas: this._getAreasForMapDataProvider(),\n                            images: this._getBubbles(),\n                            zoomLevel: 1,\n                            zoomLatitude: \"\",\n                            zoomLongitude: \"\"\n                        }\n                    });\n                };\n                /**\n                 * Rerenders the map in the previous zoom level and position\n                 * @private\n                 */\n                ActivityCountriesController.prototype._rerenderMap = function () {\n                    this.map.dataProvider.zoomLevel = this.map.zoomLevel();\n                    this.map.dataProvider.zoomLatitude = this.map.zoomLatitude();\n                    this.map.dataProvider.zoomLongitude = this.map.zoomLongitude();\n                    this.map.validateData();\n                    var groups = this._getRelevantMapObjects(this.map, !this.areasOn, !this.imagesOn);\n                    if (groups.length) {\n                        this.map.zoomToGroup(groups);\n                    }\n                    else {\n                        this.map.zoomTo(1, this.mapOriginalZoomX, this.mapOriginalZoomY);\n                    }\n                };\n                /**\n                 * Initiates user countries watch\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initUserCountriesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._userCountries; }, function () {\n                        if (_this._userCountries) {\n                            _this.userCountries = _this._AugmentUserCountries();\n                            _this.userCountries = _this._sortUserCountries();\n                            _this._initMap();\n                        }\n                    });\n                };\n                /**\n                 * Initiates watch on _organizationCountries. Clones it when arrives (for immutability)\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initOrganizationCountriesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._organizationCountries; }, function () {\n                        if (_this._organizationCountries) {\n                            _this.organizationCountries =\n                                _.cloneDeep(_this._organizationCountries);\n                            _this.mapAreas = _this._getAreasForMapDataProvider();\n                            _this._initMap();\n                        }\n                    });\n                };\n                /**\n                 * Resize handler. Will redraw the map on a resize.\n                 *\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initResizeWatch = function () {\n                    var ctrl = this;\n                    function resizeHandler() {\n                        ctrl.map.clear();\n                        ctrl.map = null;\n                        delete ctrl[\"map\"];\n                        ctrl._initMap();\n                    }\n                    window.addEventListener('resize', resizeHandler, false);\n                    this.$scope.$on('$destroy', function () {\n                        window.removeEventListener('resize', resizeHandler, false);\n                    });\n                };\n                /**\n                 * A cb function that is used in a filter to remove out any members with a count of zero\n                 * @param {IActivityUserCountry} userCountry\n                 * @returns {boolean}\n                 */\n                ActivityCountriesController.prototype.hideZeroCountFilter = function (userCountry) {\n                    return userCountry.count !== 0;\n                };\n                /**\n                 * Changes the state of the map's Areas (i.e. organization).\n                 */\n                ActivityCountriesController.prototype.toggleAreas = function () {\n                    if (!this.areasOn) {\n                        this.map.dataProvider.areas = this._getAreasForMapDataProvider();\n                    }\n                    else {\n                        this.map.dataProvider.areas = [];\n                    }\n                    this.areasOn = !this.areasOn;\n                    this._rerenderMap();\n                };\n                /**\n                 * Changes the state of the map's images (i.e. user bubbles)\n                 */\n                ActivityCountriesController.prototype.toggleImages = function () {\n                    if (!this.imagesOn) {\n                        this.map.dataProvider.images = this._getBubbles();\n                    }\n                    else {\n                        this.map.dataProvider.images = [];\n                    }\n                    this.imagesOn = !this.imagesOn;\n                    this._rerenderMap();\n                };\n                ActivityCountriesController.prototype.$onInit = function () {\n                    this._initUserCountriesWatch();\n                    this._initOrganizationCountriesWatch();\n                    this._initResizeWatch();\n                };\n                ActivityCountriesController.$inject = ['$scope', '$element', 'countryCodesUtil', 'amMapsUtils'];\n                return ActivityCountriesController;\n            }());\n            var userActivityCountriesComponent = {\n                controller: ActivityCountriesController,\n                templateUrl: 'app/layouts/user/components/user-activity-countries/user-activities-countries.component.html',\n                bindings: {\n                    _userCountries: '<userCountries',\n                    _organizationCountries: '<organizationCountries',\n                    user: '<userModel'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userActivityCountries', userActivityCountriesComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var ActivityAuthenticationController = (function () {\n                function ActivityAuthenticationController($scope, $timeout) {\n                    this.$scope = $scope;\n                    this.$timeout = $timeout;\n                    this.authPercent = 100;\n                }\n                /**\n                 * Takes received data and calculates the success failure and icon ratio.\n                 * @private\n                 */\n                ActivityAuthenticationController.prototype._changeAuthPercents = function () {\n                    // Calc basic\n                    var total = this.authentications.success + this.authentications.failed;\n                    var success = this.authentications.success / total;\n                    var failure = 1 - success;\n                    // Normalize results to show\n                    this.successPercent = Math.round(success * 100) || 0;\n                    this.failurePercent = Math.round(failure * 100) || 0;\n                    // Normalize icon ratio to show. The ratio is smaller than 100% because of the way icons are placed.\n                    this.authPercent = (Math.round(success * 74) + 13) || 100;\n                };\n                ActivityAuthenticationController.prototype.$onInit = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.authentications; }, function () {\n                        if (_this.authentications) {\n                            _this.$timeout(_this._changeAuthPercents.bind(_this), 500);\n                        }\n                    });\n                };\n                ActivityAuthenticationController.$inject = ['$scope', '$timeout'];\n                return ActivityAuthenticationController;\n            }());\n            var activityAuthenticationComponent = {\n                controller: ActivityAuthenticationController,\n                templateUrl: 'app/layouts/user/components/user-activity-authentication/user-activity-authentication.component.html',\n                bindings: {\n                    authentications: '<'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userActivityAuthentication', activityAuthenticationComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var ActivityWorkingHoursController = (function () {\n                function ActivityWorkingHoursController($scope, $timeout) {\n                    this.$scope = $scope;\n                    this.$timeout = $timeout;\n                }\n                /**\n                 * \"Activates\" an hour (which will, via the template, add an 'active' class to the hour-bar)\n                 * @param hour\n                 * @private\n                 */\n                ActivityWorkingHoursController.prototype._setHourActive = function (hour) {\n                    hour.active = !hour.active;\n                };\n                /**\n                 * Iterates through received working hours, and activates each corresponding hour on workingHours.\n                 * @private\n                 */\n                ActivityWorkingHoursController.prototype._digestWorkingHours = function () {\n                    var _this = this;\n                    // Reset the index, and sort received working hours (to make sure hours are in order)\n                    var index = 0;\n                    var workingHours = _.sortBy(this._workingHours, 'hour');\n                    // Iterate through received working hours, and turn on each of this.workingHours\n                    _.each(workingHours, function (workingHour) {\n                        // Make sure received hours do not break the method.\n                        if (workingHour.hour > 24 || workingHour.hour < 1) {\n                            return;\n                        }\n                        // Move forward on this.workingHours, and stop and set when an hour matches.\n                        var cont = true;\n                        while (cont) {\n                            if (_this.workingHours[index].hour === workingHour.hour) {\n                                // Activate hour with a timeout to create a cascade effect.\n                                _this.$timeout(_this._setHourActive.bind(_this, _this.workingHours[index]), index * 100);\n                                cont = false;\n                            }\n                            index += 1;\n                        }\n                    });\n                };\n                /**\n                 * Creates a new working hours list and returns it\n                 * @returns {Array}\n                 * @private\n                 */\n                ActivityWorkingHoursController.prototype._generateWorkingHoursList = function () {\n                    var wh = [];\n                    for (var i = 1; i <= 24; i += 1) {\n                        wh.push({\n                            hour: i,\n                            active: false\n                        });\n                    }\n                    return wh;\n                };\n                /**\n                 * Sets to this.workingHours a list of deactivated IWorkingHour\n                 * @private\n                 */\n                ActivityWorkingHoursController.prototype._initWorkingHours = function () {\n                    this.workingHours = this._generateWorkingHoursList();\n                };\n                /**\n                 * Sets watch to received workingHours. When workingHours is received a new list is set to this.workingHours,\n                 * and the received items are digested.\n                 * @private\n                 */\n                ActivityWorkingHoursController.prototype._initWorkingHoursWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._workingHours; }, function (workingHours) {\n                        if (workingHours && workingHours.length) {\n                            _this._initWorkingHours();\n                            _this._digestWorkingHours();\n                        }\n                    });\n                };\n                /**\n                 * Generates the time as an am/pm string\n                 * @param workingHour\n                 * @returns {any}\n                 */\n                ActivityWorkingHoursController.prototype.getHourBarTitle = function (workingHour) {\n                    var hour = workingHour.hour % 12;\n                    var isAm = workingHour.hour < 13;\n                    if (hour === 0) {\n                        hour = 12;\n                        isAm = !isAm;\n                    }\n                    return hour + (isAm ? ' AM' : ' PM');\n                };\n                ;\n                ActivityWorkingHoursController.prototype.$onInit = function () {\n                    // init working hours\n                    this._initWorkingHours();\n                    this._initWorkingHoursWatch();\n                };\n                ActivityWorkingHoursController.$inject = ['$scope', '$timeout'];\n                return ActivityWorkingHoursController;\n            }());\n            var activityWorkingHoursComponent = {\n                controller: ActivityWorkingHoursController,\n                templateUrl: 'app/layouts/user/components/user-activity-working-hours/user-activity-working-hours.component.html',\n                bindings: {\n                    _workingHours: '<workingHours'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userActivityWorkingHours', activityWorkingHoursComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var ActivityDevicesController = (function () {\n                function ActivityDevicesController($scope, $timeout, deviceUtilsService) {\n                    this.$scope = $scope;\n                    this.$timeout = $timeout;\n                    this.deviceUtilsService = deviceUtilsService;\n                    this._devices = [];\n                    this.devices = null;\n                }\n                //Remove all devices with no count, if any returned from server.\n                ActivityDevicesController.prototype._removeZeroCount = function (devices) {\n                    //return new array of IUserDevices with devices\n                    return _.filter(devices, function (device) { return device.count > 0; });\n                };\n                /**\n                 * Takes received source devices, sorts, repositions 'other', and adds percent to each, then stores on devices\n                 * @private\n                 */\n                ActivityDevicesController.prototype._digestDevices = function () {\n                    var devices;\n                    // sort _devices\n                    devices = _.orderBy(_.cloneDeep(this._devices), 'count', 'desc');\n                    // pluck \"other\" and push to the end\n                    this.deviceUtilsService.repositionOthers(devices);\n                    // remove all items with zero count\n                    devices = this.deviceUtilsService.removeZeroCount(devices);\n                    devices = this.deviceUtilsService.updatePercentageOnDevice(devices);\n                    this.devices = devices;\n                };\n                ActivityDevicesController.prototype._sortDevices = function () {\n                    this.devices = _.orderBy(this.devices, [\n                        function (userDevice) { return userDevice.deviceName === 'Others'; },\n                        'count'\n                    ], [\n                        'asc',\n                        'desc'\n                    ]);\n                };\n                /**\n                 * Activates the bars\n                 * @private\n                 */\n                ActivityDevicesController.prototype._activateBars = function () {\n                    var _this = this;\n                    _.each(this.devices, function (device, index) {\n                        _this.$timeout(function () {\n                            device.active = true;\n                        }, ((_this.devices.length - 1) - index) * 400 + 200);\n                    });\n                };\n                /**\n                 * Initiates watch on received source devices\n                 * @private\n                 */\n                ActivityDevicesController.prototype._initDevicesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._devices; }, function (devices) {\n                        if (devices && devices.length) {\n                            _this._digestDevices();\n                            _this._sortDevices();\n                            _this._activateBars();\n                        }\n                        else if (devices) {\n                            _this.devices = [];\n                        }\n                    });\n                };\n                ActivityDevicesController.prototype.$onInit = function () {\n                    this._initDevicesWatch();\n                };\n                ActivityDevicesController.$inject = ['$scope', '$timeout', 'deviceUtilsService'];\n                return ActivityDevicesController;\n            }());\n            var activityDevicesComponent = {\n                controller: ActivityDevicesController,\n                templateUrl: 'app/layouts/user/components/user-activity-devices/user-activity-devices.component.html',\n                bindings: {\n                    _devices: '<devices',\n                    description: '@'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userActivityDevices', activityDevicesComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var ActivityDataUsagesController = (function () {\n                function ActivityDataUsagesController($scope, $timeout, $filter) {\n                    this.$scope = $scope;\n                    this.$timeout = $timeout;\n                    this.$filter = $filter;\n                    this._dataUsages = [];\n                    /**\n                     * Object used as a map for received values\n                     * @type {{[vpn_session.databucket_histogram]: {title: string, icon: string, value: any}, [oracle.db_object_histogram]: {title: string, icon: string, value: any}, [prnlog.file_size_histogram]: {title: string, icon: string, value: any}}}\n                     */\n                    this.dataUsageMap = {\n                        'vpn_session.databucket_histogram': {\n                            title: 'VPN',\n                            icon: 'data-usage-vpn-icon',\n                            value: this._vpnValueProcess.bind(this)\n                        },\n                        'oracle.db_object_histogram': {\n                            title: 'Oracle DB',\n                            icon: 'data-usage-oracle-icon',\n                            value: this._oracleValueProcess.bind(this)\n                        },\n                        'prnlog.file_size_histogram': {\n                            title: 'Print',\n                            icon: 'data-usage-print-icon',\n                            value: this._printValueProcess.bind(this)\n                        }\n                    };\n                }\n                ActivityDataUsagesController.prototype._prettyBytes = function (val) {\n                    var prettyBytesFilter = this.$filter('prettyBytes');\n                    return prettyBytesFilter(val);\n                };\n                ActivityDataUsagesController.prototype._vpnValueProcess = function (val) {\n                    return this._prettyBytes(val);\n                };\n                ActivityDataUsagesController.prototype._oracleValueProcess = function (val) {\n                    return val !== 1 ? val + \" Accesses\" : \"1 Access\";\n                };\n                ActivityDataUsagesController.prototype._printValueProcess = function (val) {\n                    return this._prettyBytes(val);\n                };\n                /**\n                 * Digests received dataUsages. Uses map to parse received values.\n                 * @private\n                 */\n                ActivityDataUsagesController.prototype._digestDataUsages = function () {\n                    var _this = this;\n                    this.dataUsages = _.map(this._dataUsages, function (dataUsage) {\n                        var dataUsageMap = _this.dataUsageMap[dataUsage.dataEntityId];\n                        return {\n                            icon: dataUsageMap.icon,\n                            title: dataUsageMap.title,\n                            value: dataUsageMap.value(dataUsage.value || 0)\n                        };\n                    });\n                    // populate missing rows\n                    // Iterate through the keys, and find if any are missing, if so populate with zero value\n                    _.each(['vpn_session.databucket_histogram', 'oracle.db_object_histogram', 'prnlog.file_size_histogram'], function (dataEntityId) {\n                        if (!_.some(_this._dataUsages, function (dataUsage) { return dataUsage.dataEntityId === dataEntityId; })) {\n                            var dataUsageMap = _this.dataUsageMap[dataEntityId];\n                            _this.dataUsages.push({\n                                icon: dataUsageMap.icon,\n                                title: dataUsageMap.title,\n                                value: dataUsageMap.value(0)\n                            });\n                        }\n                    });\n                };\n                /**\n                 * Initiates watch on received dataUsages\n                 * @private\n                 */\n                ActivityDataUsagesController.prototype._initDataUsagesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._dataUsages; }, function () {\n                        if (_this._dataUsages && _.isArray(_this._dataUsages)) {\n                            _this._digestDataUsages();\n                        }\n                    });\n                };\n                ActivityDataUsagesController.prototype.$onInit = function () {\n                    this._initDataUsagesWatch();\n                };\n                ActivityDataUsagesController.$inject = ['$scope', '$timeout', '$filter'];\n                return ActivityDataUsagesController;\n            }());\n            var activityDataUsagesComponent = {\n                controller: ActivityDataUsagesController,\n                templateUrl: 'app/layouts/user/components/user-activity-data-usage/user-activity-data-usage.component.html',\n                bindings: {\n                    _dataUsages: '<ddataUsages'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userActivityDataUsages', activityDataUsagesComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var RiskScoreController = (function () {\n                function RiskScoreController($scope, $timeout, $stateParams, $element, $q, userIndicatorsUtils) {\n                    this.$scope = $scope;\n                    this.$timeout = $timeout;\n                    this.$stateParams = $stateParams;\n                    this.$element = $element;\n                    this.$q = $q;\n                    this.userIndicatorsUtils = userIndicatorsUtils;\n                    this.USER_RISK_SCORE_LIST_SELECTOR_NAME = '.user-risk-score-list';\n                    this.ALERT_SELECTOR_PREFIX = '.alert-id-';\n                    this.INDICATOR_SELECTOR_PREFIX = '.indicator-id-';\n                    this.INDICATORS_LIST_SELECTOR = '.indicators-list-wrapper';\n                    this.INDICATORS_MASK_SELECTOR = '.indicators-list-mask';\n                    this.SCROLL_ANIMATION_TIME = 300;\n                    this.OPEN_INDICATOR_ANIMATION_TIME = 300;\n                    this.CLOSE_INDICATOR_ANIMATION_TIME = 300;\n                    this.alertSortBys = [\n                        {\n                            text: 'Severity',\n                            value: 'severity'\n                        },\n                        {\n                            text: 'Date',\n                            value: 'date'\n                        }\n                    ];\n                }\n                /**\n                 * Returns the risk score element\n                 * @returns {ng.IAugmentedJQuery}\n                 * @private\n                 */\n                RiskScoreController.prototype._getUserRiskScoreElement = function () {\n                    if (!this._userRiskScoreElement) {\n                        this._userRiskScoreElement = this.$element.find(this.USER_RISK_SCORE_LIST_SELECTOR_NAME);\n                    }\n                    return this._userRiskScoreElement;\n                };\n                /**\n                 * Returns an alert element\n                 * @param alertId\n                 * @returns {any}\n                 * @private\n                 */\n                RiskScoreController.prototype._getAlertElement = function (alertId) {\n                    // return a specific alert element (not the active one)\n                    if (alertId) {\n                        return this.$element.find(this.ALERT_SELECTOR_PREFIX + alertId);\n                    }\n                    if (!this.activeAlertId) {\n                        return null;\n                    }\n                    if (!this._alertElement) {\n                        this._alertElement = this.$element.find(this.ALERT_SELECTOR_PREFIX + this.activeAlertId);\n                    }\n                    return this._alertElement;\n                };\n                /**\n                 * Returns an indicators list element\n                 * @returns {JQuery}\n                 * @private\n                 */\n                RiskScoreController.prototype._getIndicatorsListElement = function () {\n                    if (!this._getAlertElement()) {\n                        return null;\n                    }\n                    if (!this._indicatorsListElement) {\n                        this._indicatorsListElement = this._getAlertElement().find(this.INDICATORS_LIST_SELECTOR);\n                    }\n                    return this._indicatorsListElement;\n                };\n                RiskScoreController.prototype._getIndicatorElement = function () {\n                    if (!this._getIndicatorsListElement() || !this.activeIndicatorId) {\n                        return null;\n                    }\n                    if (!this._indicatorElement) {\n                        this._indicatorElement = this._getIndicatorsListElement().find(this.INDICATOR_SELECTOR_PREFIX + this.activeIndicatorId);\n                    }\n                    return this._indicatorElement;\n                };\n                /**\n                 * Returns an indicators list mask element\n                 * @param alertElement\n                 * @returns {any}\n                 * @private\n                 */\n                RiskScoreController.prototype._getIndicatorsMaskElement = function (alertElement) {\n                    // return a specific mask element and not the active alert element\n                    if (alertElement) {\n                        return alertElement.find(this.INDICATORS_MASK_SELECTOR);\n                    }\n                    if (!this._getAlertElement()) {\n                        return null;\n                    }\n                    if (!this._indicatorsMaskElement) {\n                        this._indicatorsMaskElement = this._getAlertElement().find(this.INDICATORS_MASK_SELECTOR);\n                    }\n                    return this._indicatorsMaskElement;\n                };\n                /**\n                 * Calculates an offset between two element\n                 * @param targetElement\n                 * @param containerElement\n                 * @returns {number}\n                 * @private\n                 */\n                RiskScoreController.prototype._calcTopOffsetInContainer = function (targetElement, containerElement) {\n                    var childPos = targetElement.offset();\n                    var parentPos = containerElement.offset();\n                    return childPos.top - parentPos.top;\n                };\n                RiskScoreController.prototype._isIndicatorElementOutOfBounds = function () {\n                    var userRiskElement = this._getUserRiskScoreElement();\n                    var indicatorElement = this._getIndicatorElement();\n                    var offset = this._calcTopOffsetInContainer(indicatorElement, userRiskElement);\n                    return (offset < 0 || offset + indicatorElement.outerHeight() > userRiskElement.outerHeight());\n                };\n                /**\n                 * Animates indicators open.\n                 * @private\n                 */\n                RiskScoreController.prototype._animateOpenIndicators = function () {\n                    var _this = this;\n                    return this.$q(function (resolve, reject) {\n                        // Get alert element and stop animation if alert does not exist\n                        var alertElement = _this._getAlertElement();\n                        if (!alertElement) {\n                            return;\n                        }\n                        // Get Elements\n                        var indicatorsListElement = _this._getIndicatorsListElement();\n                        var indicatorsMaskElement = _this._getIndicatorsMaskElement();\n                        // Do not open if mask element already open\n                        if (indicatorsMaskElement.outerHeight() > 0) {\n                            return resolve();\n                        }\n                        //calc height\n                        var height = indicatorsListElement.outerHeight();\n                        // animate height\n                        indicatorsMaskElement.animate({ height: height }, _this.OPEN_INDICATOR_ANIMATION_TIME, function () {\n                            resolve();\n                        });\n                    });\n                };\n                /**\n                 * Animates indicators list close\n                 * @param alertId\n                 * @private\n                 */\n                RiskScoreController.prototype._animateCloseIndicators = function (alertId) {\n                    var alertElement = this._getAlertElement(alertId);\n                    var indicatorsMaskElement = this._getIndicatorsMaskElement(alertElement);\n                    indicatorsMaskElement.animate({ height: 0 }, this.CLOSE_INDICATOR_ANIMATION_TIME);\n                };\n                /**\n                 * Animates a scroll to alert in the list\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                RiskScoreController.prototype._animateActiveAlert = function () {\n                    var _this = this;\n                    return this.$q(function (resolve, reject) {\n                        var userRiskElement = _this._getUserRiskScoreElement();\n                        var alertElement = _this._getAlertElement();\n                        userRiskElement.animate({ scrollTop: _this._calcTopOffsetInContainer(alertElement, userRiskElement) }, _this.SCROLL_ANIMATION_TIME, function () {\n                            resolve();\n                        });\n                    });\n                };\n                /**\n                 * Animates an active indicator\n                 * @param cb\n                 * @returns {IPromise<T>}\n                 * @private\n                 */\n                RiskScoreController.prototype._animateActiveIndicator = function () {\n                    var _this = this;\n                    return this.$q(function (resolve, reject) {\n                        var userRiskElement = _this._getUserRiskScoreElement();\n                        var alertElement = _this._getAlertElement();\n                        var indicatorsListElement = _this._getIndicatorsListElement();\n                        var indicatorElement = _this._getIndicatorElement();\n                        var offset;\n                        //find offset of indicator item in indicators list\n                        var indicatorInIndicatorsListOffset = _this._calcTopOffsetInContainer(indicatorElement, indicatorsListElement);\n                        // if the indicator top plus height plus alert element height fits in the user risk element\n                        // then scroll to alert\n                        var indicatorBottom = indicatorInIndicatorsListOffset + indicatorElement.outerHeight() +\n                            alertElement.find('.alert-item-inner-wrapper').outerHeight();\n                        if (indicatorBottom <= userRiskElement.outerHeight()) {\n                            offset = _this._calcTopOffsetInContainer(alertElement, userRiskElement);\n                        }\n                        else {\n                            // If the indicator bottom is greater then risk element height then scroll to indicator element\n                            offset = _this._calcTopOffsetInContainer(indicatorElement, userRiskElement);\n                        }\n                        userRiskElement.animate({ scrollTop: offset + userRiskElement.scrollTop() }, _this.SCROLL_ANIMATION_TIME, function () {\n                            resolve();\n                        });\n                    });\n                };\n                /**\n                 * Renders the sort dropdown control\n                 * @private\n                 */\n                RiskScoreController.prototype._renderSortControlDropdown = function () {\n                    var ctrl = this;\n                    function onChange(evt) {\n                        ctrl.selectedAlertSortBy = evt.sender.dataItem();\n                        ctrl.$scope.$applyAsync(function () {\n                            ctrl._orderAlerts();\n                        });\n                    }\n                    //Create the drop down\n                    $(\".sort-drop-down\").kendoDropDownList({\n                        dataTextField: \"text\",\n                        dataValueField: \"value\",\n                        dataSource: ctrl.alertSortBys,\n                        index: 0,\n                        change: onChange\n                    });\n                    //Select the first element\n                    ctrl.selectedAlertSortBy = this.alertSortBys[0];\n                    ctrl._orderAlerts();\n                };\n                /**\n                 * Initiates a user watch. On new user, clones the user and places on controller\n                 * @private\n                 */\n                RiskScoreController.prototype._initUserWatch = function () {\n                    var _this = this;\n                    var userWatchUnregister;\n                    this.$scope.$watch(function () { return _this._user; }, function (user) {\n                        if (user) {\n                            _this.user = _.cloneDeep(_this._user);\n                            _this._setActiveIds();\n                        }\n                    });\n                };\n                /**\n                 * Initates an alerts watch. On new alerts, clones, orders, and animates to the relevant alert.\n                 * @private\n                 */\n                RiskScoreController.prototype._initAlertsWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._alerts; }, function (alerts) {\n                        if (alerts) {\n                            _this.alerts = _.cloneDeep(_this._alerts);\n                            _this._orderAlerts();\n                            _this._orderIndicators();\n                            _this._filterIndicators();\n                            _this._emitAlertsChange();\n                            _this._setActiveIds();\n                            // Scroll to alert if on alert state\n                            if (_this.$stateParams.alertId /*&& !this.$stateParams.indicatorId*/) {\n                                _this.$scope.$applyAsync(function () {\n                                    _this._animateActiveAlert()\n                                        .then(function () {\n                                        _this._animateOpenIndicators();\n                                    });\n                                });\n                            }\n                            // Scroll to indicator if on indicator state\n                            if (_this.$stateParams.alertId && _this.$stateParams.indicatorId) {\n                                _this.$scope.$applyAsync(function () {\n                                    _this._animateOpenIndicators()\n                                        .then(function () {\n                                        _this._animateActiveIndicator();\n                                    });\n                                });\n                            }\n                        }\n                    });\n                };\n                /**\n                 * Listener for state changes start. On a change start, sets activeAlertId, and animates.\n                 * @private\n                 */\n                RiskScoreController.prototype._initStateChangeWatch = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    this.$scope.$on('$stateChangeSuccess', function (evt, toState, toParams, fromState, fromParams) {\n                        _this._setActiveIds();\n                        _this.$scope.$applyAsync(function () {\n                            if (_this.$stateParams.alertId /*&& this.$stateParams.indicatorId*/) {\n                                _this._animateOpenIndicators()\n                                    .then(function () {\n                                    if (_this.$stateParams.indicatorId && _this._isIndicatorElementOutOfBounds()) {\n                                        _this._animateActiveIndicator();\n                                    }\n                                });\n                            }\n                            if (fromParams.alertId && toParams.alertId !== fromParams.alertId) {\n                                _this._animateCloseIndicators(fromParams.alertId);\n                            }\n                        });\n                    });\n                };\n                RiskScoreController.prototype._emitAlertsChange = function () {\n                    var _this = this;\n                    this.$scope.$applyAsync(function () {\n                        _this.$scope.$emit('userRiskScore:AlertsSorted', _this.alerts);\n                    });\n                };\n                /**\n                 * Orders alerts and returns an ordered list\n                 * @returns {any}\n                 * @private\n                 */\n                RiskScoreController.prototype._orderAlerts = function () {\n                    if (!this.alerts || !this.selectedAlertSortBy) {\n                        return;\n                    }\n                    switch (this.selectedAlertSortBy.value) {\n                        case 'severity':\n                            this.alerts = _.clone(_.orderBy(this.alerts, ['userScoreContributionFlag', 'severityCode', 'startDate'], ['desc', 'asc', 'desc']));\n                            this._emitAlertsChange();\n                            break;\n                        case 'date':\n                            this.alerts = _.clone(_.orderBy(this.alerts, ['userScoreContributionFlag', 'startDate', 'severityCode'], ['desc', 'desc', 'asc']));\n                            this._emitAlertsChange();\n                            break;\n                        default:\n                            return;\n                    }\n                };\n                RiskScoreController.prototype._orderIndicators = function () {\n                    var _this = this;\n                    if (!this.alerts) {\n                        return;\n                    }\n                    _.each(this.alerts, function (alert) {\n                        alert.evidences = _this.userIndicatorsUtils.orderIndicators(alert.evidences);\n                    });\n                };\n                RiskScoreController.prototype._filterIndicators = function () {\n                    var _this = this;\n                    if (!this.alerts) {\n                        return;\n                    }\n                    _.each(this.alerts, function (alert) {\n                        // filter out 'tag' indicators and save the filtered indicators on tagEvidence attribute\n                        alert.tagEvidences = _this.userIndicatorsUtils.getTagsIndicators(alert.evidences);\n                        alert.evidences =\n                            _this.userIndicatorsUtils.filterIndicators(alert.evidences);\n                    });\n                };\n                RiskScoreController.prototype._setActiveIds = function () {\n                    this.activeAlertId = this.$stateParams.alertId || null;\n                    this.activeIndicatorId = this.$stateParams.indicatorId || null;\n                    // nullify elements\n                    this._userRiskScoreElement = null;\n                    this._alertElement = null;\n                    this._indicatorsListElement = null;\n                    this._indicatorElement = null;\n                    this._indicatorsMaskElement = null;\n                };\n                RiskScoreController.prototype.$onInit = function () {\n                    this._initUserWatch();\n                    this._initAlertsWatch();\n                    this._initStateChangeWatch();\n                    this._setActiveIds();\n                    this._renderSortControlDropdown();\n                };\n                RiskScoreController.$inject = ['$scope', '$timeout', '$stateParams', '$element', '$q', 'userIndicatorsUtils'];\n                return RiskScoreController;\n            }());\n            var riskScoreComponent = {\n                controller: RiskScoreController,\n                templateUrl: 'app/layouts/user/components/user-risk-score/user-risk-score.component.html',\n                bindings: {\n                    _alerts: '<alerts',\n                    _user: '<user',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userRiskScore', riskScoreComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserIndicatorController = (function () {\n                function UserIndicatorController($scope, $element, $filter) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$filter = $filter;\n                }\n                UserIndicatorController.prototype._initWatches = function () {\n                    var ctrl = this;\n                    var deregister;\n                    function watchHandler() {\n                        if (ctrl._indicator && ctrl._indicatorType && ctrl._alert && ctrl._user) {\n                            // Clone alert, indicator and indicator type\n                            ctrl.alert = _.cloneDeep(ctrl._alert);\n                            ctrl.indicator = _.cloneDeep(ctrl._indicator);\n                            ctrl.indicatorType = _.cloneDeep(ctrl._indicatorType);\n                            ctrl.user = _.cloneDeep(ctrl._user);\n                            // Remove watcher\n                            deregister();\n                        }\n                    }\n                    deregister = ctrl.$scope.$watchGroup([\n                        function () { return ctrl._alert; },\n                        function () { return ctrl._indicator; },\n                        function () { return ctrl._indicatorType; },\n                        function () { return ctrl._user; }\n                    ], watchHandler);\n                };\n                UserIndicatorController.prototype.$onInit = function () {\n                    this._initWatches();\n                };\n                UserIndicatorController.$inject = ['$scope', '$element', '$filter'];\n                return UserIndicatorController;\n            }());\n            var userIndicatorComponent = {\n                controller: UserIndicatorController,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/user-indicator/user-indicator.component.html',\n                bindings: {\n                    _alert: '<alertModel',\n                    _indicator: '<indicator',\n                    _indicatorType: '<indicatorType',\n                    _user: '<userModel'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userIndicator', userIndicatorComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var userIndicatorHeaderController = (function () {\n                function userIndicatorHeaderController($scope, $stateParams, userIndicatorsUtils, $state) {\n                    this.$scope = $scope;\n                    this.$stateParams = $stateParams;\n                    this.userIndicatorsUtils = userIndicatorsUtils;\n                    this.$state = $state;\n                    this._currentIndicatorIndex = null;\n                }\n                /**\n                 * Returns the index of the current indicator in the current alert\n                 * @returns {number}\n                 */\n                userIndicatorHeaderController.prototype.getCurrentIndicatorIndex = function () {\n                    var _this = this;\n                    if (this._currentIndicatorIndex === null && this.alert) {\n                        var index_1 = null;\n                        // match the current indicatorId to an indicator in the indicators list\n                        _.some(this.alert.evidences, function (indicator, i) {\n                            if (indicator.id === _this.$stateParams.indicatorId) {\n                                index_1 = i;\n                                return true;\n                            }\n                        });\n                        if (this._currentIndicatorIndex !== index_1) {\n                            this._currentIndicatorIndex = index_1;\n                        }\n                    }\n                    return this._currentIndicatorIndex;\n                };\n                userIndicatorHeaderController.prototype._initAlertWatch = function () {\n                    var _this = this;\n                    var deregister = this.$scope.$watch(function () { return _this._alert; }, function () {\n                        if (_this._alert) {\n                            // Clone alert, sort and filter indicators, and unregister the watch\n                            _this.alert = _.cloneDeep(_this._alert);\n                            _this.alert.evidences = _this.userIndicatorsUtils.filterIndicators(_this.userIndicatorsUtils.orderIndicators(_this.alert.evidences));\n                            deregister();\n                        }\n                    });\n                };\n                /**\n                 * Transition to a new indicator state\n                 * @param step\n                 */\n                userIndicatorHeaderController.prototype.transitionIndicator = function (step) {\n                    var futureIndex = this.getCurrentIndicatorIndex() + step;\n                    // make sure it doesn't exceed the list's range\n                    if (futureIndex < 0 || futureIndex > this.alert.evidences.length - 1) {\n                        return;\n                    }\n                    this.$state.go(this.$state.current.name, { alertId: this.$stateParams.alertId, indicatorId: this.alert.evidences[futureIndex].id });\n                };\n                userIndicatorHeaderController.prototype.$onInit = function () {\n                    this._initAlertWatch();\n                };\n                userIndicatorHeaderController.$inject = ['$scope', '$stateParams', 'userIndicatorsUtils', '$state'];\n                return userIndicatorHeaderController;\n            }());\n            var userIndicatorHeaderComponent = {\n                controller: userIndicatorHeaderController,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/user-indicator-header/user-indicator-header.component.html',\n                bindings: {\n                    _alert: '<alertModel',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userIndicatorHeader', userIndicatorHeaderComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserIndicatorDescriptionController = (function () {\n                function UserIndicatorDescriptionController($scope, userIndicatorsUtils) {\n                    this.$scope = $scope;\n                    this.userIndicatorsUtils = userIndicatorsUtils;\n                }\n                UserIndicatorDescriptionController.prototype._initIndicatorWatch = function () {\n                    var _this = this;\n                    var unregister = this.$scope.$watch(function () { return _this.indicator; }, function () {\n                        if (_this.indicator) {\n                            _this.indicatorDescription = _this.userIndicatorsUtils.getIndicatorDescription(_this.indicator);\n                            unregister();\n                        }\n                    });\n                };\n                UserIndicatorDescriptionController.prototype.$onInit = function () {\n                    this._initIndicatorWatch();\n                };\n                UserIndicatorDescriptionController.$inject = ['$scope', 'userIndicatorsUtils'];\n                return UserIndicatorDescriptionController;\n            }());\n            var userIndicatorDescriptionComponent = {\n                controller: UserIndicatorDescriptionController,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/user-indicator-description/user-indicator-description.component.html',\n                bindings: {\n                    indicator: '<indicator',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userIndicatorDescription', userIndicatorDescriptionComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserIndicatorEventsController = (function () {\n                function UserIndicatorEventsController($scope, $location, nanobarAutomationService, dataEntities, $http, BASE_URL, tableSettingsUtil, utils) {\n                    this.$scope = $scope;\n                    this.$location = $location;\n                    this.nanobarAutomationService = nanobarAutomationService;\n                    this.dataEntities = dataEntities;\n                    this.$http = $http;\n                    this.BASE_URL = BASE_URL;\n                    this.tableSettingsUtil = tableSettingsUtil;\n                    this.utils = utils;\n                    this.NANOBAR_ID = 'user-page';\n                    // The next two functions are on the constructor to lock the this.state\n                    var ctrl = this;\n                    /**\n                     * Returns the state of the table\n                     * @returns {IEventsTableState}\n                     */\n                    ctrl.fetchTableState = function () {\n                        return ctrl.state.eventsTable;\n                    };\n                    /**\n                     * Updates the state of the table and reloads events\n                     * @param state\n                     */\n                    ctrl.updateTableState = function (state) {\n                        ctrl.state.eventsTable = state.value;\n                        ctrl._loadEvents();\n                    };\n                    this._initStateObject();\n                    this._initTableSettings();\n                    this._initTableAdapter();\n                }\n                /**\n                 * This method fetch the score field of the events dataEntity\n                 * The score field if configured on the dataEntity metadata\n                 * under the \"performanceField\" details. (Shay Schwartz)\n                 * @param entityId\n                 * @returns {*}The id of the score field.\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._getDefaultScoreField = function (entityId) {\n                    var dataEntityId = this.indicator.dataEntitiesIds[0];\n                    if (!dataEntityId) {\n                        return null;\n                    }\n                    var entityMetadata = this.dataEntities.getEntityById(dataEntityId);\n                    if (!entityMetadata) {\n                        return null;\n                    }\n                    var performanceField = entityMetadata.performanceField;\n                    if (!performanceField) {\n                        return null;\n                    }\n                    return performanceField.field.id || null;\n                };\n                /**\n                 * Load events and digest response\n                 * @returns {IPromise<TResult>}\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._loadEvents = function () {\n                    var _this = this;\n                    var httpPromise;\n                    httpPromise = this.$http.get(this.BASE_URL + \"/evidences/\" + this.indicator.id + \"/events\", {\n                        params: {\n                            page: this.state.eventsTable.page || 1,\n                            size: this.state.eventsTable.pageSize || 100,\n                            sort_direction: this.state.eventsTable.sortDirection || 'DESC',\n                            sort_field: this.state.eventsTable.sortBy\n                        }\n                    })\n                        .then(function (res) {\n                        _this.events = res.data.data || [];\n                        _this.tableModel = _this.events;\n                        _this.tableModel._meta = {\n                            offset: res.data.offset || 0,\n                            total: res.data.total || 0\n                        };\n                    })\n                        .catch(function (err) {\n                        console.error('There was a problem loading events.', err);\n                        _this.events = [];\n                        _this.tableModel = _this.events;\n                        _this.tableModel._meta = {\n                            offset: 0,\n                            total: 0\n                        };\n                    });\n                    this.nanobarAutomationService.addPromise(this.NANOBAR_ID, httpPromise);\n                    return httpPromise;\n                };\n                /**\n                 * Returns the relevant entity fields for the data entity.\n                 * @param indicator\n                 * @returns {T[]}\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._getEntityFields = function (indicator) {\n                    var dataEntityId = indicator.dataEntitiesIds[0];\n                    var fieldsArray = this.dataEntities.getEntityById(dataEntityId).fieldsArray;\n                    return _.filter(fieldsArray, { isDefaultEnabled: true });\n                };\n                /**\n                 * Initiates indicator watch. Once received it gets the 'sortBy' filed, the columns defs and loads the events.\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._initIndicatorWatch = function () {\n                    var _this = this;\n                    // deregister once an indicator is received. There should be only one indicator in the lifetime of this component.\n                    var deregister;\n                    deregister = this.$scope.$watch(function () { return _this.indicator; }, function () {\n                        if (_this.indicator) {\n                            // get default sort\n                            _this.state.eventsTable.sortBy =\n                                _this._getDefaultScoreField(_this.indicator.dataEntitiesIds[0]);\n                            _this.state.eventsTable = _.clone(_this.state.eventsTable);\n                            // get columns definition\n                            _this.tableSettings.columns = _this.tableSettingsUtil\n                                .getColumnsByEntityFields(_this._getEntityFields(_this.indicator), _this.tableAdapter);\n                            // get events\n                            _this._loadEvents();\n                            deregister();\n                        }\n                    });\n                };\n                /**\n                 * Translate the event to the explore url and redirect to explore\n                 * @param event\n                 */\n                UserIndicatorEventsController.prototype.transitionToExplore = function (event) {\n                    var _this = this;\n                    var username = event.username;\n                    var time = event.end_time ? event.end_time : event.event_time;\n                    var aMonthBefore = this.utils.date.getMoment(time)\n                        .endOf('day').subtract(1, 'month').startOf('day').valueOf();\n                    var dataEntity = this.dataEntities.getEntityById(this.indicator.dataEntitiesIds[0]);\n                    var datasource = dataEntity.id;\n                    var timeField = (dataEntity.fields.get(\"event_time_utc\") || dataEntity.fields.get(\"session_time_utc\")).id;\n                    var scoreField = dataEntity.performanceField.field.id;\n                    var url = \"/d/explore/\" + datasource + \"?filters=\" + datasource + \".username=\" + username + \"&default_filters=\" + datasource + \".\" + timeField + \"=:\" + aMonthBefore + \"::\" + time + \",\" + datasource + \".\" + scoreField + \"=>=0\";\n                    this.$scope.$applyAsync(function () {\n                        _this.$location.url(url);\n                    });\n                };\n                /**\n                 * Initiates the controller's state\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._initStateObject = function () {\n                    this.state = {\n                        eventsTable: {\n                            page: 1,\n                            pageSize: 100,\n                            sortBy: null,\n                            sortDirection: 'DESC'\n                        }\n                    };\n                };\n                /**\n                 * Initiates a table settings\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._initTableSettings = function () {\n                    this.tableSettings = {\n                        scrollable: false,\n                        groupable: false,\n                        sortable: {\n                            mode: 'single'\n                        },\n                        'alwaysPageable': true\n                    };\n                };\n                /**\n                 * Adds a table adapter\n                 * @private\n                 */\n                UserIndicatorEventsController.prototype._initTableAdapter = function () {\n                    this.tableAdapter = {\n                        ids: {\n                            event_time: {\n                                field: 'event_time',\n                                template: '{{ dataItem.event_time | date:\\\"MM/dd/yyyy HH\\\\:mm\\\\:ss\\\":\\\"UTC\\\"}}'\n                            },\n                            start_time: {\n                                field: 'start_time',\n                                template: '{{ dataItem.start_time | date:\\\"MM/dd/yyyy HH\\\\:mm\\\\:ss\\\":\\\"UTC\\\"}}'\n                            },\n                            end_time: {\n                                field: 'end_time',\n                                template: '{{ dataItem.end_time | date:\\\"MM/dd/yyyy HH\\\\:mm\\\\:ss\\\":\\\"UTC\\\"}}'\n                            },\n                            duration: {\n                                field: 'duration',\n                                template: '{{ dataItem.duration | durationToPrettyTime}}'\n                            },\n                            data_bucket: {\n                                field: 'data_bucket',\n                                template: '{{dataItem.data_bucket | prettyBytes}}/s'\n                            },\n                            username: {\n                                field: 'username',\n                                template: '<a ng-click=\"$ctrl.transitionToExplore(dataItem)\">{{dataItem.username}}</a>'\n                            }\n                        }\n                    };\n                };\n                UserIndicatorEventsController.prototype.$onInit = function () {\n                    this._initIndicatorWatch();\n                };\n                UserIndicatorEventsController.$inject = ['$scope', '$location', 'fsNanobarAutomationService', 'dataEntities', '$http', 'BASE_URL',\n                    'tableSettingsUtil', 'utils'];\n                return UserIndicatorEventsController;\n            }());\n            var UserIndicatorEventsComponent = {\n                controller: UserIndicatorEventsController,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/user-indicator-events/user-indicator-events.component.html',\n                bindings: {\n                    indicator: '<',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userIndicatorEvents', UserIndicatorEventsComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n// evidences/22960e66-eff9-4f7d-a2b1-b3a2eaa1d4e6/events?page=1&size=10&sort_direction=DESC&sort_field=session_score\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserIndicatorChartsController = (function () {\n                function UserIndicatorChartsController($scope, $element, $templateCache, $compile) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$templateCache = $templateCache;\n                    this.$compile = $compile;\n                }\n                /**\n                 * Get the template indicated by the indicator type\n                 * @private\n                 */\n                UserIndicatorChartsController.prototype._getTemplate = function () {\n                    this._template = this.$templateCache.get(this.indicatorType.templateUrl);\n                };\n                /**\n                 * Renders the template indicated by the indicator type\n                 * @private\n                 */\n                UserIndicatorChartsController.prototype._renderTemplate = function () {\n                    this._getTemplate();\n                    if (this._template) {\n                        this.$element.append(this.$compile(angular.element(this._template))(this.$scope));\n                    }\n                };\n                /**\n                 * Initiates watch on indicatr and indicator type. Once both are received, a rendering process begins.\n                 * @private\n                 */\n                UserIndicatorChartsController.prototype._initWatches = function () {\n                    var ctrl = this;\n                    var deregister;\n                    function watchHandler() {\n                        if (ctrl._indicator && ctrl._indicatorType) {\n                            // Clone alert, indicator and indicator type\n                            ctrl.indicator = _.cloneDeep(ctrl._indicator);\n                            ctrl.indicatorType = _.cloneDeep(ctrl._indicatorType);\n                            ctrl._renderTemplate();\n                            // Remove watcher\n                            deregister();\n                        }\n                    }\n                    deregister = ctrl.$scope.$watchGroup([\n                        function () { return ctrl._indicator; },\n                        function () { return ctrl._indicatorType; }\n                    ], watchHandler);\n                };\n                UserIndicatorChartsController.prototype.$onInit = function () {\n                    this._initWatches();\n                };\n                UserIndicatorChartsController.$inject = ['$scope', '$element', '$templateCache', '$compile'];\n                return UserIndicatorChartsController;\n            }());\n            var userIndicatorChartsComponent = {\n                controller: UserIndicatorChartsController,\n                bindings: {\n                    _indicator: '<indicator',\n                    _indicatorType: '<indicatorType',\n                    user: '<userModel'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('userIndicatorCharts', userIndicatorChartsComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsAmChartComponent;\n            (function (fsAmChartComponent) {\n                var AmChartController = (function () {\n                    function AmChartController($scope, $element, $http, BASE_URL, interpolation, $interpolate, fsNanobarAutomationService) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.interpolation = interpolation;\n                        this.$interpolate = $interpolate;\n                        this.fsNanobarAutomationService = fsNanobarAutomationService;\n                        this._INDICATORS_DATA_PATH_NAME = 'evidences';\n                        this._HISTORICAL_DATA_PATH_NAME = 'historical-data';\n                        this._NANOBAR_ID = 'user-page';\n                        this._ERR_MSG = 'AmChartComponent: ';\n                        this._renderReady = false;\n                    }\n                    /**\n                     * Finds the chart's container element and stores it. Returns the element.\n                     * @returns {ng.IAugmentedJQuery}\n                     * @private\n                     */\n                    AmChartController.prototype._getContainerElement = function () {\n                        if (!this.containerElement) {\n                            this.containerElement = this.$element.find('.chart-container');\n                        }\n                        return this.containerElement;\n                    };\n                    /**\n                     * Returns a promise that resolves on fetched data from the server\n                     * @returns {IHttpPromise<T>}\n                     * @private\n                     */\n                    AmChartController.prototype._fetchData = function () {\n                        var params = this.interpolation.interpolate(this.settings.params, this.indicator);\n                        return this.$http.get(this.BASE_URL + \"/\" + this._INDICATORS_DATA_PATH_NAME + \"/\" + this.indicator.id + \"/\" + this._HISTORICAL_DATA_PATH_NAME, { params: params })\n                            .then(function (res) {\n                            return res.data;\n                        });\n                    };\n                    /**\n                     * Takes received data and applies sorting, and adapter. Returns a list ready for use on amCharts\n                     * @param response\n                     * @private\n                     */\n                    AmChartController.prototype._digestData = function (response) {\n                        if (this.settings.preProcessData) {\n                            response = this.settings.preProcessData(response, this.indicator);\n                        }\n                        // sort data if sorter provided by settings\n                        var list = this.settings.sortData ? this.settings.sortData(response.data) : response.data;\n                        // digest data if adapter provided by settings\n                        this.settings.chartSettings.dataProvider =\n                            this.settings.dataAdapter ? _.map(list, this.settings.dataAdapter.bind(this, this.indicator)) : list;\n                    };\n                    AmChartController.prototype._augmentSettings = function () {\n                        this._addTitles();\n                        this._addListeners();\n                    };\n                    /**\n                     * Adds chart listeners\n                     * @private\n                     */\n                    AmChartController.prototype._addListeners = function () {\n                        var ctrl = this;\n                        this.settings.chartSettings.listeners = [{\n                                \"event\": \"clickGraphItem\",\n                                \"method\": function (graphItem) {\n                                    if (ctrl.settings.handlers && ctrl.settings.handlers.clickGraphItem) {\n                                        ctrl.settings.handlers.clickGraphItem(ctrl.indicator, graphItem);\n                                    }\n                                }\n                            }];\n                    };\n                    /**\n                     * Adds a title to the chart if listed in this.settings.templates.titles\n                     * @private\n                     */\n                    AmChartController.prototype._addTitles = function () {\n                        var _this = this;\n                        if (this.settings.templates && this.settings.templates.titles) {\n                            _.each(this.settings.templates.titles, function (value, key) {\n                                var titleObj = _.find(_this.settings.chartSettings.titles, { id: key });\n                                titleObj.text = _this.$interpolate(value)(_this.indicator);\n                            });\n                        }\n                        if (this.settings.templates && this.settings.templates.valueAxes) {\n                            _.each(this.settings.templates.valueAxes, function (value, key) {\n                                var titleObj = _.find(_this.settings.chartSettings.valueAxes, { id: key });\n                                titleObj.title = _this.$interpolate(value)(_this.indicator);\n                            });\n                        }\n                    };\n                    /**\n                     * Renders a chart\n                     * @private\n                     */\n                    AmChartController.prototype._renderChart = function () {\n                        if (this._renderReady) {\n                            this.chart = AmCharts.makeChart(this._getContainerElement()[0], this.settings.chartSettings);\n                        }\n                    };\n                    /**\n                     * Sets watch on settings. When settings received, data is fetched and processed, and chart is rendered.\n                     * @private\n                     */\n                    AmChartController.prototype._initSettingsWatch = function () {\n                        var _this = this;\n                        this.$scope.$watch(function () { return _this.settings; }, function () {\n                            if (_this.settings) {\n                                _this._renderReady = false;\n                                var promise = _this._fetchData()\n                                    .then(function (data) {\n                                    _this._digestData(data);\n                                    _this._augmentSettings();\n                                    _this._renderReady = true;\n                                    _this._renderChart();\n                                })\n                                    .catch(function (err) {\n                                    console.error(_this._ERR_MSG + 'There was a problem loading data', err);\n                                });\n                                _this.fsNanobarAutomationService.addPromise(_this._NANOBAR_ID, promise);\n                            }\n                        });\n                    };\n                    AmChartController.prototype.$onInit = function () {\n                        this._initSettingsWatch();\n                    };\n                    AmChartController.$inject = ['$scope', '$element', '$http', 'BASE_URL', 'interpolation', '$interpolate',\n                        'fsNanobarAutomationService'];\n                    return AmChartController;\n                }());\n                var AmChartComponent = {\n                    controller: AmChartController,\n                    bindings: {\n                        settings: '<',\n                        indicator: '<',\n                        _events: '<events'\n                    },\n                    template: '<div class=\"chart-container\" style=\"position: absolute; width: 100%; height: 100%;\"></div>'\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsIndicatorAmChart', AmChartComponent);\n            })(fsAmChartComponent = components.fsAmChartComponent || (components.fsAmChartComponent = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            'use strict';\n            var eEntityType = Fortscale.shared.services.entityActivityUtils.eEntityType;\n            var ActivityCountriesController = (function () {\n                function ActivityCountriesController($scope, $element, countryCodesUtil, amMapsUtils, entityActivityUtils, interpolation, $http, BASE_URL, fsNanobarAutomationService) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.countryCodesUtil = countryCodesUtil;\n                    this.amMapsUtils = amMapsUtils;\n                    this.entityActivityUtils = entityActivityUtils;\n                    this.interpolation = interpolation;\n                    this.$http = $http;\n                    this.BASE_URL = BASE_URL;\n                    this.fsNanobarAutomationService = fsNanobarAutomationService;\n                    this.areasOn = true;\n                    this.imagesOn = true;\n                    this._INDICATORS_DATA_PATH_NAME = 'evidences';\n                    this._HISTORICAL_DATA_PATH_NAME = 'historical-data';\n                    this.NANOBAR_ID = 'user-page';\n                }\n                /**\n                 * Adds percent to each user-country\n                 * @returns {IAugmentedActivityUserCountry[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._AugmentUserCountries = function () {\n                    var _this = this;\n                    var userCountries = _.cloneDeep(this._userCountries);\n                    var sum = _.sumBy(userCountries, 'count');\n                    var percentSum = 0;\n                    _.each(userCountries, function (userCountry, index, userCountries) {\n                        userCountry.alpha2 = _this.countryCodesUtil.getAlpha2ByCountryName(userCountry.country);\n                        if (userCountries.length - 1 === index) {\n                            // Last item should always complete to 100%\n                            userCountry.percent = Math.round((100 - percentSum) * 100) / 100;\n                        }\n                        else {\n                            userCountry.percent = Math.round(userCountry.count / sum * 10000) / 100;\n                            percentSum += userCountry.percent;\n                        }\n                    });\n                    return userCountries;\n                };\n                ActivityCountriesController.prototype._sortUserCountries = function () {\n                    return _.orderBy(this.userCountries, [\n                        function (userCountry) { return userCountry.country === 'Others'; },\n                        function (userCountry) { return userCountry.count; }\n                    ], [\n                        'asc',\n                        'desc'\n                    ]);\n                };\n                /**\n                 * Returns a list of areas to be used in the map\n                 * @returns {Array<{id: string, color: string}>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getAreasForMapDataProvider = function () {\n                    var _this = this;\n                    return _.map(this.organizationCountries, function (orgCountry) {\n                        return {\n                            id: _this.countryCodesUtil.getAlpha2ByCountryName(orgCountry.country),\n                            color: '#024d88'\n                        };\n                    });\n                };\n                /**\n                 * Returns a list of image map config objects.\n                 * @returns {IAmMapsUtilsBubbleConfig[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getBubbles = function () {\n                    return this.amMapsUtils.getBubbles({\n                        // Filter out countries without alpha2 (i.e. others) and map to return map config objects\n                        countries: _.map(_.filter(this.userCountries, 'alpha2'), function (userCountry) {\n                            return {\n                                alpha2: userCountry.alpha2,\n                                name: userCountry.country,\n                                value: userCountry.percent,\n                                color: userCountry.anomaly ? 'rgba(255, 0, 0, 0.7)' : 'rgba(83, 194, 228, 0.5)',\n                                anomaly: userCountry.anomaly\n                            };\n                        })\n                    });\n                };\n                ActivityCountriesController.prototype._getPlaneBubbles = function () {\n                    return this.amMapsUtils.getBubbles({\n                        // Filter out countries without alpha2 (i.e. others) and map to return map config objects\n                        countries: _.map(_.filter(this.eventCountries, 'alpha2'), function (eventCoutnry) {\n                            return {\n                                alpha2: eventCoutnry.alpha2,\n                                name: eventCoutnry.name,\n                                value: eventCoutnry.percent,\n                                color: 'rgba(255, 0, 0, 0.6)'\n                            };\n                        })\n                    });\n                };\n                /**\n                 * Returns a list of image map config objects.\n                 * @returns {IAmMapsUtilsBubbleConfig[]}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getLines = function () {\n                    return this.amMapsUtils.getLines({\n                        // Filter out countries without alpha2 (i.e. others) and map to return map config objects\n                        countries: _.map(_.filter(this.eventCountries, 'alpha2'), function (eventCountry) {\n                            return {\n                                alpha2: eventCountry.alpha2,\n                            };\n                        })\n                    });\n                };\n                /**\n                 * Returns a list of relevant map objects to be used as a zoom group\n                 * @param {{}} map\n                 * @param {boolean=} withoutOrganization\n                 * @param {boolean=} withoutUser\n                 * @returns {Array<{}>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._getRelevantMapObjects = function (map, withoutOrganization, withoutUser) {\n                    var _this = this;\n                    var zoomToAreasIds;\n                    // Add organization map ids (if not withoutOrganization)\n                    if (withoutOrganization) {\n                        zoomToAreasIds = [];\n                    }\n                    else {\n                        zoomToAreasIds = _.map(this.organizationCountries, function (oCountry) { return _this.countryCodesUtil.getAlpha2ByCountryName(oCountry.country); });\n                    }\n                    // Add user map ids (if not withoutUser)\n                    if (!withoutUser) {\n                        _.each(this.userCountries, function (userCountry) { return zoomToAreasIds.push(userCountry.alpha2); });\n                    }\n                    //Add event countries\n                    _.each(this.eventCountries, function (eventCountry) { return zoomToAreasIds.push(eventCountry.alpha2); });\n                    // take ids and get map objects. Push map object to zoomToAreas.\n                    var zoomToAreas = [];\n                    _.each(zoomToAreasIds, function (id) {\n                        if (id) {\n                            var area = map.getObjectById(id);\n                            if (area) {\n                                zoomToAreas.push(area);\n                            }\n                        }\n                    });\n                    return zoomToAreas;\n                };\n                /**\n                 * Initiates the amMap map object\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initMap = function () {\n                    if (!this.userCountries || !this.organizationCountries || !this.eventCountries || this.map) {\n                        return;\n                    }\n                    var ctrl = this;\n                    var settings = {\n                        listeners: [\n                            {\n                                event: 'rendered',\n                                method: function (evt) {\n                                    ctrl.mapOriginalZoomX = evt.chart.zoomX();\n                                    ctrl.mapOriginalZoomY = evt.chart.zoomY();\n                                    if (ctrl.settings.usePlanes) {\n                                        evt.chart.zoomDuration = 0;\n                                        evt.chart.zoomToGroup(ctrl._getRelevantMapObjects(evt.chart));\n                                        setTimeout(function () {\n                                            evt.chart.zoomDuration = 1;\n                                        }, 1500);\n                                    }\n                                    else {\n                                        setTimeout(function () {\n                                            evt.chart.zoomToGroup(ctrl._getRelevantMapObjects(evt.chart));\n                                        }, 500);\n                                    }\n                                }\n                            }\n                        ],\n                        dataProvider: {\n                            areas: this._getAreasForMapDataProvider(),\n                            images: this.settings.usePlanes ? this._getPlaneBubbles() : this._getBubbles(),\n                        }\n                    };\n                    if (this.settings.usePlanes) {\n                        settings.dataProvider.lines = this._getLines();\n                        settings.dataProvider.images = _.concat(settings.dataProvider.images, this.amMapsUtils.getPlaneImage());\n                    }\n                    settings = _.merge({}, this.settings.mapSettings, settings);\n                    // Create a map\n                    this.map = AmCharts.makeChart('top-countries-map', settings);\n                };\n                /**\n                 * Rerenders the map in the previous zoom level and position\n                 * @private\n                 */\n                ActivityCountriesController.prototype._rerenderMap = function () {\n                    this.map.dataProvider.zoomLevel = this.map.zoomLevel();\n                    this.map.dataProvider.zoomLatitude = this.map.zoomLatitude();\n                    this.map.dataProvider.zoomLongitude = this.map.zoomLongitude();\n                    this.map.validateData();\n                    var groups = this._getRelevantMapObjects(this.map, !this.areasOn, !this.imagesOn);\n                    if (groups.length) {\n                        this.map.zoomToGroup(groups);\n                    }\n                    else {\n                        this.map.zoomTo(1, this.mapOriginalZoomX, this.mapOriginalZoomY);\n                    }\n                };\n                /**\n                 * Initiates user countries watch\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initUserCountriesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._userCountries; }, function () {\n                        if (_this._userCountries) {\n                            _this.userCountries = _this._AugmentUserCountries();\n                            _this.userCountries = _this._sortUserCountries();\n                            _this._initMap();\n                        }\n                    });\n                };\n                /**\n                 * Initiates watch on _organizationCountries. Clones it when arrives (for immutability)\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initOrganizationCountriesWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this._organizationCountries; }, function () {\n                        if (_this._organizationCountries) {\n                            _this.organizationCountries =\n                                _.cloneDeep(_this._organizationCountries);\n                            _this.mapAreas = _this._getAreasForMapDataProvider();\n                            _this._initMap();\n                        }\n                    });\n                };\n                /**\n                 * Resize handler. Will redraw the map on a resize.\n                 *\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initResizeWatch = function () {\n                    var ctrl = this;\n                    function resizeHandler() {\n                        ctrl.map.clear();\n                        ctrl.map = null;\n                        delete ctrl[\"map\"];\n                        ctrl._initMap();\n                    }\n                    window.addEventListener('resize', resizeHandler, false);\n                    this.$scope.$on('$destroy', function () {\n                        window.removeEventListener('resize', resizeHandler, false);\n                    });\n                };\n                /**\n                 * A cb function that is used in a filter to remove out any members with a count of zero\n                 * @param {IActivityUserCountry} userCountry\n                 * @returns {boolean}\n                 */\n                ActivityCountriesController.prototype.hideZeroCountFilter = function (userCountry) {\n                    return userCountry.count !== 0;\n                };\n                /**\n                 * Changes the state of the map's Areas (i.e. organization).\n                 */\n                ActivityCountriesController.prototype.toggleAreas = function () {\n                    if (!this.areasOn) {\n                        this.map.dataProvider.areas = this._getAreasForMapDataProvider();\n                    }\n                    else {\n                        this.map.dataProvider.areas = [];\n                    }\n                    this.areasOn = !this.areasOn;\n                    this._rerenderMap();\n                };\n                /**\n                 * Changes the state of the map's images (i.e. user bubbles)\n                 */\n                ActivityCountriesController.prototype.toggleImages = function () {\n                    if (!this.imagesOn) {\n                        this.map.dataProvider.images = this._getBubbles();\n                    }\n                    else {\n                        this.map.dataProvider.images = [];\n                    }\n                    this.imagesOn = !this.imagesOn;\n                    this._rerenderMap();\n                };\n                /**\n                 * Start the user top countries load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initLoadUserTopCountriesActivity = function () {\n                    var _this = this;\n                    var params = this.interpolation.interpolate(this.settings.params, this.indicator);\n                    return this.$http.get(this.BASE_URL + \"/\" + this._INDICATORS_DATA_PATH_NAME + \"/\" + this.indicator.id + \"/\" + this._HISTORICAL_DATA_PATH_NAME, { params: params })\n                        .then(function (res) {\n                        _this._userCountries = _.filter(_.map(res.data.data, function (countryItem) {\n                            return { country: countryItem.keys[0], count: countryItem.value, anomaly: countryItem.anomaly };\n                        }), function (countryItem) {\n                            // filter out all elements without a country\n                            return !!countryItem.country;\n                        });\n                        var eventCountriesTemp = [];\n                        _.each(res.data.info && res.data.info.countries, function (country) {\n                            var eventCountry = {};\n                            eventCountry.name = country;\n                            eventCountry.percent = 50;\n                            eventCountry.alpha2 = _this.countryCodesUtil.getAlpha2ByCountryName(country);\n                            eventCountriesTemp.push(eventCountry);\n                        });\n                        _this.eventCountries = eventCountriesTemp;\n                        return _this._userCountries;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading organization top countries.', err);\n                        _this._userCountries = [];\n                    });\n                };\n                /**\n                 * Starts the organization top countries load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                ActivityCountriesController.prototype._initLoadOrganizationTopCountriesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getTopCountries(eEntityType.ORGANIZATION)\n                        .then(function (countries) {\n                        _this._organizationCountries = countries;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading organization top countries.', err);\n                        _this._organizationCountries = [];\n                    });\n                };\n                ActivityCountriesController.prototype.$onInit = function () {\n                    var _this = this;\n                    this._initUserCountriesWatch();\n                    this._initOrganizationCountriesWatch();\n                    this._initResizeWatch();\n                    //this._initEventsLoadedWatch();\n                    this.$scope.$watch(function () { return _this.indicator; }, function (indicator) {\n                        if (indicator) {\n                            // let promiseUser = this._initLoadUserTopCountriesActivity();\n                            _this.fsNanobarAutomationService.addPromises(_this.NANOBAR_ID, [\n                                _this._initLoadUserTopCountriesActivity(),\n                                _this._initLoadOrganizationTopCountriesActivity()\n                            ]);\n                        }\n                    });\n                };\n                ActivityCountriesController.$inject = ['$scope', '$element', 'countryCodesUtil', 'amMapsUtils', 'entityActivityUtils',\n                    'interpolation', '$http', 'BASE_URL', 'fsNanobarAutomationService'];\n                return ActivityCountriesController;\n            }());\n            var indicatorAmGeoLocationComponent = {\n                controller: ActivityCountriesController,\n                templateUrl: 'app/layouts/user/components/user-indicator/components/fs-indicator-am-geo-location/fs-indicator-am-geo-location.component.html',\n                bindings: {\n                    indicator: '<',\n                    user: '<userModel',\n                    settings: '<'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('fsIndicatorAmGeoLocation', indicatorAmGeoLocationComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsActivityTimeAnomalyComponent;\n            (function (fsActivityTimeAnomalyComponent) {\n                var ActivityTimeAnomalyController = (function () {\n                    function ActivityTimeAnomalyController($scope, $element, $http, BASE_URL, interpolation, $interpolate, fsNanobarAutomationService, $timeout) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.interpolation = interpolation;\n                        this.$interpolate = $interpolate;\n                        this.fsNanobarAutomationService = fsNanobarAutomationService;\n                        this.$timeout = $timeout;\n                        this.weekDaysUS = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n                        this.HoursInDay = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\n                        this._INDICATORS_DATA_PATH_NAME = 'evidences';\n                        this._HISTORICAL_DATA_PATH_NAME = 'historical-data';\n                        this._NANOBAR_ID = 'user-page';\n                        this._ERR_MSG = 'ActivityTimeAnomalyComponent: ';\n                        this._renderReady = false;\n                        this.gridModel = {};\n                    }\n                    /**\n                     * Returns a promise that resolves on fetched data from the server\n                     * @returns {IHttpPromise<T>}\n                     * @private\n                     */\n                    ActivityTimeAnomalyController.prototype._fetchData = function () {\n                        var params = this.interpolation.interpolate(this.settings.params, this.indicator);\n                        return this.$http.get(this.BASE_URL + \"/\" + this._INDICATORS_DATA_PATH_NAME + \"/\" + this.indicator.id + \"/\" + this._HISTORICAL_DATA_PATH_NAME, { params: params })\n                            .then(function (res) {\n                            return res.data;\n                        });\n                    };\n                    ActivityTimeAnomalyController.prototype._digestData = function (data) {\n                        var _this = this;\n                        // sort by day of week and hour\n                        var sortedData = _.orderBy(data, [\n                            function (timeAnomaly) {\n                                // return index of day\n                                return _this.weekDaysUS.indexOf(timeAnomaly.keys[0]);\n                            },\n                            function (timeAnomaly) {\n                                // return hour as number\n                                return parseInt(timeAnomaly.keys[1], 10);\n                            }\n                        ], ['asc', 'asc']);\n                        _.each(sortedData, function (timeAnomalyResponse, index) {\n                            if (!_this.gridModel[timeAnomalyResponse.keys[0]]) {\n                                _this.gridModel[timeAnomalyResponse.keys[0]] = {};\n                            }\n                            // Create a cascading effect of painting the active hours.\n                            _this.$timeout(function () {\n                                _this.gridModel[timeAnomalyResponse.keys[0]][timeAnomalyResponse.keys[1]] = {\n                                    value: timeAnomalyResponse.value,\n                                    anomaly: timeAnomalyResponse.anomaly\n                                };\n                            }, index * 40);\n                        });\n                    };\n                    /**\n                     * Renders a chart\n                     * @private\n                     */\n                    ActivityTimeAnomalyController.prototype._renderGrid = function () {\n                        if (this._renderReady) {\n                            this._digestData(this._response.data);\n                        }\n                    };\n                    /**\n                     * Sets watch on settings. When settings received, data is fetched and processed, and chart is rendered.\n                     * @private\n                     */\n                    ActivityTimeAnomalyController.prototype._initSettingsWatch = function () {\n                        var _this = this;\n                        this.$scope.$watch(function () { return _this.settings; }, function () {\n                            if (_this.settings) {\n                                _this._renderReady = false;\n                                var promise = _this._fetchData()\n                                    .then(function (response) {\n                                    _this._renderReady = true;\n                                    _this._response = response;\n                                    _this._renderGrid();\n                                })\n                                    .catch(function (err) {\n                                    console.error(_this._ERR_MSG + 'There was a problem loading data', err);\n                                });\n                                _this.fsNanobarAutomationService.addPromise(_this._NANOBAR_ID, promise);\n                            }\n                        });\n                    };\n                    ActivityTimeAnomalyController.prototype.$onInit = function () {\n                        this._initSettingsWatch();\n                    };\n                    ActivityTimeAnomalyController.$inject = ['$scope', '$element', '$http', 'BASE_URL', 'interpolation', '$interpolate',\n                        'fsNanobarAutomationService', '$timeout'];\n                    return ActivityTimeAnomalyController;\n                }());\n                var ActivityTimeAnomalyComponent = {\n                    controller: ActivityTimeAnomalyController,\n                    bindings: {\n                        settings: '<',\n                        indicator: '<'\n                    },\n                    templateUrl: 'app/layouts/user/components/user-indicator/components/fs-indicator-activity-time-anomaly/fs-indicator-activity-time-anomaly.component.html'\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('fsIndicatorActivityTimeAnomaly', ActivityTimeAnomalyComponent);\n            })(fsActivityTimeAnomalyComponent = components.fsActivityTimeAnomalyComponent || (components.fsActivityTimeAnomalyComponent = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var AlertCommentsController = (function () {\n                function AlertCommentsController($scope, authService, alertUpdatesService, toastrService, $element, $timeout) {\n                    this.$scope = $scope;\n                    this.authService = authService;\n                    this.alertUpdatesService = alertUpdatesService;\n                    this.toastrService = toastrService;\n                    this.$element = $element;\n                    this.$timeout = $timeout;\n                    //This object bound to comment which currently edited. Undefined or Null if no comment currently edited.\n                    this.currentUpdatedComment = null;\n                    this.analystMap = {};\n                    this.COMMENT_EDIT_AREA_SELECTOR_PREFIX = '.comment-edit-area-';\n                }\n                /**\n                 * Sending the comment from to the backend using alertUpdatesService,\n                 * and when done, trigger addAlertComment to update the whole state.\n                 */\n                AlertCommentsController.prototype.addComment = function () {\n                    var _this = this;\n                    if (!this.newCommentText) {\n                        return;\n                    }\n                    //Get current user from auth service before update the alert\n                    this.authService.getCurrentUser().then(function (result) {\n                        //Create the comment object\n                        var analystName = result.userName;\n                        var newComment = {\n                            commentText: _this.newCommentText,\n                            analystUserName: analystName,\n                            updateDate: new Date(),\n                            commentId: \"\"\n                        };\n                        _this.alertUpdatesService.addComment(_this.alert.id, newComment).then(function (response) {\n                            //When server update success, clear the current text, and\n                            _this.newCommentText = \"\";\n                            if (response.status === 201) {\n                                _this.addAlertComment({ \"alertId\": _this.alert.id, \"comment\": response.data });\n                            }\n                            else {\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.toastrService.error(\"There was an error trying to add comment. \");\n                        });\n                    });\n                };\n                /**\n                 * Sending the comment delete request to backend using alertUpdatesService,\n                 * and when done, trigger deleteAlertComment to update the whole state.\n                 */\n                AlertCommentsController.prototype.deleteComment = function (comment) {\n                    var _this = this;\n                    this.alertUpdatesService.deleteComment(this.alert.id, comment).then(function (response) {\n                        if (response.status === 200) {\n                            _this.deleteAlertComment({ \"alertId\": _this.alert.id, \"commentId\": comment.commentId });\n                        }\n                        else {\n                            alert(\"return error: \" + response.status);\n                        }\n                    })\n                        .catch(function (err) {\n                        _this.toastrService.error(\"There was an error trying to delete comment. \");\n                    });\n                };\n                /**\n                 * Sending the comment update request to backend using alertUpdatesService,\n                 * and when done, trigger updateAlertComment to update the whole state.\n                 */\n                AlertCommentsController.prototype.updateComment = function () {\n                    var _this = this;\n                    this.authService.getCurrentUser().then(function (result) {\n                        _this.alertUpdatesService.updateComment(_this.alert.id, _this.currentUpdatedComment)\n                            .then(function (response) {\n                            if (response.status === 200) {\n                                _this.currentUpdatedComment = null;\n                                _this.updateAlertComment({ \"alertId\": _this.alert.id, \"comment\": response.data });\n                            }\n                            else {\n                                alert(\"return error: \" + response.status);\n                            }\n                        })\n                            .catch(function (err) {\n                            _this.toastrService.error(\"There was an error trying to update comment. \");\n                        });\n                    });\n                };\n                /**\n                 * Listen to key press event on edited comment.\n                 * If the key is enter - trigger updateComment\n                 * @param keyEvent - the key event\n                 */\n                AlertCommentsController.prototype.commentEditingKeyPressHandler = function (keyEvent) {\n                    if (keyEvent.which === 13) {\n                        this.updateComment();\n                    }\n                };\n                /**\n                 * Listen to key press event on new comment.\n                 * If the key is enter - trigger addComment\n                 * @param keyEvent - the key event\n                 */\n                AlertCommentsController.prototype.newCommentKeyPressHandler = function (keyEvent) {\n                    if (keyEvent.which === 13) {\n                        this.addComment();\n                    }\n                };\n                /**\n                 * When clicking \"update\" on any comment, update the state with the clicked comment details\n                 * @param comment\n                 */\n                AlertCommentsController.prototype.setUpdateMode = function (comment) {\n                    var _this = this;\n                    this.currentUpdatedComment = _.clone(comment);\n                    this.currentUpdatedComment.updateDate = null;\n                    // Its hard to say exactly when angular will expose the element (that has ng-show), so to get best result,\n                    // while planning for a case where it might take longer, there are 3 focus requests, on 50, 100, and 200 ms\n                    _.each([50, 100, 200], function (time) {\n                        _this.$timeout(function () {\n                            _this.$element.find(_this.COMMENT_EDIT_AREA_SELECTOR_PREFIX + comment.commentId).focus();\n                        }, time);\n                    });\n                };\n                AlertCommentsController.$inject = ['$scope', 'auth', 'alertUpdatesService', 'toastrService', '$element', '$timeout'];\n                return AlertCommentsController;\n            }());\n            var alertCommentsController = {\n                controller: AlertCommentsController,\n                templateUrl: 'app/layouts/user/components/user-alert-overview/components/user-alert-overview-comments/user-alert-overview-comments.component.html',\n                bindings: {\n                    alert: '<alertModel',\n                    analystMap: '<analystMap',\n                    updateAlertComment: '&',\n                    addAlertComment: '&',\n                    deleteAlertComment: '&',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('alertComments', alertCommentsController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var AlertFeedback = Fortscale.shared.services.alertUpdatesService.AlertFeedback;\n            var AlertStatus = Fortscale.shared.services.alertUpdatesService.AlertStatus;\n            var ShrinkExpand;\n            (function (ShrinkExpand) {\n                ShrinkExpand[ShrinkExpand[\"Shrink\"] = 0] = \"Shrink\";\n                ShrinkExpand[ShrinkExpand[\"Expand\"] = 1] = \"Expand\";\n            })(ShrinkExpand || (ShrinkExpand = {}));\n            var AlertFeedbackController = (function () {\n                function AlertFeedbackController($scope, $element, alertUpdatesService, toastrService) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.alertUpdatesService = alertUpdatesService;\n                    this.toastrService = toastrService;\n                    this.AlertFeedback = AlertFeedback;\n                    //Constants for animation\n                    this.ACTUAL_RISK_UNCHECKED_SELECTOR = '.actual-risk-button-unchecked';\n                    this.ACTUAL_RISK_CHECKED_SELECTOR = '.actual-risk-button-checked';\n                    this.NOT_RISK_UNCHECKED_SELECTOR = '.not-a-risk-button-unchecked';\n                    this.NOT_RISK_CHECKED_SELECTOR = '.not-a-risk-button-checked';\n                    this.ANIMATION_TIME = 500;\n                }\n                /**\n                 * Method the change the feedback and status of the alert.\n                 * If the want'ed feedback is the same as current alert's feedback the method return the alert to \"unresolved\" feedback\n                 * and \"open\" status. If the feedback different the current alert's feedback- we set the new feedback and \"closed\" status.\n                 * @param clickedFeedbackStatus\n                 */\n                AlertFeedbackController.prototype.setFeedback = function (clickedFeedbackStatus) {\n                    var _this = this;\n                    var currentFeedback = AlertFeedback[this.alert.feedback];\n                    //Type script is not understand that AlertFeedback[this.alert.feedback] return AlertFeedback\n                    var newFeedback;\n                    var newStatus;\n                    //If the users click again on already exists status, the alert will be changed to unresolved / open\n                    if (currentFeedback === clickedFeedbackStatus) {\n                        newFeedback = AlertFeedback.None;\n                        newStatus = AlertStatus.Open;\n                    }\n                    else {\n                        //The user selected different status then existing one,\n                        //we change the status to closed and send the new feedback\n                        newFeedback = clickedFeedbackStatus;\n                        newStatus = AlertStatus.Closed;\n                    }\n                    var feedbackObject = {\n                        \"feedback\": newFeedback,\n                        \"status\": newStatus\n                    };\n                    this.alertUpdatesService.updateFeedback(this.alert.id, feedbackObject).then(function (response) {\n                        if (response.status === 200) {\n                            _this.updateFeedbackDelegate({ \"alertId\": _this.alert.id, \"feedbackObject\": feedbackObject });\n                        }\n                        else {\n                            _this.toastrService.error(\"There was an error trying to update alert feedback. \");\n                        }\n                    })\n                        .catch(function (err) {\n                        _this.toastrService.error(\"There was an error trying to update alert feedback. \");\n                    });\n                };\n                /**\n                 * Animation methods\n                 * @type {string[]}\n                 */\n                AlertFeedbackController.prototype._shrinkElement = function (element) {\n                    element.css('transform', 'scaleY(0)');\n                };\n                AlertFeedbackController.prototype._expandElement = function (element) {\n                    element.css('transform', 'scaleY(1)');\n                };\n                AlertFeedbackController.prototype._setTransitions = function (shrinkElement, expandElement) {\n                    shrinkElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.84, 0.15) 0s\";\n                    expandElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.5, 1) \" + this.ANIMATION_TIME / 2 / 1000 + \"s\";\n                };\n                AlertFeedbackController.prototype._applyShrinkExpand = function (condition, expandSelectorIfTrue, expandSelectorIfFalse, expandOnly) {\n                    var _this = this;\n                    var expandSelector = (condition ? expandSelectorIfTrue : expandSelectorIfFalse);\n                    var expandElement = this.$element.find(expandSelector);\n                    this._expandElement(expandElement);\n                    if (!expandOnly) {\n                        var shrinkSelector = (condition ? expandSelectorIfFalse : expandSelectorIfTrue);\n                        var shrinkElement_1 = this.$element.find(shrinkSelector);\n                        this._shrinkElement(shrinkElement_1);\n                        this._setTransitions(shrinkElement_1, expandElement);\n                        this.$scope.$applyAsync(function () {\n                            _this._shrinkElement(shrinkElement_1);\n                            _this._expandElement(expandElement);\n                        });\n                    }\n                };\n                AlertFeedbackController.prototype._initialRiskFeedbackButtonsFlip = function () {\n                    if (typeof this.alert === \"undefined\") {\n                        //Do nothing\n                        return;\n                    }\n                    var currentFeedback = AlertFeedback[this.alert.feedback];\n                    //Calculate \"risk button\" presentation\n                    this._applyShrinkExpand(AlertFeedback.Approved === currentFeedback, this.ACTUAL_RISK_CHECKED_SELECTOR, this.ACTUAL_RISK_UNCHECKED_SELECTOR, true);\n                    //Calculate \"not a risk button\" presentation\n                    this._applyShrinkExpand(AlertFeedback.Rejected === currentFeedback, this.NOT_RISK_CHECKED_SELECTOR, this.NOT_RISK_UNCHECKED_SELECTOR, true);\n                };\n                AlertFeedbackController.prototype._watchRiskFeedbackFlip = function () {\n                    if (typeof this.alert === \"undefined\") {\n                        //Do nothing\n                        return;\n                    }\n                    var currentFeedback = AlertFeedback[this.alert.feedback];\n                    //Calculate \"risk button\" presentation\n                    this._applyShrinkExpand(AlertFeedback.Approved === currentFeedback, this.ACTUAL_RISK_CHECKED_SELECTOR, this.ACTUAL_RISK_UNCHECKED_SELECTOR, false);\n                    //Calculate \"not a risk button\" presentation\n                    this._applyShrinkExpand(AlertFeedback.Rejected === currentFeedback, this.NOT_RISK_CHECKED_SELECTOR, this.NOT_RISK_UNCHECKED_SELECTOR, false);\n                };\n                AlertFeedbackController.prototype.$onInit = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.alert && _this.alert.feedback; }, function (feedback) {\n                        if (_this.alert && _this.alert.feedback !== undefined) {\n                            _this._watchRiskFeedbackFlip();\n                        }\n                        else {\n                            _this._initialRiskFeedbackButtonsFlip();\n                        }\n                    });\n                };\n                AlertFeedbackController.$inject = ['$scope', '$element', 'alertUpdatesService', 'toastrService'];\n                return AlertFeedbackController;\n            }());\n            var alertFeedbackController = {\n                controller: AlertFeedbackController,\n                templateUrl: 'app/layouts/user/components/user-alert-overview/components/user-alert-overview-feedback/user-alert-overview-feedback.component.html',\n                bindings: {\n                    alert: '<alertModel',\n                    updateFeedbackDelegate: '&'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('alertFeedback', alertFeedbackController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var AlertFeedbackController = (function () {\n                function AlertFeedbackController($scope, userAlertsUtils) {\n                    this.$scope = $scope;\n                    this.userAlertsUtils = userAlertsUtils;\n                }\n                /**\n                 * Extract the list of data sources from any of current alert's indicator\n                 * Return data sources names as string with separators\n                 * If the alert is still not loaded, return empty string\n                 * @returns {String}\n                 */\n                AlertFeedbackController.prototype.getDataSources = function () {\n                    if (typeof this.alert === \"undefined\") {\n                        return \"\";\n                    }\n                    var evidencesList = this.alert.evidences;\n                    return this.userAlertsUtils.getDataSources(evidencesList);\n                };\n                /**\n                 * Extract the list of tags from any of current alert's indicator\n                 * Return tag names as string with separators\n                 * If the alert is still not loaded, return empty string\n                 * @returns {String}\n                 */\n                AlertFeedbackController.prototype.getTags = function () {\n                    var _this = this;\n                    if (typeof this.alert === \"undefined\") {\n                        return;\n                    }\n                    //Because evidences list filtered to contain only the untags evidences,\n                    //The tags evidences stored in tagEvidences\n                    var tagEvidencesList = this.alert.tagEvidences;\n                    this.userAlertsUtils.getTags(tagEvidencesList).then(function (tagNames) {\n                        _this.tagsPrettyNames = tagNames;\n                    });\n                };\n                /**\n                 * Read the description of the alert from messages.\n                 * @returns {any}\n                 */\n                AlertFeedbackController.prototype.getAlertDescription = function () {\n                    if (typeof this.alert === \"undefined\") {\n                        return \"\";\n                    }\n                    return this.userAlertsUtils.getAlertDescription(this.alert);\n                };\n                /**\n                 * Extract all the alerts from user controller, clone it, and\n                 * save the cloned object on this controller\n                 * @private\n                 */\n                AlertFeedbackController.prototype._initAlertWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.alert; }, function (alert) {\n                        if (alert && alert.tagEvidences) {\n                            _this.getTags();\n                        }\n                    });\n                };\n                AlertFeedbackController.prototype.$onInit = function () {\n                    this._initAlertWatch();\n                };\n                AlertFeedbackController.$inject = ['$scope', 'userAlertsUtils'];\n                return AlertFeedbackController;\n            }());\n            var alertFeedbackController = {\n                controller: AlertFeedbackController,\n                templateUrl: 'app/layouts/user/components/user-alert-overview/components/user-alert-overview-description/user-alert-overview-description.component.html',\n                bindings: {\n                    alert: '<alertModel'\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('alertDescription', alertFeedbackController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var UserAlertOverviewHeaderController = (function () {\n                function UserAlertOverviewHeaderController($scope, $stateParams, $state, userIndicatorsUtils) {\n                    this.$scope = $scope;\n                    this.$stateParams = $stateParams;\n                    this.$state = $state;\n                    this.userIndicatorsUtils = userIndicatorsUtils;\n                    this._currentAlertIndex = null;\n                }\n                /**\n                 * Returns the index of the current indicator in the current alert\n                 * @returns {number}\n                 */\n                UserAlertOverviewHeaderController.prototype.getCurrentAlertIndex = function () {\n                    var _this = this;\n                    if (this._currentAlertIndex === null && this.alerts) {\n                        var index_1 = null;\n                        // match the current indicatorId to an indicator in the indicators list\n                        _.some(this.alerts, function (alert, i) {\n                            if (alert.id === _this.$stateParams.alertId) {\n                                index_1 = i;\n                                return true;\n                            }\n                        });\n                        if (this._currentAlertIndex !== index_1) {\n                            this._currentAlertIndex = index_1;\n                        }\n                    }\n                    return this._currentAlertIndex;\n                };\n                /**\n                 * Transition to a new indicator state\n                 * @param step\n                 */\n                UserAlertOverviewHeaderController.prototype.transitionAlert = function (step) {\n                    var futureIndex = this.getCurrentAlertIndex() + step;\n                    // make sure it doesn't exceed the list's range\n                    if (futureIndex < 0 || futureIndex > this.alerts.length - 1) {\n                        return;\n                    }\n                    this.$state.go(this.$state.current.name, { alertId: this.alerts[futureIndex].id });\n                };\n                /**\n                 * Transition to first indicator on the current alert\n                 */\n                UserAlertOverviewHeaderController.prototype.transitionIndicator = function () {\n                    var alert = _.find(this.alerts, { id: this.$stateParams.alertId });\n                    var indicators = this.userIndicatorsUtils.orderIndicators(alert.evidences);\n                    this.$state.go('user.indicator', { alertId: alert.id, indicatorId: indicators[0].id });\n                };\n                UserAlertOverviewHeaderController.prototype.$onInit = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.alerts; }, function (alerts) {\n                        if (alerts) {\n                            _this._currentAlertIndex = null;\n                            _this._currentAlertIndex = _this.getCurrentAlertIndex();\n                            _this.currentAlert = _this.alerts[_this._currentAlertIndex];\n                        }\n                    });\n                };\n                UserAlertOverviewHeaderController.$inject = ['$scope', '$stateParams', '$state', 'userIndicatorsUtils'];\n                return UserAlertOverviewHeaderController;\n            }());\n            var userAlertOverviewHeaderComponent = {\n                controller: UserAlertOverviewHeaderController,\n                templateUrl: 'app/layouts/user/components/user-alert-overview/components/user-alert-overview-header/user-alert-overview-header.component.html',\n                bindings: {\n                    alerts: '<alerts',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('fsUserAlertOverviewHeader', userAlertOverviewHeaderComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var indicatorSlideTemplate = \"\\n<div class=\\\"indicator-slide\\\" ng-repeat=\\\"indicator in $ctrl.indicators\\\"  ng-class=\\\"{'last-slide': $last}\\\">\\n    <div class=\\\"upper-row\\\">\\n        <div class=\\\"indicator-icon-container\\\" ui-sref=\\\"user.indicator({alertId: $ctrl.alert.id, indicatorId: indicator.id})\\\">\\n            <fs-svg-icon symbol-name=\\\"{{::indicator.symbolName}}\\\"></fs-svg-icon>\\n\\n        </div>\\n        <div class=\\\"slide-separator\\\"></div>\\n    </div>\\n    <div class=\\\"slide-description\\\" ui-sref=\\\"user.indicator({alertId: $ctrl.alert.id, indicatorId: indicator.id})\\\">\\n        {{indicator.timeLineDescription}}\\n    </div>\\n    <div class=\\\"slide-date-time\\\" ui-sref=\\\"user.indicator({alertId: $ctrl.alert.id, indicatorId: indicator.id})\\\">\\n        {{indicator.startDate | date:\\\"MM/dd/yyyy | hh\\\\:mm a\\\":\\\"UTC\\\"}}\\n    </div>\\n</div>\";\n            var UserAlertFlowController = (function () {\n                function UserAlertFlowController($scope, $element, $compile, $q, userIndicatorUtils) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.$compile = $compile;\n                    this.$q = $q;\n                    this.userIndicatorUtils = userIndicatorUtils;\n                    this._swiperWrapperOffset = 0;\n                    this.currentIndex = 0;\n                    this.SWIPER_CONTAINER_SELECTOR = '.swiper-container';\n                    this.SWIPER_WRAPPER_SELECTOR = '.swiper-wrapper';\n                    this.INDICATOR_SLIDER_SELECTOR = '.indicator-slide';\n                    this.WRAPPER_TRANSITION = 'transform 1s cubic-bezier(0.68, 0.1, 0.27, 0.98)';\n                }\n                /**\n                 * Takes an index number and performs a slide animation to that index.\n                 * @param index\n                 * @param doNotExecute\n                 * @returns {IPromise<TResult>}\n                 */\n                UserAlertFlowController.prototype.scrollToSlideIndex = function (index, doNotExecute) {\n                    var _this = this;\n                    if (!!doNotExecute) {\n                        return;\n                    }\n                    if (index > this._getNumberOfIndicators() - 1) {\n                        index = this._getNumberOfIndicators() - 1;\n                    }\n                    if (index < 0) {\n                        index = 0;\n                    }\n                    // get slide offset.\n                    var offset = this._IndicatorSlidesBounds[index].offsetLeft;\n                    if ((this._getTotalIndicatorsWidth() > this._getSwiperContainer().width()) && (this._getTotalIndicatorsWidth() - offset) < this._getSwiperWrapper().parent().width()) {\n                        offset = this._getTotalIndicatorsWidth() - this._getSwiperWrapper().parent().width();\n                    }\n                    // set _swiperWrapperOffset.\n                    this._swiperWrapperOffset = offset;\n                    // set swiper offset\n                    return this._updateSwiperWrapperElementOffset()\n                        .then(function () {\n                        return _this._findCurrentIndex();\n                    })\n                        .then(function (currentIndex) {\n                        _this.currentIndex = currentIndex;\n                        return _this._findIfLastPossibleIndex();\n                    })\n                        .then(function (isLast) {\n                        _this.isLastIndicator = isLast;\n                    });\n                };\n                UserAlertFlowController.prototype._getNumberOfIndicators = function () {\n                    return this.indicators.length;\n                };\n                /**\n                 * Finds the current index of slides.\n                 * The heuristics: the first indicator that has both edges in the space\n                 * @returns {IPromise<TResult>}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._findCurrentIndex = function () {\n                    var _this = this;\n                    // iterate through slides and find which one has one side before and on side after the left container side\n                    return this._getIndicatorSlidesAsync()\n                        .then(function (slides) {\n                        var containerBounds = _this._getSwiperContainer()[0].getBoundingClientRect();\n                        var currentIndex = _this.currentIndex;\n                        _.some(slides, function (slide, index) {\n                            var slideBoundingRect = slide.getBoundingClientRect();\n                            if (slideBoundingRect.left >= containerBounds.left) {\n                                currentIndex = index;\n                                return true;\n                            }\n                        });\n                        return currentIndex;\n                    });\n                };\n                /**\n                 * Returns a promise that resolves on a boolean that states if the current index is the right most index\n                 * (which means that scrolling to the next index will cause the inner scroll to move too far to the left)\n                 * The heuristics: If the last indicator's right is less than container's element right.\n                 * @private\n                 */\n                UserAlertFlowController.prototype._findIfLastPossibleIndex = function () {\n                    var _this = this;\n                    return this._getIndicatorSlidesAsync()\n                        .then(function (slides) {\n                        var containerBounds = _this._getSwiperContainer()[0].getBoundingClientRect();\n                        var slideBoundingRect = slides[slides.length - 1].getBoundingClientRect();\n                        return slideBoundingRect.right <= containerBounds.right;\n                    });\n                };\n                /**\n                 * Returns a promise. Animates the slider-wrapper (translate3d) and resolves the promise when animation has finished.\n                 * @returns {IPromise<T>}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._updateSwiperWrapperElementOffset = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    return ctrl.$q(function (resolve, reject) {\n                        function transitionEndHandler() {\n                            ctrl._getSwiperWrapper()[0].removeEventListener('transitionend', transitionEndHandler);\n                            resolve();\n                        }\n                        ctrl._getSwiperWrapper()[0].addEventListener('transitionend', transitionEndHandler);\n                        ctrl._getSwiperWrapper().css({ 'transform': \"translate3d(\" + -_this._swiperWrapperOffset + \"px, 0px, 0px)\" });\n                    });\n                };\n                /**\n                 * Returns a sum of all indicators width\n                 * @returns {number}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._getTotalIndicatorsWidth = function () {\n                    return _.sumBy(this._IndicatorSlidesBounds, function (indicatorSlideBound) { return indicatorSlideBound.width; });\n                };\n                /**\n                 * Returns the swiper container element\n                 * @returns {ng.IAugmentedJQuery}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._getSwiperContainer = function () {\n                    if (!this._swiperContainer) {\n                        this._swiperContainer = this.$element.find(this.SWIPER_CONTAINER_SELECTOR);\n                    }\n                    return this._swiperContainer;\n                };\n                /**\n                 * Sets the swiper wrapper element to _swiperWrapper (if needed) and returns it\n                 * @returns {ng.IAugmentedJQuery}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._getSwiperWrapper = function () {\n                    if (!this._swipperWrapperElement) {\n                        this._swipperWrapperElement = this.$element.find(this.SWIPER_WRAPPER_SELECTOR);\n                    }\n                    return this._swipperWrapperElement;\n                };\n                /**\n                 * Return (Asynchronously) the list of indicator slides. It counts the amount of times it tries to find the\n                 * slides. It will try 10 times before throwing.\n                 * @param {number=} iteration\n                 * @returns {IPromise<any>}\n                 * @private\n                 */\n                UserAlertFlowController.prototype._getIndicatorSlidesAsync = function (iteration) {\n                    var _this = this;\n                    if (iteration === void 0) { iteration = 0; }\n                    return this.$q(function (resolve, reject) {\n                        if (iteration > 10) {\n                            reject('Could not find indicator slides even after 10 iterations.');\n                        }\n                        _this.$scope.$applyAsync(function () {\n                            if (!_this._indicatorSlidesElement || !_this._indicatorSlidesElement.length) {\n                                _this._indicatorSlidesElement =\n                                    Array.from(_this._getSwiperWrapper().find(_this.INDICATOR_SLIDER_SELECTOR));\n                                if (_this._indicatorSlidesElement.length) {\n                                    resolve(_this._indicatorSlidesElement);\n                                }\n                                else {\n                                    resolve(null);\n                                }\n                            }\n                            else {\n                                resolve(_this._indicatorSlidesElement);\n                            }\n                        });\n                    })\n                        .then(function (indicatorSlidesElement) {\n                        if (indicatorSlidesElement === null) {\n                            iteration += 1;\n                            return _this._getIndicatorSlidesAsync(iteration);\n                        }\n                        else {\n                            return indicatorSlidesElement;\n                        }\n                    });\n                };\n                /**\n                 * Renders the swiper element and appends it to its container element\n                 * @private\n                 */\n                UserAlertFlowController.prototype._renderSwiper = function () {\n                    var _this = this;\n                    this.$compile(indicatorSlideTemplate)(this.$scope, function (clonedElement, scope) {\n                        //cleanup (if not first time alert is rendered)\n                        _this._getSwiperWrapper().empty();\n                        _this._indicatorSlidesElement = null;\n                        // Create content\n                        _this._swiperElement = clonedElement;\n                        _this._getSwiperWrapper().append(_this._swiperElement);\n                    });\n                };\n                /**\n                 * Iterates through all the slides and marks the bounds\n                 * @private\n                 */\n                UserAlertFlowController.prototype._markSlidesBounds = function () {\n                    var _this = this;\n                    return this._getIndicatorSlidesAsync()\n                        .then(function (slides) {\n                        _this._IndicatorSlidesBounds = _.map(slides, function (slide) {\n                            return {\n                                offsetLeft: slide.offsetLeft - slide.parentElement.offsetLeft,\n                                width: slide.offsetWidth\n                            };\n                        });\n                    })\n                        .catch(function (err) {\n                        throw err;\n                    });\n                };\n                /**\n                 * Takes the received alert, finds the indicators, and digests them.\n                 * @private\n                 */\n                UserAlertFlowController.prototype._digestAlert = function () {\n                    var _this = this;\n                    // Filter and sort indicators\n                    this.indicators = this.userIndicatorUtils.filterIndicators(this.alert.evidences);\n                    this.indicators = this.userIndicatorUtils.orderIndicators(this.indicators);\n                    // Duplicate for immutability\n                    this.indicators = _.cloneDeep(this.indicators);\n                    // Add symbolName (for svg icon) and time line description to each indicator\n                    _.each(this.indicators, function (indicator) {\n                        indicator.symbolName = _this.userIndicatorUtils.getIndicatorSymbolName(indicator);\n                        indicator.timeLineDescription = _this.userIndicatorUtils.getIndicatorTimelineDescription(indicator);\n                    });\n                };\n                UserAlertFlowController.prototype._initAlertWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.alert; }, function (alert) {\n                        if (alert) {\n                            _this._digestAlert();\n                            _this._renderSwiper();\n                            _this._markSlidesBounds()\n                                .then(function () {\n                                return _this._findCurrentIndex();\n                            })\n                                .then(function (currentIndex) {\n                                _this.currentIndex = currentIndex;\n                                return _this._findIfLastPossibleIndex();\n                            })\n                                .then(function (isLastIndicator) {\n                                _this.isLastIndicator = isLastIndicator;\n                            });\n                        }\n                    });\n                };\n                UserAlertFlowController.prototype._initContainerDragWatch = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    var originalX;\n                    var xDelta = 0;\n                    var wrapperHasMoved = false;\n                    /**\n                     * Handler for mouse move\n                     * @param evt\n                     */\n                    function mousemoveHandler(evt) {\n                        // Raise move flag;\n                        wrapperHasMoved = true;\n                        // prevent movement when indicators width is less than the container\n                        if (ctrl._getTotalIndicatorsWidth() < ctrl._getSwiperContainer().width()) {\n                            return;\n                        }\n                        // Calc movement delta\n                        xDelta = originalX - evt.pageX;\n                        // Move wrapper\n                        ctrl._getSwiperWrapper().css('transform', \"translate3d(\" + -(ctrl._swiperWrapperOffset + xDelta) + \"px, 0px, 0px)\");\n                    }\n                    /**\n                     * Handler for mouse click up\n                     * @param evt\n                     */\n                    function mouseupHandler(evt) {\n                        // Remove handler for mouse move\n                        ctrl._getSwiperContainer().off('mousemove', mousemoveHandler);\n                        // Enter delta into current offset and zero delta\n                        ctrl._swiperWrapperOffset += xDelta;\n                        xDelta = 0;\n                        // Start sequence that will scroll back to first or last indicator if the wrapper\n                        // is too far to the left or right.\n                        ctrl._findIfLastPossibleIndex()\n                            .then(function (isLast) {\n                            ctrl.isLastIndicator = isLast;\n                            return ctrl._findCurrentIndex();\n                        })\n                            .then(function (currentIndex) {\n                            // put current index on the controller\n                            ctrl.currentIndex = currentIndex;\n                            // Change scroll time to 0.3 so the pull back will be fast\n                            ctrl._getSwiperWrapper().css('transition', 'transform 0.3s ease-in-out');\n                            // if current index is 0 than scroll back to first indicator\n                            if (currentIndex === 0) {\n                                return ctrl.scrollToSlideIndex(ctrl.currentIndex);\n                            }\n                            else if (ctrl.isLastIndicator) {\n                                return ctrl.scrollToSlideIndex(ctrl._getNumberOfIndicators() - 1);\n                            }\n                        })\n                            .then(function () {\n                            // Place the original transition back on the wrapper\n                            ctrl._getSwiperWrapper().css('transition', ctrl.WRAPPER_TRANSITION);\n                        });\n                    }\n                    /**\n                     * Handler for mouse down\n                     * @param evt\n                     */\n                    function mousedownHandler(evt) {\n                        // Set listener for mousemove\n                        ctrl._getSwiperContainer().on('mousemove', mousemoveHandler);\n                        // Find the original mouse location for future delta calculation\n                        originalX = evt.pageX;\n                        // Remove transition time so all transition (while in move) will be immediate.\n                        ctrl._getSwiperWrapper().css('transition', 'all 0s');\n                    }\n                    /**\n                     * Handler for mouse click. It was set on the container, on Capture-Phase. When wrapperHasMoved flag is on\n                     * (which means that move process was made on this particular mouse click sequence) then propagation\n                     * is stopped, so it will not fire the ui-sref change.\n                     * @param evt\n                     */\n                    function mouseClickHandler(evt) {\n                        if (wrapperHasMoved) {\n                            evt.stopImmediatePropagation();\n                        }\n                        // After flag was evaluated, put it down.\n                        wrapperHasMoved = false;\n                    }\n                    // Add up down and click listeners\n                    ctrl._getSwiperContainer().on('mousedown', mousedownHandler);\n                    ctrl._getSwiperContainer().on('mouseup', mouseupHandler);\n                    ctrl._getSwiperContainer()[0].addEventListener('click', mouseClickHandler, true);\n                    // Cleanup listeners on scope destroy\n                    ctrl.$scope.$on('$destory', function () {\n                        _this._getSwiperContainer().off('mousedown', mousedownHandler);\n                        _this._getSwiperContainer().off('mouseup', mouseupHandler);\n                        ctrl._getSwiperContainer()[0].removeEventListener('click', mouseClickHandler, true);\n                    });\n                };\n                UserAlertFlowController.prototype.$onInit = function () {\n                    this._initAlertWatch();\n                    this._initContainerDragWatch();\n                };\n                UserAlertFlowController.$inject = ['$scope', '$element', '$compile', '$q', 'userIndicatorsUtils'];\n                return UserAlertFlowController;\n            }());\n            var fsUserAlertFlowComponent = {\n                controller: UserAlertFlowController,\n                templateUrl: 'app/layouts/user/components/user-alert-overview/components/user-alert-flow/user-alert-flow.component.html',\n                bindings: {\n                    alert: '<alertModel',\n                }\n            };\n            angular.module('Fortscale.layouts.user')\n                .component('fsUserAlertFlow', fsUserAlertFlowComponent);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var LOADING_PROGRESS_PROPERTY_NAME = 'loadingProgress';\n            var UserController = (function () {\n                function UserController(scope, element, $http, $stateParams, fsNanobarAutomationService, userUtils, userTagsUtils, tagsUtils, userWatchUtil, toastrService, $state, BASE_URL) {\n                    this.scope = scope;\n                    this.element = element;\n                    this.$http = $http;\n                    this.$stateParams = $stateParams;\n                    this.fsNanobarAutomationService = fsNanobarAutomationService;\n                    this.userUtils = userUtils;\n                    this.userTagsUtils = userTagsUtils;\n                    this.tagsUtils = tagsUtils;\n                    this.userWatchUtil = userWatchUtil;\n                    this.toastrService = toastrService;\n                    this.$state = $state;\n                    this.BASE_URL = BASE_URL;\n                    this.NANOBAR_ID = 'user-page';\n                    this._init();\n                }\n                /**\n                 * Removes a tag from a user,\n                 * @param tag\n                 */\n                UserController.prototype.removeTag = function (tag) {\n                    var _this = this;\n                    this.userTagsUtils.removeTag(tag, this.user)\n                        .then(function (user) {\n                        _this.user = _.cloneDeep(user);\n                    });\n                };\n                /**\n                 * Adds a tag to the user\n                 * @param {ITagDefinition} tag\n                 */\n                UserController.prototype.addTag = function (tag) {\n                    var _this = this;\n                    var ctrl = this;\n                    this.userTagsUtils.addTag(tag.name, this.user, tag.displayName ? tag.displayName : tag.name)\n                        .then(function (user) {\n                        //If tag is new - reload tags list\n                        var tagFromTagsList = _.find(_this.tags, { \"name\": tag.name });\n                        if (!tagFromTagsList) {\n                            ctrl._initLoadingTags();\n                        }\n                        ctrl.user = _.cloneDeep(user);\n                    });\n                };\n                /**\n                 * Adds a new tag to system and to user\n                 * @param {string} tagName\n                 */\n                //addNewTag (tagName:string):void {\n                //    this.userTagsUtils.addNewTag(tagName, this.tags, _.cloneDeep(this.user))\n                //        .then(({user: user, tags: tags}:{user:any, tags:ITagDefinition[]})=> {\n                //            if (user) {\n                //                this.user = _.cloneDeep(user);\n                //            }\n                //\n                //            if (tags) {\n                //                this.tags = tags;\n                //            }\n                //\n                //        });\n                //}\n                /**\n                 * Start of delegate methods of alert update (add comment, update comment, delete comment amd update feedbacka and status\n                 */\n                UserController.prototype.addComment = function (alertId, comment) {\n                    var alert = _.find(this.alerts, { id: alertId });\n                    alert.comments.unshift(comment);\n                    this.alerts = _.cloneDeep(this.alerts); //Change the referench to trigger watchers\n                };\n                UserController.prototype.updateComment = function (alertId, comment) {\n                    var alert = _.find(this.alerts, { id: alertId });\n                    _.remove(alert.comments, function (commentInArray) {\n                        return commentInArray.commentId === comment.commentId;\n                    });\n                    alert.comments.unshift(comment);\n                    this.alerts = _.cloneDeep(this.alerts); //Change the referench to trigger watchers\n                };\n                UserController.prototype.deleteComment = function (alertId, commentId) {\n                    var alert = _.find(this.alerts, { id: alertId });\n                    _.remove(alert.comments, function (commentInArray) {\n                        return commentInArray.commentId === commentId;\n                    });\n                    this.alerts = _.cloneDeep(this.alerts); //Change the referench to trigger watchers\n                };\n                UserController.prototype.updateFeedback = function (alertId, feedbackObject) {\n                    //On feedback update we need to reload the whole user\n                    this._initLoadingSequence();\n                };\n                /**\n                 * End of delegate methods of alert update (add comment, update comment, delete comment amd update feedbacka and status\n                 */\n                UserController.prototype.toggleUserWatch = function () {\n                    var _this = this;\n                    this.userWatchUtil.changeUserWatchState(this.user, !this.user.followed)\n                        .then(function (user) { return _this.user = user; })\n                        .catch(function (err) {\n                        console.error(err);\n                        _this.toastrService.error(\"There was an error trying to change user's \" + _this.user.fallbackDisplayName + \" watch state.<br>Please try again later.\");\n                    });\n                };\n                UserController.prototype._initLoadingTags = function () {\n                    var _this = this;\n                    var promise = this.tagsUtils.getTags()\n                        .then(function (res) {\n                        _this.tags = res.data;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error fetching tags.', err);\n                        _this.tags = [];\n                    });\n                    this.fsNanobarAutomationService.addPromise(this.NANOBAR_ID, promise);\n                    return promise;\n                };\n                /**\n                 * Start the load user sequence\n                 * @private\n                 */\n                UserController.prototype._initLoadUser = function () {\n                    var _this = this;\n                    var promise = this.userUtils.getUsersDetails([this.$stateParams.userId])\n                        .then(function (users) {\n                        if (!users.length) {\n                            _this._goBackHistoryOrHome(\"No user was returned for id \" + _this.$stateParams.userId + \" .\");\n                            return;\n                        }\n                        _this.userUtils.setFallBackDisplayNames(users);\n                        _this.userUtils.setUsersFullAddress(users);\n                        _this.user = users[0];\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user.', err);\n                        _this.user = {};\n                    });\n                    this.fsNanobarAutomationService.addPromise(this.NANOBAR_ID, promise);\n                    return promise;\n                };\n                /**\n                 * Loads a user's alerts\n                 * @returns {IPromise<TResult>}\n                 * @private\n                 */\n                UserController.prototype._initLoadingAlerts = function () {\n                    var _this = this;\n                    var promise = this.$http.get(this.BASE_URL + \"/alerts\", {\n                        params: {\n                            entity_id: this.$stateParams.userId\n                        }\n                    })\n                        .then(function (res) {\n                        _this.alerts = res.data.data;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user alerts.', err);\n                        _this.alerts = [];\n                    });\n                    this.fsNanobarAutomationService.addPromise(this.NANOBAR_ID, promise);\n                    return promise;\n                };\n                /**\n                 * Initiates assets loading sequence\n                 *\n                 * @private\n                 */\n                UserController.prototype._initLoadingSequence = function () {\n                    var _this = this;\n                    var promiseTags = this._initLoadingTags();\n                    this.fsNanobarAutomationService.addPromise(this.NANOBAR_ID, promiseTags);\n                    var promiseUser = this._initLoadUser()\n                        .then(function () {\n                        if (!_this.user) {\n                            return;\n                        }\n                        _this._initLoadingAlerts();\n                    });\n                    this.fsNanobarAutomationService.addPromise(this.NANOBAR_ID, promiseUser);\n                };\n                UserController.prototype._goBackHistoryOrHome = function (warnMsg) {\n                    if (window.history.length) {\n                        console.warn(warnMsg + ' Going back to previous page.');\n                        // We use the applyAsync here to give angular a chance to complete the transition and register to the history.\n                        this.scope.$applyAsync(function () {\n                            window.history.back();\n                        });\n                    }\n                    else {\n                        console.warn(warnMsg + ' Redirecting to Overview.');\n                        this.$state.go('overview');\n                    }\n                    return;\n                };\n                UserController.prototype._init = function () {\n                    var _this = this;\n                    if (!this.$stateParams.userId) {\n                        this._goBackHistoryOrHome('No user id was provided in the url.');\n                        return;\n                    }\n                    this.activities = new user_1.Activities();\n                    // Start loading assets\n                    this._initLoadingSequence();\n                    this.scope.$on('userRiskScore:AlertsSorted', function (evt, sortedAlerts) {\n                        if (sortedAlerts) {\n                            _this.scope.$applyAsync(function () {\n                                _this.sortedAlerts = sortedAlerts;\n                            });\n                        }\n                    });\n                };\n                UserController.$inject = ['$scope', '$element', '$http', '$stateParams', 'fsNanobarAutomationService', 'userUtils',\n                    'userTagsUtils', 'tagsUtils', 'userWatchUtil', 'toastrService', '$state',\n                    'BASE_URL'];\n                return UserController;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .controller('UserController', UserController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var eEntityType = Fortscale.shared.services.entityActivityUtils.eEntityType;\n            var NUMBER_OF_TICKS = 11;\n            var UserAttributesController = (function () {\n                function UserAttributesController($scope, entityActivityUtils, fsNanobarAutomationService, page) {\n                    this.$scope = $scope;\n                    this.entityActivityUtils = entityActivityUtils;\n                    this.fsNanobarAutomationService = fsNanobarAutomationService;\n                    this.page = page;\n                    this._init();\n                }\n                /**\n                 * Start the user top countries load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadUserTopCountriesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getTopCountries(eEntityType.USER, this.user)\n                        .then(function (countries) {\n                        _this.activities.user.topCountries = countries;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading organization top countries.', err);\n                        _this.activities.user.topCountries = [];\n                    });\n                };\n                /**\n                 * Starts the organization top countries load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadOrganizationTopCountriesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getTopCountries(eEntityType.ORGANIZATION)\n                        .then(function (countries) {\n                        _this.activities.organization.topCountries = countries;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading organization top countries.', err);\n                        _this.activities.organization.topCountries = [];\n                    });\n                };\n                /**\n                 * Start the user's authentications load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadingAuthenticationsActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getAuthentications(eEntityType.USER, this.user)\n                        .then(function (authentications) {\n                        _this.activities.user.authentications = authentications;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user authentications.', err);\n                        _this.activities.user.authentications = {\n                            success: 0,\n                            failed: 0\n                        };\n                    });\n                };\n                /**\n                 * Start the user's working hours load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadingWorkingHourActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getWorkingHours(eEntityType.USER, this.user)\n                        .then(function (workingHours) {\n                        _this.activities.user.workingHours = workingHours;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user working-hours.', err);\n                        _this.activities.user.workingHours = [];\n                    });\n                };\n                /**\n                 * Start the user's source devices load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadingSourceDevicesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getSourceDevices(eEntityType.USER, this.user)\n                        .then(function (sourceDevices) {\n                        _this.activities.user.sourceDevices = sourceDevices;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user source devices.', err);\n                        _this.activities.user.sourceDevices = [];\n                    });\n                };\n                /**\n                 * Start the user's target devices load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadingTargetDevicesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getTargetDevices(eEntityType.USER, this.user)\n                        .then(function (targetDevices) {\n                        _this.activities.user.targetDevices = targetDevices;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user source devices.', err);\n                        _this.activities.user.targetDevices = [];\n                    });\n                };\n                /**\n                 * Start the user's data usages load\n                 * @returns {IPromise<void>}\n                 * @private\n                 */\n                UserAttributesController.prototype._initLoadingDataUsagesActivity = function () {\n                    var _this = this;\n                    return this.entityActivityUtils.getDataUsages(eEntityType.USER, this.user)\n                        .then(function (dataUsages) {\n                        _this.activities.user.dataUsages = dataUsages;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error loading user data usages.', err);\n                        _this.activities.user.dataUsages = [];\n                    });\n                };\n                UserAttributesController.prototype._initLoadingSequence = function () {\n                    var promises = [\n                        this._initLoadUserTopCountriesActivity(),\n                        this._initLoadOrganizationTopCountriesActivity(),\n                        this._initLoadingAuthenticationsActivity(),\n                        this._initLoadingWorkingHourActivity(),\n                        this._initLoadingSourceDevicesActivity(),\n                        this._initLoadingTargetDevicesActivity(),\n                        this._initLoadingDataUsagesActivity()\n                    ];\n                    this.fsNanobarAutomationService.addPromises('user-page', promises);\n                };\n                UserAttributesController.prototype._initUserWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.$scope.userCtrl.user; }, function (user) {\n                        if (user) {\n                            _this.user = user;\n                            _this._initLoadingSequence();\n                            _this.page.setPageTitle(user.username + \" - User Profile\");\n                        }\n                    });\n                };\n                UserAttributesController.prototype._init = function () {\n                    this.activities = new user_1.Activities();\n                    this._initUserWatch();\n                };\n                UserAttributesController.$inject = ['$scope', 'entityActivityUtils', 'fsNanobarAutomationService', 'page'];\n                return UserAttributesController;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .controller('userAttributesController', UserAttributesController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            var userAlertOverviewViewController = (function () {\n                function userAlertOverviewViewController($scope, $stateParams, authService, toastrService, page) {\n                    this.$scope = $scope;\n                    this.$stateParams = $stateParams;\n                    this.authService = authService;\n                    this.toastrService = toastrService;\n                    this.page = page;\n                    this.alertId = null;\n                    this.userAlerts = null;\n                    this.userCtrl = null;\n                    this.analystMap = {}; //Map the analyst name as retrived from the API to analyst object\n                    this.alerts = null;\n                    this.alertId = $stateParams.alertId;\n                    this.userCtrl = $scope.userCtrl;\n                    this._init();\n                }\n                /**\n                 * Extract the active alert from the state params, clone it, and store it\n                 * on the conrollter\n                 * @private\n                 */\n                userAlertOverviewViewController.prototype._getActiveAlert = function () {\n                    if (this.$stateParams.alertId) {\n                        this.alert = _.cloneDeep(_.find(this.userAlerts, { id: this.$stateParams.alertId }));\n                    }\n                };\n                /**\n                 * Extract all the alerts from user controller, clone it, and\n                 * save the cloned object on this controller\n                 * @private\n                 */\n                userAlertOverviewViewController.prototype._initAlertsWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.$scope.userCtrl.sortedAlerts; }, function (alerts) {\n                        if (alerts && alerts.length) {\n                            _this.userAlerts = _.cloneDeep(alerts);\n                            _this._getActiveAlert();\n                            _this.page.setPageTitle(_this.userAlerts[0].entityName + \" - Alert Overview\");\n                        }\n                    });\n                };\n                /**\n                 * When component loaded, we load a map from each analyst names as apear on the comment, to full display name.\n                 * @private\n                 */\n                userAlertOverviewViewController.prototype._initAnalystFullNames = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    this.authService.getAllUsers().then(function (result) {\n                        _.forEach(result, function (value, key) {\n                            ctrl.analystMap[value.emailAddress] = value.fullName;\n                        });\n                    })\n                        .catch(function (err) {\n                        _this.toastrService.warning(\"Can't load analyst full names \");\n                    });\n                };\n                /**\n                 * Extract delegated methods from user controller and save it on this controller\n                 * @private\n                 */\n                userAlertOverviewViewController.prototype._initPopulatedFunctions = function () {\n                    this.updateComment = this.userCtrl.updateComment.bind(this.userCtrl);\n                    this.addComment = this.userCtrl.addComment.bind(this.userCtrl);\n                    this.deleteComment = this.userCtrl.deleteComment.bind(this.userCtrl);\n                    this.updateFeedback = this.userCtrl.updateFeedback.bind(this.userCtrl);\n                };\n                userAlertOverviewViewController.prototype._init = function () {\n                    this._initAlertsWatch();\n                    this._initAnalystFullNames();\n                    this._initPopulatedFunctions();\n                };\n                userAlertOverviewViewController.$inject = ['$scope', '$stateParams', 'auth', 'toastrService', 'page'];\n                return userAlertOverviewViewController;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .controller('userAlertOverviewController', userAlertOverviewViewController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user_1) {\n            var userIndicatorViewController = (function () {\n                function userIndicatorViewController($scope, $stateParams, indicatorTypeMapper) {\n                    this.$scope = $scope;\n                    this.$stateParams = $stateParams;\n                    this.indicatorTypeMapper = indicatorTypeMapper;\n                    this.alerts = null;\n                    this.alert = null;\n                    this.indicator = null;\n                    this.indicatorType = null;\n                    this._init();\n                }\n                userIndicatorViewController.prototype._getActiveAlert = function () {\n                    if (this.$stateParams.alertId) {\n                        this.alert = _.cloneDeep(_.find(this.alerts, { id: this.$stateParams.alertId }));\n                    }\n                };\n                userIndicatorViewController.prototype._getActiveIndicator = function () {\n                    if (this.$stateParams.indicatorId && this.alert) {\n                        this.indicator = _.cloneDeep(_.find(this.alert.evidences, { id: this.$stateParams.indicatorId }));\n                    }\n                };\n                userIndicatorViewController.prototype._getIndicatorType = function () {\n                    if (this.indicator) {\n                        this.indicatorType = this.indicatorTypeMapper.getType(this.indicator);\n                    }\n                };\n                userIndicatorViewController.prototype._initAlertsWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.$scope.userCtrl.alerts; }, function (alerts) {\n                        if (alerts) {\n                            _this.alerts = _.cloneDeep(alerts);\n                            _this._getActiveAlert();\n                            _this._getActiveIndicator();\n                            _this._getIndicatorType();\n                        }\n                    });\n                };\n                userIndicatorViewController.prototype._initUserWatch = function () {\n                    var _this = this;\n                    this.$scope.$watch(function () { return _this.$scope.userCtrl.user; }, function (user) {\n                        if (user) {\n                            _this.user = _.cloneDeep(user);\n                        }\n                    });\n                };\n                userIndicatorViewController.prototype._init = function () {\n                    this._initAlertsWatch();\n                    this._initUserWatch();\n                };\n                userIndicatorViewController.$inject = ['$scope', '$stateParams', 'indicatorTypeMapper'];\n                return userIndicatorViewController;\n            }());\n            angular.module('Fortscale.layouts.user')\n                .controller('userIndicatorController', userIndicatorViewController);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * Created by shays on 01/08/2016.\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var user;\n        (function (user) {\n            angular.module('Fortscale.layouts.users', []);\n        })(user = layouts.user || (layouts.user = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * Created by shays on 07/09/2016.\n * This class contain different object types which can be stored on the state,\n * and implement the converting methods (to csv, to post request representation or to get requests representation\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var types;\n            (function (types) {\n                var NumberState = (function () {\n                    function NumberState() {\n                    }\n                    NumberState.prototype.getAsStateSeperatedValues = function (value) {\n                        return value + \"\";\n                    };\n                    NumberState.prototype.getObjectForPostRequest = function (value) {\n                        return value;\n                    };\n                    NumberState.prototype.getObjectForGetRequest = function (value) {\n                        return value;\n                    };\n                    return NumberState;\n                }());\n                var StringState = (function () {\n                    function StringState() {\n                    }\n                    StringState.prototype.getAsStateSeperatedValues = function (value) {\n                        return value;\n                    };\n                    StringState.prototype.getObjectForPostRequest = function (value) {\n                        return value;\n                    };\n                    StringState.prototype.getObjectForGetRequest = function (value) {\n                        return value;\n                    };\n                    return StringState;\n                }());\n                var BooleanState = (function () {\n                    function BooleanState() {\n                    }\n                    BooleanState.prototype.getAsStateSeperatedValues = function (value) {\n                        return value.toString();\n                    };\n                    BooleanState.prototype.getObjectForPostRequest = function (value) {\n                        return value;\n                    };\n                    BooleanState.prototype.getObjectForGetRequest = function (value) {\n                        return value;\n                    };\n                    return BooleanState;\n                }());\n                var AlertTypesState = (function () {\n                    function AlertTypesState() {\n                    }\n                    /**\n                     *  The rest return array of strings (alert type name]\n                     *  The state/combobox need to get those ids as seperated string,\n                     *  for example: \"VPN_lateral_movement , brute_force_normalized_username_hourly@@@brute_force_normalized_username_daily\".\n                     *  The reason is the that \"@@@\" use as seperater between few alert types which are displayed and choosed together in the combobox\n            \n                     * @param key\n                     * @param value\n                     * @param allAlertTypes - the ids list all the exists alertTypes\n                     * @returns {string}\n                     * @private\n                     */\n                    AlertTypesState.prototype.getAsStateSeperatedValues = function (values, listOfOptions) {\n                        if (_.isNil(values)) {\n                            return;\n                        }\n                        var response = [];\n                        _.each(values, function (value) {\n                            //If anomaly type not empty - look for match key with can have single anomalyType\n                            // or a few anomaly types seperated by \"@@\"\n                            _.each(listOfOptions, function (alertKey) {\n                                var keyParts = alertKey.id.split(\"@@@\");\n                                var index = _.findIndex(keyParts, function (keyPart) { return keyPart === value; });\n                                if (index >= 0) {\n                                    //value match one of the key parts\n                                    //So we add the alertKey to the response of keys\n                                    response.push(alertKey.id);\n                                }\n                            });\n                        });\n                        response = _.uniq(response);\n                        return response.join(\",\");\n                    };\n                    /**\n                     * This method get a string of alert types list keys, seperated by \",\" and \"@@@\"\n                     * If this is for get request - convert it to string seperated by \",\" only.\n                     * If this is for post request we need to generate an object for the response\n                     * @param value\n                     * @param isPostPut\n                     * @returns {string[] or String}\n                     * @private\n                     */\n                    AlertTypesState.prototype.getObjectForPostRequest = function (value) {\n                        var SEPERATPR = \"@@@\";\n                        if (_.isNil(value)) {\n                            return value;\n                        }\n                        var alertTypessAsStrings = value.split(\",\");\n                        if (alertTypessAsStrings.length === 0) {\n                            return null;\n                        }\n                        var response = [];\n                        _.each(alertTypessAsStrings, function (alertTypesParseAsString) {\n                            //If alert types is list of alerts types seperated by \"@@@\" - split it into array of string\n                            //and add each item in the list to the response\n                            var parts = alertTypesParseAsString.split(SEPERATPR);\n                            //add parts to the response\n                            response = _.union(response, parts);\n                        });\n                        return response;\n                    };\n                    AlertTypesState.prototype.getObjectForGetRequest = function (value) {\n                        return _.replace(value, \"@@@\", \",\");\n                    };\n                    return AlertTypesState;\n                }());\n                var IndicatorTypesState = (function () {\n                    function IndicatorTypesState() {\n                    }\n                    /**\n                     *  The rest return array of object [{dataSource: string, anomalyType string},{{dataSource: string, anomalyType string}}]\n                     *  The state/combobox need to get those ids as seperated string,\n                     *  for example: \"gwame , kerberos_login@@@time_anomaly , ssh@@@high_number_hourly@@high_number_daiy.\n                     *  The reason is the that \"@@@\" use as seperater between the data source and anomaly type,\n                     *  while the \"@@\" used to diffriniate two indicators that have the same pretty name, and will display only once\n                     *  in the combo. for example high_number_hourly@@high_number_daiy will have only one entry in the combo box.\n                     *\n            \n                     * @param key\n                     * @param value\n                     * @param allIndicatorTypes - the ids list all the exists indicators\n                     * @returns {string}\n                     * @private\n                     */\n                    IndicatorTypesState.prototype.getAsStateSeperatedValues = function (value, listOfOptions) {\n                        if (value.anomalyList) {\n                            var dataSources_1 = [];\n                            _.each(value.anomalyList, function (singleRow) {\n                                //If anomaly type not empty - look for match key with can have single anomalyType\n                                // or a few anomaly types seperated by \"@@\"\n                                if (singleRow.anomalyType) {\n                                    _.each(listOfOptions, function (indicatorKey) {\n                                        var keyParts = indicatorKey.id.split(\"@@@\");\n                                        if (singleRow.dataSource === keyParts[0] && keyParts.length > 1) {\n                                            var anomalyParts = keyParts[1].split(\"@@\");\n                                            var keyIndex = _.indexOf(anomalyParts, singleRow.anomalyType);\n                                            if (keyIndex > -1) {\n                                                dataSources_1.push(indicatorKey.id);\n                                            }\n                                        }\n                                    });\n                                }\n                                else {\n                                    dataSources_1.push(singleRow.dataSource);\n                                }\n                            });\n                            dataSources_1 = _.uniqBy(dataSources_1, function (indicatorKey) {\n                                return indicatorKey;\n                            });\n                            return dataSources_1.join(\",\");\n                        }\n                        return;\n                    };\n                    /**\n                     * This method get a string of indicators list keys\n                     * If this is for get request - do nothing. Return the string.\n                     * If this is for post request we need to generate a body of the form\n                     * anomalyList:{dataSource:string, anomalyType?:string}[]}\n                     * @param value\n                     * @param isPostPut\n                     * @returns {anomalyList:{dataSource:string, anomalyType?:string}[]} or String\n                     * @private\n                     */\n                    IndicatorTypesState.prototype.getObjectForPostRequest = function (value) {\n                        if (_.isNil(value)) {\n                            return value;\n                        }\n                        var indicatorsAsStrings = value.split(\",\");\n                        ;\n                        if (indicatorsAsStrings.length === 0) {\n                            return null;\n                        }\n                        var response = { anomalyList: [] };\n                        _.each(indicatorsAsStrings, function (indicatorParseAsString) {\n                            var parts = indicatorParseAsString.split(\"@@@\");\n                            if (parts.length === 1) {\n                                var indicator = { dataSource: parts[0] };\n                                response.anomalyList.push(indicator);\n                            }\n                            else if (parts.length > 1) {\n                                _.each(parts[1].split('@@'), function (indicatorsOfDataSource) {\n                                    var indicator = {\n                                        dataSource: parts[0],\n                                        anomalyType: indicatorsOfDataSource\n                                    };\n                                    response.anomalyList.push(indicator);\n                                });\n                            }\n                        });\n                        return response;\n                    };\n                    IndicatorTypesState.prototype.getObjectForGetRequest = function (value) {\n                        return value;\n                    };\n                    return IndicatorTypesState;\n                }());\n                var StringsArrayState = (function () {\n                    function StringsArrayState() {\n                    }\n                    StringsArrayState.prototype.getAsStateSeperatedValues = function (value, listOfOptions) {\n                        return value.join(\",\");\n                    };\n                    StringsArrayState.prototype.getObjectForPostRequest = function (value) {\n                        if (_.isNil(value)) {\n                            return value;\n                        }\n                        return value.split(\",\");\n                    };\n                    StringsArrayState.prototype.getObjectForGetRequest = function (value) {\n                        return value;\n                    };\n                    return StringsArrayState;\n                }());\n                types.STATE_TYPES = {\n                    \"NumberState\": new NumberState(),\n                    \"StringState\": new StringState(),\n                    \"BooleanState\": new BooleanState(),\n                    \"IndicatorTypesState\": new IndicatorTypesState(),\n                    \"AlertTypesState\": new AlertTypesState(),\n                    \"StringsArrayState\": new StringsArrayState()\n                };\n            })(types = users.types || (users.types = {}));\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * Attributes of the users state has several possible format.\n * Each value should might have different represntations for:\n * - How it stored on the state\n * - How it sent on the url to get & delete requests\n * - How it sent in the body for post / fetch / put request.\n *\n * The goals of this service is to convert any of the types between the different representations.\n * The list of types and implementations defined in app/app/layouts/users/services/users-state-types.ts\n *\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var STATE_TYPES = Fortscale.layouts.users.types.STATE_TYPES;\n            var ConvertUsersStateUtils = (function () {\n                function ConvertUsersStateUtils(attributeToTypeMap) {\n                    this.attributeToTypeMap = attributeToTypeMap;\n                }\n                /**\n                 * Helper method which convert the object value into seperated comma string\n                 * @param key\n                 * @param value\n                 * @param allIndicatorTypes\n                 * @param allAlertTypes\n                 */\n                ConvertUsersStateUtils.prototype.getAsStateSeperatedValues = function (key, value, allOptionsList) {\n                    //If no values return null\n                    if (!value) {\n                        return;\n                    }\n                    //Return the value as string.\n                    var stateTypeImplementation = STATE_TYPES[this.attributeToTypeMap[key]];\n                    //If this attribute need the list for possible to build the values (I.E. all indicator types, all alert types)\n                    //It might be empty\n                    var optionsListForAttribute = allOptionsList[key];\n                    return stateTypeImplementation.getAsStateSeperatedValues(value, optionsListForAttribute);\n                };\n                /**\n                 * Helper method which coverte the seperated comma string from objectData[key] to the get/delete representation or to\n                 * post / put representation\n                 * @param objectData\n                 * @param key the key of the attribute on the objectData\n                 * @param isPostPut - if true the string will converted to the post / put representation\n                 */\n                ConvertUsersStateUtils.prototype.buildParam = function (objectData, key, isPostPut) {\n                    var value = objectData[key];\n                    if (_.isNil(value)) {\n                        return value;\n                    }\n                    var stateTypeImplementation = STATE_TYPES[this.attributeToTypeMap[key]];\n                    if (!isPostPut) {\n                        return stateTypeImplementation.getObjectForGetRequest(value);\n                    }\n                    else {\n                        return stateTypeImplementation.getObjectForPostRequest(value);\n                    }\n                };\n                ConvertUsersStateUtils.$inject = [];\n                return ConvertUsersStateUtils;\n            }());\n            var ConvertUsersStateUtilsFactory = (function () {\n                function ConvertUsersStateUtilsFactory() {\n                }\n                ConvertUsersStateUtilsFactory.prototype.getConvertUsersStateUtil = function (attributeToTypeMap) {\n                    return new ConvertUsersStateUtils(attributeToTypeMap);\n                };\n                return ConvertUsersStateUtilsFactory;\n            }());\n            // ********************************** End of Factory\n            angular.module('Fortscale.layouts.users')\n                .service('convertUsersStateUtilsFactory', ConvertUsersStateUtilsFactory);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * This service is a util service for high risk users asset\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var UsersPage = (function () {\n                function UsersPage(data, total) {\n                    this.data = data;\n                    this.total = total;\n                }\n                return UsersPage;\n            }());\n            users.UsersPage = UsersPage;\n            var UsersUtils = (function () {\n                function UsersUtils(BASE_URL, $http, $log, $httpParamSerializerJQLike, convertUsersStateUtilsFactory, $q) {\n                    this.BASE_URL = BASE_URL;\n                    this.$http = $http;\n                    this.$log = $log;\n                    this.$httpParamSerializerJQLike = $httpParamSerializerJQLike;\n                    this.$q = $q;\n                    this.convertUsersStateUtils = convertUsersStateUtilsFactory.getConvertUsersStateUtil(TYPE_OF_KEY);\n                }\n                /**\n                 *\n                 * @param userFilter - the filter\n                 * @param askForAllWatchedCount - flag which indicate if the server should count how many watched user\n                 *                                  relevant to filter and return it on the info.\n                 * @returns {IPromise<TResult>}\n                 */\n                UsersUtils.prototype.getUsers = function (userFilter, askForAllWatchedCount) {\n                    var _this = this;\n                    var extraData = {\n                        addAllWatched: askForAllWatchedCount\n                    };\n                    return this.$http.get(this.BASE_URL + \"/user\", {\n                        params: this._buildUserFilterParams(userFilter, true, false, extraData)\n                    })\n                        .then(function (res) {\n                        // Validate data\n                        if (!res.data.data) {\n                            throw new ReferenceError(\"getUsers: The was no \\\"data\\\" property in the response body.\");\n                        }\n                        var page = new UsersPage(res.data.data, res.data.total);\n                        page.allWatchedCount = askForAllWatchedCount && res.data.info ? res.data.info.allWatched : null;\n                        return page;\n                    })\n                        .catch(function (err) {\n                        _this.$log.error(\"getUsers: Couldn't get users data\", err);\n                        return null;\n                    });\n                };\n                UsersUtils.prototype.getUsersExportUrl = function (userFilter, topResultsLimit) {\n                    var filterClone = _.cloneDeep(userFilter);\n                    //Set page and size only for the clone so it will not affect the original objecr\n                    filterClone.page = 1;\n                    filterClone.pageSize = topResultsLimit || 999999;\n                    var url = this.BASE_URL + '/user/export?' +\n                        this.$httpParamSerializerJQLike(this._buildUserFilterParams(filterClone, true, false));\n                    return url;\n                };\n                /**\n                 * Gets the top scored users.\n                 *\n                 * @returns {IPromise<TResult>}\n                 */\n                UsersUtils.prototype.countUsers = function (isWatched, userTags, minScore) {\n                    var _this = this;\n                    return this.$http.get(this.BASE_URL + \"/user/count\", {\n                        params: {\n                            user_tags: userTags ? \"any\" : \"\",\n                            is_watched: isWatched ? isWatched : \"\",\n                            min_score: _.isNil(minScore) ? \"\" : minScore\n                        }\n                    })\n                        .then(function (res) {\n                        // Validate data\n                        if (typeof res.data.dataBean === \"undefined\" || typeof res.data.dataBean.data === \"undefined\") {\n                            throw new ReferenceError(\"getUsers: The was no \\\"data\\\" property in the response body.\");\n                        }\n                        var count = res.data.dataBean.data;\n                        return count;\n                    })\n                        .catch(function (err) {\n                        _this.$log.error(\"getUsers: Couldn't get users data\", err);\n                        return 0;\n                    });\n                };\n                /**\n                * Gets the users count according to the filter received.\n                *\n                * @returns {IPromise<TResult>}\n                */\n                UsersUtils.prototype.countUsersByFilter = function (userFilter) {\n                    var _this = this;\n                    return this.$http.get(this.BASE_URL + \"/user/count\", {\n                        params: this._buildUserFilterParams(userFilter, false, false)\n                    })\n                        .then(function (res) {\n                        // Validate data\n                        if (typeof res.data.dataBean === \"undefined\" || typeof res.data.dataBean.data === \"undefined\") {\n                            throw new ReferenceError(\"getUsers: The was no \\\"data\\\" property in the response body.\");\n                        }\n                        var count = res.data.dataBean.data;\n                        return count;\n                    })\n                        .catch(function (err) {\n                        _this.$log.error(\"getUsers: Couldn't get users data\", err);\n                        return 0;\n                    });\n                };\n                /**\n                 * This method return the status code (success / error).\n                 * 400 - The user name already exists\n                 * 500 - Server side error\n                 * 200 - Sucess\n                 *\n                 * @param userFilter\n                 * @param filterName\n                 * @returns {IPromise<TResult>}\n                 */\n                UsersUtils.prototype.saveUsersFilter = function (userFilter, filterName) {\n                    var clonedFilter = _.clone(userFilter);\n                    delete clonedFilter.searchValue;\n                    return this.$http.post(this.BASE_URL + \"/user/\" + filterName + \"/favoriteFilter\", this._buildUserFilterParams(clonedFilter, true, true));\n                };\n                /**\n                 * getUsersFilters the all the possible filters\n                 * listOfAllOptionsListPromisses is array of promisses.\n                 * Is promise, after it resolved, should return object {attributeName, listOfOtpions}\n                 * while list of options is array of object, each of the object should contain member named id.\n                 * In other words, each promise should return: {attributeName:string, listOfOptions:{id:any}[]}\n                 *\n                 * @returns {IPromise<TResult>}\n                 */\n                UsersUtils.prototype.getUsersFilters = function (listOfAllOptionsListPromisses) {\n                    //listOfAllOptionsListPromisses:ng.IPromise<{attributeName:string, listOfOptions:{id:any}[]}>[]\n                    var _this = this;\n                    //Set the get favoriteFilter promisess firts, and add any addition promisses from listOfAllOptionsListPromisses\n                    var promisses = [this.$http.get(this.BASE_URL + \"/user/favoriteFilter\")];\n                    _.each(listOfAllOptionsListPromisses, function (promiss) {\n                        promisses.push(promiss);\n                    });\n                    return this.$q.all(promisses)\n                        .then(function (res) {\n                        // Validate data\n                        var favoriteUserFilters = res[0].data.dataBean.data;\n                        if (!favoriteUserFilters) {\n                            throw new ReferenceError(\"getUsersFilters: The was no \\\"data\\\" property in the response body.\");\n                        }\n                        var allOptionsList = {};\n                        for (var i = 1; i < res.length; i++) {\n                            allOptionsList[res[i].attributeName] = res[i].listOfOptions;\n                        }\n                        _this._usersFiltersAdaptorFromRest(favoriteUserFilters, allOptionsList);\n                        return favoriteUserFilters;\n                    })\n                        .catch(function (err) {\n                        _this.$log.error(\"getUsersFilters: Couldn't get users data\", err);\n                        return null;\n                    });\n                };\n                UsersUtils.prototype.getUsersSeveritiesCounts = function (userFilter) {\n                    var _this = this;\n                    return this.$http.get(this.BASE_URL + \"/user/severityBar\", {\n                        params: this._buildUserFilterParams(userFilter, false, false, { severity: null })\n                    })\n                        .then(function (res) {\n                        // Validate data\n                        var data = res.data.data;\n                        var severities = data ? data : {};\n                        severities.total = data ? res.data.total : 0;\n                        return severities;\n                    })\n                        .catch(function (err) {\n                        _this.$log.error(\"getUsersSeveritiesCounts: Couldn't get severities data\", err);\n                        return null;\n                    });\n                };\n                /**\n                 * Delete the favorite filter by id from server\n                 * @param filterId\n                 * @returns {IHttpPromise<T>}\n                 */\n                UsersUtils.prototype.deleteUsersFilter = function (filterId) {\n                    return this.$http.delete(this.BASE_URL + \"/user/favoriteFilter/\" + filterId);\n                };\n                UsersUtils.prototype.watchUsers = function (watch, userFilter) {\n                    return this.$http.post(this.BASE_URL + \"/user/\" + watch + \"/followUsers\", this._buildUserFilterParams(userFilter, false, true));\n                };\n                UsersUtils.prototype.addTags = function (userFilter, tagIds) {\n                    return this.$http.post(this.BASE_URL + \"/user/true/\" + tagIds.join(\",\") + \"/tagUsers\", this._buildUserFilterParams(userFilter, false, true));\n                };\n                UsersUtils.prototype.removeTags = function (userFilter, tagIds) {\n                    return this.$http.post(this.BASE_URL + \"/user/false/\" + tagIds.join(\",\") + \"/tagUsers\", this._buildUserFilterParams(userFilter, false, true));\n                };\n                ///////////////////////////////////////////////**********************************//////////////////////////////\n                //\n                //                Internal helper methods\n                //\n                ///////////////////////////////////////////////**********************************//////////////////////////////\n                /**\n                 *\n                 * @param userFilter - current user\\ filter\n                 * @param includePageDetails - indicator if we need to include the paging details (page and page size)\n                 * @param isPostPut - if true, all the fields that should be arrays converted from seperated string to array,\n                 *                  if false, the fields are not converted into array\n                 * @param additionalData - if we need to merge another data on the object other then the filter\n                 * @returns {any} OBJECT OF {PARAMS:...}\n                 * @private\n                 */\n                UsersUtils.prototype._buildUserFilterParams = function (userFilter, includePageDetails, isPostPut, additionalData) {\n                    var _this = this;\n                    //Convert filter attributes to param object for get or post response\n                    var params = {};\n                    _.each(PARAMS_REQUEST_TO_FILTER_ATTRIBUTE_NAME, function (attribute, paramName) {\n                        params[paramName] = _this.convertUsersStateUtils.buildParam(userFilter, attribute, isPostPut);\n                    });\n                    //Page number and page size - optional\n                    if (includePageDetails) {\n                        _.merge(params, {\n                            size: userFilter.pageSize,\n                            fromPage: userFilter.page,\n                        });\n                    }\n                    //Add additional data if needed\n                    _.merge(params, additionalData);\n                    return params;\n                };\n                UsersUtils.prototype.freeTextSearch = function (userFilter, searchTaxt) {\n                    var extraData = {\n                        searchValue: searchTaxt\n                    };\n                    userFilter.sortByField = \"name\";\n                    userFilter.page = 1;\n                    userFilter.pageSize = 6;\n                    return this.$http.get(this.BASE_URL + \"/user/extendedSearch\", {\n                        params: this._buildUserFilterParams(userFilter, true, false, extraData)\n                    });\n                };\n                /**\n                 * This method iterate all the filters responsed from server and convert the values as arrive in rest\n                 * to the values that the state familiar with.\n                 * @param favoriteUserFilters\n                 * @param allOptionsList - a dictionary from attribute name (I.E. alertTypes) to list of options of the attribute.\n                 *                          each option is an object that must have id member.\n                 * @private\n                 */\n                UsersUtils.prototype._usersFiltersAdaptorFromRest = function (favoriteUserFilters, allOptionsList) {\n                    var _this = this;\n                    //For each favorite filter\n                    _.each(favoriteUserFilters, function (favoriteUserFilter) {\n                        //For each attribute in the filter\n                        _.each(favoriteUserFilter.filter, function (value, key) {\n                            //Convert and replace the new value\n                            var convertedValue = _this.convertUsersStateUtils.getAsStateSeperatedValues(key, value, allOptionsList);\n                            if (typeof convertedValue !== \"undefined\") {\n                                favoriteUserFilter.filter[key] = convertedValue;\n                            }\n                        });\n                    });\n                };\n                UsersUtils.$inject = ['BASE_URL', '$http', '$log', '$httpParamSerializerJQLike', 'convertUsersStateUtilsFactory', '$q'];\n                return UsersUtils;\n            }());\n            var TYPE_OF_KEY = {\n                page: \"NumberState\",\n                pageSize: \"NumberState\",\n                sortByField: \"StringState\",\n                sortDirection: \"StringState\",\n                addAlertsAndDevices: \"BooleanState\",\n                isWatched: \"BooleanState\",\n                userTags: \"StringsArrayState\",\n                minScore: \"NumberState\",\n                alertTypes: \"AlertTypesState\",\n                indicatorTypes: \"IndicatorTypesState\",\n                locations: \"StringsArrayState\",\n                severity: \"StringState\",\n                searchValue: \"StringState\",\n                positions: \"StringsArrayState\",\n                departments: \"StringsArrayState\"\n            };\n            var PARAMS_REQUEST_TO_FILTER_ATTRIBUTE_NAME = {\n                sortField: \"sortByField\",\n                sortDirection: \"sortDirection\",\n                addAlertsAndDevices: \"addAlertsAndDevices\",\n                userTags: \"userTags\",\n                isWatched: \"isWatched\",\n                minScore: \"minScore\",\n                alertTypes: \"alertTypes\",\n                indicatorTypes: \"indicatorTypes\",\n                locations: \"locations\",\n                severity: \"severity\",\n                searchValue: \"searchValue\",\n                positions: \"positions\",\n                departments: \"departments\"\n            };\n            //End of UserFilter, TYPE_OF_KEY, PARAMS_REQUEST_TO_FILTER_ATTRIBUTE_NAME\n            angular.module('Fortscale.layouts.users')\n                .service('usersUtils', UsersUtils);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsUserTooltip;\n            (function (fsUserTooltip) {\n                var TEMPLATE_URL = 'app/layouts/users/components/users-search-popup/users-search-popup-internal.template.html';\n                var KEY_ARROW_UP = 38;\n                var KEY_ARROW_DOWN = 40;\n                var NO_CURRENT_INDEX = -1;\n                var UsersSearchPopupComponentController = (function () {\n                    function UsersSearchPopupComponentController($scope, $element, $templateCache, $compile, $window, $timeout, $state, stateManagementService) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$templateCache = $templateCache;\n                        this.$compile = $compile;\n                        this.$window = $window;\n                        this.$timeout = $timeout;\n                        this.$state = $state;\n                        this.stateManagementService = stateManagementService;\n                        this.attributeName = \"searchValue\";\n                        //If the we hover a user using mouse or arrows the index should be 0 or greater.\n                        //If the user is on the search text input the index should be -1.\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                        /**\n                         * Tooltip local settings object\n                         *\n                         * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                         * @private\n                         */\n                        this._tooltipSettings = {\n                            className: 'users-search-tooltip',\n                            showOn: 'creation',\n                            hideOn: 'tip',\n                            stem: true,\n                            stemLength: 8,\n                            stemBase: 12,\n                            hideDelay: 0.3,\n                            tipJoint: 'top',\n                            fixed: true,\n                            removeElementsOnHide: true,\n                            group: 'users-search-popup',\n                            background: '#f0f7f8',\n                            borderRadius: 3,\n                            borderColor: '#f0f7f8',\n                            shadow: true,\n                            shadowBlur: 15,\n                            shadowOffset: [0, 0],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            containInViewport: true,\n                            offset: [0, 0]\n                        };\n                    }\n                    /**\n                     * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                     *\n                     * @returns {HTMLElement|null}\n                     * @private\n                     */\n                    UsersSearchPopupComponentController.prototype._getTargetElement = function () {\n                        if (this.tooltipTargetSelector) {\n                            var closest = this.$element.closest(this.tooltipTargetSelector);\n                            var inner = this.$element.find(this.tooltipTargetSelector);\n                            return closest.length ? closest[0] :\n                                inner.length ? inner[0] : null;\n                        }\n                        return null;\n                    };\n                    /**\n                     * Set the current index for selected user\n                     */\n                    UsersSearchPopupComponentController.prototype.updateIndex = function (newIndex) {\n                        this.currentHoverIndex = newIndex;\n                    };\n                    UsersSearchPopupComponentController.prototype.onSearchActive = function () {\n                        var searchActive = this.searchText ? this.searchText.length > 0 : false;\n                        if (this.timer) {\n                            this.$timeout.cancel(this.timer);\n                        }\n                        if (searchActive) {\n                            this.timer = this.$timeout(this._loadUsers.bind(this), 500);\n                        }\n                        else {\n                            this._safeHide();\n                        }\n                    };\n                    //Get the users, clear the timer, and display / hide the list off users\n                    UsersSearchPopupComponentController.prototype._loadUsers = function () {\n                        var _this = this;\n                        var ctrl = this;\n                        ctrl.timer = null;\n                        ctrl.searchTriggeredDelegate({ \"searchText\": this.searchText }).then(function (users) {\n                            ctrl.users = users;\n                            _this._safeHide();\n                            if (users.length > 0) {\n                                ctrl._initTooltip();\n                            }\n                        });\n                    };\n                    /**\n                     * Return true if the tooltip displayed\n                     * @returns {boolean|string}\n                     * @private\n                     */\n                    UsersSearchPopupComponentController.prototype._isVisible = function () {\n                        return this._tooltip != null && this._tooltip.visible;\n                    };\n                    UsersSearchPopupComponentController.prototype._safeHide = function () {\n                        if (this._isVisible()) {\n                            this._tooltip.hide();\n                        }\n                        ;\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                    };\n                    UsersSearchPopupComponentController.prototype.deleteSearchText = function () {\n                        this.searchText = null;\n                        this.currentHoverIndex = NO_CURRENT_INDEX;\n                        this.applyFilter();\n                    };\n                    UsersSearchPopupComponentController.prototype.submitWithKeypress = function (e) {\n                        if (e.keyCode === 13) {\n                            //Key press happens before angular populate the value into the model\n                            var newValue = e.target.value;\n                            this.applyFilter(newValue);\n                        }\n                        else if ((this._isKeyUpPressed(e.keyCode, e.shiftKey) || e.keyCode === KEY_ARROW_DOWN) && this.users) {\n                            if (this._isKeyUpPressed(e.keyCode, e.shiftKey)) {\n                                this.currentHoverIndex > 0 ? this.currentHoverIndex-- : this.currentHoverIndex = NO_CURRENT_INDEX;\n                            }\n                            else if (e.keyCode === KEY_ARROW_DOWN) {\n                                this.currentHoverIndex < this.users.length - 1 ? this.currentHoverIndex++ : this.currentHoverIndex = this.users.length - 1;\n                            }\n                            this.stopEvent(e);\n                        }\n                        else if (e.keyCode === 27) {\n                            this._safeHide();\n                        }\n                    };\n                    /**\n                     * We need to prevent input curesur to move when arrow up or down. Submit with key press handle the actual event.\n                     * stop event should prevent keypress\n                     * @param e\n                     */\n                    UsersSearchPopupComponentController.prototype.stopEvent = function (e) {\n                        if (this._isKeyUpPressed(e.keyCode, e.shiftKey)) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                        }\n                        else if (e.keyCode === KEY_ARROW_DOWN) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                        }\n                    };\n                    /**\n                     * Initiates the tooltip settings (creates an instance settings)\n                     *\n                     * @private\n                     */\n                    UsersSearchPopupComponentController.prototype._initSettings = function () {\n                        this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                            target: this._getTargetElement(),\n                        });\n                    };\n                    /**\n                     * Renders the tooltip\n                     *\n                     * @private\n                     */\n                    UsersSearchPopupComponentController.prototype._initTooltip = function () {\n                        // Set this as ctrl for the callbacks\n                        var ctrl = this;\n                        var template = this.$templateCache.get(TEMPLATE_URL);\n                        var tooltipContent = this.$compile(angular.element(template))(ctrl.$scope);\n                        ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                        ctrl._tooltip.setContent(tooltipContent);\n                        // Prevent close on mouseover tooltip\n                        ctrl._tooltip.content.on({\n                            mouseenter: function () {\n                                ctrl._tooltip._abortHiding();\n                            },\n                            mouseleave: function () {\n                                ctrl._tooltip.prepareToHide();\n                                //ctrl._tooltip._abortHiding(); //If you want to show on leave\n                            }\n                        });\n                    };\n                    /**\n                     * Cleansup the tooltip when the scope is destroyed\n                     *\n                     * @private\n                     */\n                    UsersSearchPopupComponentController.prototype._initCleanup = function () {\n                        var _this = this;\n                        this.$scope.$on('$destroy', function () {\n                            if (_this._tooltip != null) {\n                                _this._tooltip.adapter.remove(_this._tooltip.container);\n                                _this._tooltip.container = null;\n                                _this._tooltip.tooltipElement = null;\n                                _this._tooltip = null;\n                            }\n                        });\n                    };\n                    UsersSearchPopupComponentController.prototype._initCloseOnWindowSizeChange = function () {\n                        var ctrl = this;\n                        angular.element(this.$window).bind('resize', function () {\n                            ctrl.closePopup();\n                        });\n                    };\n                    //Close the popup and reset the search text\n                    UsersSearchPopupComponentController.prototype.closePopup = function () {\n                        this.searchText = null;\n                        this._safeHide();\n                    };\n                    UsersSearchPopupComponentController.prototype.$onInit = function () {\n                        this.tooltipTargetSelector = \"users-search-popup\";\n                        this._initSettings();\n                        //this._initTooltip();\n                        this._initCleanup();\n                        this._initCloseOnWindowSizeChange();\n                        this.$scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n                        this.stateManagementService.registerToStateChanges(this.stateId, this._safeHide.bind(this));\n                    };\n                    //Apply filter actually affect the state\n                    UsersSearchPopupComponentController.prototype.applyFilter = function (differentSeachText) {\n                        if (this.currentHoverIndex > NO_CURRENT_INDEX) {\n                            this._gotoUserPage();\n                        }\n                        else {\n                            var finalSearchString = differentSeachText ? differentSeachText : this.searchText;\n                            //Update the filter\n                            this._safeHide();\n                            this.updateStateDelegate({\n                                id: this.attributeName,\n                                type: 'DATA',\n                                value: finalSearchString,\n                                immediate: true\n                            });\n                        }\n                    };\n                    UsersSearchPopupComponentController.prototype._gotoUserPage = function () {\n                        //Redirect to profile page of specific user\n                        if (!_.isNil(this.currentHoverIndex) && this.currentHoverIndex >= 0) {\n                            this.$state.go(\"user.baseline\", { \"userId\": this.users[this.currentHoverIndex].id });\n                            this._safeHide();\n                        }\n                        else {\n                            console.error(\"Cannot go to user page if currentHoverIndex is smaller then 0 \");\n                        }\n                    };\n                    UsersSearchPopupComponentController.prototype._stateWatchFn = function () {\n                        if (this.fetchStateDelegate) {\n                            return this.fetchStateDelegate(this.attributeName);\n                        }\n                    };\n                    UsersSearchPopupComponentController.prototype._isKeyUpPressed = function (keyCode, isShiftClicked) {\n                        return keyCode === KEY_ARROW_UP && !isShiftClicked;\n                    };\n                    UsersSearchPopupComponentController.prototype.isRoleFilterTurnedOn = function () {\n                        var userFilter = this.stateManagementService.readCurrentState(this.stateId);\n                        return !_.isNil(userFilter.positions) && userFilter.positions != '';\n                    };\n                    UsersSearchPopupComponentController.prototype.isDepartmentFilterTurnedOn = function () {\n                        var userFilter = this.stateManagementService.readCurrentState(this.stateId);\n                        return !_.isNil(userFilter.departments) && userFilter.departments != '';\n                    };\n                    /**\n                     * Watch action function . Set the value for the searchTaxt from outside\n                     *\n                     * @param {string|number} value\n                     */\n                    UsersSearchPopupComponentController.prototype._stateWatchActionFn = function (value) {\n                        this._safeHide();\n                        this.searchText = value;\n                    };\n                    UsersSearchPopupComponentController.$inject = ['$scope', '$element', '$templateCache', '$compile', '$window', '$timeout', '$state', 'stateManagementService'];\n                    return UsersSearchPopupComponentController;\n                }());\n                var UsersSearchPopupComponent = {\n                    controller: UsersSearchPopupComponentController,\n                    controllerAs: '$ctrl',\n                    templateUrl: 'app/layouts/users/components/users-search-popup/users-search-popup.template.html',\n                    bindings: {\n                        searchTriggeredDelegate: \"&\",\n                        fetchStateDelegate: '=',\n                        updateStateDelegate: '=',\n                        stateId: '<',\n                    }\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('usersSearchPopup', UsersSearchPopupComponent);\n            })(fsUserTooltip = components.fsUserTooltip || (components.fsUserTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var ATTRIBUTE_NAME = \"severity\";\n            var UsersSeverityStackedBarComponentController = (function () {\n                function UsersSeverityStackedBarComponentController(scope, stateManagementService, usersUtils, $element, $timeout) {\n                    this.scope = scope;\n                    this.stateManagementService = stateManagementService;\n                    this.usersUtils = usersUtils;\n                    this.$element = $element;\n                    this.$timeout = $timeout;\n                    this.filterByValue = null; //Could be High, Critical, Low, Medium\n                    this.attributeName = ATTRIBUTE_NAME;\n                }\n                /**\n                 * Returns the value of the the state by the id\n                 * @returns {*}\n                 * @private\n                 */\n                UsersSeverityStackedBarComponentController.prototype._stateWatchFn = function () {\n                    if (this.fetchStateDelegate) {\n                        return this.fetchStateDelegate(this.attributeName);\n                    }\n                };\n                UsersSeverityStackedBarComponentController.prototype.updateChange = function (selectedSeverity) {\n                    this.filterByValue = selectedSeverity !== this.filterByValue ? selectedSeverity : null;\n                    this.updateStateDelegate({\n                        id: this.attributeName,\n                        type: 'DATA',\n                        value: this.filterByValue,\n                        immediate: true\n                    });\n                };\n                /**\n                 * Watch action function . Sets the value to the picker if state has changed.\n                 *\n                 * @param {string|number} value\n                 */\n                UsersSeverityStackedBarComponentController.prototype._stateWatchActionFn = function (value) {\n                    if (value === undefined) {\n                        this.filterByValue = null;\n                    }\n                    else {\n                        this.filterByValue = value;\n                    }\n                };\n                /**\n                 * Initiates state watch\n                 *\n                 * @returns {*|function()}\n                 * @private\n                 */\n                UsersSeverityStackedBarComponentController.prototype._initStateWatch = function () {\n                    this.scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n                };\n                UsersSeverityStackedBarComponentController.prototype._initSeveritiesCounts = function () {\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    this._updateSeveritiesCounts(state);\n                };\n                UsersSeverityStackedBarComponentController.prototype._updateSeveritiesCounts = function (state) {\n                    var _this = this;\n                    this.usersUtils.getUsersSeveritiesCounts(state).then(function (res) {\n                        _this.severities = res;\n                        if (res.total === 0) {\n                            return;\n                        }\n                        var ctrl = _this;\n                        _.each(['Critical', 'High', 'Medium', 'Low'], function (key) {\n                            var severityDiv = _this.$element.find(\".\" + key.toLowerCase());\n                            var value = res[key];\n                            if (value && value.userCount > 0) {\n                                var percents = value.userCount / res.total * 100;\n                                severityDiv.css(\"display\", \"flex\");\n                                severityDiv.width(percents + '%');\n                                ctrl.$timeout(function () {\n                                    var spansUnderSeverityDiv = severityDiv.find(\"span\");\n                                    var finalParentWidth = severityDiv.width();\n                                    if (finalParentWidth < spansUnderSeverityDiv.first().width()) {\n                                        spansUnderSeverityDiv.css(\"display\", \"none\"); //hide all spans\n                                    }\n                                    else {\n                                        spansUnderSeverityDiv.css(\"display\", \"flex\"); //hide all spans\n                                    }\n                                }, 100);\n                            }\n                            else {\n                                severityDiv.css(\"display\", \"none\");\n                            }\n                        });\n                    });\n                };\n                UsersSeverityStackedBarComponentController.prototype.$onInit = function () {\n                    this.filterByValue = this.fetchStateDelegate(this.attributeName);\n                    this.stateManagementService.registerToStateChanges(this.stateId, this._updateSeveritiesCounts.bind(this));\n                    this._initSeveritiesCounts();\n                    this._initStateWatch();\n                };\n                UsersSeverityStackedBarComponentController.$inject = ['$scope', 'stateManagementService', 'usersUtils', '$element', '$timeout'];\n                return UsersSeverityStackedBarComponentController;\n            }());\n            var UsersSeverityStackedBarComponent = {\n                controller: UsersSeverityStackedBarComponentController,\n                templateUrl: 'app/layouts/users/components/users-severities-stacked-bar/users-severities-stacked-bar.component.html',\n                bindings: {\n                    stateId: '<',\n                    //Optional. If empty use STATE_ID constant\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '='\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersSeverityStackedBar', UsersSeverityStackedBarComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users_1) {\n            'use strict';\n            //Manage the actions bar above the users grid\n            var UsersActionsBarController = (function () {\n                function UsersActionsBarController($scope, stateManagementService, usersUtils, fsDownloadFile, toastrService, $element) {\n                    this.$scope = $scope;\n                    this.stateManagementService = stateManagementService;\n                    this.usersUtils = usersUtils;\n                    this.fsDownloadFile = fsDownloadFile;\n                    this.toastrService = toastrService;\n                    this.$element = $element;\n                    this.allUsersFollowed = false;\n                    this.isWatchRequestPending = false;\n                    this.tags = [];\n                    //Selectors for watch users\n                    this.WATCH_BUTTON_SELECTOR = '.watch-user-button-watch';\n                    this.UNWATCH_BUTTON_SELECTOR = '.watch-user-button-unwatch';\n                    this.ANIMATION_TIME = 500;\n                }\n                /*\n                Export to csv\n                 */\n                UsersActionsBarController.prototype.exportCSV = function () {\n                    if (!this.usersCount || this.usersCount === 0) {\n                        return;\n                    }\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    //Init the filter\n                    var filter = _.clone(state);\n                    filter.addAlertsAndDevices = true;\n                    var src = this.usersUtils.getUsersExportUrl(filter, this.usersCount);\n                    this.fsDownloadFile.openIFrame(src);\n                };\n                /**\n                 * Watch action\n                 * Trigger update watch for all users which match to the filter,\n                 * and reload grid and counts\n                 */\n                UsersActionsBarController.prototype.watchAction = function () {\n                    var _this = this;\n                    if (!this.usersCount || this.usersCount === 0) {\n                        return;\n                    }\n                    //If already action execution - stop execute\n                    if (this.isWatchRequestPending) {\n                        return;\n                    }\n                    this.isWatchRequestPending = true;\n                    //Get the state and call watchUsers with the RELEVANT FILTER filter\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    var filter = _.clone(state);\n                    filter.addAlertsAndDevices = false;\n                    this.usersUtils.watchUsers(!this.allUsersFollowed, filter).then(function () {\n                        //When sucess - update the flag, reload the grid and upfate predefined watch filter with the new count\n                        _this.allUsersFollowed = !_this.allUsersFollowed;\n                        _this.reloadDelegate(true, false, true, false, false);\n                        _this.isWatchRequestPending = false;\n                    }).catch(function (err) {\n                        //If error take place- shouw toast\n                        _this.isWatchRequestPending = false;\n                        _this.toastrService.error(\"Could not add users to watchlist - please try again.\");\n                        return null;\n                    });\n                };\n                /**\n                 * this method add tag(s) to all the users matching to current filter.\n                 * In addition, after operation success, we update the state with the new selected tags,\n                 * and relaod the complete tags list (because if add not existing tag it should refresh the tags list.\n                 *\n                 * @param tagIds\n                 * @returns {IPromise<TResult>}\n                 */\n                UsersActionsBarController.prototype.addTagsDelegate = function (tagIds) {\n                    var _this = this;\n                    if (!this.usersCount || this.usersCount === 0) {\n                        return;\n                    }\n                    //Get the current filter, update it, and call \"add tags\".\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    //Init the filter\n                    var filter = _.clone(state);\n                    filter.addAlertsAndDevices = false;\n                    return this.usersUtils.addTags(filter, tagIds).then(function (res) {\n                        //Refresh the list of tags because add tag to user may add it to the system\n                        _this._updateStateTagsWithNewTags(tagIds, null);\n                        _this.reloadDelegate(false, false, false, true, true);\n                        _this.toastrService.success(_this._getTagsSuccessMessage(tagIds.length, res.data.count, \"assigned to\"));\n                    }).catch(function (err) {\n                        _this.toastrService.error(\"Failed to tag users. Please try again later.\");\n                    });\n                };\n                UsersActionsBarController.prototype._getTagsSuccessMessage = function (tagCount, usersAffected, addedOrRemoved) {\n                    var message = tagCount + \" tag\";\n                    message += tagCount > 1 ? \"s\" : \"\";\n                    message += \" have been \" + addedOrRemoved + \" \";\n                    message += usersAffected + \" user\";\n                    message += usersAffected > 1 ? \"s\" : \"\";\n                    return message;\n                };\n                UsersActionsBarController.prototype.removeTagsDelegate = function (tagIds) {\n                    var _this = this;\n                    if (!this.usersCount || this.usersCount === 0) {\n                        return;\n                    }\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    //Init the filter\n                    var filter = _.clone(state);\n                    filter.addAlertsAndDevices = false;\n                    return this.usersUtils.removeTags(filter, tagIds).then(function (res) {\n                        _this._updateStateTagsWithNewTags(null, tagIds);\n                        _this.reloadDelegate(false, false, false, true, false);\n                        _this.toastrService.success(_this._getTagsSuccessMessage(tagIds.length, res.data.count, \"removed from\"));\n                    }).catch(function (err) {\n                        _this.toastrService.error(\"Add tags to all users failed\");\n                    });\n                };\n                /**\n                 *\n                 *\n                 * @param addedTags- list of tag ids to add. Might be empty or null.\n                 * @param removedTags list of tag ids to remove. Might be empty or null.\n                 * @private\n                 */\n                UsersActionsBarController.prototype._updateStateTagsWithNewTags = function (addedTags, removedTags) {\n                    //Get current filter tags:\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    var filterTagIds;\n                    //If no current tags -\n                    if (_.isNil(state.userTags)) {\n                        if (addedTags && addedTags.length > 0) {\n                            filterTagIds = _.clone(addedTags);\n                        }\n                        else {\n                            //Do nothing. Remove all\n                            filterTagIds = null;\n                        }\n                    }\n                    else {\n                        //Update current list of tags for the state\n                        filterTagIds = state.userTags.split(\",\");\n                        _.remove(filterTagIds, function (value) {\n                            return value === 'any' || value === 'none';\n                        });\n                        _.each(addedTags, function (tagId) {\n                            filterTagIds.push(tagId);\n                        });\n                        _.each(removedTags, function (tagId) {\n                            filterTagIds = _.remove(filterTagIds, tagId);\n                        });\n                    }\n                    //Update state userTags seperated string from the filterTagsIds arrays\n                    if (filterTagIds === null || filterTagIds.length === 0) {\n                        state.userTags = null;\n                    }\n                    else {\n                        //Remove duplicates if any\n                        filterTagIds = _.uniq(filterTagIds);\n                        state.userTags = filterTagIds.join(\",\");\n                    }\n                    //State always need to be update, so the gird will be refreshed\n                    this.stateManagementService.updateState(this.stateId, state);\n                };\n                UsersActionsBarController.prototype.searchTriggeredDelegate = function (searchText) {\n                    //Get the state and call freeTextSearch with the RELEVANT FILTER filter\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    var filter = _.clone(state);\n                    filter.addAlertsAndDevices = true;\n                    return this.usersUtils.freeTextSearch(filter, searchText).then(function (res) {\n                        //When sucess - update the flag return the data\n                        if (res.data.data) {\n                            var users_2 = res.data.data;\n                            return users_2; //Extrace the list of users and return it\n                        }\n                    }).catch(function (err) {\n                        return null;\n                    });\n                };\n                UsersActionsBarController.prototype.$onInit = function () {\n                    var _this = this;\n                    //Init the button. The button has 2 states  - \"watched / unwatched\". Each time that allUserFollowed update it should flip to the other state\n                    this.$scope.$watch(function () { return _this.allUsersFollowed; }, function (allUsersFollowed) {\n                        if (allUsersFollowed !== undefined) {\n                            _this.isWatchRequestPending = false;\n                            if (_this.allUsersFollowed !== undefined) {\n                                _this.allUsersFollowed = allUsersFollowed;\n                                _this._watchButtonFlip();\n                            }\n                            else {\n                                _this.allUsersFollowed = allUsersFollowed;\n                                _this._initialWatchButtonFlip();\n                            }\n                        }\n                    });\n                };\n                /**\n                 * All follwing method handle the button flip flop\n        \n                 */\n                UsersActionsBarController.prototype._shrinkElement = function (element) {\n                    element.css('transform', 'scaleY(0)');\n                };\n                UsersActionsBarController.prototype._expandElement = function (element) {\n                    element.css('transform', 'scaleY(1)');\n                };\n                UsersActionsBarController.prototype._setTransitions = function (shrinkElement, expandElement) {\n                    shrinkElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.84, 0.15) 0s\";\n                    expandElement[0].style['WebkitTransition'] = \"transform \" + this.ANIMATION_TIME / 2 / 1000 + \"s cubic-bezier(0, 0, 0.5, 1) \" + this.ANIMATION_TIME / 2 / 1000 + \"s\";\n                };\n                UsersActionsBarController.prototype._initialWatchButtonFlip = function () {\n                    var selector = this.allUsersFollowed ? this.UNWATCH_BUTTON_SELECTOR : this.WATCH_BUTTON_SELECTOR;\n                    var element = this.$element.find(selector);\n                    this._expandElement(element);\n                };\n                UsersActionsBarController.prototype._watchButtonFlip = function () {\n                    var _this = this;\n                    var shrinkSelector = this.allUsersFollowed ? this.WATCH_BUTTON_SELECTOR : this.UNWATCH_BUTTON_SELECTOR;\n                    var expandSelector = this.allUsersFollowed ? this.UNWATCH_BUTTON_SELECTOR : this.WATCH_BUTTON_SELECTOR;\n                    var shrinkElement = this.$element.find(shrinkSelector);\n                    var expandElement = this.$element.find(expandSelector);\n                    this._setTransitions(shrinkElement, expandElement);\n                    this.$scope.$applyAsync(function () {\n                        _this._shrinkElement(shrinkElement);\n                        _this._expandElement(expandElement);\n                    });\n                };\n                /**\n                 * End of button flip flop\n                 */\n                UsersActionsBarController.$inject = ['$scope', 'stateManagementService', 'usersUtils', 'fsDownloadFile', 'toastrService', '$element'];\n                return UsersActionsBarController;\n            }());\n            var UsersActionsBarComponent = {\n                controller: UsersActionsBarController,\n                templateUrl: 'app/layouts/users/components/users-action-bar/users-action-bar.view.html',\n                bindings: {\n                    stateId: '<',\n                    usersCount: '<',\n                    reloadDelegate: '=',\n                    allUsersFollowed: '<',\n                    tags: '<',\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '='\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersActionBar', UsersActionsBarComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var shared;\n    (function (shared) {\n        var components;\n        (function (components) {\n            var fsUserTooltip;\n            (function (fsUserTooltip) {\n                var TEMPLATE_URL = 'app/layouts/users/components/users-tag-all-popup/users-tag-all-popup-internal.template.html';\n                var UsersTagAllPopupComponentController = (function () {\n                    function UsersTagAllPopupComponentController($scope, $element, $templateCache, $compile, $window, toastrService) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$templateCache = $templateCache;\n                        this.$compile = $compile;\n                        this.$window = $window;\n                        this.toastrService = toastrService;\n                        /**\n                         * The alerts list to be displayed in the tooltip\n                         */\n                        this.tags = [];\n                        this.checked = {};\n                        /**\n                         * Tooltip local settings object\n                         *\n                         * @type {{className: string, stem: boolean, stemLength: number, stemBase: number, hideDelay: number, tipJoint: string, fixed: boolean, removeElementsOnHide: boolean, group: string, background: string, borderRadius: number, borderColor: string, shadow: boolean, shadowBlur: number, shadowOffset: number[], shadowColor: string, containInViewport: boolean, offset: number[]}}\n                         * @private\n                         */\n                        this._tooltipSettings = {\n                            className: 'users-tag-all-tooltip',\n                            showOn: 'click',\n                            hideOn: 'tip',\n                            stem: true,\n                            stemLength: 8,\n                            stemBase: 12,\n                            hideDelay: 0.3,\n                            tipJoint: 'top',\n                            fixed: true,\n                            removeElementsOnHide: false,\n                            group: 'users-tag-all-popup',\n                            background: '#f0f7f8',\n                            borderRadius: 3,\n                            borderColor: '#f0f7f8',\n                            shadow: true,\n                            shadowBlur: 15,\n                            shadowOffset: [0, 0],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            containInViewport: true,\n                            offset: [0, 0],\n                        };\n                    }\n                    /**\n                     * If tooltipTargetSelector was provided, this method returns the element the selector refers to.\n                     *\n                     * @returns {HTMLElement|null}\n                     * @private\n                     */\n                    UsersTagAllPopupComponentController.prototype._getTargetElement = function () {\n                        if (this.tooltipTargetSelector) {\n                            var closest = this.$element.closest(this.tooltipTargetSelector);\n                            var inner = this.$element.find(this.tooltipTargetSelector);\n                            return closest.length ? closest[0] :\n                                inner.length ? inner[0] : null;\n                        }\n                        return null;\n                    };\n                    /**\n                     * Initiates the tooltip settings (creates an instance settings)\n                     *\n                     * @private\n                     */\n                    UsersTagAllPopupComponentController.prototype._initSettings = function () {\n                        this._tooltipSettings = _.merge({}, this._tooltipSettings, {\n                            target: this._getTargetElement(),\n                        });\n                    };\n                    /**\n                     * Renders the tooltip\n                     *\n                     * @private\n                     */\n                    UsersTagAllPopupComponentController.prototype._initTooltip = function () {\n                        // Set this as ctrl for the callbacks\n                        var ctrl = this;\n                        var template = this.$templateCache.get(TEMPLATE_URL);\n                        var tooltipContent = this.$compile(angular.element(template))(ctrl.$scope);\n                        ctrl._tooltip = new Opentip(ctrl.$element, ctrl._tooltipSettings);\n                        ctrl._tooltip.setContent(tooltipContent);\n                        // Prevent close on mouseover tooltip\n                        ctrl._tooltip.content.on({\n                            mouseenter: function () {\n                                ctrl._tooltip._abortHiding();\n                            },\n                            mouseleave: function () {\n                                ctrl._tooltip.prepareToHide();\n                                //ctrl._tooltip._abortHiding(); //If you want to show on leave\n                            }\n                        });\n                    };\n                    /**\n                     * Cleansup the tooltip when the scope is destroyed\n                     *\n                     * @private\n                     */\n                    UsersTagAllPopupComponentController.prototype._initCleanup = function () {\n                        var _this = this;\n                        this.$scope.$on('$destroy', function () {\n                            if (_this._tooltip != null) {\n                                _this._tooltip.adapter.remove(_this._tooltip.container);\n                                _this._tooltip.container = null;\n                                _this._tooltip.tooltipElement = null;\n                                _this._tooltip = null;\n                            }\n                        });\n                    };\n                    UsersTagAllPopupComponentController.prototype.addTags = function () {\n                        var _this = this;\n                        var tagIds = this._getCheckedTagsIgs();\n                        if (this.newTagName && this.newTagName.length > 0) {\n                            var isNewTag_1 = true;\n                            _.each(this.tags, function (tag) {\n                                // Tag with the same name already exists\n                                if (tag.value.toLowerCase() === _this.newTagName.toLowerCase()) {\n                                    _this.toastrService.error(\"A tag with the name \" + tag.value + \" already exists; please select a different name.\");\n                                    isNewTag_1 = false;\n                                }\n                            });\n                            if (!isNewTag_1) {\n                                this.closeTagPopup();\n                                return;\n                            }\n                            tagIds.push(this.newTagName);\n                        }\n                        this.addTagsDelegate({ \"tagIds\": tagIds }).then(function () {\n                            if (_this.newTagName) {\n                                _this.newTagName = \"\";\n                            }\n                            _this.closeTagPopup();\n                        }).catch(function () {\n                            _this.closeTagPopup();\n                        });\n                    };\n                    UsersTagAllPopupComponentController.prototype.removeTags = function () {\n                        var _this = this;\n                        var tagIds = this._getCheckedTagsIgs();\n                        this.removeTagsDelegate({ \"tagIds\": tagIds }).then(function () {\n                            _this.closeTagPopup();\n                        }).catch(function () {\n                            _this.closeTagPopup();\n                        });\n                    };\n                    UsersTagAllPopupComponentController.prototype._getCheckedTagsIgs = function () {\n                        var checkedTags = _.pickBy(this.checked, function (value) {\n                            return value; //Only if the value of the key is true\n                        });\n                        return _.keys(checkedTags);\n                    };\n                    UsersTagAllPopupComponentController.prototype.closeTagPopup = function () {\n                        this.checked = {};\n                        this._tooltip.hide();\n                    };\n                    UsersTagAllPopupComponentController.prototype._initCloseOnWindowSizeChange = function () {\n                        var ctrl = this;\n                        angular.element(this.$window).bind('resize', function () {\n                            ctrl.closeTagPopup();\n                        });\n                    };\n                    UsersTagAllPopupComponentController.prototype.$onInit = function () {\n                        this.tooltipTargetSelector = \"users-tags-all-popup\";\n                        this._initSettings();\n                        this._initTooltip();\n                        this._initCleanup();\n                        this._initCloseOnWindowSizeChange();\n                    };\n                    UsersTagAllPopupComponentController.$inject = ['$scope', '$element', '$templateCache', '$compile', '$window', 'toastrService'];\n                    return UsersTagAllPopupComponentController;\n                }());\n                var UsersTagAllPopupComponent = {\n                    controller: UsersTagAllPopupComponentController,\n                    controllerAs: '$ctrl',\n                    templateUrl: 'app/layouts/users/components/users-tag-all-popup/users-tag-all-popup.template.html',\n                    bindings: {\n                        tags: '<',\n                        removeTagsDelegate: '&',\n                        addTagsDelegate: '&'\n                    }\n                };\n                angular.module('Fortscale.shared.components')\n                    .component('usersTagsAllPopup', UsersTagAllPopupComponent);\n            })(fsUserTooltip = components.fsUserTooltip || (components.fsUserTooltip = {}));\n        })(components = shared.components || (shared.components = {}));\n    })(shared = Fortscale.shared || (Fortscale.shared = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var UsersGridComponentController = (function () {\n                function UsersGridComponentController($scope, usersUtils, tagsUtils, stateManagementService, $element, $filter) {\n                    this.$scope = $scope;\n                    this.usersUtils = usersUtils;\n                    this.tagsUtils = tagsUtils;\n                    this.stateManagementService = stateManagementService;\n                    this.$element = $element;\n                    this.$filter = $filter;\n                    this.tagListAsIdNValueList = [];\n                    this.allUsersFollwoed = false;\n                    this.usersCount = 0;\n                    //List of sorting by options\n                    this.sortByPropertyMap = {\n                        score: \"Risk Score\",\n                        name: \"Name\",\n                        alertsCount: \"Alerts\"\n                    };\n                    //Prevent send to calls at the same time\n                    this.loadingNow = false;\n                    this.currentPage = 1;\n                    this.pageSize = 25;\n                    this.usersPages = [];\n                    this.stateDifferentThenOriginal = false;\n                    this.indicatorsTypes = [];\n                }\n                UsersGridComponentController.prototype.getStateId = function () {\n                    return this.stateId;\n                };\n                /*****************************************************************************************************\n                 *      Methods which responsible for translating the filters values, into list of pretty values\n                 *****************************************************************************************************/\n                /**\n                 * Translate indicators list to pretty display name\n                 * @returns {any}\n                 */\n                UsersGridComponentController.prototype.getPrettifyIndicatorTypes = function () {\n                    var _this = this;\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    if (_.isNil(state.indicatorTypes)) {\n                        return \"\";\n                    }\n                    else {\n                        var values_1 = [];\n                        _.each(state.indicatorTypes.split(\",\"), function (value) {\n                            var indicatorType = _.find(_this.indicatorsTypes, { \"id\": value });\n                            if (!_.isNil(indicatorType)) {\n                                values_1.push(indicatorType.value);\n                            }\n                        });\n                        return values_1.join(\", \");\n                    }\n                };\n                UsersGridComponentController.prototype.getValueFromState = function (key) {\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    if (_.isNil(state[key])) {\n                        return \"\";\n                    }\n                    else {\n                        return state[key].split(\",\").join(\", \");\n                    }\n                };\n                /**\n                 * Translate seperated string of tags list to pretty tags list\n                 * @returns {any}\n                 */\n                UsersGridComponentController.prototype.getPrettifyTags = function () {\n                    var _this = this;\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    if (_.isNil(state.userTags)) {\n                        return \"\";\n                    }\n                    else {\n                        var hideValue_1 = false;\n                        var values_2 = [];\n                        _.each(state.userTags.split(\",\"), function (value) {\n                            var prettyValue;\n                            if (value === \"none\") {\n                                prettyValue = \"No Tags\";\n                            }\n                            else if (value === \"any\") {\n                                hideValue_1 = true;\n                            }\n                            else {\n                                var tagObject = _.find(_this.tags, { 'name': value });\n                                if (tagObject) {\n                                    prettyValue = tagObject.displayName;\n                                }\n                            }\n                            if (_.isNil(prettyValue)) {\n                                prettyValue = value;\n                            }\n                            values_2.push(prettyValue);\n                        });\n                        if (hideValue_1) {\n                            return \"Tagged Users\";\n                        }\n                        else {\n                            return \"Tags: \" + values_2.join(\", \");\n                        }\n                    }\n                };\n                UsersGridComponentController.prototype._setTagListAsIdValueList = function () {\n                    this.tagListAsIdNValueList = _.map(this.tags, function (tag) {\n                        return {\n                            id: tag.name,\n                            value: tag.displayName\n                        };\n                    });\n                    //return tagsList;\n                };\n                UsersGridComponentController.prototype.getPrettifySeverity = function () {\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    return state.severity;\n                };\n                /**\n                 * Translate seperated string of alert types list to pretty alert list\n                 * @returns {string}\n                 */\n                UsersGridComponentController.prototype.getPrettifyAlertTypes = function () {\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    if (_.isNil(state.alertTypes)) {\n                        return \"\";\n                    }\n                    else {\n                        var values_3 = [];\n                        var prettyAlertNameFunction_1 = this.$filter('prettyAlertName');\n                        _.each(state.alertTypes.split(\",\"), function (value) {\n                            values_3.push(prettyAlertNameFunction_1({ name: value.split(\"@@@\")[0] }));\n                        });\n                        return values_3.join(\", \");\n                    }\n                };\n                /**\n                 * Load next page. Load only if not other loading happening\n                 */\n                UsersGridComponentController.prototype._loadMore = function () {\n                    if (this.usersPages.length * this.pageSize < this.usersCount) {\n                        this.readDataDelegate(this.currentPage + 1, this.pageSize, false, false);\n                    }\n                };\n                /**\n                 * Register to state trigger\n                 * @private\n                 */\n                UsersGridComponentController.prototype._initStateChangeWatch = function () {\n                    this.stateManagementService.registerToStateChanges(this.stateId, this._reload.bind(this));\n                    //Check if state already different from original when component loads\n                    this.stateDifferentThenOriginal = this.stateManagementService.isStateChanged(this.stateId);\n                };\n                /**\n                 * Clear the page and users data and loading the whole grid again\n                 * @private\n                 */\n                UsersGridComponentController.prototype._reload = function () {\n                    this.usersPages = [];\n                    this.readDataDelegate(1, this.pageSize, true, true);\n                    //Also refresh reset filters\n                    this.stateDifferentThenOriginal = this.stateManagementService.isStateChanged(this.stateId);\n                };\n                /**\n                 * reloadDelegate called from outside, and render the grid + trigger the delegate method\n                 * which reload the count of predefined filters (one or more)\n                 *\n                 * reloadUsersData:boolean - reload the grid\n                 * riskyUsersCount - reload count for riskyUsers predefined filter\n                 * watchedUsersCount - reload count for watchedUsers predefined filter\n                 * taggedUserCount - reload count for riskyUsers taggedUser filter\n                 * tagsList - reload the list of tags from server\n                 *\n                 * @private\n                 */\n                UsersGridComponentController.prototype._initAndbindReloadFunction = function () {\n                    var ctrl = this;\n                    this.reloadDelegate = function (reloadUsersData, riskyUsersCount, watchedUsersCount, taggedUserCount, tagsList) {\n                        if (reloadUsersData) {\n                            ctrl._reload();\n                        }\n                        ctrl.reloadPredefinedFiltersUsersCount(riskyUsersCount, watchedUsersCount, taggedUserCount, tagsList);\n                    };\n                };\n                /**\n                 * This method passed as delegate to the grid itself.\n                 * Each time the grid ask for new page it called this method and pass the page number and size.\n                 *\n                 * @param pageNumber\n                 * @param pageSize\n                 * @param forceReload - false, if we want to disable loading when loadingNow = true,\n                 *                      ture if we want to wait and trigger the loading after loading now will finish\n                 * @returns {ng.IPromise<Fortscale.layouts.users.UsersPage>}\n                 */\n                UsersGridComponentController.prototype.readDataDelegate = function (pageNumber, pageSize, forceReload, askForAllWatchedCount) {\n                    var _this = this;\n                    //Waiting call - if we are doing paging, and there is page in loading, we ignore any new paging\n                    //request. If there is not paging, but change in filter, already loadingNow = true (some other request running)\n                    //we store the new request in the waitingCall and trigger it after the old request finish.\n                    //If we already have waiting call, we override it, so only the last waiting will actual trigger\n                    var waitingCall = null;\n                    if (!this.loadingNow) {\n                        this.loadingNow = true;\n                        var filter = this._prepareFilterForGetUser(pageNumber, pageSize);\n                        return this.usersUtils.getUsers(filter, askForAllWatchedCount)\n                            .then(function (page) {\n                            _this._updatePageDataAfterDataRefreshed(page, pageNumber, askForAllWatchedCount);\n                            _this._triggerPendingCallOrFinishLoading(waitingCall);\n                            return page;\n                        });\n                    }\n                    else if (forceReload) {\n                        waitingCall = {\n                            page: pageNumber,\n                            pageSize: pageSize\n                        };\n                    }\n                };\n                /**\n                 * Merge state and additional data into filter request for the server\n                 * @param pageNumber\n                 * @param pageSize\n                 * @returns {UserFilter}\n                 * @private\n                 */\n                UsersGridComponentController.prototype._prepareFilterForGetUser = function (pageNumber, pageSize) {\n                    var ctrl = this;\n                    var state = this.stateManagementService.readCurrentState(ctrl.getStateId());\n                    //Init the filter\n                    var filter = _.clone(state);\n                    filter.page = pageNumber;\n                    filter.pageSize = pageSize;\n                    filter.addAlertsAndDevices = true;\n                    return filter;\n                };\n                /**\n                 * Update users to display, counts, pageNumber, and so own.\n                 * @param page\n                 * @param pageNumber\n                 * @param askForAllWatchedCount\n                 * @private\n                 */\n                UsersGridComponentController.prototype._updatePageDataAfterDataRefreshed = function (page, pageNumber, askForAllWatchedCount) {\n                    var ctrl = this;\n                    if (page !== null) {\n                        ctrl.usersCount = page.total;\n                        ctrl.usersPages[pageNumber - 1] = page.data;\n                    }\n                    else {\n                        ctrl.usersCount = 0;\n                        ctrl.users = [];\n                    }\n                    if (askForAllWatchedCount) {\n                        ctrl.allUsersFollwoed = page.allWatchedCount;\n                    }\n                    //After loading success, reset the page number and loadingNow flag\n                    ctrl.currentPage = pageNumber;\n                };\n                /**\n                 *\n                 * @param waitingCall\n                 * @private\n                 */\n                UsersGridComponentController.prototype._triggerPendingCallOrFinishLoading = function (waitingCall) {\n                    //If some other call waiting, trigger it\n                    var ctrl = this;\n                    if (waitingCall) {\n                        ctrl.readDataDelegate(waitingCall.page, waitingCall.pageSize);\n                        waitingCall = null;\n                    }\n                    else {\n                        ctrl.loadingNow = false;\n                    }\n                };\n                UsersGridComponentController.prototype.$onInit = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    this._initStateChangeWatch();\n                    this._initAndbindReloadFunction();\n                    this.readDataDelegate(this.currentPage, this.pageSize, false, true);\n                    this.$scope.$watch(function () { return _this.tags; }, this._setTagListAsIdValueList.bind(this));\n                    //Listen to grid scroller, if arrive to end - load more data\n                    function listenScroll(e) {\n                        var targetEl = $(e.target);\n                        if (targetEl.scrollTop() + targetEl.innerHeight() >= targetEl[0].scrollHeight - 100) {\n                            ctrl._loadMore();\n                        }\n                    }\n                    //Register scroll event and de-register\n                    this.$element.find(\".grid-wrapper\").scroll(listenScroll);\n                    this.$scope.$on('$destroy', function () {\n                        ctrl.$element.off('scroll', listenScroll);\n                    });\n                };\n                UsersGridComponentController.$inject = ['$scope', 'usersUtils', 'tagsUtils', 'stateManagementService', '$element', '$filter'];\n                return UsersGridComponentController;\n            }());\n            var UsersGridComponent = {\n                controller: UsersGridComponentController,\n                templateUrl: 'app/layouts/users/components/users-grid/users-grid.component.html',\n                bindings: {\n                    stateId: '<',\n                    //Optional. If empty use STATE_ID constant\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '=',\n                    clearStateDelegate: \"=\",\n                    indicatorsTypes: \"=\",\n                    reloadPredefinedFiltersUsersCount: \"=\",\n                    tags: '<'\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersGrid', UsersGridComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            'use strict';\n            var MAX_DEVICE_TO_DISPLAY = 3;\n            var UsersGridUserController = (function () {\n                function UsersGridUserController(scope, tagsUtils, userTagUtils, deviceUtilsService, userUtils, $timeout) {\n                    this.scope = scope;\n                    this.tagsUtils = tagsUtils;\n                    this.userTagUtils = userTagUtils;\n                    this.deviceUtilsService = deviceUtilsService;\n                    this.userUtils = userUtils;\n                    this.$timeout = $timeout;\n                    this.userTags = [];\n                    //if miniView-true show only partial user-row.\n                    this.miniView = false;\n                }\n                /**\n                 * Delegate to remove the tag from the user and refresh the userTags list\n                 * @param tag\n                 */\n                UsersGridUserController.prototype.removeTagDelegate = function (tag) {\n                    var ctrl = this;\n                    this.userTagUtils.removeTag(tag, this.user).then(function () {\n                        ctrl.tagsUtils.getTagsFromCacheOnly().then(function (tagsPromise) {\n                            ctrl._initUserTags(tagsPromise.data);\n                        });\n                    });\n                };\n                /**\n                 * This method counts the number of devices up to MAX_DEVICE_TO_DISPLAY\n                 * @returns {any} 0 if 0 devices or list is empty, return 3+ if there are more then 3 devices. Return 1-3 if there are 1-3 devices\n                 *\n                 */\n                UsersGridUserController.prototype.getDevicesAmount = function () {\n                    if (this.user.sourceMachineCount <= 3) {\n                        return this.user.sourceMachineCount;\n                    }\n                    else {\n                        //Return 3+ devices\n                        return MAX_DEVICE_TO_DISPLAY + \"+\";\n                    }\n                };\n                /**\n                 * This method prepare the devices list before displaying in the ui:\n                 * - Remove devices which not relevant (count  = 0)\n                 * - Move the \"other devices\" to the end of the list\n                 * - Add percentage attribute to each device in the list\n                 * @private\n                 */\n                UsersGridUserController.prototype._initEnrichedDevices = function () {\n                    var devices = this.deviceUtilsService.removeZeroCount(this.user.devices);\n                    this.deviceUtilsService.repositionOthers(devices);\n                    if (devices && devices.length > 0) {\n                        this.enrichedUserDevices = this.deviceUtilsService.updatePercentageOnDevice(devices);\n                    }\n                    else {\n                        this.enrichedUserDevices = [];\n                    }\n                };\n                UsersGridUserController.prototype.$onInit = function () {\n                    var _this = this;\n                    this.user = _.cloneDeep(this._user);\n                    this.userUtils.setFallBackDisplayNames([this.user]);\n                    if (!this.miniView) {\n                        //Init following only for full view\n                        this._initEnrichedDevices();\n                        this.scope.$watch(function () {\n                            return _this.tags;\n                        }, function () {\n                            if (_this.tags && _this.tags.length > 0) {\n                                _this._initUserTags(_this.tags);\n                            }\n                        });\n                    }\n                };\n                /**\n                 * Rebuild user tags list, build list of ITagDefinition out of String list\n                 * private\n                 * private\n                 */\n                //first:boolean=true;\n                UsersGridUserController.prototype._initUserTags = function (allTagsInSystem) {\n                    var ctrl = this;\n                    var userTagsTemp = [];\n                    _.each(ctrl.user.tags, function (tagName) {\n                        var tag = _.find(allTagsInSystem, { name: tagName });\n                        if (tag) {\n                            userTagsTemp.push(tag);\n                        }\n                    });\n                    ctrl.userTags = userTagsTemp;\n                };\n                UsersGridUserController.$inject = ['$scope', 'tagsUtils', 'userTagsUtils', 'deviceUtilsService', 'userUtils', '$timeout'];\n                return UsersGridUserController;\n            }());\n            var UsersGridRowComponent = {\n                controller: UsersGridUserController,\n                templateUrl: 'app/layouts/users/components/user-grid-row/user-grid-row.view.html',\n                bindings: {\n                    _user: '<user',\n                    tags: '<?',\n                    miniView: '<?',\n                    searchText: '<?',\n                    rolesFiltered: '<?',\n                    departmentFiltered: '<?'\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('userGridRow', UsersGridRowComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var UsersFiltersComponentController = (function () {\n                function UsersFiltersComponentController(scope, stateManagementService, usersUtils, $http, BASE_URL, $filter, toastrService, $q) {\n                    this.scope = scope;\n                    this.stateManagementService = stateManagementService;\n                    this.usersUtils = usersUtils;\n                    this.$http = $http;\n                    this.BASE_URL = BASE_URL;\n                    this.$filter = $filter;\n                    this.toastrService = toastrService;\n                    this.$q = $q;\n                    this.saveFavoritesDialogOpened = false;\n                    this.favoriteFilters = [];\n                    //Arrays for filters input.\n                    //Should contain id & value (both can be number or string)\n                    //count is optional field\n                    this.alertTypes = [];\n                    this.locations = [];\n                    this.departments = [];\n                    this.positions = [];\n                    this._tags = []; // Copy of tags with additions.\n                }\n                UsersFiltersComponentController.prototype.getStateId = function () {\n                    return this.stateId;\n                };\n                UsersFiltersComponentController.prototype._initPresetFilters = function () {\n                    this._initDepartmentsList();\n                    this._initRolesList();\n                    this._initCountriesList();\n                    this._initAlertTypesList();\n                };\n                /**\n                 * This method fetch data from url, and build array of \"{id:string, value:string}, save it to this.arrayName\n                 * @param arrayName - the name of the attribute one \"this\" which the array will be saved\n                 * @param url - the url to being the data from\n                 * @param mappingFunction - function which itterate each of the results of the request from the url,\n                 *                          and return build object of \"{id:string, value:string} for each of the values.\n                 * @returns {IPromise<TResult>}\n                 * @private\n                 */\n                UsersFiltersComponentController.prototype._loadFromUrlToArray = function (arrayName, url, mappingFunction) {\n                    var ctrl = this;\n                    return this.$http\n                        .get(this.BASE_URL + url)\n                        .then(function (res) {\n                        ctrl[arrayName] = _.map(res.data.data, mappingFunction);\n                    });\n                };\n                UsersFiltersComponentController.prototype._initCountriesList = function () {\n                    var ctrl = this;\n                    this._loadFromUrlToArray('locations', '/organization/activity/locations?time_range=999999&limit=999999', function (country) { return { id: country.country, value: country.country }; }).then(function () {\n                        //Sort the countries by the display name\n                        ctrl.locations = _.sortBy(ctrl.locations, function (country) { return country.value; });\n                    });\n                };\n                /*\n                Load positions and store it on this.positions\n                Roles = Positions\n                 */\n                UsersFiltersComponentController.prototype._initRolesList = function () {\n                    this._loadFromUrlToArray(\"positions\", '/user/adInfo.position/distinctValues', function (role) { return { id: role, value: role }; });\n                };\n                /**\n                 * Load depratments and store it on this.departments\n                 * @private\n                 */\n                UsersFiltersComponentController.prototype._initDepartmentsList = function () {\n                    this._loadFromUrlToArray(\"departments\", '/user/adInfo.department/distinctValues', function (role) { return { id: role, value: role }; });\n                };\n                UsersFiltersComponentController.prototype._initAlertTypesList = function () {\n                    var _this = this;\n                    var prettyAlertNameFunction = this.$filter('prettyAlertName');\n                    this.$http.get(this.BASE_URL + \"/user/exist-alert-types?ignore_rejected=true\")\n                        .then(function (data) {\n                        _this.alertTypes = [];\n                        _.each(data.data.data, function (dataType) {\n                            var alertName = prettyAlertNameFunction({ name: dataType.alertTypes[0] });\n                            _this.alertTypes.push({\n                                'id': dataType.alertTypes.join('@@@'),\n                                'value': alertName,\n                                'count': dataType.count\n                            });\n                        });\n                    });\n                };\n                //Init favorites can take place only after alertTypes and indicatorTypes initiated,\n                //so I have initiated two promiseses which deffered when alertTypes and indicatorTypes deffered\n                UsersFiltersComponentController.prototype._initPreconditionsToBeforeGetFavorites = function () {\n                    var _this = this;\n                    //Initiate the deffer objects\n                    var alertTypesDeffer = this.$q.defer();\n                    var indicatorTypesDeffer = this.$q.defer();\n                    //Save the promises on this\n                    this.alertTypesPromise = alertTypesDeffer.promise;\n                    this.indicatorTypesPromise = indicatorTypesDeffer.promise;\n                    //Init one time watched to resolve the promise\n                    var unwatchAlertsTypes = this.scope.$watch(this._alertTypesWatchFn.bind(this), function () {\n                        if (_this.alertTypes && _this.alertTypes.length > 0) {\n                            alertTypesDeffer.resolve({ attributeName: \"alertTypes\", listOfOptions: _this.alertTypes });\n                            unwatchAlertsTypes();\n                        }\n                    });\n                    var unwatchIndicatorsTypes = this.scope.$watch(this._indicatorsTypesWatchFn.bind(this), function () {\n                        if (_this.indicatorsTypes && _this.indicatorsTypes.length > 0) {\n                            indicatorTypesDeffer.resolve({ attributeName: \"indicatorTypes\", listOfOptions: _this.indicatorsTypes });\n                            unwatchIndicatorsTypes();\n                        }\n                    });\n                };\n                UsersFiltersComponentController.prototype._watchTagChanges = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    var unwatchIndicatorsTypes = this.scope.$watch(function () { return ctrl.tags; }, function () {\n                        if (ctrl.tags && ctrl.tags.length > 0) {\n                            ctrl._tags = _.map(ctrl.tags, function (tag) {\n                                return {\n                                    id: tag.name,\n                                    value: tag.displayName\n                                };\n                            });\n                            //this._tags=_.clone(this.tags);\n                            _this._tags.splice(0, 0, {\n                                id: \"any\",\n                                value: \"Tagged Users\"\n                            });\n                            _this._tags.splice(0, 0, {\n                                id: \"none\",\n                                value: \"No Tags\"\n                            });\n                        }\n                    });\n                };\n                UsersFiltersComponentController.prototype.$onInit = function () {\n                    this._initPreconditionsToBeforeGetFavorites();\n                    this._initPresetFilters();\n                    this._initFavorites();\n                    this._watchTagChanges();\n                };\n                UsersFiltersComponentController.prototype._indicatorsTypesWatchFn = function () {\n                    return this.indicatorsTypes;\n                };\n                UsersFiltersComponentController.prototype._alertTypesWatchFn = function () {\n                    return this.alertTypes;\n                };\n                /**\n                 * Send favorite to server. Present error if status is not 200.\n                 * @param filterName\n                 * @returns {IPromise<Error>} - so if some other method need to do something after save finished\n                 * it could be do so\n                 *\n                 */\n                UsersFiltersComponentController.prototype.saveFavorite = function (filterName) {\n                    var _this = this;\n                    var state = this.stateManagementService.readCurrentState(this.stateId);\n                    return this.usersUtils.saveUsersFilter(state, filterName).then(function (res) {\n                        _this._initFavorites();\n                        _this.saveFavoritesDialogOpened = false;\n                        return res;\n                    }).catch(function (res) {\n                        //Display error res.statusText\n                        if (res.status === 409) {\n                        }\n                        else {\n                            //Other error\n                            _this.toastrService.error(\"Failed to save new filter. Please try again later.\");\n                        }\n                        return res;\n                    });\n                };\n                /**\n                 * Delete filter by id and show error if such exists\n                 * @param filterId\n                 */\n                UsersFiltersComponentController.prototype.deleteFilter = function (filter) {\n                    var _this = this;\n                    if (this.activeFilterId === filter.id) {\n                        this.activeFilterUpdateDelegate(null);\n                    }\n                    this.usersUtils.deleteUsersFilter(filter.id).then(function (res) {\n                        //Success\n                        _this._initFavorites();\n                        _this.toastrService.success(\"Removed \" + filter.filterName + \" from Favorites.\");\n                    }).catch(function (res) {\n                        _this.toastrService.error(\"Failed to remove filter from Favorites. Please try again later.\");\n                        return res;\n                    });\n                };\n                //Hide the favorite popup\n                UsersFiltersComponentController.prototype.cancelFavoriteSaving = function () {\n                    this.saveFavoritesDialogOpened = false;\n                };\n                //Set the new favorite filter and activate the filter id\n                UsersFiltersComponentController.prototype.applyFilter = function (filter) {\n                    this.clearStateDelegate(filter.filter);\n                    this.activeFilterUpdateDelegate(filter.id);\n                };\n                /**\n                 * Load favotires list and display them\n                 * @private\n                 */\n                UsersFiltersComponentController.prototype._initFavorites = function () {\n                    var _this = this;\n                    this.usersUtils.getUsersFilters([this.alertTypesPromise, this.indicatorTypesPromise]).then(function (res) {\n                        _this.favoriteFilters = res;\n                    });\n                };\n                UsersFiltersComponentController.$inject = ['$scope', 'stateManagementService', 'usersUtils', '$http', 'BASE_URL', '$filter', 'toastrService', '$q'];\n                return UsersFiltersComponentController;\n            }());\n            var UsersFilterComponent = {\n                controller: UsersFiltersComponentController,\n                templateUrl: 'app/layouts/users/components/users-filters/users-filters.component.html',\n                bindings: {\n                    stateId: '<',\n                    //Optional. If empty use STATE_ID constant\n                    indicatorsTypes: '=',\n                    activeFilterUpdateDelegate: '=',\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '=',\n                    clearStateDelegate: \"=\",\n                    activeFilterId: '=',\n                    riskyUsersCount: '<',\n                    watchedUsersCount: '<',\n                    taggedUsersCount: '<',\n                    tags: '<'\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersFilters', UsersFilterComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var UsersPredefineFilterComponentController = (function () {\n                function UsersPredefineFilterComponentController(scope, stateManagementService) {\n                    this.scope = scope;\n                    this.stateManagementService = stateManagementService;\n                    this.isCountConfigured = false;\n                    this.isActive = false;\n                }\n                UsersPredefineFilterComponentController.prototype.getStateId = function () {\n                    return this.stateId;\n                };\n                /**\n                 * Returns the value of the the state by the id\n                 * @returns {*}\n                 * @private\n                 */\n                UsersPredefineFilterComponentController.prototype._stateWatchFn = function () {\n                    if (this.fetchStateDelegate) {\n                        return this.fetchStateDelegate(this.attributeName);\n                    }\n                };\n                UsersPredefineFilterComponentController.prototype.updateChange = function () {\n                    this.isActive = !this.isActive;\n                    var stateValue = this.isActive ? this.activeValue : this.inactiveValue;\n                    this.updateStateDelegate({\n                        id: this.attributeName,\n                        type: 'DATA',\n                        value: stateValue,\n                        immediate: true\n                    });\n                };\n                /**\n                 * Watch action function . Sets the value to the picker if state has changed.\n                 *\n                 * @param {string|number} value\n                 */\n                UsersPredefineFilterComponentController.prototype._stateWatchActionFn = function (value) {\n                    if (value === undefined) {\n                        this.isActive = false;\n                    }\n                    else {\n                        this.isActive = value === this.activeValue;\n                    }\n                };\n                /**\n                 * Initiates state watch\n                 *\n                 * @returns {*|function()}\n                 * @private\n                 */\n                UsersPredefineFilterComponentController.prototype._initStateWatch = function () {\n                    this.scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n                };\n                UsersPredefineFilterComponentController.prototype._initCountWatch = function () {\n                    var _this = this;\n                    var ctrl = this;\n                    //Pay attantion that the watch will happen only once.\n                    //If we need to continue listen to after changes on the count field, we should remove the unwach()\n                    var unwatch = this.scope.$watch(function () { return ctrl.count; }, function () {\n                        if (typeof _this.count != \"undefined\") {\n                            _this.isCountConfigured = typeof (_this.count) !== \"undefined\";\n                            unwatch();\n                        }\n                    });\n                };\n                UsersPredefineFilterComponentController.prototype.$onInit = function () {\n                    //Init the active value\n                    if (typeof this.activeValue === \"undefined\" || this.activeValue === \"\") {\n                        this.activeValue = \"true\";\n                    }\n                    //Init the inactive value\n                    if (_.isNil(this.inactiveValue)) {\n                        this.inactiveValue = null;\n                    }\n                    var value = this.fetchStateDelegate(this.attributeName);\n                    this.isActive = value === this.activeValue;\n                    this._initStateWatch();\n                    this._initCountWatch();\n                };\n                UsersPredefineFilterComponentController.$inject = ['$scope', 'stateManagementService'];\n                return UsersPredefineFilterComponentController;\n            }());\n            var UsersPredefinedFilterComponent = {\n                controller: UsersPredefineFilterComponentController,\n                templateUrl: 'app/layouts/users/components/users-predefined-filter/users-predefined-filter.component.html',\n                bindings: {\n                    stateId: '<',\n                    //Optional. If empty use STATE_ID constant\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '=',\n                    attributeName: '@',\n                    svgIcon: '@',\n                    text: '@',\n                    activeValue: '<?',\n                    inactiveValue: '@?',\n                    count: '<?'\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersPredefinedFilter', UsersPredefinedFilterComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var UsersFilterInUserComponentController = (function () {\n                function UsersFilterInUserComponentController(scope, stateManagementService) {\n                    this.scope = scope;\n                    this.stateManagementService = stateManagementService;\n                    this.isActive = false;\n                }\n                UsersFilterInUserComponentController.prototype.getStateId = function () {\n                    return this.stateId;\n                };\n                /**\n                 * Returns the value of the the state by the id\n                 * @returns {*}\n                 * @private\n                 */\n                UsersFilterInUserComponentController.prototype._stateWatchFn = function () {\n                    if (this.fetchStateDelegate) {\n                        return this.fetchStateDelegate(this.attributeName);\n                    }\n                };\n                /**\n                 * Change the state value to value which represent the inactive,\n                 * this will be set when the X is clicked\n                 */\n                UsersFilterInUserComponentController.prototype.clearFilter = function () {\n                    this.isActive = false;\n                    this.updateStateDelegate({\n                        id: this.attributeName,\n                        type: 'DATA',\n                        value: this.inactiveValue,\n                        immediate: true\n                    });\n                };\n                /**\n                 * Watch action function . Sets the value to the picker if state has changed.\n                 *\n                 * @param {string|number} value\n                 */\n                UsersFilterInUserComponentController.prototype._stateWatchActionFn = function (value) {\n                    if (value === undefined) {\n                        this.isActive = false;\n                    }\n                    else {\n                        this.isActive = value !== this.inactiveValue;\n                    }\n                };\n                /**\n                 * Initiates state watch\n                 *\n                 * @returns {*|function()}\n                 * @private\n                 */\n                UsersFilterInUserComponentController.prototype._initStateWatch = function () {\n                    this.scope.$watch(this._stateWatchFn.bind(this), this._stateWatchActionFn.bind(this));\n                };\n                UsersFilterInUserComponentController.prototype.$onInit = function () {\n                    //Init the inactive value\n                    if (_.isNil(this.inactiveValue)) {\n                        this.inactiveValue = null;\n                    }\n                    var value = this.fetchStateDelegate(this.attributeName);\n                    this.isActive = typeof value !== \"undefined\" && value !== this.inactiveValue;\n                    this._initStateWatch();\n                };\n                UsersFilterInUserComponentController.$inject = ['$scope', 'stateManagementService'];\n                return UsersFilterInUserComponentController;\n            }());\n            var UsersInUserFilterComponent = {\n                controller: UsersFilterInUserComponentController,\n                templateUrl: 'app/layouts/users/components/users-filter-in-use/users-filter-in-use.component.html',\n                bindings: {\n                    stateId: '<',\n                    //Optional. If empty use STATE_ID constant\n                    fetchStateDelegate: '=',\n                    updateStateDelegate: '=',\n                    attributeName: '@',\n                    inactiveValue: '<?',\n                    text: '@'\n                }\n            };\n            angular.module('Fortscale.layouts.users')\n                .component('usersFilterInUse', UsersInUserFilterComponent);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var Users;\n    (function (Users) {\n        var layouts;\n        (function (layouts) {\n            var usersFavortiePopup;\n            (function (usersFavortiePopup) {\n                var FILTER_NAME_FIELD_SELECTOR = \"#filterName\";\n                var UsersAddFavoritesPopupController = (function () {\n                    function UsersAddFavoritesPopupController($scope, $element, $timeout) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$timeout = $timeout;\n                        //Name exists - boolean for error message.\n                        this.nameExists = false;\n                    }\n                    /**\n                     * Try to save filter. Listen to respone from delegate.\n                     * If name exists- display the error, else - clear the error\n                     */\n                    UsersAddFavoritesPopupController.prototype.saveFilter = function () {\n                        var ctrl = this;\n                        this.onSave({ filterName: this.models.filterName }).then(function (res) {\n                            if (res.status === 409) {\n                                ctrl.nameExists = true;\n                            }\n                            else {\n                                ctrl.nameExists = false;\n                            }\n                        });\n                    };\n                    /**\n                     * On cancel always clear the nameExists error flag\n                     */\n                    UsersAddFavoritesPopupController.prototype.cancelFilterSaving = function () {\n                        this.nameExists = false;\n                        this.onCancel();\n                    };\n                    UsersAddFavoritesPopupController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.$timeout(function () {\n                            _this.$element.addClass('enter-active');\n                        }, 50);\n                        this.$scope.$watch(function () { return _this.visible; }, function (visible) {\n                            //When chenged to visible, the focus should take place\n                            if (_this.visible) {\n                                _this._focusDefaultField();\n                            }\n                        });\n                    };\n                    UsersAddFavoritesPopupController.prototype._focusDefaultField = function () {\n                        var ctrl = this;\n                        this.$timeout(function () {\n                            var inputField = ctrl.$element.find(FILTER_NAME_FIELD_SELECTOR);\n                            ctrl.$timeout(function () {\n                                // inputField.focus();\n                                inputField[0].focus();\n                                inputField.select();\n                            });\n                        }, 400);\n                    };\n                    UsersAddFavoritesPopupController.prototype.submitWithKeypress = function (e) {\n                        if (e.keyCode === 13) {\n                            this.saveFilter();\n                        }\n                    };\n                    UsersAddFavoritesPopupController.$inject = ['$scope', '$element', '$timeout'];\n                    return UsersAddFavoritesPopupController;\n                }());\n                var usersAddFavoritesPopup = {\n                    controller: UsersAddFavoritesPopupController,\n                    templateUrl: 'app/layouts/users/components/users-save-favorites-filter/users-save-favorites-filter.component.html',\n                    bindings: {\n                        onSave: '&',\n                        onCancel: '&',\n                        visible: '<'\n                    }\n                };\n                angular.module('Fortscale.layouts.users')\n                    .component('usersAddFavoritesPopup', usersAddFavoritesPopup);\n            })(usersFavortiePopup = layouts.usersFavortiePopup || (layouts.usersFavortiePopup = {}));\n        })(layouts = Users.layouts || (Users.layouts = {}));\n    })(Users = Fortscale.Users || (Fortscale.Users = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * Created by shays on 01/08/2016.\n * Main controller for users page\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var users;\n        (function (users) {\n            var STATE_ID = \"users-page\";\n            var UsersController = (function () {\n                function UsersController(stateManagementService, fsIndicatorTypes, usersUtils, $http, BASE_URL, page) {\n                    this.stateManagementService = stateManagementService;\n                    this.fsIndicatorTypes = fsIndicatorTypes;\n                    this.usersUtils = usersUtils;\n                    this.$http = $http;\n                    this.BASE_URL = BASE_URL;\n                    this.page = page;\n                    this.indicatorTypes = [];\n                    this.tags = [];\n                    /**\n                     * This state contains all the attributes required to filter and sort the grid\n                     * @type {{sortByField: string}}\n                     */\n                    this.initialState = {\n                        sortByField: \"score\",\n                        sortDirection: \"DESC\",\n                        minScore: 0\n                    };\n                    this.currentState = {};\n                    this._init();\n                }\n                UsersController.prototype.getStateId = function () {\n                    return STATE_ID;\n                };\n                /******************************************************************************************************\n                 *                      Methods which releate to state change / update / clert etc...\n                 ******************************************************************************************************/\n                /**\n                 * Reset the current state.\n                 * If filter given - the old state will be replace by the given state.\n                 * If no filter given - the old state will be replace by the initial state\n                 * @param filter\n                 * @private\n                 */\n                UsersController.prototype._clearState = function (filter) {\n                    var ctrl = this;\n                    var fieldsToKeep = this._getSortingFields();\n                    if (filter) {\n                        var newState = _.clone(filter);\n                        _.merge(newState, fieldsToKeep);\n                        this.stateManagementService.updateState(this.getStateId(), newState);\n                    }\n                    else {\n                        this.stateManagementService.clearState(this.getStateId(), fieldsToKeep);\n                        this.activeFilterId = \"\";\n                    }\n                    //Apply the new filter\n                    this.currentState = this.stateManagementService.readCurrentState(this.getStateId());\n                };\n                UsersController.prototype._getSortingFields = function () {\n                    return this._getBackupFiedls([\"sortByField\", \"sortDirection\"]); //Keep old sorting\n                };\n                UsersController.prototype._getBackupFiedls = function (fieldNames) {\n                    var _this = this;\n                    var objectWithFields = {};\n                    _.each(fieldNames, function (fieldName) {\n                        objectWithFields[fieldName] = _this.currentState[fieldName];\n                    });\n                    return objectWithFields;\n                };\n                /**\n                 * Get state change param\n                 * @param change (id - attribute name, value- the new value)\n                 * @private\n                 */\n                UsersController.prototype._updateStateChanges = function (change) {\n                    var attributeName = change.id;\n                    var value = change.value;\n                    if (value === null || typeof value !== \"object\") {\n                        var propertyAndValue = {};\n                        propertyAndValue[attributeName] = value;\n                        _.merge(this.currentState, propertyAndValue);\n                    }\n                    else {\n                        throw new Error(\"UsersGridComponentController.updateStateChange can get only flat values\");\n                    }\n                    this.stateManagementService.updateState(this.getStateId(), this.currentState);\n                    this.activeFilterId = \"\";\n                };\n                UsersController.prototype._fetchStateDelegate = function (attributeName) {\n                    var state = this.stateManagementService.readCurrentState(this.getStateId());\n                    return state[attributeName];\n                };\n                /******************************************************************************************************\n                 *                      Methods which bind delegators to this\n                 ******************************************************************************************************/\n                /*\n                 the update state function called from controls, so it must contain the state\n                 of this component controller.\n                 That's why updateStateChanges must call _updateStateChanges with the current this.\n        \n                 */\n                UsersController.prototype._initAndbindUpdateStateFunction = function () {\n                    var ctrl = this;\n                    //updateStateChanges get stateChange and call the internal method bound to this\n                    this.updateStateChanges = function (stateChange) {\n                        ctrl._updateStateChanges(stateChange);\n                    };\n                };\n                /*\n                 the fetch state function called from controls, so it must contain the state\n                 of this component controller.\n                 That's why updateStateChanges must call _fetchStateDelegate with the current this.\n        \n                 */\n                UsersController.prototype._initAndbindFetchStateFunction = function () {\n                    var ctrl = this;\n                    //fetchStateDelegate get stateChange and call the internal method bound to this\n                    this.fetchStateDelegate = function (attributeName) {\n                        return ctrl._fetchStateDelegate(attributeName);\n                    };\n                };\n                UsersController.prototype._initAndbindClearStateFunction = function () {\n                    var ctrl = this;\n                    //fetchStateDelegate get stateChange and call the internal method bound to this\n                    this.clearStateDelegate = function (filter) {\n                        return ctrl._clearState(filter);\n                    };\n                };\n                UsersController.prototype._initAndbindActiveFilterUpdateFunction = function () {\n                    var ctrl = this;\n                    //fetchStateDelegate get stateChange and call the internal method bound to this\n                    this.activeFilterUpdateDelegate = function (filterId) {\n                        this.activeFilterId = filterId;\n                    };\n                };\n                UsersController.prototype._initAndBindReloadPredefinedFiltersUsersCountFunction = function () {\n                    var ctrl = this;\n                    this.reloadPredefinedFiltersUsersCount = function (riskyUsers, watchedUsers, taggedUser, tagsList) {\n                        return ctrl._initPredefinedFiltersUsersCount(riskyUsers, watchedUsers, taggedUser, tagsList);\n                    };\n                };\n                /******************************************************************************************************\n                 *                      Methods which loads/init data from the server\n                 ******************************************************************************************************/\n                //Load list of indicators\n                UsersController.prototype._initIndicatorsList = function () {\n                    var _this = this;\n                    var indicatorsList = this.fsIndicatorTypes.getIndicatorsList()\n                        .then(function (data) {\n                        _this.indicatorTypes = data;\n                    });\n                };\n                //Load list of tags\n                UsersController.prototype._initTagsPreset = function () {\n                    var ctrl = this;\n                    return this.$http\n                        .get(this.BASE_URL + '/tags/user_tags')\n                        .then(function (res) {\n                        ctrl.tags = _.filter(res.data.data, { active: true });\n                        //let activeTags:ITagDefinition[] = <ITagDefinition[]>_.filter(res.data.data,{active:true});\n                        //ctrl.tags = _.map(activeTags, function (tag:ITagDefinition) {\n                        //    return {\n                        //        id: tag.name,\n                        //        value: tag.displayName\n                        //    };\n                        //});\n                    });\n                };\n                /**\n                 * Init or reload predefined filters count, and reload filter values for multi select according to configuration\n                 * @param riskyUsers - if true, reload the count of risky users\n                 * @param watchedUsers - if true, reload the count of watched users\n                 * @param taggedUser - if true, reload the count of tagged users\n                 * @param tagsList - if true, reload the list of tags for the tags multi select\n                 * @private\n                 */\n                UsersController.prototype._initPredefinedFiltersUsersCount = function (riskyUsers, watchedUsers, taggedUser, tagsList) {\n                    var _this = this;\n                    //Init risky users\n                    if (riskyUsers) {\n                        this.usersUtils.countUsers(false, false, 0).then(function (count) {\n                            _this.riskyUsersCount = count;\n                        });\n                    }\n                    if (watchedUsers) {\n                        //Init watched users\n                        this.usersUtils.countUsers(true, false, null).then(function (count) {\n                            _this.watchedUsersCount = count;\n                        });\n                    }\n                    //Init tagged users\n                    if (taggedUser) {\n                        this.usersUtils.countUsers(false, true, null).then(function (count) {\n                            _this.taggedUsersCount = count;\n                        });\n                    }\n                    if (tagsList) {\n                        this._initTagsPreset();\n                    }\n                };\n                UsersController.prototype._init = function () {\n                    this.page.setPageTitle(\"Users\");\n                    //Init and bind methods\n                    this._initAndbindUpdateStateFunction();\n                    this._initAndbindFetchStateFunction();\n                    this._initAndbindClearStateFunction();\n                    this._initAndbindActiveFilterUpdateFunction();\n                    this._initAndBindReloadPredefinedFiltersUsersCountFunction();\n                    this._initPredefinedFiltersUsersCount(true, true, true, true);\n                    this._initIndicatorsList();\n                    this.currentState = this.stateManagementService.initState(this.getStateId(), this.initialState);\n                };\n                UsersController.$inject = ['stateManagementService', 'fsIndicatorTypes', 'usersUtils', '$http', 'BASE_URL', 'page'];\n                return UsersController;\n            }());\n            angular.module('Fortscale.layouts.users')\n                .controller('UsersController', UsersController);\n        })(users = layouts.users || (layouts.users = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            'use strict';\n            angular.module('Fortscale.layouts.overview', []);\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            'use strict';\n            angular.module('Fortscale.layouts.overview')\n                .config([\n                '$stateProvider',\n                function ($stateProvider, overviewPageResolve) {\n                    $stateProvider\n                        .state('overview', {\n                        url: '/overview',\n                        templateUrl: 'app/layouts/overview/overview.view.html',\n                        controller: 'OverviewController',\n                        controllerAs: 'overviewCtrl'\n                    });\n                }\n            ]);\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * This service is a util service for high risk users asset\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var services;\n            (function (services) {\n                var highRiskUsersUtils;\n                (function (highRiskUsersUtils) {\n                    var ERR_MSG = 'Fortscale.layouts.overview: highRiskUsersUtils: ';\n                    // const TOP_USERS_AMOUNT = 5;\n                    var TOP_USERS_SORT_FIELD_NAME = 'score';\n                    var TOP_USERS_SORT_DIRECTION = 'DESC';\n                    var HighRiskUsersUtils = (function () {\n                        function HighRiskUsersUtils(BASE_URL, $http, $log, appConfig) {\n                            this.BASE_URL = BASE_URL;\n                            this.$http = $http;\n                            this.$log = $log;\n                            this.appConfig = appConfig;\n                        }\n                        /**\n                         * Gets the top scored users.\n                         *\n                         * @returns {IPromise<TResult>}\n                         */\n                        HighRiskUsersUtils.prototype.getUsers = function () {\n                            var _this = this;\n                            return this.$http.get(this.BASE_URL + \"/user\", {\n                                params: {\n                                    size: this.appConfig.getConfigValue('ui.overview', 'numberOfRiskUsers'),\n                                    sort_field: TOP_USERS_SORT_FIELD_NAME,\n                                    sort_direction: TOP_USERS_SORT_DIRECTION,\n                                    min_score: 0\n                                }\n                            })\n                                .then(function (res) {\n                                // Validate data\n                                if (!res.data.data) {\n                                    throw new ReferenceError(ERR_MSG + \"getUsers: The was no \\\"data\\\" property in the response body.\");\n                                }\n                                return res.data.data;\n                            })\n                                .catch(function (err) {\n                                _this.$log.error(ERR_MSG + \"getUsers: Couldn't get users data\", err);\n                                return null;\n                            });\n                        };\n                        ;\n                        HighRiskUsersUtils.$inject = ['BASE_URL', '$http', '$log', 'appConfig'];\n                        return HighRiskUsersUtils;\n                    }());\n                    angular.module('Fortscale.layouts.overview')\n                        .service('highRiskUsersUtils', HighRiskUsersUtils);\n                })(highRiskUsersUtils = services.highRiskUsersUtils || (services.highRiskUsersUtils = {}));\n            })(services = overview.services || (overview.services = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * This service is a util service for top alerts\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var services;\n            (function (services) {\n                var topAlertsUtil;\n                (function (topAlertsUtil) {\n                    var ERR_MSG = 'Fortscale.layouts.overview: topAlertsUtil: ';\n                    var PAGE_NUMBER = 1;\n                    var SIZE = 10;\n                    var SORT_DIRECTION = 'DESC';\n                    var SORT_FIELD = 'score';\n                    var STATUS = 'open';\n                    var TopAlertsUtilService = (function () {\n                        function TopAlertsUtilService(BASE_URL, $http, appConfig, dateRanges, $log) {\n                            this.BASE_URL = BASE_URL;\n                            this.$http = $http;\n                            this.appConfig = appConfig;\n                            this.dateRanges = dateRanges;\n                            this.$log = $log;\n                        }\n                        /**\n                         * Returns a csv representing epoch date range\n                         * @returns {string}\n                         * @private\n                         */\n                        TopAlertsUtilService.prototype._getAlertsStartRange = function () {\n                            var daysRange = this.appConfig.getConfigValue('overview', 'daysRange');\n                            return this.dateRanges.getByDaysRange(daysRange);\n                        };\n                        /**\n                         * Returns the params for the GET alerts call.\n                         * @returns {{alert_start_range: string, page: number, size: number, sort_direction: string, sort_field: string, status: string}}\n                         * @private\n                         */\n                        TopAlertsUtilService.prototype._getParams = function () {\n                            return {\n                                alert_start_range: this._getAlertsStartRange(),\n                                page: PAGE_NUMBER,\n                                size: SIZE,\n                                sort_direction: SORT_DIRECTION,\n                                sort_field: SORT_FIELD,\n                                status: STATUS\n                            };\n                        };\n                        /**\n                         * Returns a promise that resolves on the alerts\n                         *\n                         * @returns {IPromise<TResult>}\n                         */\n                        TopAlertsUtilService.prototype.getAlerts = function () {\n                            var _this = this;\n                            return this.$http.get(this.BASE_URL + \"/alerts\", { params: this._getParams() })\n                                .then(function (res) {\n                                // Validate data\n                                if (!res.data.data) {\n                                    throw new ReferenceError(ERR_MSG + \"getAlerts: The was no \\\"data\\\" property in the response body.\");\n                                }\n                                return res.data.data;\n                            })\n                                .catch(function (err) {\n                                _this.$log.error(ERR_MSG + \"getAlerts: Couldn't get alerts data\", err);\n                                return null;\n                            });\n                        };\n                        ;\n                        TopAlertsUtilService.$inject = ['BASE_URL', '$http', 'appConfig', 'dateRanges', '$log'];\n                        return TopAlertsUtilService;\n                    }());\n                    angular.module('Fortscale.layouts.overview')\n                        .service('topAlertsUtils', TopAlertsUtilService);\n                })(topAlertsUtil = services.topAlertsUtil || (services.topAlertsUtil = {}));\n            })(services = overview.services || (overview.services = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","/**\n * This service is a util service for top alerts\n */\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var services;\n            (function (services) {\n                var alertStatsUtils;\n                (function (alertStatsUtils) {\n                    var ALERTS_STATUS_URL = 'alerts/statistics';\n                    var ALERTS_SEVERITIES_BY_DAY = 'alerts/alert-by-day-and-severity';\n                    var START_RANGE_PARAM_NAME = 'start_range';\n                    var ALERTS_SEVERITIES_START_RANGE_PARAM_NAME = 'alert_start_range';\n                    var ERR_MSG = 'alertStatsUtils.service: ';\n                    var AlertStatsUtils = (function () {\n                        function AlertStatsUtils(appConfig, BASE_URL, $http, $log, dateRanges) {\n                            this.appConfig = appConfig;\n                            this.BASE_URL = BASE_URL;\n                            this.$http = $http;\n                            this.$log = $log;\n                            this.dateRanges = dateRanges;\n                        }\n                        Object.defineProperty(AlertStatsUtils.prototype, \"_errMsg\", {\n                            get: function () {\n                                return ERR_MSG + \"Controller: \";\n                            },\n                            enumerable: true,\n                            configurable: true\n                        });\n                        Object.defineProperty(AlertStatsUtils.prototype, \"shortDaysRange\", {\n                            /**\n                             * Returns the config value for shortDaysRange.\n                             *\n                             * @returns {number}\n                             * @private\n                             */\n                            get: function () {\n                                return this.appConfig.getConfigValue('ui.overview', 'shortDaysRange');\n                            },\n                            enumerable: true,\n                            configurable: true\n                        });\n                        Object.defineProperty(AlertStatsUtils.prototype, \"longDaysRange\", {\n                            /**\n                             * Returns the config value for longDaysRange.\n                             *\n                             * @returns {number}\n                             * @private\n                             */\n                            get: function () {\n                                return this.appConfig.getConfigValue('ui.overview', 'longDaysRange');\n                            },\n                            enumerable: true,\n                            configurable: true\n                        });\n                        Object.defineProperty(AlertStatsUtils.prototype, \"shortDateRange\", {\n                            /**\n                             * Returns a CSV string representing a short date range.\n                             * @returns {string}\n                             * @private\n                             */\n                            get: function () {\n                                return this.dateRanges.getByDaysRange(this.shortDaysRange, 'short');\n                            },\n                            enumerable: true,\n                            configurable: true\n                        });\n                        Object.defineProperty(AlertStatsUtils.prototype, \"longDateRange\", {\n                            /**\n                             * Returns a CSV string representing a long date range.\n                             * @returns {string}\n                             * @private\n                             */\n                            get: function () {\n                                return this.dateRanges.getByDaysRange(this.longDaysRange, 'short');\n                            },\n                            enumerable: true,\n                            configurable: true\n                        });\n                        /**\n                         * Returns a promise that resolves on alerts stats.\n                         *\n                         * @param {string} range\n                         * @param {string} errMsg\n                         * @returns {IPromise<{alert_status: {}, alert_open_severity: {}}>}\n                         * @private\n                         */\n                        AlertStatsUtils.prototype._getAlertStatus = function (range, errMsg) {\n                            var _this = this;\n                            // Make the http call and return the stats\n                            return this.$http.get(this.BASE_URL + \"/\" + ALERTS_STATUS_URL, {\n                                params: (_a = {},\n                                    _a[START_RANGE_PARAM_NAME] = range,\n                                    _a\n                                )\n                            })\n                                .then(function (res) {\n                                if (!res.data || !res.data.data) {\n                                    throw new ReferenceError(errMsg + \"Server responded without data.\");\n                                }\n                                return res.data.data;\n                            })\n                                .catch(function (err) {\n                                _this.$log.error(err);\n                                return {\n                                    alert_status: {},\n                                    alert_open_severity: {}\n                                };\n                            });\n                            var _a;\n                        };\n                        /**\n                         * Returns a promise that resolves on IAlertStatus for short range received from the server\n                         *\n                         * @returns {IPromise<IAlertStatus>}\n                         */\n                        AlertStatsUtils.prototype.getShortAlertsStatus = function () {\n                            return this._getAlertStatus(this.shortDateRange, this._errMsg + \"getShortAlertsStatus: \");\n                        };\n                        /**\n                         * Returns a promise that resolves on IAlertStatus for long range received from the server\n                         *\n                         * @returns {IPromise<IAlertStatus>}\n                         */\n                        AlertStatsUtils.prototype.getLongAlertsStatus = function () {\n                            return this._getAlertStatus(this.longDateRange, this._errMsg + \"getLongAlertsStatus: \");\n                        };\n                        /**\n                         * Returns a promise that resolves on a list of IAlertSeverityByDay\n                         *\n                         * @returns {IPromise<IAlertSeverityByDay[]>}\n                         */\n                        AlertStatsUtils.prototype.getAlertsSeverityByDay = function () {\n                            var _this = this;\n                            // Make the http call and return the stats\n                            return this.$http.get(this.BASE_URL + \"/\" + ALERTS_SEVERITIES_BY_DAY, {\n                                params: (_a = {},\n                                    _a[ALERTS_SEVERITIES_START_RANGE_PARAM_NAME] = this.longDateRange,\n                                    _a\n                                )\n                            })\n                                .then(function (res) {\n                                if (!res.data || !_.isArray(res.data)) {\n                                    throw new ReferenceError(_this._errMsg + \"getAlertsSeverityByDay: Server responded without data.\");\n                                }\n                                return res.data;\n                            })\n                                .catch(function (err) {\n                                _this.$log.error(err);\n                                return [];\n                            });\n                            var _a;\n                        };\n                        AlertStatsUtils.$inject = ['appConfig', 'BASE_URL', '$http', '$log', 'dateRanges'];\n                        return AlertStatsUtils;\n                    }());\n                    angular.module('Fortscale.layouts.overview')\n                        .service('alertStatsUtils', AlertStatsUtils);\n                })(alertStatsUtils = services.alertStatsUtils || (services.alertStatsUtils = {}));\n            })(services = overview.services || (overview.services = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var highRiskUsers;\n                (function (highRiskUsers) {\n                    var HighRiskUsersController = (function () {\n                        function HighRiskUsersController() {\n                        }\n                        HighRiskUsersController.prototype.$onInit = function () {\n                        };\n                        return HighRiskUsersController;\n                    }());\n                    var highRiskUsersComponent = {\n                        controller: HighRiskUsersController,\n                        bindings: {\n                            users: '<',\n                            tags: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/high-risk-users/high-risk-users.component.html'\n                    };\n                    angular.module('Fortscale.layouts.overview')\n                        .component('overviewHighRiskUsers', highRiskUsersComponent);\n                })(highRiskUsers = components.highRiskUsers || (components.highRiskUsers = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var alertsSeverityByDay;\n                (function (alertsSeverityByDay) {\n                    function alertSeverityByDayDirectiveFn() {\n                        var CHART_CONTAINER_SELECTOR = '.alert-severity-by-day-chart-container';\n                        var STATUS_FILTER_KEY = 'ad.status_filter';\n                        var SEVERITY_FILTER_KEY = 'ad.severity_filter';\n                        var DATE_RANGE_FILTER_KEY = 'ad.date_range_filter';\n                        var AlertSeverityByDayController = (function () {\n                            function AlertSeverityByDayController($location, appConfig, $scope, alertStatsUtils, $filter) {\n                                this.$location = $location;\n                                this.appConfig = appConfig;\n                                this.$scope = $scope;\n                                this.alertStatsUtils = alertStatsUtils;\n                                this.$filter = $filter;\n                            }\n                            /**\n                             * Receives an epch start of day and returns a range of that day to one day forward.\n                             *\n                             * @param {number} day\n                             * @returns {string}\n                             * @private\n                             */\n                            AlertSeverityByDayController.prototype._getDateRangeByDay = function (day) {\n                                var startRange = Math.floor(day / 1000);\n                                var endRange = moment(day).utc().endOf('day').unix();\n                                return startRange + \",\" + endRange;\n                            };\n                            /**\n                             * Takes recieved response from the server, and converts it to an am-chart graph base list of objects.\n                             *\n                             * @returns {{day: number, dateRange: string, category: (any|string|Format|(function(number): string)|void),\n                             * Critical: any, High: any, Medium: any, Low: any}[]|boolean[]}\n                             * @private\n                             */\n                            AlertSeverityByDayController.prototype._digestAlertsSeverity = function () {\n                                var _this = this;\n                                return _.map(this.alertsSeverity, function (alertSeverity) {\n                                    var severityGroups = _.keyBy(alertSeverity.severities, 'severity');\n                                    return {\n                                        day: alertSeverity.day,\n                                        dateRange: _this._getDateRangeByDay(alertSeverity.day),\n                                        category: moment(alertSeverity.day).format('DD-MM-YYYY'),\n                                        Critical: severityGroups[\"Critical\"] ? severityGroups[\"Critical\"].count : 0,\n                                        High: severityGroups[\"High\"] ? severityGroups[\"High\"].count : 0,\n                                        Medium: severityGroups[\"Medium\"] ? severityGroups[\"Medium\"].count : 0,\n                                        Low: severityGroups[\"Low\"] ? severityGroups[\"Low\"].count : 0\n                                    };\n                                });\n                            };\n                            /**\n                             * alertSeverity change handler. When alertsSeverity has an object, a graph will be rendered.\n                             * @param deregister\n                             * @private\n                             */\n                            AlertSeverityByDayController.prototype._alertSeverityByDayChangeHandler = function (deregister) {\n                                var _this = this;\n                                if (!this.alertsSeverity) {\n                                    return;\n                                }\n                                var dataProvider = this._digestAlertsSeverity();\n                                var chart = AmCharts.makeChart(this.containerElement[0], {\n                                    \"type\": \"serial\",\n                                    \"categoryField\": \"category\",\n                                    \"columnWidth\": 0.48,\n                                    \"dataDateFormat\": \"DD-MM-YYYY\",\n                                    \"autoMargins\": false,\n                                    \"marginBottom\": 30,\n                                    \"marginLeft\": 20,\n                                    \"marginRight\": 30,\n                                    \"marginTop\": 40,\n                                    \"colors\": [\n                                        \"#fb2b19\",\n                                        \"#fea700\",\n                                        \"#2592a5\",\n                                        \"#61aa02\"\n                                    ],\n                                    \"startDuration\": 1,\n                                    \"fontFamily\": \"'Open Sans', sans-serif\",\n                                    \"categoryAxis\": {\n                                        \"dateFormats\": [\n                                            {\n                                                \"period\": \"fff\",\n                                                \"format\": \"JJ:NN:SS\"\n                                            },\n                                            {\n                                                \"period\": \"ss\",\n                                                \"format\": \"JJ:NN:SS\"\n                                            },\n                                            {\n                                                \"period\": \"mm\",\n                                                \"format\": \"JJ:NN\"\n                                            },\n                                            {\n                                                \"period\": \"hh\",\n                                                \"format\": \"JJ:NN\"\n                                            },\n                                            {\n                                                \"period\": \"DD\",\n                                                \"format\": \"MMM DD\"\n                                            },\n                                            {\n                                                \"period\": \"WW\",\n                                                \"format\": \"MMM DD\"\n                                            },\n                                            {\n                                                \"period\": \"MM\",\n                                                \"format\": \"MMM\"\n                                            },\n                                            {\n                                                \"period\": \"YYYY\",\n                                                \"format\": \"YYYY\"\n                                            }\n                                        ],\n                                        \"gridPosition\": \"start\",\n                                        \"parseDates\": true,\n                                        \"gridColor\": \"#ffffff\"\n                                    },\n                                    \"graphs\": [\n                                        {\n                                            \"balloonText\": \"[[value]] [[title]] alerts on  [[category]]\",\n                                            \"fillAlphas\": 1,\n                                            \"id\": \"CriticalColumn\",\n                                            \"severity\": \"critical\",\n                                            \"title\": \"Critical\",\n                                            \"type\": \"column\",\n                                            \"valueField\": \"Critical\",\n                                            \"showHandOnHover\": true\n                                        },\n                                        {\n                                            \"balloonText\": \"[[value]] [[title]] alerts on  [[category]]\",\n                                            \"fillAlphas\": 1,\n                                            \"id\": \"HighColumn\",\n                                            \"severity\": \"high\",\n                                            \"title\": \"High\",\n                                            \"type\": \"column\",\n                                            \"valueField\": \"High\",\n                                            \"showHandOnHover\": true\n                                        },\n                                        {\n                                            \"balloonText\": \"[[value]] [[title]] alerts on  [[category]]\",\n                                            \"fillAlphas\": 1,\n                                            \"id\": \"MediumColumn\",\n                                            \"severity\": \"medium\",\n                                            \"title\": \"Medium\",\n                                            \"type\": \"column\",\n                                            \"valueField\": \"Medium\",\n                                            \"showHandOnHover\": true\n                                        },\n                                        {\n                                            \"balloonText\": \"[[value]] [[title]] alerts on  [[category]]\",\n                                            \"fillAlphas\": 1,\n                                            \"id\": \"LowColumn\",\n                                            \"severity\": \"low\",\n                                            \"title\": \"Low\",\n                                            \"type\": \"column\",\n                                            \"valueField\": \"Low\",\n                                            \"showHandOnHover\": true\n                                        }\n                                    ],\n                                    \"guides\": [],\n                                    \"valueAxes\": [\n                                        {\n                                            \"id\": \"ValueAxis-1\",\n                                            \"stackType\": \"regular\",\n                                            \"title\": \"\",\n                                            \"labelsEnabled\": false,\n                                            \"axisAlpha\": 0\n                                        }\n                                    ],\n                                    \"balloon\": {},\n                                    \"dataProvider\": dataProvider\n                                });\n                                // Add click handler\n                                chart.addListener(\"clickGraphItem\", function (chartObj) {\n                                    _this.transitionToAlerts(chartObj.item.dataContext.dateRange, chartObj.graph.severity);\n                                });\n                                // Remove listener (so the chart will only be rendered once)\n                                deregister();\n                            };\n                            /**\n                             * Transition to alerts page.\n                             *\n                             * @param {string} duration\n                             * @param {string} severity\n                             */\n                            AlertSeverityByDayController.prototype.transitionToAlerts = function (duration, severity) {\n                                var _this = this;\n                                var url = \"alerts?\" + STATUS_FILTER_KEY + \"=_ALL_&\" + SEVERITY_FILTER_KEY + \"=\" + severity + \"&\" + DATE_RANGE_FILTER_KEY + \"=\" + duration;\n                                this.$scope.$applyAsync(function () {\n                                    _this.$location.url(url);\n                                });\n                            };\n                            /**\n                             * Init watcher on alertsSeverity\n                             * @param {IScope} scope\n                             */\n                            AlertSeverityByDayController.prototype.initAlertSeverityByDayWatch = function (scope) {\n                                var _this = this;\n                                var deregister = scope.$watch(function () {\n                                    return _this.alertsSeverity;\n                                }, function () {\n                                    _this._alertSeverityByDayChangeHandler(deregister);\n                                });\n                            };\n                            AlertSeverityByDayController.$inject = ['$location', 'appConfig', '$scope', 'alertStatsUtils', '$filter'];\n                            return AlertSeverityByDayController;\n                        }());\n                        function preLinkFn(scope, instanceElement, instanceAttributes, controller, transclude) {\n                            // find container elements\n                            controller.containerElement = instanceElement.find(CHART_CONTAINER_SELECTOR);\n                            // init watches\n                            controller.initAlertSeverityByDayWatch(scope);\n                        }\n                        var directive = {\n                            controller: AlertSeverityByDayController,\n                            controllerAs: '$ctrl',\n                            bindToController: {\n                                alertsSeverity: '<',\n                                timeFrame: '@'\n                            },\n                            scope: true,\n                            link: {\n                                pre: preLinkFn,\n                            },\n                            templateUrl: 'app/layouts/overview/components/overview-alerts-severity-by-day/overview-alerts-severity-by-day.component.html'\n                        };\n                        return directive;\n                    }\n                    angular.module('Fortscale.layouts.overview')\n                        .directive('overviewAlertSeverityByDay', alertSeverityByDayDirectiveFn);\n                })(alertsSeverityByDay = components.alertsSeverityByDay || (components.alertsSeverityByDay = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var alertStatus;\n                (function (alertStatus_1) {\n                    function alertStatusDirectiveFn() {\n                        var CHART_SELECTOR_SHORT = '.alert-status-short-chart-container';\n                        var CHART_SELECTOR_LONG = '.alert-status-long-chart-container';\n                        var AlertStatusController = (function () {\n                            function AlertStatusController($location, $scope, appConfig, alertStatsUtils) {\n                                this.$location = $location;\n                                this.$scope = $scope;\n                                this.appConfig = appConfig;\n                                this.alertStatsUtils = alertStatsUtils;\n                            }\n                            AlertStatusController.prototype._alertStatusChangeHandler = function (alertStatus, dateRange, containerElement, deregister) {\n                                var _this = this;\n                                if (!alertStatus) {\n                                    return;\n                                }\n                                var chart = AmCharts.makeChart(containerElement[0], {\n                                    \"type\": \"serial\",\n                                    \"categoryField\": \"category\",\n                                    \"columnWidth\": 0.47,\n                                    \"colors\": [],\n                                    \"startDuration\": 1,\n                                    \"fontFamily\": \"Open Sans\",\n                                    \"color\": \"#01294A\",\n                                    \"categoryAxis\": {\n                                        \"autoRotateAngle\": 1.8,\n                                        \"gridPosition\": \"start\",\n                                        \"gridColor\": \"#ffffff\"\n                                    },\n                                    \"trendLines\": [],\n                                    \"autoMargins\": false,\n                                    \"marginBottom\": 30,\n                                    \"marginLeft\": 0,\n                                    marginTop: 5,\n                                    marginRight: 0,\n                                    \"graphs\": [\n                                        {\n                                            \"colorField\": \"color\",\n                                            \"fillAlphas\": 1,\n                                            \"id\": \"AmGraph-1\",\n                                            \"lineColorField\": \"color\",\n                                            \"title\": \"graph 1\",\n                                            \"type\": \"column\",\n                                            \"valueField\": 'count',\n                                            \"lineThickness\": 2,\n                                            showHandOnHover: true\n                                        }\n                                    ],\n                                    \"guides\": [],\n                                    \"valueAxes\": [\n                                        {\n                                            \"id\": \"ValueAxis-1\",\n                                            \"integersOnly\": true,\n                                            \"minimum\": 0,\n                                            \"title\": null,\n                                            \"labelsEnabled\": false,\n                                            \"axisAlpha\": 0\n                                        }\n                                    ],\n                                    \"allLabels\": [],\n                                    \"balloon\": {},\n                                    \"titles\": [\n                                        {\n                                            \"alpha\": 0,\n                                            \"id\": \"Title-1\",\n                                            \"size\": 15,\n                                            \"text\": \"Chart Title\"\n                                        }\n                                    ],\n                                    \"dataProvider\": [\n                                        {\n                                            \"category\": \"Reviewed\",\n                                            \"count\": alertStatus.alert_status.Closed || 0,\n                                            \"dateRange\": dateRange,\n                                            \"color\": \"#35a6da\",\n                                            \"feedbackFilterValues\": \"approved,rejected\"\n                                        },\n                                        {\n                                            \"category\": \"Unreviewed\",\n                                            \"count\": alertStatus.alert_status.Open || 0,\n                                            \"dateRange\": dateRange,\n                                            \"color\": \"#024d89\",\n                                            \"feedbackFilterValues\": \"none\"\n                                        }\n                                    ]\n                                });\n                                chart.addListener(\"clickGraphItem\", function (chartObj) {\n                                    _this.transitionToAlerts(chartObj.item.dataContext.dateRange, chartObj.item.dataContext.feedbackFilterValues);\n                                });\n                                deregister();\n                            };\n                            AlertStatusController.prototype.initAlertStatusShortWatch = function ($scope) {\n                                var _this = this;\n                                var deregister = $scope.$watch(function () {\n                                    return _this.alertStatusShort;\n                                }, function (alertStatus) {\n                                    _this._alertStatusChangeHandler(alertStatus, _this.alertStatsUtils.shortDateRange, _this.containerElementShort, deregister);\n                                });\n                            };\n                            AlertStatusController.prototype.initAlertStatusLongWatch = function ($scope) {\n                                var _this = this;\n                                var deregister = $scope.$watch(function () {\n                                    return _this.alertStatusLong;\n                                }, function (alertStatus) {\n                                    _this._alertStatusChangeHandler(alertStatus, _this.alertStatsUtils.longDateRange, _this.containerElementLong, deregister);\n                                });\n                            };\n                            AlertStatusController.prototype.transitionToAlerts = function (duration, feedbackFilterValues) {\n                                var _this = this;\n                                var feedbackFilterKey = 'ad.feedback_filter';\n                                var dateRangeFilterKey = 'ad.date_range_filter';\n                                var url = \"alerts?\" + feedbackFilterKey + \"=\" + feedbackFilterValues + \"&\" + dateRangeFilterKey + \"=\" + duration;\n                                this.$scope.$applyAsync(function () {\n                                    _this.$location.url(url);\n                                });\n                            };\n                            AlertStatusController.$inject = ['$location', '$scope', 'appConfig', 'alertStatsUtils'];\n                            return AlertStatusController;\n                        }());\n                        function preLinkFn(scope, instanceElement, instanceAttributes, controller, transclude) {\n                            // find container elements\n                            controller.containerElementShort = instanceElement.find(CHART_SELECTOR_SHORT);\n                            controller.containerElementLong = instanceElement.find(CHART_SELECTOR_LONG);\n                            // init watches\n                            controller.initAlertStatusShortWatch(scope);\n                            controller.initAlertStatusLongWatch(scope);\n                        }\n                        var directive = {\n                            controller: AlertStatusController,\n                            controllerAs: '$ctrl',\n                            bindToController: {\n                                alertStatusShort: '<',\n                                alertStatusLong: '<'\n                            },\n                            scope: true,\n                            link: {\n                                pre: preLinkFn,\n                            },\n                            templateUrl: 'app/layouts/overview/components/overview-alerts-status/overview-alert-status.component.html'\n                        };\n                        return directive;\n                    }\n                    angular.module('Fortscale.layouts.overview')\n                        .directive('overviewAlertStatus', alertStatusDirectiveFn);\n                })(alertStatus = components.alertStatus || (components.alertStatus = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var highRiskUsers;\n                (function (highRiskUsers) {\n                    var HighRiskUserController = (function () {\n                        function HighRiskUserController(userUtils, $scope) {\n                            this.userUtils = userUtils;\n                            this.$scope = $scope;\n                        }\n                        HighRiskUserController.prototype._setUserTags = function () {\n                            var _this = this;\n                            this.userTags = [];\n                            _.each(this.user.tags, function (tag) {\n                                var tagObj = _.find(_this.tags, { name: tag });\n                                if (tagObj) {\n                                    _this.userTags.push(tagObj);\n                                }\n                            });\n                        };\n                        HighRiskUserController.prototype._initUserWatch = function () {\n                            var _this = this;\n                            var deregister = this.$scope.$watch(function () { return _this.user; }, function (user) {\n                                if (user) {\n                                    _this.userUtils.setFallBackDisplayNames([user]);\n                                    deregister();\n                                }\n                            });\n                        };\n                        HighRiskUserController.prototype._initTagsWatch = function () {\n                            var _this = this;\n                            var deregister = this.$scope.$watch(function () { return _this.tags; }, function () {\n                                if (_this.user && _this.tags) {\n                                    _this._setUserTags();\n                                    deregister();\n                                }\n                            });\n                        };\n                        HighRiskUserController.prototype._initWatches = function () {\n                            this._initUserWatch();\n                            this._initTagsWatch();\n                        };\n                        HighRiskUserController.prototype.$onInit = function () {\n                            this._initWatches();\n                        };\n                        HighRiskUserController.$inject = ['userUtils', '$scope'];\n                        return HighRiskUserController;\n                    }());\n                    var HighRiskUserComponent = {\n                        controller: HighRiskUserController,\n                        bindings: {\n                            user: '<',\n                            tags: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/overview-high-risk-user/overview-high-risk-user.component.html'\n                    };\n                    angular.module('Fortscale.layouts.overview')\n                        .component('overviewHighRiskUser', HighRiskUserComponent);\n                })(highRiskUsers = components.highRiskUsers || (components.highRiskUsers = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var topAlerts;\n                (function (topAlerts) {\n                    var TopAlertsController = (function () {\n                        function TopAlertsController() {\n                        }\n                        TopAlertsController.prototype.$onInit = function () {\n                        };\n                        return TopAlertsController;\n                    }());\n                    var TopAlertsComponent = {\n                        controller: TopAlertsController,\n                        bindings: {\n                            alerts: '<',\n                            users: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/overview-top-alerts/overview-top-alerts.component.html'\n                    };\n                    angular.module('Fortscale.layouts.overview')\n                        .component('overviewTopAlerts', TopAlertsComponent);\n                })(topAlerts = components.topAlerts || (components.topAlerts = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var alert;\n                (function (alert) {\n                    var AlertController = (function () {\n                        function AlertController($scope, userIndicatorUtils) {\n                            this.$scope = $scope;\n                            this.userIndicatorUtils = userIndicatorUtils;\n                        }\n                        AlertController.prototype.$onInit = function () {\n                            this.numberOfNotTagIndicators =\n                                this.userIndicatorUtils.filterIndicators(this.overviewAlert.evidences).length;\n                        };\n                        AlertController.$inject = ['$scope', 'userIndicatorsUtils'];\n                        return AlertController;\n                    }());\n                    var AlertComponent = {\n                        controller: AlertController,\n                        bindings: {\n                            overviewAlert: '<',\n                            overviewUser: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/overview-alert/overview-alert.component.html'\n                    };\n                    angular.module('Fortscale.layouts.overview')\n                        .component('overviewAlert', AlertComponent);\n                })(alert = components.alert || (components.alert = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var components;\n            (function (components) {\n                var usersTagsCount;\n                (function (usersTagsCount) {\n                    var UsersTagsCountController = (function () {\n                        function UsersTagsCountController() {\n                            this.itemsSettings = {\n                                risky: {\n                                    displayName: 'Risky',\n                                    displayNameSingle: 'Risky',\n                                    icon: 'bell-icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'risky',\n                                    defaultValue: 0,\n                                    href: '#/users?',\n                                    query: {\n                                        minScore: 0,\n                                    }\n                                },\n                                admins: {\n                                    displayName: 'Admin',\n                                    displayNameSingle: 'Admin',\n                                    icon: 'user-admins-icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'admin',\n                                    defaultValue: 0,\n                                    href: '#/users?users-page.minScore=&users-page.userTags=admin',\n                                    query: {\n                                        userTags: \"admin\"\n                                    }\n                                },\n                                watched: {\n                                    displayName: 'Watched',\n                                    displayNameSingle: 'Watched',\n                                    icon: 'watch-icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'watched',\n                                    defaultValue: 0,\n                                    href: '#/users?users-page.minScore=&users-page.isWatched=true',\n                                    query: {\n                                        isWatched: true\n                                    }\n                                },\n                                executives: {\n                                    displayName: 'Executive',\n                                    displayNameSingle: 'Executive',\n                                    icon: 'user-executive-icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'executive',\n                                    defaultValue: 0,\n                                    href: '#/users?users-page.minScore=&users-page.userTags=executive',\n                                    query: {\n                                        userTags: \"executive\"\n                                    }\n                                },\n                                service: {\n                                    displayName: 'Service',\n                                    displayNameSingle: 'Service',\n                                    icon: 'user-service-icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'service',\n                                    defaultValue: 0,\n                                    href: '#/users?users-page.minScore=&users-page.userTags=service',\n                                    query: {\n                                        userTags: \"service\"\n                                    }\n                                },\n                                tagged: {\n                                    displayName: 'Tagged',\n                                    displayNameSingle: 'Tagged',\n                                    icon: 'tag_icon',\n                                    iconWidth: 36,\n                                    iconHeight: 36,\n                                    tagKey: 'Tagged',\n                                    defaultValue: 0,\n                                    href: '#/users?users-page.minScore=&users-page.userTags=any',\n                                    query: {\n                                        userTags: \"any\"\n                                    }\n                                }\n                            };\n                        }\n                        UsersTagsCountController.prototype.$onInit = function () {\n                        };\n                        return UsersTagsCountController;\n                    }());\n                    var UsersTagsCountItemController = (function () {\n                        function UsersTagsCountItemController(usersUtils) {\n                            this.usersUtils = usersUtils;\n                        }\n                        UsersTagsCountItemController.prototype.getCount = function () {\n                            var _this = this;\n                            var query = this.itemSettings.query;\n                            this.usersUtils.countUsersByFilter(query).then(function (res) {\n                                _this.count = res;\n                            });\n                        };\n                        UsersTagsCountItemController.prototype.$onInit = function () {\n                            this.getCount();\n                        };\n                        UsersTagsCountItemController.$inject = ['usersUtils'];\n                        return UsersTagsCountItemController;\n                    }());\n                    var UsersTagsCountComponent = {\n                        controller: UsersTagsCountController,\n                        bindings: {\n                            usersTagsCount: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/overview-users-tags-count/overview-users-tags-count.component.html'\n                    };\n                    var UsersTagsCountItemComponent = {\n                        controller: UsersTagsCountItemController,\n                        bindings: {\n                            itemSettings: '<'\n                        },\n                        templateUrl: 'app/layouts/overview/components/overview-users-tags-count/users-tags-count-item.component.html'\n                    };\n                    angular.module('Fortscale.layouts.overview')\n                        .component('overviewUsersTagsCount', UsersTagsCountComponent)\n                        .component('overviewUsersTagsCountItem', UsersTagsCountItemComponent);\n                })(usersTagsCount = components.usersTagsCount || (components.usersTagsCount = {}));\n            })(components = overview.components || (overview.components = {}));\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var overview;\n        (function (overview) {\n            var OverviewController = (function () {\n                function OverviewController(scope, element, fsNanobarAutomationService, highRiskUsersUtils, topAlertsUtils, userUtils, alertStatsUtils, page, tagsUtils) {\n                    this.scope = scope;\n                    this.element = element;\n                    this.fsNanobarAutomationService = fsNanobarAutomationService;\n                    this.highRiskUsersUtils = highRiskUsersUtils;\n                    this.topAlertsUtils = topAlertsUtils;\n                    this.userUtils = userUtils;\n                    this.alertStatsUtils = alertStatsUtils;\n                    this.page = page;\n                    this.tagsUtils = tagsUtils;\n                    this.NANOBAR_ID = 'overview-page';\n                    this._init();\n                }\n                OverviewController.prototype._enrichUsers = function (users) {\n                    this.userUtils.setFallBackDisplayNames(users);\n                    this.userUtils.setUsersFullAddress(users);\n                };\n                OverviewController.prototype._initLoadingAlertUsers = function (ids) {\n                    var _this = this;\n                    if (ids && ids.length) {\n                        this.userUtils.getUsersDetails(ids)\n                            .then(function (users) {\n                            _this.users = _.keyBy(users, 'id');\n                            _this._enrichUsers(_this.users);\n                        });\n                    }\n                    else {\n                        this.users = {};\n                    }\n                };\n                /**\n                 * Initiates high risk users asset loading\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingHighRiskUsers = function () {\n                    var _this = this;\n                    return this.highRiskUsersUtils.getUsers()\n                        .then(function (users) {\n                        _this.highRiskUsers = users;\n                        _this._enrichUsers(_this.highRiskUsers);\n                    })\n                        .catch(function (err) {\n                        _this.highRiskUsers = null;\n                    });\n                };\n                /**\n                 * Initiates top ten alerts asset loading\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingTopAlerts = function () {\n                    var _this = this;\n                    return this.topAlertsUtils.getAlerts()\n                        .then(function (topAlerts) {\n                        _this.topAlerts = topAlerts;\n                        return _.uniq(_.map(_this.topAlerts, 'entityId'));\n                    })\n                        .then(function (userIds) {\n                        _this._initLoadingAlertUsers(userIds);\n                    })\n                        .catch(function (err) {\n                        _this.highRiskUsers = null;\n                    });\n                };\n                /**\n                 * Initiates loading of system tags count\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingUsersTagsStatistics = function () {\n                    var _this = this;\n                    return this.userUtils.getUsersTagsCount()\n                        .then(function (usersTagsCount) {\n                        _this.usersTagsCount = usersTagsCount;\n                    })\n                        .catch(function (err) {\n                        _this.usersTagsCount = {};\n                    });\n                };\n                /**\n                 * Initiates loading of alert stats short and long\n                 *\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingAlertStats = function () {\n                    var _this = this;\n                    return [\n                        this.alertStatsUtils.getShortAlertsStatus()\n                            .then(function (alertStatus) {\n                            _this.alertStatusShort = alertStatus;\n                        })\n                            .catch(function (err) {\n                            _this.alertStatusShort = {\n                                alert_status: {},\n                                alert_open_severity: {}\n                            };\n                        }),\n                        this.alertStatsUtils.getLongAlertsStatus()\n                            .then(function (alertStatus) {\n                            _this.alertStatusLong = alertStatus;\n                        })\n                            .catch(function (err) {\n                            _this.alertStatusLong = {\n                                alert_status: {},\n                                alert_open_severity: {}\n                            };\n                        })\n                    ];\n                };\n                /**\n                 * Initiates loading of alert severity by day\n                 *\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingAlertsSeverityByDay = function () {\n                    var _this = this;\n                    return this.alertStatsUtils.getAlertsSeverityByDay()\n                        .then(function (alertsSeverityByDay) {\n                        _this.alertsSeverityByDay = alertsSeverityByDay;\n                    })\n                        .catch(function (err) {\n                        _this.alertsSeverityByDay = [];\n                    });\n                };\n                OverviewController.prototype._initLoadingTags = function () {\n                    var _this = this;\n                    return this.tagsUtils.getTags()\n                        .then(function (res) {\n                        _this.tags = res.data;\n                    })\n                        .catch(function (err) {\n                        console.error('There was an error fetching tags.', err);\n                        _this.tags = [];\n                    });\n                };\n                /**\n                 * Initiates assets loading sequence\n                 *\n                 * @private\n                 */\n                OverviewController.prototype._initLoadingSequence = function () {\n                    var promises = [\n                        this._initLoadingTags(),\n                        this._initLoadingHighRiskUsers(),\n                        this._initLoadingTopAlerts(),\n                        this._initLoadingUsersTagsStatistics()\n                    ].concat(this._initLoadingAlertStats(), [\n                        this._initLoadingAlertsSeverityByDay()\n                    ]);\n                    this.fsNanobarAutomationService.addPromises(this.NANOBAR_ID, promises);\n                };\n                /**\n                 * Controller's init function\n                 * @private\n                 */\n                OverviewController.prototype._init = function () {\n                    // Start loading assets\n                    this._initLoadingSequence();\n                    this.page.setPageTitle('Overview');\n                };\n                OverviewController.$inject = ['$scope', '$element', 'fsNanobarAutomationService', 'highRiskUsersUtils',\n                    'topAlertsUtils', 'userUtils', 'alertStatsUtils', 'page', 'tagsUtils'];\n                return OverviewController;\n            }());\n            angular.module('Fortscale.layouts.overview')\n                .controller('OverviewController', OverviewController);\n        })(overview = layouts.overview || (layouts.overview = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    angular.module('Fortscale.layouts.reports', []);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale.layouts.reports\")\n        .config([\n        '$stateProvider',\n        'reportsResolve',\n        'staleAccountsMonitoringResolve',\n        'staleAccountsMonitoringData',\n        'deviceMonitoringResolve',\n        'deviceMonitoringData',\n        'suspiciousUsersResolve',\n        'suspiciousUsersData',\n        'externalAccessToNetworkResolve',\n        'externalAccessToNetworkData',\n        function ($stateProvider, reportsResolve, staleAccountsMonitoringResolve, staleAccountsMonitoringData, deviceMonitoringResolve, deviceMonitoringData, suspiciousUsersResolve, suspiciousUsersData, externalAccessToNetworkResolve, externalAccessToNetworkData) {\n            $stateProvider\n                .state('reports', {\n                url: '/reports',\n                templateUrl: 'app/layouts/reports/reports.view.html',\n                controller: 'ReportsController',\n                controllerAs: 'reports',\n                resolve: reportsResolve\n            })\n                .state('reports.staleAccountsMonitoring', {\n                url: '/stale_accounts_monitoring',\n                abstract: true,\n                template: '<ui-view></ui-view>',\n                resolve: staleAccountsMonitoringResolve.resolve\n            })\n                .state('reports.staleAccountsMonitoring.disabledUserAccounts', {\n                url: '/disabled_users_status',\n                templateUrl: 'app/layouts/reports/layouts/stale-accounts-monitoring/' +\n                    'disabled-user-accounts.view.html',\n                resolve: staleAccountsMonitoringResolve.disabledUserAccountsResolve,\n                data: staleAccountsMonitoringData.disabledUserAccountsData,\n                controller: 'DisabledUserAccountsController',\n                controllerAs: 'report'\n            })\n                .state('reports.staleAccountsMonitoring.inactiveUserAccounts', {\n                url: '/inactive_users_status',\n                templateUrl: 'app/layouts/reports/layouts/stale-accounts-monitoring/' +\n                    'inactive-user-accounts.view.html',\n                resolve: staleAccountsMonitoringResolve.inactiveUserAccountsResolve,\n                data: staleAccountsMonitoringData.inactiveUserAccountsData,\n                controller: 'InactiveUserAccountsController',\n                controllerAs: 'report'\n            })\n                .state('reports.staleAccountsMonitoring.disabledUserWithNetwork', {\n                url: '/disabled_users_with_network',\n                templateUrl: 'app/layouts/reports/layouts/stale-accounts-monitoring/' +\n                    'disabled-user-with-network.view.html',\n                resolve: staleAccountsMonitoringResolve.disabledUserWithNetworkResolve,\n                data: staleAccountsMonitoringData.disabledUserWithNetworkData,\n                controller: 'DisabledUserWithNetworkController',\n                controllerAs: 'report'\n            })\n                .state('reports.staleAccountsMonitoring.terminatedUserWithNetwork', {\n                url: '/terminated_users_with_network',\n                templateUrl: 'app/layouts/reports/layouts/stale-accounts-monitoring/' +\n                    'terminated-user-with-network.view.html',\n                resolve: staleAccountsMonitoringResolve.terminatedUserWithNetworkResolve,\n                data: staleAccountsMonitoringData.terminatedUserWithNetworkData,\n                controller: 'TerminatedUserWithNetworkController',\n                controllerAs: 'report'\n            })\n                .state('reports.deviceMonitoring', {\n                url: '/device_monitoring',\n                abstract: true,\n                template: '<ui-view></ui-view>',\n                resolve: deviceMonitoringResolve.resolve\n            })\n                .state('reports.deviceMonitoring.IPInvestigation', {\n                url: '/ip_investigation',\n                templateUrl: 'app/layouts/reports/layouts/device-monitoring/' +\n                    'ip-investigation.view.html',\n                resolve: deviceMonitoringResolve.ipInvestigationResolve,\n                data: deviceMonitoringData.ipInvestigationData,\n                controller: 'IPInvestigationController',\n                controllerAs: 'report'\n            })\n                .state('reports.deviceMonitoring.suspiciousEndpointAccess', {\n                url: '/suspicious_endpoint_access',\n                templateUrl: 'app/layouts/reports/layouts/device-monitoring/' +\n                    'suspicious-endpoint-access.view.html',\n                resolve: deviceMonitoringResolve.suspiciousEndpointAccessResolve,\n                data: deviceMonitoringData.suspiciousEndpointAccessData,\n                controller: 'SuspiciousEndpointAccessController',\n                controllerAs: 'report'\n            })\n                .state('reports.deviceMonitoring.sensitiveResourcesMonitoring', {\n                url: '/sensitive_resources_monitoring',\n                templateUrl: 'app/layouts/reports/layouts/device-monitoring/' +\n                    'sensitive-resources-monitoring.view.html',\n                resolve: deviceMonitoringResolve.sensitiveResourcesMonitoringResolve,\n                data: deviceMonitoringData.sensitiveResourcesMonitoringData,\n                controller: 'SensitiveResourcesMonitoringController',\n                controllerAs: 'report'\n            })\n                .state('reports.topRiskyTagged', {\n                url: '/top_risky_tagged/:tagName',\n                templateUrl: 'app/layouts/reports/layouts/suspicious-users/suspicious-users.view.html',\n                resolve: suspiciousUsersResolve,\n                data: suspiciousUsersData,\n                controller: 'RiskyTaggedUsersController',\n                controllerAs: 'report'\n            })\n                .state('reports.externalAccessToNetwork', {\n                url: '/external_access_to_network',\n                abstract: true,\n                template: '<ui-view></ui-view>',\n                resolve: externalAccessToNetworkResolve.resolve\n            })\n                .state('reports.externalAccessToNetwork.suspiciousVPNDataAmount', {\n                url: '/suspicious_vpn_data_amount',\n                templateUrl: 'app/layouts/reports/layouts/external-access-to-network/' +\n                    'suspicious-vpn-data-amount.view.html',\n                resolve: externalAccessToNetworkResolve.suspiciousVPNDataAmount,\n                data: externalAccessToNetworkData.suspiciousVPNDataAmount,\n                controller: 'suspiciousVPNDataAmountController',\n                controllerAs: 'report'\n            })\n                .state('reports.externalAccessToNetwork.VPNGeoHopping', {\n                url: '/vpn_geo_hopping',\n                templateUrl: 'app/layouts/reports/layouts/external-access-to-network/' +\n                    'vpn-geo-hopping.view.html',\n                resolve: externalAccessToNetworkResolve.VPNGeoHopping,\n                data: externalAccessToNetworkData.VPNGeoHopping,\n                controller: 'VPNGeoHoppingController',\n                controllerAs: 'report'\n            });\n            // END OF External access to network\n        }\n    ]);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var reportsResolve = {\n        navBarSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/reports/settings/nav-bar-settings.json');\n            }\n        ],\n        dataEntitiesList: [\n            function () {\n                return [\n                    {\n                        id: 'ssh',\n                        name: 'SSH'\n                    },\n                    {\n                        id: 'vpn',\n                        name: 'VPN'\n                    },\n                    {\n                        id: 'auth',\n                        name: 'Kerberos'\n                    }\n                ];\n            }\n        ]\n    };\n    angular.module('Config')\n        .constant('reportsResolve', reportsResolve);\n}());\n","(function () {\n    'use strict';\n    //var GDS_BASE_ENTITY = 'scored_access_event';\n    function ReportsController($element, navBarSettings, dataEntities, dataEntitiesList, page, $uiViewScroll, $timeout, $state) {\n        page.setPageTitle('Reports');\n        this.$element = $element;\n        this.dataEntities = dataEntities;\n        this.navBarSettingsMaster = _.merge({}, navBarSettings);\n        this.dataEntitiesList = _.merge({}, dataEntitiesList);\n        this.$uiViewScroll = $uiViewScroll;\n        this.$timeout = $timeout;\n        this.$state = $state;\n        this.init();\n    }\n    _.merge(ReportsController.prototype, {\n        /**\n         * Populates Suspicious Users menu\n         *\n         * @private\n         */\n        _populateNavBarsSuspiciousUsers: function (suspiciousUsersNavItem) {\n            // get leaf entities\n            /** UPDATE: It was decided that this report will not be GDS. It will only have ssh, vpn, and kerberos.\n             * For that resource, the following code is commented out, and there's a new code to replace it.\n             * This commented code might be some day returned.\n             */\n            //var entities = this.dataEntities.getExtendingEntities('scored_access_event');\n            var tags = [{\n                    \"name\": \"Admin\",\n                    \"id\": \"admin\"\n                },\n                {\n                    \"name\": \"Executive\",\n                    \"id\": \"executive\"\n                },\n                {\n                    \"name\": \"Service\",\n                    \"id\": \"service\"\n                }];\n            suspiciousUsersNavItem.items = _.map(tags, function (tag) {\n                var navItem = {};\n                navItem.html = tag.name + \" Accounts\";\n                navItem.sref = 'reports.topRiskyTagged({tagName:\"' + tag.id + '\"})';\n                navItem.srefActive = 'reports.suspiciousUsers';\n                navItem.srefActiveParams = { tagName: tag.id };\n                return navItem;\n            });\n        },\n        /**\n         * Initiates nav bar settings. Populates suspicious users section.\n         * @private\n         */\n        _initNavBarSettings: function () {\n            this.navBarSettings = _.merge({}, this.navBarSettingsMaster);\n            this._populateNavBarsSuspiciousUsers(_.filter(this.navBarSettings, { 'html': 'High Privileged Accounts' })[0]);\n        },\n        _scrollToElement: function () {\n            var _this = this;\n            this.$timeout(function () {\n                // find active element\n                var el = _this.$element.find('li.active');\n                // find container element\n                var containerEl = _this.$element.find('.nav-bar-container--groups-list-container');\n                // if container element height is smalled than active element bottom (top+height) then scroll to it\n                if (el[0] && containerEl[0] && (containerEl.height() <= el[0].offsetTop + el[0].offsetHeight)) {\n                    _this.$uiViewScroll(el);\n                }\n            }, 200);\n        },\n        isReportSelected: function () {\n            return this.$state.is('reports');\n        },\n        init: function () {\n            this._initNavBarSettings();\n            this._scrollToElement();\n        }\n    });\n    ReportsController.$inject =\n        ['$element', 'navBarSettings', 'dataEntities', 'dataEntitiesList', 'page', '$uiViewScroll',\n            '$timeout', '$state'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('ReportsController', ReportsController);\n}());\n","/**\n * This directive adds a validator to the attached ngModel. This validator is an ip validator.\n */\n(function () {\n    'use strict';\n    function fsValidatorIp() {\n        function linkFn($scope, $element, attrs, ngModel) {\n            ngModel.$validators.ip = function (modelValue, viewValue) {\n                var value = modelValue || viewValue;\n                /*jslint maxlen: 200 */\n                return /^(\\d|[1-9]\\d|1\\d\\d|2([0-4]\\d|5[0-5]))\\.(\\d|[1-9]\\d|1\\d\\d|2([0-4]\\d|5[0-5]))\\.(\\d|[1-9]\\d|1\\d\\d|2([0-4]\\d|5[0-5]))\\.(\\d|[1-9]\\d|1\\d\\d|2([0-4]\\d|5[0-5]))$/.test(value);\n            };\n        }\n        return {\n            restrict: 'A',\n            link: linkFn,\n            require: 'ngModel'\n        };\n    }\n    fsValidatorIp.$inject = [];\n    angular.module('Fortscale.layouts.reports')\n        .directive('fsValidatorIp', fsValidatorIp);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var staleAccountsMonitoringResolve = {\n        resolve: {\n            tableInitialSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'table-initial.settings.json');\n                }\n            ],\n            terminatedTableInitialSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'table-terminated-initial.settings.json');\n                }\n            ],\n            tableInitialState: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'table-initial.state.json');\n                }\n            ]\n        },\n        disabledUserAccountsResolve: {\n            disabledUsersStatusResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'disabled-users-status.resource.json');\n                }\n            ]\n        },\n        inactiveUserAccountsResolve: {\n            inactiveUsersStatusResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'inactive-users-status.resource.json');\n                }\n            ]\n        },\n        disabledUserWithNetworkResolve: {\n            disabledUsersWithNetworkResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'disabled-users-with-network.resource.json');\n                }\n            ]\n        },\n        terminatedUserWithNetworkResolve: {\n            terminatedUsersWithNetworkResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/stale-accounts-monitoring/settings/' +\n                        'terminated-users-with-network.resource.json');\n                }\n            ]\n        }\n    };\n    angular.module('Config')\n        .constant('staleAccountsMonitoringResolve', staleAccountsMonitoringResolve);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var staleAccountsMonitoringData = {\n        disabledUserAccountsData: {\n            reportTitle: 'Disabled Accounts',\n            reportDescription: 'Investigate accounts registered as disabled in Active Directory.',\n            reportClass: 'regular'\n        },\n        inactiveUserAccountsData: {\n            reportTitle: 'Inactive Accounts',\n            reportDescription: 'Investigate inactive accounts that are NOT disabled in Active Directory.',\n            reportClass: 'regular'\n        },\n        disabledUserWithNetworkData: {\n            reportTitle: 'Disabled Accounts with Network Activity',\n            reportDescription: 'Investigate active accounts registered as disabled in Active Directory.',\n            reportClass: 'regular'\n        },\n        terminatedUserWithNetworkData: {\n            reportTitle: 'Terminated Accounts with Network Activity',\n            reportDescription: 'Investigate active accounts registered as terminated in Active Directory.',\n            reportClass: 'regular'\n        }\n    };\n    angular.module('Config')\n        .constant('staleAccountsMonitoringData', staleAccountsMonitoringData);\n}());\n","(function () {\n    'use strict';\n    function DisabledUserAccountsController(appConfig, $state, dateRanges, tableInitialState, tableInitialSettings, disabledUsersStatusResource, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this.disabledUsersStatusResource = _.merge({}, disabledUsersStatusResource);\n        this.disabledUsersTableSettings = _.merge({}, tableInitialSettings);\n        this._defaultStartOfDayDaysAgo = appConfig.getConfigValue('ui.' + $state.current.name, 'daysAgo');\n        this.mainState = {\n            disabled_user_table: tableInitialState,\n            disabled_since: {\n                value: dateRanges.getStartOfDayByDaysAgo(this._defaultStartOfDayDaysAgo)\n            }\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(DisabledUserAccountsController.prototype, {\n        init: function () {\n        }\n    });\n    DisabledUserAccountsController.$inject =\n        ['appConfig', '$state', 'dateRanges', 'tableInitialState', 'tableInitialSettings',\n            'disabledUsersStatusResource', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('DisabledUserAccountsController', DisabledUserAccountsController);\n}());\n","(function () {\n    'use strict';\n    function InactiveUserAccountsController(appConfig, $state, dateRanges, tableInitialState, tableInitialSettings, inactiveUsersStatusResource, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this.inactiveUsersStatusResource = _.merge({}, inactiveUsersStatusResource);\n        this.inactiveUsersTableSettings = _.merge({}, tableInitialSettings);\n        this._defaultStartOfDayDaysAgo = appConfig.getConfigValue('ui.' + $state.current.name, 'daysAgo');\n        this.mainState = {\n            inactive_user_table: tableInitialState,\n            inactive_since: {\n                value: dateRanges.getStartOfDayByDaysAgo(this._defaultStartOfDayDaysAgo)\n            }\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(InactiveUserAccountsController.prototype, {\n        /**\n         * Removes the unneeded (for this report) 'Disabled On' column\n         *\n         * @private\n         */\n        _removeDisabledOnColumn: function () {\n            this.inactiveUsersTableSettings.columns = _.filter(this.inactiveUsersTableSettings.columns, function (column) {\n                return column.title !== 'Disabled On';\n            });\n        },\n        init: function () {\n            this._removeDisabledOnColumn();\n        }\n    });\n    InactiveUserAccountsController.$inject =\n        ['appConfig', '$state', 'dateRanges', 'tableInitialState', 'tableInitialSettings',\n            'inactiveUsersStatusResource', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('InactiveUserAccountsController', InactiveUserAccountsController);\n}());\n","(function () {\n    'use strict';\n    function DisabledUserWithNetworkController($state, tableInitialState, tableInitialSettings, disabledUsersWithNetworkResource, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this.disabledUsersWithNetworkResource = _.merge({}, disabledUsersWithNetworkResource);\n        this.disabledUsersWithNetworkTableSettings = _.merge({}, tableInitialSettings);\n        this.mainState = {\n            disabled_user_table: tableInitialState\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(DisabledUserWithNetworkController.prototype, {\n        init: function () { }\n    });\n    DisabledUserWithNetworkController.$inject = ['$state', 'tableInitialState', 'tableInitialSettings',\n        'disabledUsersWithNetworkResource', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('DisabledUserWithNetworkController', DisabledUserWithNetworkController);\n}());\n","(function () {\n    'use strict';\n    function TerminatedUserWithNetworkController($state, tableInitialState, terminatedTableInitialSettings, terminatedUsersWithNetworkResource, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this.terminatedUsersWithNetworkResource = _.merge({}, terminatedUsersWithNetworkResource);\n        this.terminatedUsersWithNetworkTableSettings = _.merge({}, terminatedTableInitialSettings);\n        this.mainState = {\n            terminated_users_table: tableInitialState\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(TerminatedUserWithNetworkController.prototype, {\n        init: function () { }\n    });\n    TerminatedUserWithNetworkController.$inject = ['$state', 'tableInitialState', 'terminatedTableInitialSettings',\n        'terminatedUsersWithNetworkResource', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('TerminatedUserWithNetworkController', TerminatedUserWithNetworkController);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var deviceMonitoringResolve = {\n        resolve: {},\n        ipInvestigationResolve: {\n            machinesForIpResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/ip-investigation-machines.resource.json');\n                }\n            ],\n            machinesForIpTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/ip-investigation-machines-table.settings.json');\n                }\n            ],\n            usersForIpResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/ip-investigation-users.resource.json');\n                }\n            ],\n            usersForIpTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/ip-investigation-users-table.settings.json');\n                }\n            ]\n        },\n        suspiciousEndpointAccessResolve: {\n            mainState: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/suspicious-endpoint-access-main-state.json');\n                }\n            ],\n            endpointControlSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/suspicious-endpoint-access-endpoint-control.settings.json');\n                }\n            ],\n            endpointControlResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/suspicious-endpoint-access-endpoint-control.resource.json');\n                }\n            ],\n            resourceSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .loadJsonx('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/suspicious-endpoint-access.resource.jsonx');\n                }\n            ],\n            tableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings' +\n                        '/suspicious-endpoint-access-table.settings.json');\n                }\n            ]\n        },\n        sensitiveResourcesMonitoringResolve: {\n            sensitiveMachinesStatusTableResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'sensitive-machines-status-table.resource.json');\n                }\n            ],\n            sensitiveMachinesStatusTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'sensitive-machines-status-table.settings.json');\n                }\n            ],\n            usersAccessResourcesTableResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'users-access-resources-table.resource.json');\n                }\n            ],\n            usersAccessResourcesTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'users-access-resources-table.settings.json');\n                }\n            ],\n            eventsSensitiveMachinesTableResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'events-sensitive-machines-table.resource.json');\n                }\n            ],\n            eventsSensitiveMachinesTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/device-monitoring/settings/' +\n                        'events-sensitive-machines-table.settings.json');\n                }\n            ]\n        }\n    };\n    angular.module('Config')\n        .constant('deviceMonitoringResolve', deviceMonitoringResolve);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var deviceMonitoringData = {\n        ipInvestigationData: {\n            reportTitle: 'IP Investigation',\n            reportDescription: 'Investigate historic risky user behavior originating from an IP Address.',\n            reportClass: 'regular',\n            ipAddressControlTooltip: 'Please enter a valid IP address.',\n            machinesForIpTitle: 'Devices found at this IP Address.',\n            machinesForIpNoItems: 'No Devices were found from this IP Address.',\n            usersForIpTitle: 'Users found at this IP Address',\n            usersForIpNoItems: 'No users were found at this IP Address.'\n        },\n        suspiciousEndpointAccessData: {\n            reportTitle: 'Suspicious Device Access',\n            reportDescription: 'Detect historic risky user access to devices.',\n            reportClass: 'regular',\n            suspiciousEndpointsNoItems: 'No Events Found'\n        },\n        sensitiveResourcesMonitoringData: {\n            reportTitle: 'Sensitive Resources Monitoring',\n            reportDescription: 'Investigate historic risky user access to sensitive resources.',\n            sensitiveMachinesStatusTableTitle: 'Sensitive Resources Risk History',\n            sensitiveMachinesStatusTableDescription: ' Highest scored events observed from sensitive resources.',\n            sensitiveMachinesStatusTableNoItems: 'No Events Found',\n            usersAccessResourcesTableTitle: 'User Access to Sensitive Resources',\n            usersAccessResourcesTableDescription: 'Investigate users who have accessed sensitive resources.',\n            usersAccessResourcesTableNoItems: 'No Events Found',\n            eventsSensitiveMachinesTableTitle: 'Access to Sensitive Devices',\n            eventsSensitiveMachinesTableDescription: ' Investigate all access events targeting sensitive resources.',\n            eventsSensitiveMachinesTableNoItems: 'No Events Found'\n        }\n    };\n    angular.module('Config')\n        .constant('deviceMonitoringData', deviceMonitoringData);\n}());\n","(function () {\n    'use strict';\n    var SUSPICIOUS_EVENT_SCORE_FIELD_NAME = 'suspicious_event_score';\n    var EVENT_COUNT_FIELD_NAME = 'event_count';\n    var TYPE_FIELD_NAME = 'type';\n    var EVENT_TIME_FIELD_NAME = 'event_time';\n    var NORMALIZED_USERNAME_FIELD_NAME = 'normalized_username';\n    var SOURCE_MACHINE_FIELD_NAME = 'source_machine';\n    function IPInvestigationController(appConfig, $state, $scope, dateRanges, machinesForIpResource, machinesForIpTableSettings, usersForIpResource, usersForIpTableSettings, fsNanobarAutomationService) {\n        var _this = this;\n        var ctrl = this;\n        // Put injections on instance\n        ctrl.state = _.merge({}, $state.current.data);\n        ctrl.$scope = $scope;\n        ctrl._defaultDaysRange = appConfig.getConfigValue('ui.' + $state.current.name, 'daysRange');\n        ctrl.mainState = _.merge({}, {\n            events_time: {\n                value: dateRanges.getByDaysRange(ctrl._defaultDaysRange, 'short')\n            }\n        });\n        ctrl.machinesForIpResource = _.merge({}, machinesForIpResource);\n        ctrl.machinesForIpTableSettingsMaster = _.merge({}, machinesForIpTableSettings);\n        ctrl.usersForIpResource = _.merge({}, usersForIpResource);\n        ctrl.usersForIpTableSettingsMaster = _.merge({}, usersForIpTableSettings);\n        ctrl.ipInvestigationMachinesResourceAdapter = function (dataList) {\n            return ctrl._ipInvestigationResourceAdapter(dataList, 'machines');\n        };\n        ctrl.ipInvestigationUsersResourceAdapter = function (dataList) {\n            return ctrl._ipInvestigationResourceAdapter(dataList, 'users');\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        // Init\n        this.init();\n    }\n    _.merge(IPInvestigationController.prototype, {\n        /**\n         * Extends table settings with GDS columns\n         *\n         * @param {Array<{type: string, suspicious_event_score: number}>} dataEntitiesSorted\n         * @param {{columns: array}} settingsMaster\n         * @returns {{}}\n         * @private\n         */\n        _extendTableSettings: function (dataEntitiesSorted, settingsMaster) {\n            var settings = _.merge({}, settingsMaster);\n            _.each(dataEntitiesSorted, function (dataEntity, index) {\n                settings.columns.push({\n                    title: 'Suspicious<br>' + dataEntity[TYPE_FIELD_NAME] + '<br>Events',\n                    field: 'dataEntities[' + index + '].' + SUSPICIOUS_EVENT_SCORE_FIELD_NAME\n                });\n            });\n            return settings;\n        },\n        /**\n         * Extends MachinesForIp Settings. Adds GDS columns.\n         *\n         * @param {Array<{type: string, suspicious_event_score: number}>} dataEntitiesSorted\n         * @private\n         */\n        _extendMachinesForIpSettings: function (dataEntitiesSorted) {\n            this.machinesForIpTableSettings = this._extendTableSettings(dataEntitiesSorted, this.machinesForIpTableSettingsMaster);\n        },\n        /**\n         * Extends UsersForIp Settings. Adds GDS columns.\n         *\n         * @param {Array<{type: string, suspicious_event_score: number}>} dataEntitiesSorted\n         * @private\n         */\n        _extendUsersForIpSettings: function (dataEntitiesSorted) {\n            this.usersForIpTableSettings = this._extendTableSettings(dataEntitiesSorted, this.usersForIpTableSettingsMaster);\n        },\n        /**\n         * Adds Kedo tooltip to account-control's question mark.\n         *\n         * @private\n         */\n        _initIPAddressControlTooltip: function () {\n            this.$scope.$applyAsync(function () {\n                $('.explain-ip-address').kendoTooltip({\n                    position: \"bottom\",\n                    showOn: \"mouseenter click\",\n                    autoHide: true,\n                    content: this.state.ipAddressControlTooltip,\n                    width: \"15em\",\n                    animation: {\n                        close: {\n                            effects: \"fade:out\",\n                            duration: 500\n                        },\n                        open: {\n                            effects: \"fade:in\",\n                            duration: 500\n                        }\n                    }\n                });\n            }.bind(this));\n        },\n        /**\n         * Takes an old object and a new object and transfers all properties directly or via an adapter function.\n         * adapterFn will be invoked (if provided) with oldValue, newValue, oldObject, newObject\n         *\n         * @param {Array<{sourceProperty: string, targetProperty:string=, adapterFn:function=}>} propertiesConfList\n         * @param {object} newObj\n         * @param {object} oldObj\n         * @param {boolean=} isOnce\n         * @private\n         */\n        _setProperties: function (propertiesConfList, newObj, oldObj, isOnce) {\n            isOnce = !!isOnce;\n            _.each(propertiesConfList, function (propertyConf) {\n                var sourceProperty = propertyConf.sourceProperty;\n                var targetProperty = propertyConf.targetProperty || sourceProperty;\n                if ((isOnce && newObj[targetProperty] === undefined) || !isOnce) {\n                    newObj[targetProperty] = _.isFunction(propertyConf.adapterFn) ?\n                        propertyConf.adapterFn(oldObj[sourceProperty], newObj[targetProperty], oldObj, newObj) :\n                        oldObj[sourceProperty];\n                }\n            });\n        },\n        /**\n         * Takes two values and returns the sum. If both arguments are not numbers, it returns the last argument if\n         * its a number, then first argument if its a number, or null.\n         *\n         * @param {number|*} oldValue\n         * @param {number|*} newValue\n         * @returns {number|null}\n         * @private\n         */\n        _incrementTentative: function (oldValue, newValue) {\n            if (_.isNumber(newValue) && _.isNumber(oldValue)) {\n                newValue += oldValue;\n                return newValue;\n            }\n            if (_.isNumber(newValue)) {\n                return newValue;\n            }\n            if (_.isNumber(oldValue)) {\n                return oldValue;\n            }\n            return null;\n        },\n        /**\n         * Takes a dataList, group by type, and return a sorted list by event_score of objects.\n         *\n         * @param {{type: string, suspicious_event_score: number}} dataList\n         * @returns {Array<{type: string, suspicious_event_score: number}>} Sorted by suspicious_event_score\n         * @private\n         */\n        _getDataEntitiesSorted: function (dataList) {\n            // Group by type\n            var groupByType = _.groupBy(dataList, TYPE_FIELD_NAME);\n            // Extract data entities keys\n            var dataEntitiesKeys = Object.keys(groupByType);\n            // Create data entities sums object\n            var dataEntitiesSums = {};\n            // Iterate through dataEntitiesKeys and sum by suspicious_event_score and store on dataEntitiesSums\n            _.each(dataEntitiesKeys, function (dataEntityName) {\n                dataEntitiesSums[dataEntityName] =\n                    _.sumBy(groupByType[dataEntityName], SUSPICIOUS_EVENT_SCORE_FIELD_NAME);\n            });\n            // Return sorted list of data entities: {type: string, suspicious_event_score: integer}\n            return _.orderBy(_.map(dataEntitiesSums, function (value, key) {\n                var obj = {};\n                obj[SUSPICIOUS_EVENT_SCORE_FIELD_NAME] = value;\n                obj[TYPE_FIELD_NAME] = key;\n                return obj;\n            }), SUSPICIOUS_EVENT_SCORE_FIELD_NAME, 'desc');\n        },\n        /**\n         * Populates data entities list in a newDay object\n         *\n         * @param {array<{type: string, event_count: number, suspicious_event_score: number}>} dayGroup\n         * @param {object} newDay\n         * @param {{type: string}} dataEntity\n         * @returns {{type: string, suspicious_event_score: number}|object}\n         * @private\n         */\n        _populateDataEntities: function (dayGroup, newDay, dataEntity) {\n            // Create dataEntities\n            var type = dataEntity[TYPE_FIELD_NAME];\n            var query = {};\n            query[TYPE_FIELD_NAME] = type;\n            var oldDay = _.filter(dayGroup, query)[0];\n            if (oldDay) {\n                // Increment devices_count, users_count, event_count\n                this._setProperties([\n                    {\n                        sourceProperty: EVENT_COUNT_FIELD_NAME,\n                        adapterFn: this._incrementTentative\n                    }\n                ], newDay, oldDay);\n            }\n            else {\n                oldDay = {};\n            }\n            // Create a returned object\n            var obj = {};\n            obj[TYPE_FIELD_NAME] = type;\n            obj[SUSPICIOUS_EVENT_SCORE_FIELD_NAME] = oldDay[SUSPICIOUS_EVENT_SCORE_FIELD_NAME] || 0;\n            return obj;\n        },\n        /**\n         * Populates a newDataObj with adapted items, where each key on the object is a day date.\n         *\n         * @param {object} newDataObj An object to be populated. From this object the new list will be returned\n         * @param {{type: string, suspicious_event_score: number}} dataEntitiesSorted\n         * @param {string} subGroupFieldName\n         * @param {array<{type: string, event_time: string, source_machine: string, event_count: number,\n         * suspicious_event_score: number}>} dayGroup\n         * @private\n         */\n        _populateNewDataObj: function (newDataObj, dataEntitiesSorted, dayGroup) {\n            _.each(dayGroup, _.bind(function (subGroup, subGroupName) {\n                // Create new object for each day and subgroup if it doesn't exist\n                var objKey = subGroup[0][EVENT_TIME_FIELD_NAME] + '_' + subGroupName;\n                if (!newDataObj[objKey]) {\n                    newDataObj[objKey] = {};\n                }\n                // Truncate newDay namespace for future reference\n                var newDay = newDataObj[objKey];\n                // Set source_machine, event_time on newDay object\n                this._setProperties([\n                    {\n                        sourceProperty: SOURCE_MACHINE_FIELD_NAME\n                    },\n                    {\n                        sourceProperty: NORMALIZED_USERNAME_FIELD_NAME\n                    },\n                    {\n                        sourceProperty: EVENT_TIME_FIELD_NAME,\n                        adapterFn: function (oldValue) {\n                            return new Date(oldValue);\n                        }\n                    }\n                ], newDay, subGroup[0], true);\n                // Set event_count (=0), users_count (=0), devices_count (=0)\n                newDay[EVENT_COUNT_FIELD_NAME] = newDay[EVENT_COUNT_FIELD_NAME] || 0;\n                // populate dataEntities\n                newDay.dataEntities =\n                    _.map(dataEntitiesSorted, this._populateDataEntities.bind(this, subGroup, newDay));\n            }, this));\n        },\n        /**\n         * An adapter for the returned data for ip investigation.\n         *\n         * @param {{}} dataList\n         * @param {string} target\n         * @returns {Array}\n         * @private\n         */\n        _ipInvestigationResourceAdapter: function (dataList, target) {\n            // Get sorted list of data entities sums\n            var dataEntitiesSorted = this._getDataEntitiesSorted(dataList);\n            // Extend the tables settings to add columns settings\n            if (target === 'machines') {\n                this._extendMachinesForIpSettings(dataEntitiesSorted);\n            }\n            if (target === 'users') {\n                this._extendUsersForIpSettings(dataEntitiesSorted);\n            }\n            // Group dataList by date (by day) to groupObj\n            var groupedByDayObj = _.groupBy(dataList, EVENT_TIME_FIELD_NAME);\n            // Create sub group by source machine or user name\n            var subGroupFieldName = '';\n            subGroupFieldName = target === 'machines' ? SOURCE_MACHINE_FIELD_NAME : subGroupFieldName;\n            subGroupFieldName = target === 'users' ? NORMALIZED_USERNAME_FIELD_NAME : subGroupFieldName;\n            _.each(groupedByDayObj, function (dayObj, key) {\n                groupedByDayObj[key] = _.groupBy(dayObj, subGroupFieldName);\n            });\n            // create new object (keys are event_time)\n            // new object scheme: {source_machine: string, event_time: Date, event_count: integer,\n            // users_count: integer, devices_count: integer,\n            // dataEntities: [{type: string, suspicious_event_score: integer (=0)}]}\n            var newDataObj = {};\n            // Iterate through days groups and populate newDataObj\n            _.each(groupedByDayObj, this._populateNewDataObj.bind(this, newDataObj, dataEntitiesSorted));\n            // Return a sorted list of days\n            var newDataList = _.orderBy(_.map(newDataObj, function (day) {\n                return day;\n            }), EVENT_TIME_FIELD_NAME, 'desc');\n            newDataList._meta = dataList._meta;\n            return newDataList;\n        },\n        init: function () {\n            this._initIPAddressControlTooltip();\n        }\n    });\n    IPInvestigationController.$inject = ['appConfig', '$state', '$scope', 'dateRanges', 'machinesForIpResource',\n        'machinesForIpTableSettings', 'usersForIpResource', 'usersForIpTableSettings', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('IPInvestigationController', IPInvestigationController);\n}());\n","(function () {\n    'use strict';\n    function SensitiveResourcesMonitoringController(appConfig, $state, dateRanges, sensitiveMachinesStatusTableResource, sensitiveMachinesStatusTableSettings, usersAccessResourcesTableResource, usersAccessResourcesTableSettings, eventsSensitiveMachinesTableResource, eventsSensitiveMachinesTableSettings, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this._defaultDaysRange = appConfig.getConfigValue('ui.' + $state.current.name, 'daysRange');\n        this.mainState = _.merge({}, {\n            min_score: {\n                value: 50\n            },\n            events_time: {\n                value: dateRanges.getByDaysRange(this._defaultDaysRange, 'short')\n            }\n        });\n        this.sensitiveMachinesStatusTableResource = _.merge({}, sensitiveMachinesStatusTableResource);\n        this.sensitiveMachinesStatusTableSettings = _.merge({}, sensitiveMachinesStatusTableSettings);\n        this.usersAccessResourcesTableResource = _.merge({}, usersAccessResourcesTableResource);\n        this.usersAccessResourcesTableSettings = _.merge({}, usersAccessResourcesTableSettings);\n        this.eventsSensitiveMachinesTableResource = _.merge({}, eventsSensitiveMachinesTableResource);\n        this.eventsSensitiveMachinesTableSettings = _.merge({}, eventsSensitiveMachinesTableSettings);\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(SensitiveResourcesMonitoringController.prototype, {\n        init: function () {\n        }\n    });\n    SensitiveResourcesMonitoringController.$inject =\n        ['appConfig', '$state', 'dateRanges', 'sensitiveMachinesStatusTableResource',\n            'sensitiveMachinesStatusTableSettings', 'usersAccessResourcesTableResource',\n            'usersAccessResourcesTableSettings', 'eventsSensitiveMachinesTableResource',\n            'eventsSensitiveMachinesTableSettings', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('SensitiveResourcesMonitoringController', SensitiveResourcesMonitoringController);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    'use strict';\n    (function () {\n        'use strict';\n        function SuspiciousEndpointAccessController(appConfig, $state, dateRanges, mainState, endpointControlSettings, endpointControlResource, resourceSettings, tableSettings, userUtils, fsNanobarAutomationService) {\n            var _this = this;\n            // Put injections on instance\n            this.state = _.merge({}, $state.current.data);\n            this._defaultDaysRange = appConfig.getConfigValue('ui.' + $state.current.name, 'daysRange');\n            this.mainState = _.merge({}, mainState, {\n                \"events_time\": {\n                    \"value\": dateRanges.getByDaysRange(this._defaultDaysRange, 'short')\n                }\n            });\n            this.endpointControlSettings = _.merge({}, endpointControlSettings);\n            this.endpointControlResource = _.merge({}, endpointControlResource);\n            this.resourceSettings = resourceSettings;\n            this.tableSettings = _.merge({}, tableSettings);\n            // Add user control settings\n            this.userControlSettings = {\n                \"dataValueField\": \"username\",\n                \"dataTextField\": \"fallBackDisplayName\",\n                /**\n                 * Takes received users and creates fallBack display name for each, and prevents duplications.\n                 * @param users\n                 */\n                \"dataTextFn\": function (users) {\n                    userUtils.setFallBackDisplayNames(users);\n                    userUtils.preventFallBackDisplayNameDuplications(users);\n                },\n                \"placeholder\": \"All Users\"\n            };\n            // Add user control resource settings\n            this.userControlResource = {\n                \"entity\": \"user\",\n                \"params\": {\n                    \"page\": 1,\n                    \"size\": 10,\n                    \"sort_field\": \"displayName\",\n                    \"sort_direction\": \"ASC\",\n                    \"search_field_contains\": \"{{search}}\"\n                }\n            };\n            this.init();\n            this.NANOBAR_ID = 'reports';\n            this.dataFetchDelegate = function (promise) {\n                fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n            };\n        }\n        _.merge(SuspiciousEndpointAccessController.prototype, {\n            init: function () {\n            }\n        });\n        SuspiciousEndpointAccessController.$inject =\n            ['appConfig', '$state', 'dateRanges', 'mainState', 'endpointControlSettings', 'endpointControlResource',\n                'resourceSettings', 'tableSettings', 'userUtils', 'fsNanobarAutomationService'];\n        angular.module('Fortscale.layouts.reports')\n            .controller('SuspiciousEndpointAccessController', SuspiciousEndpointAccessController);\n    }());\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function RiskyTaggedUsersController($state, $stateParams, dataEntities, tableResource, tableSettings, dataEntitiesList, fsNanobarAutomationService) {\n        var _this = this;\n        // Put injections on instance\n        this.state = _.merge({}, $state.current.data);\n        this.$stateParams = $stateParams;\n        this.tagName = $stateParams.tagName;\n        this.mainState = _.merge({\n            userTags: {\n                value: this.tagName\n            },\n            users_table: {\n                value: {\n                    pageSize: 20,\n                    page: 1,\n                    sortBy: 'score',\n                    sortDirection: 'DESC'\n                }\n            }\n        });\n        this.tableResource = _.merge({}, tableResource);\n        this.tableSettings = _.merge({}, tableSettings);\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        this.init();\n    }\n    _.merge(RiskyTaggedUsersController.prototype, {\n        init: function () {\n        }\n    });\n    RiskyTaggedUsersController.$inject =\n        ['$state', '$stateParams', 'dataEntities', 'tableResource', 'tableSettings', 'dataEntitiesList',\n            'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('RiskyTaggedUsersController', RiskyTaggedUsersController);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var suspiciousUsersResolve = {\n        tableResource: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/reports/layouts/suspicious-users/settings/suspicious-users-table.resource.json');\n            }\n        ],\n        tableSettings: [\n            'jsonLoader',\n            function (jsonLoader) {\n                return jsonLoader\n                    .load('app/layouts/reports/layouts/suspicious-users/settings/suspicious-users-table.settings.json');\n            }\n        ]\n    };\n    angular.module('Config')\n        .constant('suspiciousUsersResolve', suspiciousUsersResolve);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var suspiciousUsersData = {\n        reportTitle: 'Accounts',\n        reportDescription: 'The following report lists Privileged Users With high-risk scores. Click a username To drill-down into score breakdown and investigate anomalous behaviors.',\n        reportClass: 'regular',\n        noItems: 'No Users Found'\n    };\n    angular.module('Config')\n        .constant('suspiciousUsersData', suspiciousUsersData);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var externalAccessToNetworkResolve = {\n        resolve: {},\n        VPNGeoHopping: {\n            userControlSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'vpn-geo-hopping-user-control.settings.json');\n                }\n            ],\n            userControlResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'vpn-geo-hopping-user-control.resource.json');\n                }\n            ],\n            VPNGeoHoppingResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'vpn-geo-hopping.resource.json');\n                }\n            ],\n            VPNGeoHoppingTableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'vpn-geo-hopping-table.settings.json');\n                }\n            ],\n            VPNGeoHoppingChartSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'vpn-geo-hopping-chart.settings.json');\n                }\n            ]\n        },\n        suspiciousVPNDataAmount: {\n            userControlSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'suspicious-vpn-data-amount-user-control.settings.json');\n                }\n            ],\n            userControlResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'suspicious-vpn-data-amount-user-control.resource.json');\n                }\n            ],\n            tableResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .loadJsonx('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'suspicious-vpn-data-amount-table.resource.jsonx');\n                }\n            ],\n            tableSettings: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .load('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'suspicious-vpn-data-amount-table.settings.json');\n                }\n            ],\n            chartResource: [\n                'jsonLoader',\n                function (jsonLoader) {\n                    return jsonLoader\n                        .loadJsonx('app/layouts/reports/layouts/external-access-to-network/settings/' +\n                        'suspicious-vpn-data-amount-chart.resource.jsonx');\n                }\n            ]\n        }\n    };\n    angular.module('Config')\n        .constant('externalAccessToNetworkResolve', externalAccessToNetworkResolve);\n}());\n","/**\n * Resolve object for alerts\n */\n(function () {\n    'use strict';\n    var externalAccessToNetworkData = {\n        VPNGeoHopping: {\n            reportTitle: 'VPN Anomalous Geolocation Sequences',\n            reportDescription: 'Investigate VPN connections coming from distant locations in an unrealistically ' +\n                'short time frames.',\n            sessionPerUserWidgetTitle: 'Users',\n            sessionPerUserWidgetNoItems: 'No Sessions Found.',\n            sessionPerUserTableDescription: 'VPN Events'\n        },\n        suspiciousVPNDataAmount: {\n            reportTitle: 'VPN Anomalous Data Usage',\n            reportDescription: 'Investigate excessive data usage over VPN.',\n            sessionPerTimeChartTitle: 'Sessions',\n            sessionPerTimeChartNoItems: 'No Events Found',\n            sessionPerTimeChartNoTable: 'No Events Found'\n        }\n    };\n    angular.module('Config')\n        .constant('externalAccessToNetworkData', externalAccessToNetworkData);\n}());\n","(function () {\n    'use strict';\n    var START_TIME_FIELD_NAME = 'start_time';\n    var USERNAME_FIELD_NAME = 'username';\n    var END_TIME_FIELD_NAME = 'end_time';\n    var DURATION_FIELD_NAME = 'duration';\n    var DATA_USAGE_FIELD_NAME = 'data_bucket';\n    var DATA_USAGE_SCORE_FIELD_NAME = 'data_bucket_score';\n    function SuspiciousVPNDataAmountController(appConfig, $state, $scope, dateRanges, SEVERITIES, utils, $filter, userControlSettings, userControlResource, tableResource, tableSettings, chartResource, fsNanobarAutomationService) {\n        var _this = this;\n        var ctrl = this;\n        // Put injections on instance\n        ctrl.state = _.merge({}, $state.current.data);\n        ctrl.$scope = $scope;\n        ctrl.SEVERITIES = SEVERITIES;\n        ctrl.utils = utils;\n        ctrl.$filters = $filter;\n        ctrl.dateRanges = dateRanges;\n        ctrl._defaultDaysRange = appConfig.getConfigValue('ui.' + $state.current.name, 'daysRange');\n        ctrl.userControlSettings = _.merge({}, userControlSettings);\n        ctrl.userControlResource = _.merge({}, userControlResource);\n        ctrl.tableResource = tableResource;\n        ctrl.tableSettings = _.merge({}, tableSettings);\n        ctrl.chartResource = chartResource;\n        // Lock in controller as activation context\n        ctrl.chartResourceAdapter = function (dataList) {\n            return ctrl._chartResourceAdapter(dataList);\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        // Init\n        this.init();\n    }\n    _.merge(SuspiciousVPNDataAmountController.prototype, {\n        /**\n         * Initiates report main state\n         *\n         * @private\n         */\n        _initMainState: function () {\n            var ctrl = this;\n            ctrl.mainState = _.merge({}, {\n                events_time: {\n                    value: ctrl.dateRanges.getByDaysRange(ctrl._defaultDaysRange, 'short')\n                },\n                min_score: {\n                    value: 50\n                },\n                suspicious_vpn_data_amount_table: {\n                    value: {\n                        pageSize: 20,\n                        page: 1,\n                        sortDirection: 'DESC',\n                        sortBy: 'data_bucket_score'\n                    }\n                }\n            });\n        },\n        /**\n         * Initiates chart settings\n         *\n         * @private\n         */\n        _initChartSettings: function () {\n            var ctrl = this;\n            ctrl.chartSettings = {\n                \"chart\": {\n                    \"type\": \"scatter\"\n                },\n                \"title\": {\n                    \"text\": null\n                },\n                \"xAxis\": {\n                    \"type\": \"datetime\",\n                    \"dateTimeLabelFormats\": {\n                        \"month\": \"%e. %b\",\n                        \"year\": \"%b\"\n                    },\n                    \"title\": {\n                        \"text\": \"Date\"\n                    },\n                    \"tickInterval\": 1000 * 60 * 60 * 24\n                },\n                \"yAxis\": {\n                    \"type\": 'datetime',\n                    \"tickInterval\": 3600 * 1000,\n                    min: 0,\n                    max: (1000 * 60 * 60 * 24) - 1,\n                    labels: {\n                        formatter: function () {\n                            var hour = this.value / 1000 / 60 / 60;\n                            return (hour < 10 ? '0' : '') + hour + ':00';\n                        }\n                    },\n                    \"title\": {\n                        \"text\": \"Hours\"\n                    }\n                },\n                \"isMultiSeries\": true,\n                plotOptions: {\n                    series: {\n                        marker: {\n                            radius: 5,\n                            symbol: 'circle'\n                        }\n                    }\n                },\n                tooltip: {\n                    formatter: function () {\n                        var s = '';\n                        s += '<b>Username: </b>' + this.point.username + '<br>';\n                        s += '<b>Start Time: </b>' + moment(this.point.startTime).format(\"MMM Do YY HH:mm:ss\") + '<br>';\n                        s += '<b>End Time: </b>' + moment(this.point.endTime).format(\"MMM Do YY HH:mm:ss\") + '<br>';\n                        s += '<b>Duration: </b>' + moment(this.point.endTime).format(\"HH:mm:ss\") + '<br>';\n                        s += '<b>Data Usage: </b>' + ctrl.$filters('prettyBytes')(this.point.dataUsage) + '/s<br>';\n                        s += '<b>Data Usage Score: </b>' + this.point.dataUsageScore + '<br>';\n                        return s;\n                    }\n                },\n                legend: {\n                    \"enabled\": true,\n                    layout: 'vertical',\n                    align: 'right',\n                    verticalAlign: 'top',\n                    x: 0,\n                    y: 40\n                }\n            };\n        },\n        /**\n         * Initiates chart map settings\n         *\n         * @private\n         */\n        _initChartMapSettings: function () {\n            var ctrl = this;\n            ctrl.chartMapSettings = {\n                x: {\n                    key: START_TIME_FIELD_NAME,\n                    /**\n                     * In effect always returns the start of day, so all markers fall on the same line on the x axis.\n                     *\n                     * @param {number} startDate\n                     * @returns {number}\n                     */\n                    fn: function (startDate) {\n                        return ctrl.utils.date.getMoment(startDate).startOf('day').valueOf();\n                    }\n                },\n                y: {\n                    key: START_TIME_FIELD_NAME,\n                    /**\n                     * Returns only the delta between start of day and date, thus producing only the time in day\n                     * for the y axis.\n                     *\n                     * @param {number} startDate\n                     * @returns {number}\n                     */\n                    fn: function (startDate) {\n                        var endTime = ctrl.utils.date.getMoment(startDate).valueOf();\n                        var startTime = ctrl.utils.date.getMoment(startDate).startOf('day').valueOf();\n                        return (endTime - startTime);\n                    }\n                },\n                username: USERNAME_FIELD_NAME,\n                startTime: START_TIME_FIELD_NAME,\n                endTime: END_TIME_FIELD_NAME,\n                duration: DURATION_FIELD_NAME,\n                dataUsage: DATA_USAGE_FIELD_NAME,\n                dataUsageScore: DATA_USAGE_SCORE_FIELD_NAME\n            };\n        },\n        /**\n         * Converts returned data list to series list by severity\n         *\n         * @param {Array<{data_bucket_score: number}>} dataList\n         * @returns {Array<{name: string, color: string, scoreRange: Array<number,number>, data: Array<{}>}>}\n         * @private\n         */\n        _convertToSeries: function (dataList) {\n            // Group by severity\n            var dataListGrouped = _.groupBy(dataList, _.bind(function (dataItem) {\n                return this.SEVERITIES.getByScore(dataItem[DATA_USAGE_SCORE_FIELD_NAME]).id;\n            }, this));\n            // Create series list\n            var series = _.map(dataListGrouped, _.bind(function (group, groupName) {\n                var severity = this.SEVERITIES.getById(groupName);\n                return {\n                    name: severity.displayName,\n                    color: severity.color,\n                    data: group,\n                    scoreRange: severity.scoreRange\n                };\n            }, this));\n            // Sort series list by score range bottom end (should produce low, medium, high, critical)\n            return _.orderBy(series, 'scoreRange[0]', 'asc');\n        },\n        /**\n         * Chart resource adapter. Invokes and returns _convertToSeries, which converts data list to list of series.\n         *\n         * @param {Array<{data_bucket_score: number}>} dataList\n         * @returns {*|Array.<{name: string, color: string, scoreRange: Array.<number, number>, data: Array.<{}>}>}\n         * @private\n         */\n        _chartResourceAdapter: function (dataList) {\n            return this._convertToSeries(dataList);\n        },\n        /**\n         * Controller's init function\n         */\n        init: function () {\n            this._initMainState();\n            this._initChartMapSettings();\n            this._initChartSettings();\n        }\n    });\n    SuspiciousVPNDataAmountController.$inject =\n        ['appConfig', '$state', '$scope', 'dateRanges', 'SEVERITIES', 'utils', '$filter',\n            'userControlSettings', 'userControlResource', 'tableResource', 'tableSettings', 'chartResource',\n            'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('suspiciousVPNDataAmountController', SuspiciousVPNDataAmountController);\n}());\n","(function () {\n    'use strict';\n    var USERNAME_FIELD_NAME = 'username';\n    var USER_ID_FIELD_NAME = 'userid';\n    var NORMALIZED_USERNAME_FIELD_NAME = 'normalized_username';\n    var COUNTRY_FIELD_NAME = 'country';\n    var CITY_FIELD_NAME = 'city';\n    var EVENT_TIME_FIELD_NAME = 'event_time_utc';\n    var CHART_USERS_LIMIT = 10;\n    function VPNGeoHoppingController(appConfig, $state, $scope, dateRanges, userUtils, userControlResource, userControlSettings, VPNGeoHoppingResource, VPNGeoHoppingTableSettings, VPNGeoHoppingChartSettings, fsNanobarAutomationService) {\n        var _this = this;\n        var ctrl = this;\n        // Put injections on instance\n        ctrl.state = _.merge({}, $state.current.data);\n        ctrl.$scope = $scope;\n        ctrl.dateRanges = dateRanges;\n        ctrl.userUtils = userUtils;\n        ctrl.userControlResource = userControlResource;\n        ctrl.userControlSettings = userControlSettings;\n        ctrl.VPNGeoHoppingResource = VPNGeoHoppingResource;\n        ctrl.VPNGeoHoppingTableSettings = VPNGeoHoppingTableSettings;\n        ctrl.VPNGeoHoppingChartSettings = VPNGeoHoppingChartSettings;\n        ctrl._defaultDaysRange = appConfig.getConfigValue('ui.' + $state.current.name, 'daysRange');\n        ctrl.resourceAdapter = function (dataList) {\n            return ctrl._resourceAdapter(dataList);\n        };\n        this.NANOBAR_ID = 'reports';\n        this.dataFetchDelegate = function (promise) {\n            fsNanobarAutomationService.addPromise(_this.NANOBAR_ID, promise);\n        };\n        // Init\n        this.init();\n    }\n    _.merge(VPNGeoHoppingController.prototype, {\n        /**\n         * Initiates report main state\n         *\n         * @private\n         */\n        _initMainState: function () {\n            var ctrl = this;\n            ctrl.mainState = _.merge({}, {\n                events_time: {\n                    value: ctrl.dateRanges.getByDaysRange(ctrl._defaultDaysRange, 'short')\n                },\n                min_score: {\n                    value: 50\n                }\n            });\n        },\n        /**\n         * Initiates chart settings. Combines json \"dry\" settings with functional settings.\n         *\n         * @private\n         */\n        _initChartSettings: function () {\n            var ctrl = this;\n            this.chartSettings = _.merge({}, ctrl.VPNGeoHoppingChartSettings, {\n                tooltip: {\n                    formatter: function () {\n                        var s = '';\n                        s += '<b>Username: </b>' + this.point[USERNAME_FIELD_NAME] + '<br>';\n                        s += '<b>Normalized Username: </b>' + this.point[NORMALIZED_USERNAME_FIELD_NAME] + '<br>';\n                        s += '<b>Country: </b>' + this.point[COUNTRY_FIELD_NAME] + '<br>';\n                        s += '<b>City: </b>' + this.point[CITY_FIELD_NAME] + '<br>';\n                        s += '<b>Event Time: </b>' + moment(this.point[EVENT_TIME_FIELD_NAME]).utc()\n                            .format(\"MMM Do YY HH:mm:ss\") + '<br>';\n                        return s;\n                    }\n                }\n            });\n        },\n        /**\n         * Initiates chart map settings.\n         *\n         * @private\n         */\n        _initChartMapSettings: function () {\n            var ctrl = this;\n            ctrl.chartMapSettings = (_a = {\n                    x: {\n                        key: EVENT_TIME_FIELD_NAME,\n                        fn: function (date) {\n                            var dt = new Date(date);\n                            return dt.valueOf();\n                        }\n                    },\n                    y: {\n                        key: USERNAME_FIELD_NAME,\n                        fn: function (user) {\n                            return ctrl._chartUsersList.indexOf(user);\n                        }\n                    }\n                },\n                _a[USERNAME_FIELD_NAME] = USERNAME_FIELD_NAME,\n                _a[NORMALIZED_USERNAME_FIELD_NAME] = NORMALIZED_USERNAME_FIELD_NAME,\n                _a[EVENT_TIME_FIELD_NAME] = EVENT_TIME_FIELD_NAME,\n                _a[COUNTRY_FIELD_NAME] = COUNTRY_FIELD_NAME,\n                _a[CITY_FIELD_NAME] = CITY_FIELD_NAME,\n                _a[USER_ID_FIELD_NAME] = USER_ID_FIELD_NAME,\n                _a\n            );\n            var _a;\n        },\n        /**\n         * Returns a list of user names from user series.\n         *\n         * @param {Array<{name: string, data: array}>} userSeries\n         * @returns {Array}\n         * @private\n         */\n        _getListOfUserNames: function (userSeries) {\n            return _.map(userSeries, 'name');\n        },\n        /**\n         * Takes dataList and returns an object that is grouped by username.\n         *\n         * @param {Array<{username: string}>} dataList\n         * @returns {*}\n         * @private\n         */\n        _groupByUser: function (dataList) {\n            return _.groupBy(dataList, USERNAME_FIELD_NAME);\n        },\n        /**\n         * Sorts each user group list (internally) by event time ascending.\n         *\n         * @param userGroups\n         * @private\n         */\n        _sortUserGroups: function (userGroups) {\n            _.each(userGroups, function (userGroup, key) {\n                userGroups[key] = _.orderBy(userGroup, EVENT_TIME_FIELD_NAME, 'asc');\n            });\n        },\n        /**\n         * Adds mostRecentEvent property to each user group. This property will be later used to sort the groups.\n         *\n         * @param userGroups\n         * @private\n         */\n        _addMostRecentProperty: function (userGroups) {\n            _.each(userGroups, function (userGroup) {\n                userGroup.mostRecentEvent = userGroup[userGroup.length - 1][EVENT_TIME_FIELD_NAME];\n            });\n        },\n        /**\n         * Takes user groups object and converts to list, sorted by mostRecentEvent.\n         *\n         * @param userGroups\n         * @returns {Array<{name: string, data: Array<{}>}>}\n         * @private\n         */\n        _convertUserGroupsToList: function (userGroups) {\n            return _.map(_.sortBy(_.values(userGroups), 'mostRecentEvent').slice(0, CHART_USERS_LIMIT), function (userList) {\n                return {\n                    name: userList[0][USERNAME_FIELD_NAME],\n                    data: userList\n                };\n            }).reverse();\n        },\n        /**\n         * Takes the data list received from server, and convert it to sorted list of user groups\n         *\n         * @param dataList\n         * @returns {*|Array.<{name: string, data: Array.<{}>}>}\n         * @private\n         */\n        _createUsersSeries: function (dataList) {\n            var userGroups = this._groupByUser(dataList);\n            this._sortUserGroups(userGroups);\n            this._addMostRecentProperty(userGroups);\n            return this._convertUserGroupsToList(userGroups);\n        },\n        /**\n         * Intercepts the received resource and creates chart model and table model.\n         *\n         * @param dataList\n         * @returns {*}\n         * @private\n         */\n        _resourceAdapter: function (dataList) {\n            // Save reference to original list\n            this._sourceDataList = dataList;\n            // get list of 10 users by their most recent event\n            this.chartModel = this._createUsersSeries(dataList);\n            // Get list of user names for y axis categories\n            this.chartSettings.yAxis.categories = this._chartUsersList = this._getListOfUserNames(this.chartModel);\n            // Set the table model\n            this.tableModel = this._sourceDataList.slice(0);\n            this.tableModel._meta = this._sourceDataList._meta;\n            return dataList;\n        },\n        /**\n         * Handler for users list returned from accounts control. Sets fall back display name, and prevent display\n         * name duplications.\n         *\n         * @param {array<{fallBackDisplayName: string, username: string}>} users\n         * @private\n         */\n        _userControlDataTextFn: function (users) {\n            this.userUtils.setFallBackDisplayNames(users);\n            this.userUtils.preventFallBackDisplayNameDuplications(users);\n        },\n        /**\n         * Attach handler for users list returned from accounts control. Sets fall back display name, and prevent\n         * display name duplications. Handler is bound to the controller's instance.\n         *\n         * @private\n         */\n        _enrichUserControlSettings: function () {\n            this.userControlSettings.dataTextFn = this._userControlDataTextFn.bind(this);\n        },\n        /**\n         * Controller's init function\n         */\n        init: function () {\n            this._initMainState();\n            this._initChartSettings();\n            this._initChartMapSettings();\n            this._enrichUserControlSettings();\n        }\n    });\n    VPNGeoHoppingController.$inject =\n        ['appConfig', '$state', '$scope', 'dateRanges', 'userUtils', 'userControlResource', 'userControlSettings',\n            'VPNGeoHoppingResource', 'VPNGeoHoppingTableSettings', 'VPNGeoHoppingChartSettings', 'fsNanobarAutomationService'];\n    angular.module('Fortscale.layouts.reports')\n        .controller('VPNGeoHoppingController', VPNGeoHoppingController);\n}());\n","(function () {\n    'use strict';\n    function fsReportHeaderDirective() {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // Link function logic\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsReportHeaderController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsReportHeaderController.prototype, {\n            /**\n             * Init\n             */\n            init: function init() {\n            }\n        });\n        FsReportHeaderController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/reports/components/fs-report-header.view.html',\n            scope: {},\n            link: linkFn,\n            controller: FsReportHeaderController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                headerClass: '@',\n                headerTitle: '@',\n                headerDescription: '@'\n            }\n        };\n    }\n    fsReportHeaderDirective.$inject = [];\n    angular.module('Fortscale.layouts.reports')\n        .directive('fsReportHeader', fsReportHeaderDirective);\n    angular.module('Fortscale.layouts.reports')\n        .directive('fsTableHeader', fsReportHeaderDirective);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            'use strict';\n            configuration.CONFIG_FORM_STATE_NAME = 'configuration.configForm';\n            configuration.NAV_BAR_ELEMENT_SELECTOR = '.menu-pane--menu-container';\n            configuration.OPENED_CLASS_NAME = 'opened';\n            configuration.CLOSED_CLASS_NAME = 'closed';\n            angular.module('Fortscale.layouts.configuration', [\n                'Fortscale.shared.services.tagsUtils',\n                'Fortscale.shared.services.stringUtils'\n            ]);\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var configurationNavigation;\n            (function (configurationNavigation) {\n                var ConfigurationNavigationService = (function () {\n                    function ConfigurationNavigationService(assert, appConfig, $compile, $state) {\n                        this.assert = assert;\n                        this.appConfig = appConfig;\n                        this.$compile = $compile;\n                        this.$state = $state;\n                        this._errMsg = 'ConfigurationNavigationService: ';\n                        this._configurationPages = new Map();\n                    }\n                    ConfigurationNavigationService.prototype._mergeConfigPagesIntoNodeTree = function (configNodeTree) {\n                        var newConfigNodeTree = _.merge({}, configNodeTree);\n                        // Iterate through new configuration pages, and create a node for each one (it intentionally overwrites\n                        // old nodes).\n                        var configurationPages = Array.from(this._configurationPages.values());\n                        _.each(configurationPages, function (configurationPage) {\n                            // Breakdown namespace (id) into nodes\n                            var nodes = configurationPage.id.split('.');\n                            // Create paths for each node. For each path sets the configurationPage object and adds nodes object.\n                            // for example: a.b.c.d will create a, a.nodes.b, a.nodes.b.nodes.c.nodes, a.nodes.b.nodes.c.nodes.d\n                            for (var i = 0; i < nodes.length; i += 1) {\n                                var nameSpace = nodes.slice(0, i + 1).join(\".nodes.\");\n                                var localNameSpace = \"nodes.\" + nameSpace;\n                                // Find if object exists\n                                var configurationPageObject = _.get(newConfigNodeTree, localNameSpace);\n                                // If object does not exist, set it in\n                                if (!configurationPageObject) {\n                                    var displayName = configurationPage.displayName || nodes[i];\n                                    var placeholder = i === nodes.length - 1 ? configurationPage : {\n                                        id: nodes.slice(0, i + 1).join('.'), configurable: true\n                                    };\n                                    placeholder.displayName = displayName;\n                                    _.set(newConfigNodeTree, localNameSpace, placeholder);\n                                    _.set(newConfigNodeTree, localNameSpace + '.nodes', {});\n                                }\n                            }\n                        });\n                        return newConfigNodeTree;\n                    };\n                    /**\n                     * Tentativelly builds all the missing configuration pages for the received path\n                     *\n                     * @param {IConfigurationPageData} configurationPageData\n                     * @private\n                     */\n                    ConfigurationNavigationService.prototype._buildConfigurationPagePath = function (configurationPageData) {\n                        var nodes = configurationPageData.id.split('.');\n                        for (var i = 0; i < nodes.length; i += 1) {\n                            var nameSpace = nodes.slice(0, i + 1).join(\".\");\n                            if (!this._configurationPages.get(nameSpace)) {\n                                // If its not the last index then take the node[i] as display name, otherwise take\n                                // configurationPageData.displayName as display name or nodes[i] as default.\n                                if (i + 1 < nodes.length) {\n                                    this._configurationPages.set(nameSpace, {\n                                        id: nameSpace,\n                                        displayName: nodes[i],\n                                        description: null,\n                                        component: null,\n                                        customPage: false,\n                                        configurable: true,\n                                        doNotShowHeader: false,\n                                        formClassNames: ''\n                                    });\n                                }\n                                else {\n                                    this._configurationPages.set(nameSpace, {\n                                        id: nameSpace,\n                                        displayName: configurationPageData.displayName || nodes[i],\n                                        description: configurationPageData.description || null,\n                                        component: configurationPageData.component || null,\n                                        customPage: true,\n                                        configurable: true,\n                                        doNotShowHeader: !!configurationPageData.doNotShowHeader,\n                                        formClassNames: configurationPageData.formClassNames || ''\n                                    });\n                                }\n                            }\n                        }\n                    };\n                    /**\n                     * Adds a custom configuration page\n                     *\n                     * @param configurationPageData\n                     * @returns {ConfigurationNavigationService}\n                     */\n                    ConfigurationNavigationService.prototype.addConfigurationPage = function (configurationPageData) {\n                        // Validations\n                        var errMsg = this._errMsg + \"addConfigurationPage: \";\n                        this.assert.isString(configurationPageData.id, 'configurationPageData.id', errMsg);\n                        this.assert.isString(configurationPageData.displayName, 'configurationPageData.displayName', errMsg, true);\n                        this.assert.isString(configurationPageData.description, 'configurationPageData.description', errMsg, true);\n                        this.assert.isString(configurationPageData.component, 'configurationPageData.component', errMsg, true);\n                        this.assert(!this._configurationPages.get(configurationPageData.id), errMsg + \"ConfigurationPage id must be unique.\", RangeError);\n                        this._buildConfigurationPagePath(configurationPageData);\n                        return this;\n                    };\n                    /**\n                     * Returns a tree object of configuration pages (containers or customs)\n                     * @returns {any}\n                     */\n                    ConfigurationNavigationService.prototype._getConfigNodesTree = function () {\n                        var configNodeTree = this.appConfig.getConfigNodesTree();\n                        return this._mergeConfigPagesIntoNodeTree(configNodeTree);\n                    };\n                    /**\n                     * Creates an unordered list\n                     *\n                     * @returns {JQuery}\n                     * @private\n                     */\n                    ConfigurationNavigationService.prototype._createNavUl = function () {\n                        return angular.element('<ul class=\"menu-pane--sub-menu\"></ul>');\n                    };\n                    /**\n                     *\n                     * @param {string} currentConfigId\n                     * @param {string} targetConfigId\n                     * @private\n                     */\n                    ConfigurationNavigationService.prototype._isParentOfConfigContainer = function (currentConfigId, targetConfigId) {\n                        // Check against appConfig if is parent of config container. If not proceed to local check\n                        if (this.appConfig.isParentOfConfigContainer(currentConfigId, targetConfigId)) {\n                            return true;\n                        }\n                        // Figure if there are custom config pages declared, and if so check parenthood\n                        var currentConfigPage = this._configurationPages.get(currentConfigId);\n                        var targetConfigPage = this._configurationPages.get(targetConfigId);\n                        return currentConfigPage && targetConfigPage && targetConfigId.indexOf(currentConfigId) === 0;\n                    };\n                    /**\n                     * Creates a navigation item (bullet)\n                     *\n                     * @param {*} node\n                     * @param {number} indentLevel\n                     * @param {IScope} $scope\n                     * @returns {JQuery}\n                     * @private\n                     */\n                    ConfigurationNavigationService.prototype._createNavLi = function (node, indentLevel, $scope) {\n                        var navLi = angular.element(\"\\n                <li>\\n                    <a>\" + node.displayName + \"</a>\\n                    <span class=\\\"open-close-display\\\">\\n                        <i class=\\\"fa fa-chevron-left closed\\\"></i>\\n                        <i class=\\\"fa fa-chevron-down opened\\\"></i>\\n                    </span>\\n                </li>\\n            \");\n                        navLi.find('a').attr({\n                            'ui-sref': configuration.CONFIG_FORM_STATE_NAME + '({stateName: \"' + node.id + '\"})'\n                        });\n                        navLi.attr({\n                            'class': 'menu-pane--menu-item', 'ui-sref-active': 'active'\n                        });\n                        navLi.css({\n                            'padding-left': (indentLevel * 10) + 'px'\n                        });\n                        function openCloseClickHandler() {\n                            if (navLi.hasClass(configuration.OPENED_CLASS_NAME)) {\n                                navLi.removeClass(configuration.OPENED_CLASS_NAME);\n                                navLi.addClass(configuration.CLOSED_CLASS_NAME);\n                            }\n                            else if (navLi.hasClass(configuration.CLOSED_CLASS_NAME)) {\n                                navLi.removeClass(configuration.CLOSED_CLASS_NAME);\n                                navLi.addClass(configuration.OPENED_CLASS_NAME);\n                            }\n                        }\n                        // if node has nodes\n                        if (node.nodes && Object.keys(node.nodes).length) {\n                            // add proper class. closed as default or opened if current state is a child of node.id\n                            if (this.$state.params.stateName &&\n                                this._isParentOfConfigContainer(node.id, this.$state.params.stateName)) {\n                                navLi.addClass(configuration.OPENED_CLASS_NAME);\n                            }\n                            else if (indentLevel === 1) {\n                                navLi.addClass(configuration.OPENED_CLASS_NAME);\n                            }\n                            else {\n                                navLi.addClass(configuration.CLOSED_CLASS_NAME);\n                            }\n                            // Add click handler\n                            navLi.on('click', openCloseClickHandler);\n                            // Cleanup\n                            $scope.$on('$destroy', function () {\n                                navLi.off('click', openCloseClickHandler);\n                            });\n                        }\n                        return navLi;\n                    };\n                    /**\n                     * Renders a single configuration node (bullet). It runs recursively.\n                     * @param {{}} node\n                     * @param {IScope} $scope\n                     * @param {JQuery=} element\n                     * @param {number=} indentLevel\n                     * @returns {JQuery}\n                     * @private\n                     */\n                    ConfigurationNavigationService.prototype._renderNavNode = function (node, $scope, element, indentLevel) {\n                        if (element === void 0) { element = angular.element('<div></div>'); }\n                        if (indentLevel === void 0) { indentLevel = 0; }\n                        // Create li container if node has displayName and id\n                        if (node.id && node.displayName && node.configurable) {\n                            element.append(this._createNavLi(node, indentLevel, $scope));\n                        }\n                        // if nodes keys has length iterate through nodes and run recursively\n                        var nodesKeys = node.nodes ? Object.keys(node.nodes) : null;\n                        if (node.nodes && nodesKeys.length) {\n                            // Create ul\n                            var navUl_1 = this._createNavUl();\n                            element.append(navUl_1);\n                            // For each node run _renderNavNode\n                            _.each(node.nodes, _.bind(function (node) {\n                                if (node.configurable) {\n                                    this._renderNavNode(node, $scope, navUl_1, indentLevel + 1);\n                                }\n                            }, this));\n                        }\n                        return element;\n                    };\n                    /**\n                     * Renders navigation bar\n                     * @param {jQuery} navContainer\n                     * @param {IScope} $scope\n                     */\n                    ConfigurationNavigationService.prototype.renderNavigation = function (navContainer, $scope) {\n                        var configNodeTree = this._getConfigNodesTree();\n                        var navElement = this._renderNavNode(configNodeTree, $scope);\n                        navElement = this.$compile(navElement)($scope);\n                        navContainer.append(navElement);\n                    };\n                    /**\n                     * Returns a configuration page\n                     *\n                     * @param {string} configurationPageId\n                     */\n                    ConfigurationNavigationService.prototype.getConfigurationPage = function (configurationPageId) {\n                        return this._configurationPages.get(configurationPageId) || null;\n                    };\n                    ConfigurationNavigationService.$inject = ['assert', 'appConfig', '$compile', '$state'];\n                    return ConfigurationNavigationService;\n                }());\n                configurationNavigation.ConfigurationNavigationService = ConfigurationNavigationService;\n                angular.module('Fortscale.layouts.configuration')\n                    .service('Fortscale.layouts.configuration.configurationNavigationService', ConfigurationNavigationService);\n            })(configurationNavigation = configuration.configurationNavigation || (configuration.configurationNavigation = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var configurationForm;\n            (function (configurationForm) {\n                'use strict';\n                var configurationFormService = (function () {\n                    function configurationFormService(assert, $q, stringUtils, $compile, configurationNavigationService) {\n                        this.assert = assert;\n                        this.$q = $q;\n                        this.stringUtils = stringUtils;\n                        this.$compile = $compile;\n                        this.configurationNavigationService = configurationNavigationService;\n                        this._errMsg = 'Fortscale.layouts.configuration.configurationFormService: ';\n                    }\n                    configurationFormService.prototype.onRenderComplete = function (resolve, reject) {\n                    };\n                    /**\n                     * Renders a custom component/directive\n                     *\n                     * @param {string} componentName\n                     * @param {IScope} $scope\n                     * @param {IQResolveReject<JQuery>} resolve\n                     * @param {IQResolveReject<any>} reject\n                     * @private\n                     */\n                    configurationFormService.prototype._renderCustomComponent = function (componentName, $scope, resolve, reject) {\n                        try {\n                            var element = angular.element('<div class=\"configuration-form-component-wrapper\"></div>');\n                            var componentSlug = this.stringUtils.toSlugCase(componentName);\n                            var component = angular.element(\"<\" + componentSlug + \"></\" + componentSlug + \">\");\n                            element.append(component);\n                            resolve(this.$compile(element)($scope));\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    };\n                    /**\n                     * Checks if a containerId refers to a custom form or a predefined dynamic form\n                     *\n                     * @param containerId\n                     * @returns {any}\n                     */\n                    configurationFormService.prototype.isCustomForm = function (containerId) {\n                        // Validations\n                        this.assert.isString(containerId, 'containerId', this._errMsg + \"isCustomForm: \");\n                        // get configuration page\n                        var configurationPage = this.configurationNavigationService.getConfigurationPage(containerId);\n                        // if configuration page exists return configurationPage.customPage\n                        if (configurationPage) {\n                            return !!configurationPage.customPage;\n                        }\n                        return null;\n                    };\n                    configurationFormService.prototype.generateConfigContainer = function (containerId) {\n                        var configurationPage = this.configurationNavigationService.getConfigurationPage(containerId);\n                        if (configurationPage) {\n                            return {\n                                id: configurationPage.id,\n                                displayName: configurationPage.displayName,\n                                description: configurationPage.description,\n                                doNotShowHeader: configurationPage.doNotShowHeader,\n                                formClassNames: configurationPage.formClassNames\n                            };\n                        }\n                        return null;\n                    };\n                    configurationFormService.prototype.renderCustomPage = function (configurationPageId, $scope) {\n                        var _this = this;\n                        // Validations\n                        var errMsg = this._errMsg + 'renderCustomPage: ';\n                        this.assert.isString(configurationPageId, 'configurationPageId', errMsg);\n                        this.assert.isObject($scope, '$scope', errMsg);\n                        // Create promise and return\n                        return this.$q(function (resolve, reject) {\n                            // get configuration page\n                            var configurationPage = _this.configurationNavigationService.getConfigurationPage(configurationPageId);\n                            if (!configurationPage) {\n                                return reject(\"Configuration page for id \" + configurationPageId + \" was not found.\");\n                            }\n                            // if it has 'component' then render component\n                            if (configurationPage.component) {\n                                return _this._renderCustomComponent(configurationPage.component, $scope, resolve, reject);\n                            }\n                        });\n                    };\n                    ;\n                    configurationFormService.$inject = ['assert', '$q', 'stringUtils', '$compile',\n                        'Fortscale.layouts.configuration.configurationNavigationService'];\n                    return configurationFormService;\n                }());\n                angular.module('Fortscale.layouts.configuration')\n                    .service('Fortscale.layouts.configuration.configurationFormService', configurationFormService);\n            })(configurationForm = configuration.configurationForm || (configuration.configurationForm = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                var DecoratorService = (function () {\n                    function DecoratorService(assert) {\n                        this.assert = assert;\n                        // Initialize properties\n                        this._decoratorForms = new Map();\n                        this._decoratorItems = new Map();\n                        this._errMsg = 'Fortscale.layouts.configuration.DecoratorService: ';\n                    }\n                    /**\n                     * Adds a decorator form object\n                     * @param {IConfigurationDecoratorService} formDecoratorData\n                     * @returns {DecoratorService}\n                     */\n                    DecoratorService.prototype.addDecoratorForm = function (formDecoratorData) {\n                        // Validations\n                        var errMsg = this._errMsg + 'addDecoratorForm: ';\n                        this.assert.isString(formDecoratorData.containerId, 'formDecoratorData.containerId', errMsg);\n                        // Set a new decorator form\n                        this._decoratorForms.set(formDecoratorData.containerId, {\n                            containerId: formDecoratorData.containerId,\n                            showComplex: _.isUndefined(formDecoratorData.showComplex) ? false : !!formDecoratorData.showComplex\n                        });\n                        return this;\n                    };\n                    /**\n                     * Derives a containerId from config item id by \"popping\" its last node\n                     *\n                     * @param {string} itemId\n                     * @returns {string}\n                     * @private\n                     */\n                    DecoratorService.prototype._itemIdToFormId = function (itemId) {\n                        var nodes = itemId.split('.');\n                        nodes.pop();\n                        return nodes.join('.');\n                    };\n                    /**\n                     * Returns a form decorator by a config item id\n                     *\n                     * @param {string} itemId\n                     * @returns {IFormDecorator}\n                     * @private\n                     */\n                    DecoratorService.prototype._getFormByItem = function (itemId) {\n                        return this.getDecoratorForm(this._itemIdToFormId(itemId));\n                    };\n                    DecoratorService.prototype._isFormShowComplex = function (itemId) {\n                        var formDecorator = this._getFormByItem(itemId);\n                        return formDecorator.showComplex;\n                    };\n                    /**\n                     * returns a decorator form object (or null)\n                     *\n                     * @param containerId\n                     * @returns {IFormDecorator|null}\n                     */\n                    DecoratorService.prototype.getDecoratorForm = function (containerId) {\n                        // Validations\n                        var errMsg = this._errMsg + 'getDecoratorForm: ';\n                        this.assert.isString(containerId, 'containerId', errMsg);\n                        return this._decoratorForms.get(containerId) || null;\n                    };\n                    /**\n                     * Adds a decorator item.\n                     *\n                     * @param {IConfigItemDecoratorData} configItemDecoratorData\n                     * @returns {DecoratorService}\n                     */\n                    DecoratorService.prototype.addDecoratorItem = function (configItemDecoratorData) {\n                        // Validations\n                        var errMsg = this._errMsg + 'addDecoratorItem: ';\n                        this.assert.isString(configItemDecoratorData.id, 'configItemDecoratorData.id', errMsg);\n                        this.assert(configItemDecoratorData.id.split(\".\").length > 1, errMsg +\n                            'Config item id have at least two nodes in its namespace, i.e. string.string . Current name: ' +\n                            configItemDecoratorData.id);\n                        this.assert(this._getFormByItem(configItemDecoratorData.id), errMsg +\n                            'Adding config item decorator without first adding a container form decorator is not allowed. id: ' +\n                            configItemDecoratorData.id);\n                        this.assert.isString(configItemDecoratorData.component, 'configItemDecoratorData.id', errMsg, true);\n                        this.assert.isObject(configItemDecoratorData.resolve, 'configItemDecoratorData.resolve', errMsg, true);\n                        this.assert.isObject(configItemDecoratorData.data, 'configItemDecoratorData.data', errMsg, true);\n                        var id = configItemDecoratorData.id;\n                        var containerId = this._itemIdToFormId(id);\n                        var showComplex = _.isUndefined(configItemDecoratorData.showComplex) ?\n                            this._isFormShowComplex(id) : !!configItemDecoratorData.showComplex;\n                        var displayName = configItemDecoratorData.displayName;\n                        var description = configItemDecoratorData.description;\n                        var component = configItemDecoratorData.component || null;\n                        var templateUrl = configItemDecoratorData.templateUrl || null;\n                        var replace = !!configItemDecoratorData.replace;\n                        var resolve = configItemDecoratorData.resolve || {};\n                        var config = configItemDecoratorData.config || {};\n                        var data = configItemDecoratorData.data || {};\n                        var sort = configItemDecoratorData.sort || 0;\n                        var classNames = configItemDecoratorData.classNames || '';\n                        var showLoader = _.isUndefined(configItemDecoratorData.showLoader) ? true :\n                            !!configItemDecoratorData.showLoader;\n                        var decoratorItem = {\n                            id: id,\n                            containerId: containerId,\n                            displayName: displayName,\n                            description: description,\n                            showComplex: showComplex,\n                            component: component,\n                            templateUrl: templateUrl,\n                            replace: replace,\n                            resolve: resolve,\n                            config: config,\n                            data: data,\n                            sort: sort,\n                            classNames: classNames,\n                            showLoader: showLoader\n                        };\n                        if (!configItemDecoratorData.displayName) {\n                            delete decoratorItem.displayName;\n                        }\n                        if (!configItemDecoratorData.description) {\n                            delete decoratorItem.description;\n                        }\n                        this._decoratorItems.set(id, decoratorItem);\n                        return this;\n                    };\n                    /**\n                     * Returns a decorator item\n                     *\n                     * @param id\n                     * @returns {V|IConfigItemDecorator|null}\n                     */\n                    DecoratorService.prototype.getDecoratorItem = function (id) {\n                        // Validations\n                        var errMsg = this._errMsg + 'getDecoratorItem: ';\n                        this.assert.isString(id, 'id', errMsg);\n                        return this._decoratorItems.get(id) || null;\n                    };\n                    DecoratorService.prototype.getDecoratedItemsByContainerId = function (containerId) {\n                        // Validations\n                        var errMsg = this._errMsg + 'getDecoratorForm: ';\n                        this.assert.isString(containerId, 'containerId', errMsg);\n                        if (!this._decoratorItems.size) {\n                            return [];\n                        }\n                        var configItems = [];\n                        var values = Array.from(this._decoratorItems.values());\n                        _.each(values, function (value) {\n                            if (value.containerId === containerId) {\n                                configItems.push(value);\n                            }\n                        });\n                        return configItems;\n                    };\n                    DecoratorService.$inject = ['assert'];\n                    return DecoratorService;\n                }());\n                angular.module('Fortscale.layouts.configuration')\n                    .service('Fortscale.layouts.configuration.decoratorService', DecoratorService);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            'use strict';\n            var ConfigurationContoller = (function () {\n                function ConfigurationContoller($scope, $element, page, configurationNavigationService, VERSION_NUMBER, VERSION_YEAR, VERSION_COMPANY) {\n                    this.$scope = $scope;\n                    this.$element = $element;\n                    this.page = page;\n                    this.configurationNavigationService = configurationNavigationService;\n                    this.mainState = {};\n                    this.version = {\n                        number: VERSION_NUMBER,\n                        year: VERSION_YEAR,\n                        company: VERSION_COMPANY\n                    };\n                    this._init();\n                }\n                ConfigurationContoller.prototype._init = function () {\n                    // this._setupSplitterSetting();\n                    this.page.setPageTitle('System Configuration');\n                    var navContainer = this.$element.find(configuration.NAV_BAR_ELEMENT_SELECTOR); //configuration.scss\n                    this.configurationNavigationService.renderNavigation(navContainer, this.$scope);\n                };\n                ConfigurationContoller.$inject = ['$scope', '$element', 'page',\n                    'Fortscale.layouts.configuration.configurationNavigationService',\n                    'VERSION_NUMBER', 'VERSION_YEAR', 'VERSION_COMPANY'\n                ];\n                return ConfigurationContoller;\n            }());\n            angular.module('Fortscale.layouts.configuration')\n                .controller('ConfigurationController', ConfigurationContoller);\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var configurationFormController;\n            (function (configurationFormController) {\n                'use strict';\n                var ConfigurationFormController = (function () {\n                    function ConfigurationFormController(appConfig, $scope, $element, $compile, $state, configurationFormService, decoratorService) {\n                        var _this = this;\n                        this.appConfig = appConfig;\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.$compile = $compile;\n                        this.$state = $state;\n                        this.configurationFormService = configurationFormService;\n                        this.decoratorService = decoratorService;\n                        // Initialize properties\n                        this.configModels = [];\n                        this.loader = false;\n                        this.error = {\n                            display: false, title: '', description: ''\n                        };\n                        this.submitNewConfig = function () {\n                            _this._submitNewConfig();\n                        };\n                        this._init();\n                    }\n                    ;\n                    /**\n                     * Sets the config container and decorated form\n                     *\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._setConfigContainer = function () {\n                        this.configContainer = this.appConfig.getConfigContainer(this.$state.params['stateName']);\n                        this.decoratedForm = this.decoratorService.getDecoratorForm(this.$state.params['stateName']);\n                    };\n                    /**\n                     * returns a list of  IConfigItems relevant to the state\n                     * @returns {IConfigItem[]}\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._getConfigItemsByContainer = function () {\n                        var _this = this;\n                        if (!this.configContainer) {\n                            return null;\n                        }\n                        // Make a list of config item duplications, that belong to this state\n                        var configItems = this.appConfig.getConfigItemsByContainer(this.configContainer.id);\n                        configItems = _.map(configItems, function (configItem) { return _this.appConfig.duplicateConfigItem(configItem); });\n                        return configItems;\n                    };\n                    /**\n                     * Adds derived config item for each config item\n                     *\n                     * @returns {any[]}\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._populateDerivedConfigItems = function () {\n                        var _this = this;\n                        if (!this.configItems) {\n                            return null;\n                        }\n                        // Place the derived value config item on each config item. If no config item is found, or its pointing to\n                        // itself, derivedConfigItem property will not be set.\n                        return _.map(this.configItems, function (configItem) {\n                            var derivedConfigItem = _this.appConfig.getDerivedConfigItem(configItem.id);\n                            if (derivedConfigItem && configItem.id !== derivedConfigItem.id) {\n                                configItem.derivedConfigItem = _.merge({}, derivedConfigItem);\n                            }\n                            return configItem;\n                        });\n                    };\n                    /**\n                     * Merges decorated item into a config items object\n                     *\n                     * @param {{}} configItemsObject\n                     * @param {IConfigItemDecorator} decoratedItem\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._mergeDecoratedFormItem = function (configItemsObject, decoratedItem) {\n                        var item = configItemsObject[decoratedItem.id];\n                        item = item || { id: decoratedItem.id };\n                        _.merge(item, decoratedItem);\n                        configItemsObject[item.id] = item;\n                    };\n                    /**\n                     * Merges into config items any decorated items found in decorated form\n                     *\n                     * @returns {any[]}\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._mergeDecoratedFormItems = function () {\n                        var _this = this;\n                        if (!this.configItems || !this.configContainer) {\n                            return null;\n                        }\n                        // Merge in decorated items if there's a decorated form\n                        var decoratedForm = this.decoratorService.getDecoratorForm(this.configContainer.id);\n                        if (decoratedForm) {\n                            // Get decorated items\n                            var decoratedItems = this.decoratorService.getDecoratedItemsByContainerId(this.configContainer.id);\n                            // Convert configItems into an object to make merging in the items easy\n                            var configItemsObject_1 = _.keyBy(this.configItems, 'id');\n                            // Iterate through decorated items and merge each one into a config item, or a new item.\n                            _.each(decoratedItems, function (decoratedItem) { return _this._mergeDecoratedFormItem(configItemsObject_1, decoratedItem); });\n                            // Convert configItemsObject back to array\n                            return _.values(configItemsObject_1);\n                        }\n                        return this.configItems;\n                    };\n                    /**\n                     * Adds missing properties to config items, like showComplex and sort\n                     *\n                     * @returns {any[]}\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._polyfillConfigItems = function () {\n                        var _this = this;\n                        if (!this.configItems) {\n                            return null;\n                        }\n                        return _.map(this.configItems, function (configItem) {\n                            if (_this.decoratedForm) {\n                                configItem.showComplex =\n                                    _.isUndefined(configItem.showComplex) ? _this.decoratedForm.showComplex : configItem.showComplex;\n                            }\n                            else {\n                                configItem.showComplex = true;\n                            }\n                            configItem.sort = _.isUndefined(configItem.sort) ? 0 : configItem.sort;\n                            return configItem;\n                        });\n                    };\n                    ;\n                    /**\n                     * Sorts config items by 'sort'\n                     *\n                     * @returns {any[]}\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._sortConfigItems = function () {\n                        if (!this.configItems) {\n                            return null;\n                        }\n                        return _.sortBy(this.configItems, 'sort');\n                    };\n                    /**\n                     * Gets the relevant config items. extracts derived config items. Merges in decorated items.\n                     *\n                     * @private\n                     */\n                    ConfigurationFormController.prototype._setConfigItems = function () {\n                        this.configItems = this._getConfigItemsByContainer();\n                        this.configItems = this._populateDerivedConfigItems();\n                        this.configItems = this._mergeDecoratedFormItems();\n                        this.configItems = this._polyfillConfigItems();\n                        this.configItems = this._sortConfigItems();\n                    };\n                    ConfigurationFormController.prototype._submitNewConfig = function () {\n                        var _this = this;\n                        var ctrl = this;\n                        ctrl.loader = true;\n                        var configItemsList = [];\n                        _.each(Object.keys(this.configModels), function (configModelKey) {\n                            var value = _this.configModels[configModelKey];\n                            var configItem = _this.appConfig.getConfigItem(configModelKey);\n                            if (configItem && configItem.value !== value) {\n                                var item = { key: configModelKey, value: value };\n                                if (configItem.meta) {\n                                    item.meta = configItem.meta;\n                                }\n                                configItemsList.push(item);\n                            }\n                        });\n                        if (configItemsList.length) {\n                            this.appConfig.updateConfigItems(configItemsList)\n                                .then(function () {\n                                ctrl.$state.go(ctrl.$state.current, {\n                                    stateName: ctrl.$state.params['stateName']\n                                }, { reload: true });\n                            })\n                                .catch(function (err) {\n                                ctrl.loader = false;\n                                ctrl.error.display = true;\n                                ctrl.error.title = 'Update Error';\n                                ctrl.error.description = 'There was an unknown server error. Could not update configuration.';\n                                console.error(err);\n                            });\n                        }\n                        else {\n                            ctrl.$state.go(ctrl.$state.current, {\n                                stateName: ctrl.$state.params['stateName']\n                            }, { reload: true });\n                        }\n                    };\n                    ConfigurationFormController.prototype._init = function () {\n                        // determine flow\n                        var _this = this;\n                        // Custom form flow\n                        if (this.configurationFormService.isCustomForm(this.$state.params['stateName'])) {\n                            // when custom form, generate a logical config container\n                            this.configContainer = this.configurationFormService.generateConfigContainer(this.$state.params['stateName']);\n                            this.configurationFormService.renderCustomPage(this.$state.params['stateName'], this.$scope)\n                                .then(function (component) {\n                                var customWrapper = _this.$element.find('.form-pane--custom-form');\n                                customWrapper.append(component);\n                            })\n                                .catch(function (err) {\n                                console.error(\"Failed to render custom form for state: \" + _this.$state.params['stateName'], err);\n                            });\n                        }\n                        else {\n                            this._setConfigContainer();\n                            if (!this.configContainer) {\n                                throw new RangeError('Trying to render a form that is not declared dynamically via ' +\n                                    'appConfig.provider, and not declared statically via configurationNavigation.service');\n                            }\n                            this._setConfigItems();\n                        }\n                    };\n                    ConfigurationFormController.$inject = ['appConfig', '$scope', '$element', '$compile', '$state',\n                        'Fortscale.layouts.configuration.configurationFormService',\n                        'Fortscale.layouts.configuration.decoratorService'];\n                    return ConfigurationFormController;\n                }());\n                angular.module('Fortscale.layouts.configuration')\n                    .controller('ConfigurationFormController', ConfigurationFormController);\n            })(configurationFormController = configuration.configurationFormController || (configuration.configurationFormController = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    var IS_NOT_OPTIONAL = false;\n    function fsConfigAffectedItemsDirective() {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // Link function logic\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsConfigAffectedItemsController($element, $scope, appConfig, assert) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            ctrl.appConfig = appConfig;\n            ctrl.assert = assert;\n            ctrl.listOpened = false;\n            ctrl.toggleList = function (evt) {\n                ctrl._toggleList(evt);\n            };\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsConfigAffectedItemsController.prototype, {\n            _errMsg: 'Fortscale.appConfig: fsConfigAffectedItems.directive: ',\n            /**\n             * Validates configItem argument. Makes sure it exists, and is instance of ConfigItem.\n             *\n             * @private\n             */\n            _validateConfigItem: function () {\n                this.assert.isObject(this.configItem, 'configItem', this._errMsg + 'Arguments: ', IS_NOT_OPTIONAL);\n                this.assert(this.appConfig.isConfigItem(this.configItem), this._errMsg + 'Arguments: ConfigItem must be an instance of ConfigItem.', TypeError);\n            },\n            /**\n             * Starts validations\n             *\n             * @private\n             */\n            _validations: function () {\n                this._validateConfigItem();\n            },\n            /**\n             * Initiates affectedItems list.\n             *\n             * @private\n             */\n            _initAffectedItemsList: function () {\n                this.affectedItems = this.appConfig.getAffectedConfigItems(this.configItem.id);\n                this.affectedItems = _.map(this.affectedItems, _.bind(function (configItem) {\n                    var dupConfigContainer = this.appConfig.duplicateConfigItem(configItem);\n                    dupConfigContainer.derivedFrom = this.appConfig.getDerivedConfigItem(configItem.id);\n                    return dupConfigContainer;\n                }, this));\n            },\n            /**\n             * Toggles 'closed\\ and 'opened' classes\n             *\n             * @param {jQuery.Event} evt\n             */\n            _toggleList: function (evt) {\n                var el = angular.element(evt.currentTarget);\n                if (el.hasClass('closed')) {\n                    el.removeClass('closed');\n                    el.addClass('opened');\n                    this.listOpened = true;\n                }\n                else {\n                    el.removeClass('opened');\n                    el.addClass('closed');\n                    this.listOpened = false;\n                }\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                // Validations\n                this._validations();\n                this._initAffectedItemsList();\n            }\n        });\n        FsConfigAffectedItemsController.$inject = ['$element', '$scope', 'appConfig', 'assert'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/configuration/components/fs-config-affected-items.view.html',\n            scope: {},\n            link: linkFn,\n            controller: FsConfigAffectedItemsController,\n            controllerAs: 'ctrl',\n            bindToController: {\n                configItem: '='\n            }\n        };\n    }\n    fsConfigAffectedItemsDirective.$inject = [];\n    angular.module('Fortscale.appConfig')\n        .directive('fsConfigAffectedItems', fsConfigAffectedItemsDirective);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                angular.module('Fortscale.layouts.configuration')\n                    .run(['Fortscale.layouts.configuration.decoratorService', function (decoratorService) {\n                        decoratorService\n                            .addDecoratorForm({\n                            containerId: 'system.logEmail'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.logEmail.subscribers',\n                            component: 'usersList'\n                        });\n                    }]);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                angular.module('Fortscale.layouts.configuration')\n                    .run(['Fortscale.layouts.configuration.decoratorService', function (decoratorService) {\n                        decoratorService\n                            .addDecoratorForm({\n                            containerId: 'system.email'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.email.auth',\n                            component: 'dropdown',\n                            data: {\n                                items: [\n                                    {\n                                        value: 'ssl',\n                                        label: 'SSL'\n                                    },\n                                    {\n                                        value: 'tsl',\n                                        label: 'TSL'\n                                    },\n                                    {\n                                        value: 'none',\n                                        label: 'None'\n                                    }\n                                ],\n                                defaultSelect: 'none'\n                            }\n                        })\n                            .addDecoratorItem({\n                            id: 'system.email.test',\n                            component: 'testEmail'\n                        });\n                    }]);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n/*\n {\n ssl: 'SSL',\n tsl: 'TSL',\n none: 'None'\n }\n */\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                angular.module('Fortscale.layouts.configuration')\n                    .run(['Fortscale.layouts.configuration.decoratorService', function (decoratorService) {\n                        decoratorService\n                            .addDecoratorForm({\n                            containerId: 'system.siem'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.siem.type',\n                            component: 'dropdown',\n                            data: {\n                                items: [\n                                    {\n                                        value: 'splunk',\n                                        label: 'Splunk'\n                                    },\n                                    {\n                                        value: 'qradar',\n                                        label: 'QRadar'\n                                    }\n                                ],\n                                defaultSelect: 'splunk'\n                            }\n                        });\n                    }]);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                angular.module('Fortscale.layouts.configuration')\n                    .run(['Fortscale.layouts.configuration.decoratorService', function (decoratorService) {\n                        decoratorService\n                            .addDecoratorForm({\n                            containerId: 'system.alertsEmail'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.alertsEmail.settings',\n                            component: 'alertsEmail',\n                            replace: true\n                        });\n                    }]);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var decorator;\n            (function (decorator) {\n                'use strict';\n                angular.module('Fortscale.layouts.configuration')\n                    .run(['Fortscale.layouts.configuration.decoratorService', 'tagsUtils',\n                    function (decoratorService, tagsUtils) {\n                        decoratorService\n                            .addDecoratorForm({\n                            containerId: 'system.syslogforwarding'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.ip',\n                            component: 'ip'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.forwardingtype',\n                            component: 'checkbox',\n                            config: {\n                                radioBox: true,\n                                horizontal: true\n                            },\n                            data: {\n                                items: [\n                                    {\n                                        value: 'ALERT',\n                                        label: 'Alerts'\n                                    }, {\n                                        value: 'ALERT_AND_INDICATORS',\n                                        label: 'Alerts and Indicators'\n                                    }\n                                ],\n                                checked: ['ALERT']\n                            }\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.messageformat',\n                            component: 'checkbox',\n                            config: {\n                                radioBox: true,\n                                horizontal: true\n                            },\n                            data: {\n                                items: [\n                                    {\n                                        value: 'RFC_3164',\n                                        label: 'RFC 3164'\n                                    }, {\n                                        value: 'RFC_5424',\n                                        label: 'RFC 5424'\n                                    }\n                                ],\n                                checked: ['RFC_3164']\n                            }\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.usertypes',\n                            component: 'checkbox',\n                            config: {\n                                selectAll: true\n                            },\n                            resolve: {\n                                items: function () {\n                                    return tagsUtils.getTags()\n                                        .then(function (tags) {\n                                        return _.map(tags.data, function (tag) {\n                                            return {\n                                                value: tag.name,\n                                                label: tag.displayName\n                                            };\n                                        });\n                                    })\n                                        .catch(function (err) {\n                                        console.error('Fortscale.layouts.configuration: There was an error trying to fetch tags', err);\n                                        return [];\n                                    });\n                                }\n                            }\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.alertseverity',\n                            component: 'severity'\n                        })\n                            .addDecoratorItem({\n                            id: 'system.syslogforwarding.enabled',\n                            data: {\n                                defaultValue: false,\n                                trueLabel: 'Yes',\n                                falseLabel: 'No'\n                            }\n                        });\n                        //.addDecoratorItem({\n                        //    id: 'system.syslogforwarding.forwardHistoricalAlerts',\n                        //    displayName: 'Forward Historical Alerts',\n                        //    replace: true,\n                        //    component: 'forwardHistoricalAlerts'\n                        //});\n                    }]);\n            })(decorator = configuration.decorator || (configuration.decorator = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                var MAX_ITERATIONS_DEFAULT = 10;\n                var ConfigurationRenderer = (function () {\n                    function ConfigurationRenderer(MAIN_INPUT_SELECTOR) {\n                        this.MAIN_INPUT_SELECTOR = MAIN_INPUT_SELECTOR;\n                    }\n                    /**\n                     * Validates configItem\n                     *\n                     * @private\n                     */\n                    ConfigurationRenderer.prototype._validations = function () {\n                        if (!this.controllerName) {\n                            throw new ReferenceError(\"ConfigurationRendererClass: controllerName must be instantiated.\");\n                        }\n                        var errMsg = this.controllerName + \": validations: \";\n                        if (!this.assert) {\n                            throw new ReferenceError(errMsg + \"assert service must be injected\");\n                        }\n                        this.assert.isObject(this.configItem, 'configItem', errMsg);\n                        this.assert.isObject(this.configItem.data, 'configItem.data', errMsg);\n                        this.assert.isObject(this.configItem.config, 'configItem.config', errMsg);\n                        this.assert.isObject(this.$scope, '$scope', errMsg, true);\n                        this.assert.isObject(this.$element, '$element', errMsg, true);\n                        this.assert.isFunction(this.onComponentInit, 'onComponentInit', errMsg);\n                        this.assert.isString(this.MAIN_INPUT_SELECTOR, 'MAIN_INPUT_SELECTOR', errMsg);\n                    };\n                    Object.defineProperty(ConfigurationRenderer.prototype, \"ngModel\", {\n                        /**\n                         * Retuns the ngModel of the element's main input. This input is the one attached to the configuration form.\n                         *\n                         * @returns {ng.INgModelController}\n                         * @private\n                         */\n                        get: function () {\n                            if (this._ngModel) {\n                                return this._ngModel;\n                            }\n                            // Get the ngModel\n                            var el = this.$element.find(this.MAIN_INPUT_SELECTOR);\n                            this._ngModel = el.controller('ngModel');\n                            return this._ngModel;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(ConfigurationRenderer.prototype, \"configItem\", {\n                        get: function () {\n                            return this._configItem;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    ConfigurationRenderer.prototype.setMaxIterations = function (value) {\n                        this._maxIterations = value;\n                    };\n                    /**\n                     * A repeater that tries to get the ngModel. Once (iteratively) acquired, it fires local callback,\n                     * ond onComponentInit\n                     *\n                     * @param {Function} cbFn\n                     * @param {number=} iter\n                     * @private\n                     */\n                    ConfigurationRenderer.prototype._onInitRepeater = function (cbFn, iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > this._maxIterations) {\n                            console.error(this.$element);\n                            throw new Error(this.controllerName + \": After \" + this._maxIterations + \" tries, failed to get ngModel from element.\");\n                        }\n                        this.$scope.$applyAsync(function () {\n                            if (!_this.ngModel) {\n                                iter++;\n                                return _this._onInitRepeater(cbFn, iter);\n                            }\n                            // Fire callback (if exists)\n                            if (cbFn) {\n                                cbFn();\n                            }\n                            // Fire directive callback\n                            _this.onComponentInit({ ngModelController: _this.ngModel });\n                        });\n                    };\n                    /**\n                     * Updates ng model\n                     * @param {*} value\n                     * @private\n                     */\n                    ConfigurationRenderer.prototype._updateNgModel = function (value) {\n                        // Set the ng model value\n                        this.ngModel.$setViewValue(value);\n                        this.ngModel.$setDirty();\n                        this.ngModel.$render();\n                    };\n                    /**\n                     * Handler fired by angular as init function.\n                     */\n                    ConfigurationRenderer.prototype.$onInit = function () {\n                        this._validations();\n                        // Set defaults\n                        this.setMaxIterations(MAX_ITERATIONS_DEFAULT);\n                    };\n                    /**\n                     * Listsener for element ready.\n                     *\n                     * @param cbFn\n                     */\n                    ConfigurationRenderer.prototype.onElementReady = function (cbFn) {\n                        var _this = this;\n                        // Initiate on init repeater which should get the ngModel\n                        this.$element.ready(function () {\n                            _this._onInitRepeater(cbFn);\n                        });\n                    };\n                    return ConfigurationRenderer;\n                }());\n                renderer.ConfigurationRenderer = ConfigurationRenderer;\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                function fsConfigRendererDirective($injector, $compile, stringUtils, appConfig, $q) {\n                    /**\n                     *\n                     * @param {object} scope\n                     * @param {object} element\n                     * @param {object} attrs\n                     */\n                    function linkFn(scope, element, attrs, ctrl) {\n                        ctrl.$scope = scope;\n                        ctrl.$element = element;\n                        ctrl.linkInit();\n                    }\n                    var FsConfigRendererController = (function () {\n                        function FsConfigRendererController($scope, $element) {\n                            this.$scope = $scope;\n                            this.$element = $element;\n                            this.isLoading = true;\n                        }\n                        /**\n                         * returns the components name (definition)\n                         *\n                         * @returns {string}\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._getComponentDef = function () {\n                            var type = this.configItem.type;\n                            var component = this.configItem.component || type;\n                            return component || null;\n                        };\n                        /**\n                         * Takes the component definition name and converts it to a directive name (i.e. helloWorld will be\n                         * hello-world)\n                         *\n                         * @param {string} componentDef\n                         * @returns {string}\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._getNormalizedComponentName = function (componentDef) {\n                            var componentName = 'configurationRenderers' + componentDef.charAt(0).toUpperCase() +\n                                componentDef.substring(1);\n                            return stringUtils.toSlugCase(componentName);\n                        };\n                        /**\n                         * Creates and compiles a component element\n                         *\n                         * @param {string} normalizedComponentName\n                         * @returns {IAugmentedJQuery}\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._createComponentElement = function (normalizedComponentName) {\n                            var componentElement = angular.element(\"<\" + normalizedComponentName + \"\\n                    config-item=\\\"::configItem\\\"\\n                    config-form-ctrl=\\\"::configFormCtrl\\\"\\n                    form-model-ctrl=\\\"::configFormModel\\\"\\n                    on-component-init=\\\"::$ctrl.onComponentInit(ngModelController)\\\"></\" + normalizedComponentName + \">\");\n                            // Create new local scope to pass parameters for the compile method.\n                            var localScope = this.$scope.$root.$new();\n                            // Items can be derived from scope chain, or supplied directly\n                            localScope.configItem = this.configItem || this.$scope.configItem;\n                            localScope.configFormCtrl = this.formController || this.$scope.configFormCtrl;\n                            localScope.configFormModel = this.formModelController || this.$scope.configFormModel;\n                            localScope.$ctrl = this;\n                            // Compile element\n                            componentElement = $compile(componentElement)(localScope);\n                            // Cleanup local scope\n                            localScope = null;\n                            // Return element.\n                            return componentElement;\n                        };\n                        /**\n                         * Adds a formatter to an ngModelController\n                         *\n                         * @param {INgModelController} ngModelController\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._addFormatter = function (ngModelController) {\n                            if (!this.configItem.formatter) {\n                                return;\n                            }\n                            var formatter = appConfig.getFormatter(this.configItem.formatter);\n                            // Inject formatter into ngModel\n                            if (!formatter) {\n                                console.warn('You are trying to add an undeclared formatter: ' + this.configItem.formatter + '\\r\\n' +\n                                    'Please use appConfigProvider.addFormatter to add required validators.');\n                                return;\n                            }\n                            ngModelController.$formatters.push(formatter);\n                        };\n                        /**\n                         * Adds a validator to an ngModelController\n                         *\n                         * @param {INgModelController} ngModelController\n                         * @param {function} formatter\n                         * @param {string} validatorName\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._addValidator = function (ngModelController, formatter, validatorName) {\n                            var validator = appConfig.getValidator(validatorName);\n                            if (validator === null) {\n                                console.warn('You are trying to add an undeclared validator: ' + validatorName + '\\r\\n' +\n                                    'Please use appConfigProvider.addValidator to add required validators.');\n                                return;\n                            }\n                            var ctrl = this;\n                            // Add validator\n                            ngModelController.$validators[validatorName] = function (modelValue, viewValue) {\n                                // Value should be modelValue or viewValue or configItem.value\n                                var value = modelValue !== undefined ? modelValue : viewValue;\n                                value = value !== undefined ? value : ctrl.configItem.value;\n                                // run formatter\n                                if (formatter) {\n                                    value = formatter(value);\n                                }\n                                // Run validator\n                                return validator(value);\n                            };\n                        };\n                        /**\n                         * Adds validators to an ngModel controller\n                         *\n                         * @param {INgModelController} ngModelController\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._addValidators = function (ngModelController) {\n                            var _this = this;\n                            var formatter = appConfig.getFormatter(this.configItem.formatter);\n                            _.each(this.configItem.validators, function (validatorName) { return _this._addValidator(ngModelController, formatter, validatorName); });\n                        };\n                        /**\n                         * Starts loader icon\n                         *\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._initLoader = function () {\n                            this.isLoading = true;\n                        };\n                        /**\n                         * removes lodeer function\n                         *\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._closeLoader = function () {\n                            this.isLoading = false;\n                        };\n                        /**\n                         * Iterates through resolve functions and returns an array of key-reolve objects to be digested\n                         *\n                         * @returns {IPromise<{}>|IPromise<T>}\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._resolveConfigItem = function () {\n                            if (this.configItem.resolve && this.configItem.showLoader &&\n                                Object.keys(this.configItem.resolve).length) {\n                                this._initLoader();\n                            }\n                            return $q.all(_.map(this.configItem.resolve, function (resolveFn, key) {\n                                return resolveFn()\n                                    .then(function (resolve) {\n                                    return {\n                                        key: key, resolve: resolve\n                                    };\n                                });\n                            }));\n                        };\n                        /**\n                         * Takes all resolves and places them on the config item's data object to be passed to the component\n                         *\n                         * @param {{key: string, resolve: any}[]} resolves\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._digestResolves = function (resolves) {\n                            var _this = this;\n                            _.each(resolves, function (resolveWrapper) {\n                                _this.configItem.data[resolveWrapper.key] = resolveWrapper.resolve;\n                            });\n                        };\n                        /**\n                         * Component will use this delegate to inform they are finished\n                         * This method adds validators and formatters, and registers with the form\n                         *\n                         * @param ngModelController\n                         * @private\n                         */\n                        FsConfigRendererController.prototype.onComponentInit = function (ngModelController) {\n                            if (ngModelController) {\n                                this._addFormatter(ngModelController);\n                                this._addValidators(ngModelController);\n                                this.formModelController.$addControl(ngModelController);\n                                ngModelController.$validate();\n                            }\n                            this._closeLoader();\n                        };\n                        /**\n                         * Renders a config item component\n                         *\n                         * @private\n                         */\n                        FsConfigRendererController.prototype._renderComponent = function () {\n                            var _this = this;\n                            // Srart the rendering flow\n                            return this._resolveConfigItem()\n                                .then(this._digestResolves.bind(this))\n                                .then(function () {\n                                var componentDef = _this._getComponentDef();\n                                if (componentDef) {\n                                    var normalizedComponentName = _this._getNormalizedComponentName(componentDef);\n                                    var componentWrapper = _this.$element.find('.component-wrapper');\n                                    var componentElement = _this._createComponentElement(normalizedComponentName);\n                                    componentWrapper.append(componentElement);\n                                    return componentWrapper;\n                                }\n                                return null;\n                            });\n                        };\n                        /**\n                         * Init\n                         */\n                        FsConfigRendererController.prototype.linkInit = function () {\n                            var _this = this;\n                            // We use element.ready and applyAsync to let angular finish its digest cycle so the\n                            // template will be rendered.\n                            this.$element.ready(function () {\n                                _this.$scope.$applyAsync(function () {\n                                    // Setup config models list\n                                    _this.formController.configModels[_this.configItem.id] = _this.configItem.value;\n                                    // render config item component\n                                    _this._renderComponent()\n                                        .catch(function (err) {\n                                        console.log(err);\n                                        _this._closeLoader();\n                                    });\n                                });\n                            });\n                        };\n                        FsConfigRendererController.$inject = ['$scope', '$element'];\n                        return FsConfigRendererController;\n                    }());\n                    FsConfigRendererController.$inject = ['$element', '$scope'];\n                    return {\n                        restrict: 'E',\n                        templateUrl: 'app/layouts/configuration/renderers/fs-config-renderer.view.html',\n                        link: linkFn,\n                        controller: FsConfigRendererController,\n                        controllerAs: '$ctrl',\n                        bindToController: {\n                            configItem: '<',\n                            formController: '<',\n                            formModelController: '<'\n                        }\n                    };\n                }\n                fsConfigRendererDirective.$inject = ['$injector', '$compile', 'stringUtils', 'appConfig', '$q'];\n                angular.module('Fortscale.layouts.configuration')\n                    .directive('fsConfigRenderer', fsConfigRendererDirective);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var IntegerRendererController = (function () {\n                    function IntegerRendererController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    IntegerRendererController.prototype._onInitRepeater = function (iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > 10) {\n                            console.error(this.$element);\n                            throw new Error('configurationRenderersInteger: After 10 tries, failed to get ngModel from element.');\n                        }\n                        this.$scope.$applyAsync(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            if (!ngModel) {\n                                iter++;\n                                return _this._onInitRepeater(iter);\n                            }\n                            _this.onComponentInit({ ngModelController: ngModel });\n                        });\n                    };\n                    IntegerRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.$element.ready(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            _this._onInitRepeater();\n                        });\n                    };\n                    IntegerRendererController.$inject = ['$scope', '$element'];\n                    return IntegerRendererController;\n                }());\n                var integerRendererComponent = {\n                    template: \"<input type=\\\"number\\\" ng-model=\\\"$ctrl.configFormCtrl.configModels[$ctrl.configItem.id]\\\" name=\\\"fields.{{$ctrl.configItem.id}}\\\" ng-value=\\\"$ctrl.configItem.value\\\" step=\\\"any\\\">\",\n                    controller: IntegerRendererController,\n                    bindings: {\n                        configItem: '<',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersInteger', integerRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var StringRendererController = (function () {\n                    function StringRendererController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    StringRendererController.prototype._onInitRepeater = function (iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > 10) {\n                            console.error(this.$element);\n                            throw new Error('configurationRenderersString: After 10 tries, failed to get ngModel from element.');\n                        }\n                        this.$scope.$applyAsync(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            if (!ngModel) {\n                                iter++;\n                                return _this._onInitRepeater(iter);\n                            }\n                            _this.onComponentInit({ ngModelController: ngModel });\n                        });\n                    };\n                    StringRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.$element.ready(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            _this._onInitRepeater();\n                        });\n                    };\n                    StringRendererController.$inject = ['$scope', '$element'];\n                    return StringRendererController;\n                }());\n                var stringRendererComponent = {\n                    template: \"<input type=\\\"text\\\" ng-model=\\\"$ctrl.configFormCtrl.configModels[$ctrl.configItem.id]\\\" name=\\\"fields.{{$ctrl.configItem.id}}\\\" ng-value=\\\"$ctrl.configItem.value\\\">\",\n                    controller: StringRendererController,\n                    bindings: {\n                        configItem: '<',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersString', stringRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var PasswordRendererController = (function () {\n                    function PasswordRendererController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    PasswordRendererController.prototype._onInitRepeater = function (iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > 10) {\n                            console.error(this.$element);\n                            throw new Error('configurationRenderersPassword: After 10 tries, failed to get ngModel from element.');\n                        }\n                        this.$scope.$applyAsync(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            if (!ngModel) {\n                                iter++;\n                                return _this._onInitRepeater(iter);\n                            }\n                            _this.onComponentInit({ ngModelController: ngModel });\n                        });\n                    };\n                    PasswordRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.$element.ready(function () {\n                            var el = _this.$element.find('input');\n                            var ngModel = el.controller('ngModel');\n                            _this._onInitRepeater();\n                        });\n                    };\n                    PasswordRendererController.$inject = ['$scope', '$element'];\n                    return PasswordRendererController;\n                }());\n                var passwordRendererComponent = {\n                    template: \"<input type=\\\"password\\\" ng-model=\\\"$ctrl.configFormCtrl.configModels[$ctrl.configItem.id]\\\" name=\\\"fields.{{$ctrl.configItem.id}}\\\" ng-value=\\\"$ctrl.configItem.value\\\">\",\n                    controller: PasswordRendererController,\n                    bindings: {\n                        configItem: '<',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersPassword', passwordRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var MAIN_INPUT_SELECTOR = 'input.hidden-input';\n                var IpRendererController = (function (_super) {\n                    __extends(IpRendererController, _super);\n                    function IpRendererController($scope, $element, assert) {\n                        _super.call(this, MAIN_INPUT_SELECTOR);\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.controllerName = 'IpRendererController';\n                        // Holds tab indices for ip elements\n                        this.tabIndices = [0, 1, 2, 3];\n                    }\n                    Object.defineProperty(IpRendererController.prototype, \"_csv\", {\n                        get: function () {\n                            return _.map(this.octets).join('.');\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    IpRendererController.prototype._applyConfigItemValue = function () {\n                        var _this = this;\n                        var octets = this.configItem.value.split('.');\n                        _.each(octets, function (octet, index) { return _this.octets[index] = parseInt(octet); });\n                    };\n                    IpRendererController.prototype._onElementReady = function () {\n                        if (this.configItem.value !== undefined && _.isString(this.configItem.value)) {\n                            this._applyConfigItemValue();\n                        }\n                    };\n                    IpRendererController.prototype.ipChangeHandler = function () {\n                        this._updateNgModel(this._csv);\n                    };\n                    IpRendererController.prototype.$onInit = function () {\n                        _super.prototype.$onInit.call(this);\n                        this.onElementReady(this._onElementReady.bind(this));\n                    };\n                    IpRendererController.$inject = ['$scope', '$element', 'assert'];\n                    return IpRendererController;\n                }(renderer.ConfigurationRenderer));\n                var ipRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/ip/ip.renderer.html',\n                    controller: IpRendererController,\n                    bindings: {\n                        _configItem: '<configItem',\n                        configFormCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersIp', ipRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var MAIN_INPUT_SELECTOR = '.hidden-input';\n                var SeverityRendererController = (function (_super) {\n                    __extends(SeverityRendererController, _super);\n                    function SeverityRendererController($scope, $element, assert) {\n                        _super.call(this, MAIN_INPUT_SELECTOR);\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.controllerName = 'SeverityRendererController';\n                    }\n                    /**\n                     * Initiates Severities collection\n                     * @private\n                     */\n                    SeverityRendererController.prototype._initSeverities = function () {\n                        this.severities = [\n                            {\n                                value: 'Critical',\n                                label: 'Critical'\n                            },\n                            {\n                                value: 'High',\n                                label: 'High'\n                            },\n                            {\n                                value: 'Medium',\n                                label: 'Medium'\n                            },\n                            {\n                                value: 'Low',\n                                label: 'Low'\n                            }\n                        ];\n                    };\n                    /**\n                     * Iterates all severities. Sets checked to false.\n                     * @private\n                     */\n                    SeverityRendererController.prototype._uncheckAllSeverities = function () {\n                        _.each(this.severities, function (severity) { return severity.checked = false; });\n                    };\n                    /**\n                     * If received config item has a (string) value, delimit it and for each item, set Severity to checked-true\n                     * @private\n                     */\n                    SeverityRendererController.prototype._initConfigItemValue = function () {\n                        var _this = this;\n                        if (_.isString(this.configItem.value) && this.configItem.value) {\n                            // Get the checked severity values list\n                            var checkedSeverityValues = this.configItem.value.split(',');\n                            // Iterate over checkedSeverityValues, find ISeverityRendererItem and change its checked value\n                            _.each(checkedSeverityValues, function (checkedSeverityValue) {\n                                var severity = _.filter(_this.severities, function (severity) { return severity.value === checkedSeverityValue; });\n                                if (severity[0]) {\n                                    severity[0].checked = true;\n                                }\n                            });\n                        }\n                    };\n                    /**\n                     * Returns a CSV of the checked items\n                     *\n                     * @returns {string}\n                     * @private\n                     */\n                    SeverityRendererController.prototype._getCSV = function () {\n                        // Return CSV of values\n                        return _.map(\n                        // Filter in only checked items\n                        _.filter(this.severities, function (severity) { return severity.checked; }), 'value').join(',');\n                    };\n                    ;\n                    /**\n                     * Gets CSV and updates the ngModel\n                     *\n                     * @param {ISeverityRendererItem}severity\n                     */\n                    SeverityRendererController.prototype.changeSeverity = function (severity) {\n                        var csv = this._getCSV();\n                        this._updateNgModel(csv);\n                    };\n                    SeverityRendererController.prototype.$onInit = function () {\n                        this._initSeverities();\n                        this._uncheckAllSeverities();\n                        this._initConfigItemValue();\n                        _super.prototype.$onInit.call(this);\n                        this.onElementReady();\n                    };\n                    SeverityRendererController.$inject = ['$scope', '$element', 'assert'];\n                    return SeverityRendererController;\n                }(renderer.ConfigurationRenderer));\n                var SeverityRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/severity/severity.renderer.html',\n                    controller: SeverityRendererController,\n                    bindings: {\n                        _configItem: '<configItem',\n                        configFormCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersSeverity', SeverityRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var MAIN_INPUT_SELECTOR = 'input.hidden-input';\n                var HORIZONTAL_CLASS_NAME = 'horizontal-checkbox';\n                /**\n                 * CLASS CheckboxRendererController\n                 * Renderer for checkboxes\n                 */\n                var CheckboxRendererController = (function (_super) {\n                    __extends(CheckboxRendererController, _super);\n                    function CheckboxRendererController($scope, $element, assert) {\n                        _super.call(this, MAIN_INPUT_SELECTOR);\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.controllerName = 'CheckboxRendererController';\n                    }\n                    Object.defineProperty(CheckboxRendererController.prototype, \"_isRadioBox\", {\n                        /**\n                         * Returns a boolean value stating if this checkbox is a radio box\n                         *\n                         * @returns {boolean}\n                         * @private\n                         */\n                        get: function () {\n                            return !!this.configItem.config.radioBox;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(CheckboxRendererController.prototype, \"_csv\", {\n                        /**\n                         * Extracts the csv by filtering checked items\n                         *\n                         * @returns {string}\n                         * @private\n                         */\n                        get: function () {\n                            return _.map(_.filter(this.items, function (item) { return item.checked; }), function (item) { return item.value; })\n                                .join(',');\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    /**\n                     * Checks all items that are in the configItem value\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._populateItemsFromCSV = function () {\n                        var _this = this;\n                        var items = this.configItem.value.split(',');\n                        _.each(items, function (item) {\n                            var localItem = _.find(_this.items, { value: item.trim() });\n                            if (localItem) {\n                                localItem.checked = true;\n                            }\n                        });\n                    };\n                    /**\n                     * Validates configItem\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._checkboxValidations = function () {\n                        var _this = this;\n                        var errMsg = this.controllerName + \": validations: \";\n                        this.assert.isArray(this.configItem.data.items, 'configItem.data.items', errMsg);\n                        _.each(this.configItem.data.items, function (item, index) {\n                            _this.assert.isString(item.value, \"configItem.data.items[\" + index + \"].value\", errMsg);\n                            _this.assert.isString(item.label, \"configItem.data.items[\" + index + \"].label\", errMsg, true);\n                        });\n                    };\n                    /**\n                     * Iterates through all items and sets 'label' and 'checked'\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._normalizeItems = function () {\n                        _.each(this.items, function (item) {\n                            item.label = item.label || item.value;\n                            item.checked = !!item.checked;\n                        });\n                    };\n                    /**\n                     * Updates the model\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._updateModel = function () {\n                        // Get the csv\n                        var csv = this._csv;\n                        this._updateNgModel(csv);\n                    };\n                    /**\n                     * Changes items state\n                     *\n                     * @param {ICheckboxItem} item\n                     * @param {boolean} state\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._changeItemState = function (item, state) {\n                        item.checked = state;\n                    };\n                    /**\n                     * Unchecks all items\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._uncheckAllItems = function () {\n                        var _this = this;\n                        _.each(this.items, function (item) {\n                            _this._changeItemState(item, false);\n                        });\n                    };\n                    /**\n                     * Checks all items.\n                     *\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._checkAllItems = function () {\n                        var _this = this;\n                        _.each(this.items, function (item) {\n                            _this._changeItemState(item, true);\n                        });\n                    };\n                    /**\n                     * Sets a default value. Should only happen when the config item has no value of its own.\n                     * @private\n                     */\n                    CheckboxRendererController.prototype._setDefaultValue = function () {\n                        var _this = this;\n                        if (this.configItem.data.checked && this.configItem.data.checked.length) {\n                            var itemsToCheck = _.filter(this.items, function (item) {\n                                return _this.configItem.data.checked.indexOf(item.value) !== -1;\n                            });\n                            _.each(itemsToCheck, function (item) {\n                                _this.changeItem(item);\n                            });\n                        }\n                        else if (this._isRadioBox) {\n                            this.changeItem(this.items[0]);\n                        }\n                    };\n                    CheckboxRendererController.prototype._initConfig = function () {\n                        if (this.configItem.config.horizontal) {\n                            this.$element.addClass(HORIZONTAL_CLASS_NAME);\n                        }\n                    };\n                    CheckboxRendererController.prototype._isAllSelected = function () {\n                        return _.every(this.items, 'checked');\n                    };\n                    CheckboxRendererController.prototype._setSelectAllCheckboxState = function () {\n                        this.allItemsChecked = this._isAllSelected();\n                    };\n                    /**\n                     * Item check handler. Changes model value. Sets the correct csv.\n                     * @param {ICheckboxItem} item\n                     */\n                    CheckboxRendererController.prototype.changeItem = function (item) {\n                        if (this._isRadioBox) {\n                            this._uncheckAllItems();\n                            this._changeItemState(item, true);\n                        }\n                        this._updateModel();\n                        this._setSelectAllCheckboxState();\n                    };\n                    /**\n                     * A handler for Select All checkbox. If on, check all items. If off uncheck all items. Then update model.\n                     */\n                    CheckboxRendererController.prototype.selectAllHandler = function () {\n                        if (this.allItemsChecked) {\n                            this._checkAllItems();\n                        }\n                        else {\n                            this._uncheckAllItems();\n                        }\n                        this._updateModel();\n                    };\n                    CheckboxRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        // Fire onInit of parent\n                        _super.prototype.$onInit.call(this);\n                        // validations\n                        this._checkboxValidations();\n                        // clone items\n                        this.items = _.cloneDeep(this.configItem.data.items);\n                        // normalize items\n                        this._normalizeItems();\n                        this._initConfig();\n                        // Setup on element ready handler\n                        this.onElementReady(function () {\n                            // populate items\n                            if (_this.configItem.value !== null && _this.configItem.value !== '') {\n                                _this._populateItemsFromCSV();\n                            }\n                            else {\n                                _this._setDefaultValue();\n                            }\n                            _this._setSelectAllCheckboxState();\n                        });\n                    };\n                    CheckboxRendererController.$inject = ['$scope', '$element', 'assert'];\n                    return CheckboxRendererController;\n                }(renderer.ConfigurationRenderer));\n                var checkboxRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/checkbox/checkbox.renderer.html',\n                    controller: CheckboxRendererController,\n                    bindings: {\n                        _configItem: '<configItem',\n                        configFormCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersCheckbox', checkboxRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var DropdownRendererController = (function () {\n                    function DropdownRendererController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    DropdownRendererController.prototype._onInitRepeater = function (iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > 10) {\n                            console.error(this.$element);\n                            throw new Error('configurationRenderersDropdown: After 10 tries, failed to get ngModel from element.');\n                        }\n                        this.$scope.$applyAsync(function () {\n                            var selectElement = _this.$element.find('select');\n                            var ngModel = selectElement.controller('ngModel');\n                            if (!ngModel) {\n                                iter++;\n                                return _this._onInitRepeater(iter);\n                            }\n                            if (_this.configItem.data.defaultSelect &&\n                                (_this.configItem.value === null || _this.configItem.value === '')) {\n                                ngModel.$setViewValue(_this.configItem.data.defaultSelect);\n                                ngModel.$setDirty();\n                                ngModel.$render();\n                            }\n                            _this.onComponentInit({ ngModelController: ngModel });\n                        });\n                    };\n                    DropdownRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        this.$element.ready(function () {\n                            _this._onInitRepeater();\n                        });\n                    };\n                    DropdownRendererController.$inject = ['$scope', '$element'];\n                    return DropdownRendererController;\n                }());\n                var dropdownRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/drop-down/drop-down.renderer.html',\n                    controller: DropdownRendererController,\n                    bindings: {\n                        configItem: '<',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersDropdown', dropdownRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var booleanRendererController = (function () {\n                    function booleanRendererController($scope, $element) {\n                        this.$scope = $scope;\n                        this.$element = $element;\n                    }\n                    /**\n                     * Extracts the ng model controller from an element\n                     * @returns {*}\n                     * @private\n                     */\n                    booleanRendererController.prototype._getNgModel = function () {\n                        if (this._ngModel) {\n                            return this._ngModel;\n                        }\n                        var element = this.$element.find('input');\n                        this._ngModel = element.controller('ngModel');\n                        return this._ngModel;\n                    };\n                    booleanRendererController.prototype._setInitialValue = function () {\n                        var ngModel = this._getNgModel();\n                        if (this.configItem.value !== null || this.configItem.value !== undefined) {\n                            ngModel.$setViewValue(!!this.configItem.value);\n                            ngModel.$render();\n                        }\n                        else if (this.configItem.data && this.configItem.data.defaultValue !== undefined) {\n                            ngModel.$setViewValue(!!this.configItem.data.defaultValue);\n                            ngModel.$setDirty();\n                            ngModel.$render();\n                        }\n                    };\n                    /**\n                     * Toggles the state of the model\n                     */\n                    booleanRendererController.prototype.toggleState = function () {\n                        var ngModel = this._getNgModel();\n                        ngModel.$setViewValue(!ngModel.$modelValue);\n                        ngModel.$setDirty();\n                        ngModel.$render();\n                    };\n                    booleanRendererController.prototype._onInitRepeater = function (iter) {\n                        var _this = this;\n                        if (iter === void 0) { iter = 0; }\n                        if (iter > 10) {\n                            console.error(this.$element);\n                            throw new Error('configurationRenderersboolean: After 10 tries, failed to get ngModel from element.');\n                        }\n                        this.$scope.$applyAsync(function () {\n                            if (!_this._getNgModel()) {\n                                iter++;\n                                return _this._onInitRepeater(iter);\n                            }\n                            _this.onComponentInit({ ngModelController: _this._getNgModel() });\n                            _this._setInitialValue();\n                        });\n                    };\n                    booleanRendererController.prototype._setLabels = function () {\n                        this.trueLabel = (this.configItem.data && this.configItem.data.trueLabel) || 'true';\n                        this.falseLabel = (this.configItem.data && this.configItem.data.falseLabel) || 'false';\n                    };\n                    booleanRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        this._setLabels();\n                        this.$element.ready(function () {\n                            _this._onInitRepeater();\n                        });\n                    };\n                    booleanRendererController.$inject = ['$scope', '$element'];\n                    return booleanRendererController;\n                }());\n                var booleanRendererComponent = {\n                    controller: booleanRendererController,\n                    templateUrl: 'app/layouts/configuration/renderers/boolean/boolean.renderer.html',\n                    bindings: {\n                        configItem: '<',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersBoolean', booleanRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var MAIN_INPUT_SELECTOR = '.hidden-input';\n                var EDIT_INPUT_SELECTOR = '.alerts-email-settings--group-item--new-recipient-input';\n                var UsersListRendererController = (function (_super) {\n                    __extends(UsersListRendererController, _super);\n                    function UsersListRendererController($scope, $element, assert) {\n                        _super.call(this, MAIN_INPUT_SELECTOR);\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.controllerName = 'UsersListRendererController';\n                    }\n                    UsersListRendererController.prototype._getCsv = function () {\n                        return this.users.join(',');\n                    };\n                    UsersListRendererController.prototype._getUsers = function () {\n                        if (this._configItem.value) {\n                            this.users = this._configItem.value.split(',');\n                        }\n                        else {\n                            this.users = [];\n                        }\n                    };\n                    UsersListRendererController.prototype._removeVisibleInputFromForm = function () {\n                        var editInputNgModel = this.$element.find(EDIT_INPUT_SELECTOR).controller('ngModel');\n                        this.formModelCtrl.$removeControl(editInputNgModel);\n                    };\n                    UsersListRendererController.prototype.addUser = function (newUser) {\n                        if (this.users.indexOf(newUser.trim()) === -1) {\n                            this.users.push(newUser.trim());\n                            this._updateNgModel(this._getCsv());\n                            this.newUsersInput = '';\n                        }\n                    };\n                    UsersListRendererController.prototype.removeUser = function (index) {\n                        this.users.splice(index, 1);\n                        this._updateNgModel(this._getCsv());\n                    };\n                    UsersListRendererController.prototype.$onInit = function () {\n                        var _this = this;\n                        _super.prototype.$onInit.call(this);\n                        this.onElementReady(function () {\n                            _this._removeVisibleInputFromForm();\n                            _this._getUsers();\n                        });\n                    };\n                    UsersListRendererController.$inject = ['$scope', '$element', 'assert'];\n                    return UsersListRendererController;\n                }(renderer.ConfigurationRenderer));\n                var UsersListRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/users-list/users-list.renderer.html',\n                    controller: UsersListRendererController,\n                    bindings: {\n                        _configItem: '<configItem',\n                        configFormCtrl: '<',\n                        onComponentInit: '&',\n                        formModelCtrl: '<'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersUsersList', UsersListRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function fsConfigRendererAlertsMailDirective() {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {FsConfigRendererAlertsMailController} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // set main input to ctrl\n            ctrl._mainInput = element.find('#email_config_main_input');\n            //set main input controller to ctrl\n            ctrl._mainInputNgModel = ctrl._mainInput.controller('ngModel');\n            // set ngModel validity to invalid so the form can not be submitted.\n            ctrl._mainInputNgModel.$setValidity('emailConfiguration', false);\n            ctrl.onComponentInit({ ngModelController: ctrl._mainInputNgModel });\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsConfigRendererAlertsMailController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            ctrl._mainInput = null;\n            ctrl._mainInputNgModel = null;\n            // add listener to main input\n            ctrl.mainInputKeyPress = function (evt, group, newUser) {\n                if (evt.which === 13) {\n                    return ctrl.addUser(group, newUser);\n                }\n            };\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsConfigRendererAlertsMailController.prototype, {\n            /**\n             * List of possible severities\n             */\n            severities: ['Critical', 'High', 'Medium', 'Low'],\n            /**\n             * List of possible frequencies\n             */\n            frequencies: ['Daily', 'Weekly', 'Monthly'],\n            /**\n             * Validates all groups have users\n             *\n             * @returns {boolean}\n             * @private\n             */\n            _isUsersGroupsValid: function () {\n                return _.every(this.settings, function (group) {\n                    return group.users.length > 0;\n                });\n            },\n            /**\n             * Validates all groups` Alert Summaries have both severities and frequencies,\n             * or have no severities and no frequencies.\n             *\n             * @returns {boolean}\n             * @private\n             */\n            _isAlertSummaryValid: function () {\n                return _.every(this.settings, function (group) {\n                    var severitieLength = group.summary.severities.length;\n                    var frequenciesLength = group.summary.frequencies.length;\n                    return (severitieLength > 0 && frequenciesLength > 0) ||\n                        (severitieLength === 0 && frequenciesLength === 0);\n                });\n            },\n            /**\n             * Validates that either newAlert severities exist, or Alert Summary have both severities and frequencies.\n             *\n             * @returns {boolean}\n             * @private\n             */\n            _isNewAlertOrAlertSummaryValid: function () {\n                return _.every(this.settings, function (group) {\n                    var summarySeveritieLength = group.summary.severities.length;\n                    var summaryFrequenciesLength = group.summary.frequencies.length;\n                    var newAlertSeveritiesLength = group.newAlert.severities.length;\n                    return newAlertSeveritiesLength > 0 ||\n                        (summarySeveritieLength > 0 && summaryFrequenciesLength > 0);\n                });\n            },\n            /**\n             * Checks all validations return true\n             *\n             * @returns {*|boolean}\n             * @private\n             */\n            _isValid: function () {\n                return this._isUsersGroupsValid() &&\n                    this._isAlertSummaryValid() &&\n                    this._isNewAlertOrAlertSummaryValid();\n            },\n            /**\n             * Method to cleanup unwanted properties from the object to be stored,\n             *\n             * @param group\n             * @private\n             */\n            _cleanupGroup: function (group) {\n                // Delete $$hashKey from new object (this was added by angular)\n                delete group.$$hashKey;\n                // Delete severitiesObj\n                delete group.newAlert.severitiesObj;\n                delete group.summary.severitiesObj;\n                // Delete frequenciesObj\n                delete group.summary.frequenciesObj;\n            },\n            /**\n             * Builds a severities object for the received group. This object serves as the model for the checkboxes.\n             *\n             * @param {string} configGroupType should be 'newAlert' or 'summary'\n             * @param {object} group {{newAlert: {severities: Array<string>}, summary: {severities: Array<string>}}}}\n             * @private\n             */\n            _digestSeverities: function (configGroupType, group) {\n                // Create a new object if one is not found\n                group[configGroupType] = group[configGroupType] || {};\n                // Create a new list of severities if one is not found.\n                group[configGroupType].severities = group[configGroupType].severities || [];\n                // Create a new severitiesObj to be used as the model for the\n                group[configGroupType].severitiesObj = {};\n                // Iterate through group's severities and for each existing severity set a boolean value on\n                // severitiesObj set to true\n                _.each(group[configGroupType].severities, function (severity) {\n                    group[configGroupType].severitiesObj[severity] = true;\n                });\n            },\n            /**\n             * Builds a frequencies object for the received group. This object serves as the model for the checkboxes.\n             *\n             * @param {object} group {{summary: {frequencies: Array<string>}}}\n             * @private\n             */\n            _digestFrequencies: function (group) {\n                // Create a new object if one is not found\n                group.summary = group.summary || {};\n                // Create a new list of frequencies if one is not found.\n                group.summary.frequencies = group.summary.frequencies || [];\n                // Create a new frequenciesObj to be used as the model for the\n                group.summary.frequenciesObj = {};\n                // Iterate through group's frequencies and for each existing frequency set a boolean value on\n                // frequenciesObj set to true\n                _.each(group.summary.frequencies, function (frequency) {\n                    group.summary.frequenciesObj[frequency] = true;\n                });\n            },\n            /**\n             * Takes a change function, and invokes it. if the new value is different then the old value, it sets view\n             * value\n             *\n             * @param {function} changeFn\n             * @private\n             */\n            _changeAction: function (changeFn) {\n                // Create an old value reference\n                var oldValue = JSON.stringify(this.settings);\n                // Make the change\n                changeFn();\n                // Create a new value reference\n                var newValue = JSON.stringify(this.settings);\n                // If the new value is different then the old value then commit the change\n                if (newValue !== oldValue) {\n                    // Create an object to be cleaned\n                    var newValueObj = JSON.parse(newValue);\n                    // Clean all the groups\n                    _.each(newValueObj, this._cleanupGroup);\n                    // Set the new value to the main input model, set valid, and render.\n                    this._mainInputNgModel.$setViewValue(JSON.stringify(newValueObj));\n                    this._mainInputNgModel.$setValidity('emailConfiguration', this._isValid());\n                    this._mainInputNgModel.$render();\n                }\n            },\n            /**\n             * Change Adds or removes a severity in a group\n             * @param {number} groupIndex\n             * @param {string} groupType should be 'newAlert' or 'summary'\n             * @param {string} severity\n             * @param {boolean} value\n             */\n            changeSeverity: function (groupIndex, groupType, severity, value) {\n                var ctrl = this;\n                this._changeAction(function () {\n                    // get the relevant group to change\n                    var group = ctrl.settings[groupIndex];\n                    // Get the severities list from the group\n                    var severities = group[groupType].severities;\n                    // If value is true then we need to add the severity\n                    if (value) {\n                        // Make sure we're not adding an existing severity\n                        if (severities.indexOf(severity) === -1) {\n                            // Add the severity\n                            severities.push(severity);\n                        }\n                    }\n                    else {\n                        // Filter out all the severities that equal the one received.\n                        group[groupType].severities = _.filter(severities, function (_severity) {\n                            return _severity !== severity;\n                        });\n                    }\n                });\n            },\n            /**\n             * Adds or removes a frequency in a group\n             * @param {number} groupIndex\n             * @param {string} frequency\n             * @param {boolean} value\n             */\n            changeFrequency: function (groupIndex, frequency, value) {\n                var ctrl = this;\n                this._changeAction(function () {\n                    // get the relevant group to change\n                    var group = ctrl.settings[groupIndex];\n                    // Get the frequencies list from the group\n                    var frequencies = group.summary.frequencies;\n                    // If value is true then we need to add the frequency\n                    if (value) {\n                        // Make sure we're not adding an existing frequency\n                        if (frequencies.indexOf(frequency) === -1) {\n                            // Add the frequency\n                            frequencies.push(frequency);\n                        }\n                    }\n                    else {\n                        // Filter out all the frequencies that equal the one received.\n                        group.summary.frequencies = _.filter(frequencies, function (_frequency) {\n                            return _frequency !== frequency;\n                        });\n                    }\n                });\n            },\n            /**\n             * Adds a user\n             * @param {{users: Array<string>}} group\n             * @param {string} newUser\n             */\n            addUser: function (group, newUser) {\n                // Validate value is not an empty string, or an existing value\n                if (newUser && newUser !== \"\" && group.users.indexOf(newUser.trim()) === -1) {\n                    this._changeAction(function () {\n                        group.users.push(newUser.trim());\n                    });\n                }\n            },\n            /**\n             * Removes a user\n             * @param {{users: Array<string>}} group\n             * @param {number} userIndex\n             */\n            removeUser: function (group, userIndex) {\n                this._changeAction(function () {\n                    group.users.splice(userIndex, 1);\n                });\n            },\n            /**\n             * Removes a group\n             * @param {number} groupIndex\n             */\n            removeGroup: function (groupIndex) {\n                var ctrl = this;\n                ctrl._changeAction(function () {\n                    ctrl.settings.splice(groupIndex, 1);\n                });\n            },\n            /**\n             * Duplicates a group\n             * @param groupIndex\n             */\n            duplicateGroup: function (groupIndex) {\n                var ctrl = this;\n                ctrl._changeAction(function () {\n                    // Adds after the member a duplication of the member. JSON.parse/stringify is used for the\n                    // duplication\n                    ctrl.settings.splice(groupIndex, 0, JSON.parse(JSON.stringify(ctrl.settings[groupIndex])));\n                });\n            },\n            /**\n             * Creates a new group\n             */\n            newGroup: function () {\n                var ctrl = this;\n                // Create a new settings list if one does not exist\n                ctrl.settings = ctrl.settings || [];\n                ctrl._changeAction(function () {\n                    ctrl.settings.push({\n                        users: [],\n                        summary: { severities: [], severitiesObj: {}, frequencies: [], frequenciesObj: {} },\n                        newAlert: { severities: [], severitiesObj: {} }\n                    });\n                });\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                // Set base value\n                ctrl.settings = JSON.parse(ctrl.configItem.value);\n                // digest severities and frequency\n                _.each(ctrl.settings, function (group) {\n                    ctrl._digestSeverities('newAlert', group);\n                    ctrl._digestSeverities('summary', group);\n                    ctrl._digestFrequencies(group);\n                });\n            }\n        });\n        FsConfigRendererAlertsMailController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/configuration/renderers/alerts-mail/fs-config-renderer-alerts-mail.view.html',\n            link: linkFn,\n            controller: FsConfigRendererAlertsMailController,\n            scope: {},\n            controllerAs: '$ctrl',\n            bindToController: {\n                configItem: '<',\n                configFormCtrl: '<',\n                formModelCtrl: '<',\n                onComponentInit: '&'\n            }\n        };\n    }\n    fsConfigRendererAlertsMailDirective.$inject = [];\n    angular.module('Fortscale.layouts.configuration')\n        .directive('configurationRenderersAlertsEmail', fsConfigRendererAlertsMailDirective);\n}());\n","(function () {\n    'use strict';\n    function fsConfigRendererForwardHistoricalAlertsDirective(dateRanges, $http, BASE_URL) {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {array<object>|object} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // Link function logic\n            //scope.ctrl.formCtrl = ctrl[0];\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsConfigRendererForwardHistoricalAlertsController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            this.dateRange = dateRanges.getByDaysRange(7, 'short');\n            this.message = null;\n            ctrl.dateChange = function (_a) {\n                var value = _a.value;\n                return ctrl._dateChange(value);\n            };\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsConfigRendererForwardHistoricalAlertsController.prototype, {\n            /**\n             * Handler for date change\n             *\n             * @param {string} value\n             */\n            _dateChange: function (value) {\n                var ctrl = this;\n                ctrl.dateRange = value;\n                var pristineState = ctrl.formModelCtrl.$pristine;\n                ctrl.$scope.$applyAsync(function () {\n                    if (pristineState) {\n                        ctrl.formModelCtrl.$setPristine();\n                    }\n                });\n            },\n            /**\n             * Handler for forward button. Contacts REST to start a historical alerts forwarding job.\n             */\n            forward: function () {\n                var ctrl = this;\n                var dates = this.dateRange.split(',');\n                this.isLoading = true;\n                this.message = null;\n                // Collect the data\n                var configModels = ctrl.configFormCtrl.configModels;\n                var ip = configModels[\"system.syslogforwarding.ip\"];\n                var port = parseInt(configModels[\"system.syslogforwarding.port\"]);\n                var forwardingType = configModels[\"system.syslogforwarding.forwardingtype\"];\n                var userTagsString = configModels[\"system.syslogforwarding.usertypes\"];\n                var userTags = userTagsString ? userTagsString.split(\",\") : [];\n                var alertsSeverityString = configModels[\"system.syslogforwarding.alertseverity\"];\n                var alertSeverities = alertsSeverityString ? alertsSeverityString.split(\",\") : [];\n                $http.post(BASE_URL + '/syslogforwarding/forward_alerts', {\n                    start_time: parseInt(dates[0]),\n                    end_time: parseInt(dates[1]),\n                    ip: ip,\n                    port: port,\n                    forwarding_type: forwardingType,\n                    user_tags: userTags,\n                    alert_severities: alertSeverities\n                })\n                    .then(function (res) {\n                    ctrl.message = res && res.data && res.data.message;\n                    ctrl.isLoading = false;\n                })\n                    .catch(function (err) {\n                    ctrl.message = err.data.message;\n                    ctrl.isLoading = false;\n                });\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                this.onComponentInit();\n            }\n        });\n        FsConfigRendererForwardHistoricalAlertsController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/configuration/renderers/forward-historical-alerts/' +\n                'fs-config-renderer-forward-historical-alerts.view.html',\n            link: linkFn,\n            controller: FsConfigRendererForwardHistoricalAlertsController,\n            scope: {},\n            controllerAs: '$ctrl',\n            bindToController: {\n                configItem: '<',\n                configFormCtrl: '<',\n                formModelCtrl: '<',\n                onComponentInit: '&'\n            }\n        };\n    }\n    fsConfigRendererForwardHistoricalAlertsDirective.$inject = ['dateRanges', '$http', 'BASE_URL'];\n    angular.module('Fortscale.layouts.configuration')\n        .directive('configurationRenderersForwardHistoricalAlerts', fsConfigRendererForwardHistoricalAlertsDirective);\n}());\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var renderer;\n            (function (renderer) {\n                'use strict';\n                var MAIN_INPUT_SELECTOR = '.hidden-input';\n                var EMAIL_INPUT_SELECTOR = '.email-input';\n                var TestEmailRendererController = (function (_super) {\n                    __extends(TestEmailRendererController, _super);\n                    function TestEmailRendererController($scope, $element, assert, $http, BASE_URL) {\n                        _super.call(this, MAIN_INPUT_SELECTOR);\n                        this.$scope = $scope;\n                        this.$element = $element;\n                        this.assert = assert;\n                        this.$http = $http;\n                        this.BASE_URL = BASE_URL;\n                        this.controllerName = 'TestEmailRendererController';\n                    }\n                    /**\n                     * Submit test email\n                     * @param email\n                     */\n                    TestEmailRendererController.prototype.submitTestEmail = function (email) {\n                        var _this = this;\n                        if (email) {\n                            this.$http.get(this.BASE_URL + \"/email/test\", { params: { to: email } })\n                                .then(function (res) {\n                                if (res.data && res.data.message) {\n                                    _this.message = res.data.message;\n                                }\n                            })\n                                .catch(function (err) {\n                                if (err.data && err.data.message) {\n                                    _this.message = err.data.message;\n                                }\n                            });\n                        }\n                    };\n                    /**\n                     * detaches this controller from the parent form\n                     * @private\n                     */\n                    TestEmailRendererController.prototype._deregisterInputElement = function () {\n                        var ngModel = this.$element.find(EMAIL_INPUT_SELECTOR).controller('ngModel');\n                        this.formModelCtrl.$removeControl(this.ngModel);\n                        this.formModelCtrl.$removeControl(ngModel);\n                    };\n                    TestEmailRendererController.prototype._elementReadyHandler = function () {\n                        this._deregisterInputElement();\n                    };\n                    TestEmailRendererController.prototype.$onInit = function () {\n                        _super.prototype.$onInit.call(this);\n                        this.onElementReady(this._elementReadyHandler.bind(this));\n                    };\n                    TestEmailRendererController.$inject = ['$scope', '$element', 'assert', '$http', 'BASE_URL'];\n                    return TestEmailRendererController;\n                }(renderer.ConfigurationRenderer));\n                var TestEmailRendererComponent = {\n                    templateUrl: 'app/layouts/configuration/renderers/test-email/test-email.renderer.html',\n                    controller: TestEmailRendererController,\n                    bindings: {\n                        _configItem: '<configItem',\n                        configFormCtrl: '<',\n                        formModelCtrl: '<',\n                        onComponentInit: '&'\n                    }\n                };\n                angular.module('Fortscale.layouts.configuration')\n                    .component('configurationRenderersTestEmail', TestEmailRendererComponent);\n            })(renderer = configuration.renderer || (configuration.renderer = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    function fsConfigRendererActiveDirectoryDirective() {\n        /**\n         *\n         * @param {object} scope\n         * @param {object} element\n         * @param {object} attrs\n         * @param {FsConfigRendererActiveDirectoryController} ctrl\n         */\n        function linkFn(scope, element, attrs, ctrl) {\n            // set main input to ctrl\n            ctrl._mainInput = element.find('#active_directory_main_input');\n            //set main input controller to ctrl\n            ctrl._mainInputNgModel = ctrl._mainInput.controller('ngModel');\n            // set ngModel validity to invalid so the form can not be submitted.\n            ctrl._mainInputNgModel.$setValidity('activeDirectoryConfiguration', false);\n        }\n        /**\n         * The directive's controller function\n         *\n         * @constructor\n         */\n        function FsConfigRendererActiveDirectoryController($element, $scope) {\n            // Put dependencies on the instance\n            var ctrl = this;\n            ctrl.$element = $element;\n            ctrl.$scope = $scope;\n            ctrl._mainInput = null;\n            ctrl._mainInputNgModel = null;\n            // add listener to main input\n            ctrl.mainInputKeyPress = function (evt, domain, newDC) {\n                if (evt.which === 13) {\n                    return ctrl.addDC(domain, newDC);\n                }\n            };\n            // Invoke init\n            ctrl.init();\n        }\n        angular.extend(FsConfigRendererActiveDirectoryController.prototype, {\n            /**\n             * Validates all domains have dcs\n             *\n             * @returns {boolean}\n             * @private\n             */\n            _isDCsValid: function () {\n                return _.every(this.settings, function (domain) {\n                    return domain.dcs.length > 0;\n                });\n            },\n            /**\n             * Validates all domains have text in the text boxes\n             *\n             * @returns {boolean}\n             * @private\n             */\n            _isTextBoxesValid: function () {\n                return _.every(this.settings, function (domain) {\n                    return domain.domainBaseSearch !== \"\" && domain.domainPassword !== \"\" && domain.domainUser !== \"\";\n                });\n            },\n            /**\n             * Checks all validations return true\n             *\n             * @returns {*|boolean}\n             * @private\n             */\n            _isValid: function () {\n                return this._isDCsValid() && this._isTextBoxesValid();\n            },\n            /**\n             * Method to cleanup unwanted properties from the object to be stored,\n             *\n             * @param domain\n             * @private\n             */\n            _cleanupDomain: function (domain) {\n                // Delete $$hashKey from new object (this was added by angular)\n                delete domain.$$hashKey;\n            },\n            /**\n             * Takes a change function, and invokes it. if the new value is different then the old value, it sets view\n             * value\n             *\n             * @param {function} changeFn\n             * @private\n             */\n            _changeAction: function (changeFn) {\n                // Create an old value reference\n                var oldValue = JSON.stringify(this.settings);\n                // Make the change\n                changeFn();\n                // Create a new value reference\n                var newValue = JSON.stringify(this.settings);\n                // If the new value is different then the old value then commit the change\n                if (newValue !== oldValue) {\n                    // Create an object to be cleaned\n                    var newValueObj = JSON.parse(newValue);\n                    // Clean all the domains\n                    _.each(newValueObj, this._cleanupDomain);\n                    // Set the new value to the main input model, set valid, and render.\n                    this._mainInputNgModel.$setViewValue(JSON.stringify(newValueObj));\n                    this._mainInputNgModel.$setValidity('activeDirectoryConfiguration', this._isValid());\n                    this._mainInputNgModel.$render();\n                }\n            },\n            modelChange: function () {\n                // Create an object to be cleaned\n                var newValueObj = _.cloneDeep(this.settings);\n                // Clean all the domains\n                _.each(newValueObj, this._cleanupDomain);\n                // Set the new value to the main input model, set valid, and render.\n                this._mainInputNgModel.$setViewValue(JSON.stringify(newValueObj));\n                this._mainInputNgModel.$setValidity('activeDirectoryConfiguration', this._isValid());\n                this._mainInputNgModel.$render();\n            },\n            /**\n             * Adds a DC\n             * @param {{users: Array<string>}} domain\n             * @param {string} newDC\n             */\n            addDC: function (domain, newDC) {\n                // Validate value is not an empty string, or an existing value\n                if (newDC && newDC !== \"\" && domain.dcs.indexOf(newDC.trim()) === -1) {\n                    this._changeAction(function () {\n                        domain.dcs.push(newDC.trim());\n                    });\n                }\n            },\n            /**\n             * Removes a DC\n             * @param {{users: Array<string>}} domain\n             * @param {number} dcIndex\n             */\n            removeDC: function (domain, dcIndex) {\n                this._changeAction(function () {\n                    domain.dcs.splice(dcIndex, 1);\n                });\n            },\n            /**\n             * Removes a domain\n             * @param {number} domainIndex\n             */\n            removeDomain: function (domainIndex) {\n                var ctrl = this;\n                ctrl._changeAction(function () {\n                    ctrl.settings.splice(domainIndex, 1);\n                });\n            },\n            /**\n             * Duplicates a domain\n             * @param domainIndex\n             */\n            duplicateDomain: function (domainIndex) {\n                var ctrl = this;\n                ctrl._changeAction(function () {\n                    // Adds after the member a duplication of the member. JSON.parse/stringify is used for the\n                    // duplication\n                    ctrl.settings.splice(domainIndex, 0, JSON.parse(JSON.stringify(ctrl.settings[domainIndex])));\n                });\n            },\n            /**\n             * Creates a new domain\n             */\n            newDomain: function () {\n                var ctrl = this;\n                // Create a new settings list if one does not exist\n                ctrl.settings = ctrl.settings || [];\n                ctrl._changeAction(function () {\n                    ctrl.settings.push({\n                        dcs: [],\n                        domainBaseSearch: \"\",\n                        domainPassword: \"\",\n                        domainUser: \"\"\n                    });\n                });\n            },\n            /**\n             * Init\n             */\n            init: function init() {\n                var ctrl = this;\n                // Set base value\n                ctrl.settings = JSON.parse(ctrl.configItem.value);\n                // digest severities and frequency\n                _.each(ctrl.settings, function (domain) {\n                });\n                ctrl.onComponentInit({ ngModelController: ctrl._mainInputNgModel });\n            }\n        });\n        FsConfigRendererActiveDirectoryController.$inject = ['$element', '$scope'];\n        return {\n            restrict: 'E',\n            templateUrl: 'app/layouts/configuration/renderers/active-directory/' +\n                'fs-config-renderer-active-directory.view.html',\n            link: linkFn,\n            controller: FsConfigRendererActiveDirectoryController,\n            scope: {},\n            controllerAs: '$ctrl',\n            bindToController: {\n                configItem: '<',\n                configFormCtrl: '<',\n                formModelCtrl: '<',\n                onComponentInit: '&'\n            }\n        };\n    }\n    fsConfigRendererActiveDirectoryDirective.$inject = [];\n    angular.module('Fortscale.layouts.configuration')\n        .directive('configurationRenderersActiveDirectory', fsConfigRendererActiveDirectoryDirective);\n}());\n","var Fortscale;\n(function (Fortscale) {\n    var layouts;\n    (function (layouts) {\n        var configuration;\n        (function (configuration) {\n            var components;\n            (function (components) {\n                var batchAlertForwarding;\n                (function (batchAlertForwarding) {\n                    'use strict';\n                    var BatchAlertForwardingController = (function () {\n                        function BatchAlertForwardingController(tagsUtils, appConfig, $http, BASE_URL, dateRanges) {\n                            var _this = this;\n                            this.tagsUtils = tagsUtils;\n                            this.appConfig = appConfig;\n                            this.$http = $http;\n                            this.BASE_URL = BASE_URL;\n                            this.dateRanges = dateRanges;\n                            // Initialize properties\n                            this.isLoading = false;\n                            this.models = {};\n                            this.configModels = {};\n                            this.updateDates = function (res) {\n                                return _this._updateDates(res);\n                            };\n                        }\n                        /**\n                         * Gets all tags in the system\n                         * @returns {IPromise<Array>|Promise<Array>|Promise<T>}\n                         * @private\n                         */\n                        BatchAlertForwardingController.prototype._getTags = function () {\n                            var _this = this;\n                            return this.tagsUtils.getTags()\n                                .then(function (tags) {\n                                _this.tagsList = _.map(tags.data, function (tag) {\n                                    return {\n                                        value: tag.name,\n                                        label: tag.displayName\n                                    };\n                                });\n                            })\n                                .catch(function (err) {\n                                console.error('Fortscale.layouts.configuration: There was an error trying to fetch tags', err);\n                                return [];\n                            });\n                        };\n                        /**\n                         * Sets the initial dates value. Will be consumed if date range controller is not used.\n                         * @private\n                         */\n                        BatchAlertForwardingController.prototype._setInitialDates = function () {\n                            this.dates = this.dateRanges.getByDaysRange(7, 'short');\n                        };\n                        ;\n                        /**\n                         * Sets the initial state\n                         *\n                         * @private\n                         */\n                        BatchAlertForwardingController.prototype._setInitialState = function () {\n                            this._initialState = {\n                                'system.syslogforwarding.forwardingtype': {\n                                    component: 'checkbox',\n                                    config: {\n                                        radioBox: true,\n                                        horizontal: true\n                                    },\n                                    data: {\n                                        items: [\n                                            {\n                                                value: 'ALERT',\n                                                label: 'Alerts'\n                                            }, {\n                                                value: 'ALERT_AND_INDICATORS',\n                                                label: 'Alerts and Indicators'\n                                            }\n                                        ],\n                                        checked: ['ALERT']\n                                    }\n                                },\n                                'system.syslogforwarding.ip': {\n                                    id: 'system.syslogforwarding.ip',\n                                    component: 'ip',\n                                    data: {},\n                                    config: {}\n                                },\n                                'system.syslogforwarding.port': {},\n                                'system.syslogforwarding.alertseverity': {\n                                    component: 'severity',\n                                    data: {},\n                                    config: {}\n                                },\n                                'system.syslogforwarding.messageformat': {\n                                    component: 'checkbox',\n                                    config: {\n                                        radioBox: true,\n                                        horizontal: true\n                                    },\n                                    data: {\n                                        items: [\n                                            {\n                                                value: 'RFC_3164',\n                                                label: 'RFC 3164'\n                                            }, {\n                                                value: 'RFC_5424',\n                                                label: 'RFC 5424'\n                                            }\n                                        ],\n                                        checked: ['RFC_3164']\n                                    }\n                                },\n                                'system.syslogforwarding.usertypes': {\n                                    component: 'checkbox',\n                                    config: {\n                                        selectAll: true\n                                    },\n                                    data: {\n                                        items: this.tagsList\n                                    }\n                                }\n                            };\n                        };\n                        /**\n                         * Sets initial values to all models\n                         *\n                         * @private\n                         */\n                        BatchAlertForwardingController.prototype._setInitialValues = function () {\n                            var _this = this;\n                            this.models = {};\n                            this.dates = this.dateRanges.getByDaysRange(7, 'short').split(',');\n                            _.each(this._initialState, function (stateItem, stateItemId) {\n                                var configItem = _this.appConfig.getConfigItem(stateItemId);\n                                _this.models[stateItemId] = _.merge(configItem, stateItem);\n                            });\n                        };\n                        /**\n                         * Handler to update dates.\n                         *\n                         * @param {{value: *}}res\n                         * @private\n                         */\n                        BatchAlertForwardingController.prototype._updateDates = function (res) {\n                            this.dates = res.value.split(',');\n                        };\n                        /**\n                         * An action to request forwarding\n                         *\n                         */\n                        BatchAlertForwardingController.prototype.forward = function () {\n                            var _this = this;\n                            this.isLoading = true;\n                            this.$http.post(this.BASE_URL + '/syslogforwarding/forward_alerts', {\n                                start_time: parseInt(this.dates[0]),\n                                end_time: parseInt(this.dates[1]),\n                                ip: this.configModels['system.syslogforwarding.ip'],\n                                port: this.configModels['system.syslogforwarding.port'],\n                                forwarding_type: this.configModels['system.syslogforwarding.forwardingtype'],\n                                message_format: this.configModels['system.syslogforwarding.messageformat'],\n                                user_tags: this.configModels['system.syslogforwarding.usertypes'] ?\n                                    this.configModels['system.syslogforwarding.usertypes'].split(',') : [],\n                                alert_severities: this.configModels['system.syslogforwarding.alertseverity'] ?\n                                    this.configModels['system.syslogforwarding.alertseverity'].split(',') : []\n                            })\n                                .then(function (res) {\n                                _this.message = res && res.data && res.data.message;\n                                _this.isLoading = false;\n                            })\n                                .catch(function (err) {\n                                _this.message = err.data.message;\n                                _this.isLoading = false;\n                            });\n                        };\n                        BatchAlertForwardingController.prototype.$onInit = function () {\n                            var _this = this;\n                            this.isLoading = true;\n                            this._getTags()\n                                .then(function () {\n                                _this._setInitialDates();\n                                _this._setInitialState();\n                                _this._setInitialValues();\n                                _this.isLoading = false;\n                            })\n                                .catch(function () {\n                                _this.isLoading = false;\n                            });\n                        };\n                        BatchAlertForwardingController.$inject = ['tagsUtils', 'appConfig', '$http', 'BASE_URL', 'dateRanges'];\n                        return BatchAlertForwardingController;\n                    }());\n                    var configurationComponentBatchAlertForwarding = {\n                        controller: BatchAlertForwardingController,\n                        controllerAs: 'baCtrl',\n                        templateUrl: 'app/layouts/configuration/layout-components/batch-alert-forwading/batch-alert-forwarding.html',\n                    };\n                    angular.module('Fortscale.layouts.configuration')\n                        .component('configurationComponentBatchAlertForwarding', configurationComponentBatchAlertForwarding)\n                        .run(['Fortscale.layouts.configuration.configurationNavigationService',\n                        function (configurationNavigationService) { return configurationNavigationService.addConfigurationPage({\n                            id: 'system.syslogforwarding.batchAlertForwarding',\n                            displayName: 'Batch Alert Forwarding via Syslog',\n                            component: 'configurationComponentBatchAlertForwarding',\n                            doNotShowHeader: true,\n                            formClassNames: 'batch-alert-forwarding'\n                        }); }]);\n                })(batchAlertForwarding = components.batchAlertForwarding || (components.batchAlertForwarding = {}));\n            })(components = configuration.components || (configuration.components = {}));\n        })(configuration = layouts.configuration || (layouts.configuration = {}));\n    })(layouts = Fortscale.layouts || (Fortscale.layouts = {}));\n})(Fortscale || (Fortscale = {}));\n","(function () {\n    'use strict';\n    angular.module('Fortscale.layouts.pxgridConfiguration', []);\n}());\n","(function () {\n    'use strict';\n    var PXGRID_CONTAINER_ID = 'system.pxgrid';\n    function PxgridConfigurationController($scope, dependencyMounter, $stateParams) {\n        this.$scope = $scope;\n        this.$stateParams = $stateParams;\n        this.certificate_form_type = $stateParams.certificateFlow;\n        this.generation_form_type = $stateParams.generationFlow;\n        dependencyMounter.mountOnConstructor(PxgridConfigurationController, [\n            'appConfig', '$http', 'BASE_URL', 'remoteAppConfig', '$state', '$q'\n        ]);\n        this._init();\n    }\n    _.merge(PxgridConfigurationController.prototype, {\n        /**\n         * Get and parse the pxgrid config items.\n         *\n         * @private\n         */\n        _getPXGridConfigItems: function () {\n            // Get pxgrid config container\n            this.pxGridContainer = this.appConfig.getConfigContainer(PXGRID_CONTAINER_ID);\n            // Create holder for config items\n            this.pxgridItems = {};\n            // Iterate through pxgrid config container items, and place items on pxgridItems.\n            // Format items values where needed\n            _.each(this.appConfig.getConfigItemsByContainer(PXGRID_CONTAINER_ID), _.bind(function (configItem) {\n                // Place duplicated item on pxgridItems\n                this.pxgridItems[configItem.id] = this.appConfig.duplicateConfigItem(configItem);\n                // Convert values to integer when type is pxgridInt. Null value if value is parsed no NaN\n                if (configItem.type === \"pxgridInt\") {\n                    this.pxgridItems[configItem.id].value = parseInt(this.pxgridItems[configItem.id].value);\n                    if (isNaN(this.pxgridItems[configItem.id].value)) {\n                        this.pxgridItems[configItem.id].value = null;\n                    }\n                }\n            }, this));\n        },\n        /**\n         * Used after config change to update the page. Will reload the state.\n         *\n         * @private\n         */\n        _reloadSelf: function () {\n            var ctrl = this;\n            ctrl.$state.go('pxgridConfiguration', {\n                certificateFlow: ctrl.certificate_form_type,\n                generationFlow: ctrl.generation_form_type\n            }, {\n                reload: true\n            });\n        },\n        /**\n         * Change the state params without reloading the page\n         *\n         * @private\n         */\n        _statechangeParams: function () {\n            var ctrl = this;\n            ctrl.$state.transitionTo('pxgridConfiguration', {\n                certificateFlow: ctrl.certificate_form_type,\n                generationFlow: ctrl.generation_form_type\n            }, { notify: false });\n        },\n        /**\n         * Adds watchers on flows flags.\n         *\n         * @private\n         */\n        _addStateWatchers: function () {\n            var ctrl = this;\n            this.$scope.$watch(function () {\n                return ctrl.certificate_form_type;\n            }, ctrl._statechangeParams.bind(ctrl));\n            this.$scope.$watch(function () {\n                return ctrl.generation_form_type;\n            }, ctrl._statechangeParams.bind(ctrl));\n        },\n        /**\n         * Handler for pem file input - file change or select\n         *\n         * @param inputElement\n         * @param fileName\n         */\n        keysFileChange: function (inputElement, fileName) {\n            var ctrl = this;\n            ctrl.pxgridKeys = ctrl.pxgridKeys || {};\n            // Keep reference to ngModel\n            var ngModel = angular.element(inputElement).controller('ngModel');\n            // Make sure input is a file\n            if (inputElement.type === 'file') {\n                // If the change yields no files, then nullify model value, set required, set dirty and digest.\n                if (inputElement.files.length === 0) {\n                    ctrl.pxgridKeys[fileName] = null;\n                    ngModel.$setValidity('required', false);\n                    ngModel.$setDirty(true);\n                    ctrl.$scope.$digest();\n                }\n                else {\n                    var reader = new FileReader();\n                    reader.onload = function () {\n                        ctrl.pxgridKeys[fileName] = btoa(reader.result);\n                        ngModel.$setValidity('required', true);\n                        ngModel.$setDirty(true);\n                        ctrl.$scope.$digest();\n                    };\n                    reader.readAsBinaryString(inputElement.files[0]);\n                }\n            }\n        },\n        /**\n         * Handler for input of type file change. If file is selected, read it and store value as base64 string.\n         * If file is not present, nullify value.\n         * Each change also triggers setValidity, setDirty and digest\n         *\n         * @param inputElement\n         */\n        inputFileChange: function (inputElement) {\n            var ctrl = this;\n            // Keep reference to ngModel\n            var ngModel = angular.element(inputElement).controller('ngModel');\n            // Make sure input is a file\n            if (inputElement.type === 'file') {\n                // If the change yields no files, then nullify model value, set required, set dirty and digest.\n                if (inputElement.files.length === 0) {\n                    ctrl.pxgridItems[inputElement.id].value = null;\n                    ngModel.$setValidity('required', false);\n                    ngModel.$setDirty(true);\n                    ctrl.$scope.$digest();\n                }\n                else {\n                    var reader = new FileReader();\n                    reader.onload = function () {\n                        ctrl.pxgridItems[inputElement.id].value = btoa(reader.result);\n                        ngModel.$setValidity('required', true);\n                        ngModel.$setDirty(true);\n                        ctrl.$scope.$digest();\n                    };\n                    reader.readAsBinaryString(inputElement.files[0]);\n                }\n            }\n        },\n        /**\n         * Submit pxgrid config flow. Collect values, then use appConfig.updateConfigItems.\n         * After submit, form is set to pristine.\n         * @returns {Promise.<T>|*}\n         */\n        submitNewConfig: function () {\n            var ctrl = this;\n            ctrl.loader = true;\n            // Collect config items values into a list of objects {key: string, value: string}\n            var configItemsList = _.map(ctrl.pxgridItems, function (configItem) {\n                return { key: configItem.id, value: ctrl.pxgridItems[configItem.id].value || \"\" };\n            });\n            // Fire update\n            return this.appConfig.updateConfigItems(configItemsList)\n                .then(function () {\n                ctrl.loader = false;\n                var formCtrl = angular.element($('#pxgridConfigForm')).controller('form');\n                formCtrl.$setPristine();\n                ctrl.error = {};\n            })\n                .catch(function () {\n                ctrl.loader = false;\n                ctrl.error = {\n                    display: true,\n                    title: 'Server Error',\n                    description: 'An unknown server error has prevented pxGrid configuration update. ' +\n                        'Please try again later.'\n                };\n            });\n        },\n        /**\n         * Used to test the connection to pxgrid\n         *\n         * @returns {Promise.<T>|*}\n         */\n        testConnection: function () {\n            var ctrl = this;\n            ctrl.connectionTest = {\n                loader: true\n            };\n            return this.$http.get(this.BASE_URL + '/pxgrid')\n                .then(function (res) {\n                ctrl.connectionTest.loader = false;\n                ctrl.connectionTest =\n                    {\n                        success: {\n                            message: 'Registered successfully. Registered to server ' + res.data.server\n                        }\n                    };\n            })\n                .catch(function (res) {\n                ctrl.connectionTest.loader = false;\n                switch (res.status) {\n                    case 400:\n                        ctrl.connectionTest =\n                            {\n                                error: {\n                                    message: res.data.message\n                                }\n                            };\n                        break;\n                    default:\n                        ctrl.connectionTest =\n                            {\n                                error: {\n                                    message: 'There was an unknown server error. Please try again later.'\n                                }\n                            };\n                        break;\n                }\n            });\n        },\n        /**\n         * Start loader, creates get request that starts certificate generation. Once approved, config items are\n         * loaded and parsed, so change to system.pxgrid.cer will be reflected\n         *\n         * @returns {Promise.<T>|null}\n         */\n        generateCertificate: function () {\n            var ctrl = this;\n            // Create an initial cerGen if one does not exist\n            ctrl.cerGen = ctrl.cerGen || {\n                loader: false,\n                inProgress: false\n            };\n            // If in progress then do nothing\n            if (ctrl.cerGen.inProgress) {\n                return null;\n            }\n            // Start loader and raise inprogress flag\n            ctrl.cerGen = {\n                loader: true,\n                inProgress: true\n            };\n            // initiate get request to start generation\n            return this.$http.get(this.BASE_URL + '/pxgrid/generate_cer')\n                .then(function () {\n                // Load remote config\n                return ctrl.remoteAppConfig.initRemoteAppConfig();\n            })\n                .then(function () {\n                // digest remote config\n                return ctrl.appConfig.digestRemoteConfig(ctrl.remoteAppConfig.getRemoteConfigList());\n            })\n                .then(function () {\n                // Turn of loader and inprogress flag\n                ctrl.cerGen = {\n                    loader: false,\n                    inProgress: false\n                };\n                ctrl._reloadSelf();\n            })\n                .catch(function (err) {\n                // On error turn off loader and inprogress and raise error message\n                ctrl.cerGen = {\n                    loader: true,\n                    inProgress: true\n                };\n                switch (err.status) {\n                    default:\n                        ctrl.cerGen =\n                            {\n                                error: {\n                                    message: 'There was an unknown server error. Please try again later.'\n                                }\n                            };\n                        break;\n                }\n            });\n        },\n        /**\n         * Start loader, creates get request that starts csr generation. Once approved, config items are\n         * loaded and parsed, so change to system.pxgrid.csr will be reflected\n         *\n         * @returns {Promise.<T>|null}\n         */\n        generateCsr: function () {\n            var ctrl = this;\n            // Create an initial cerGen if one does not exist\n            ctrl.csrGen = ctrl.csrGen || {\n                loader: false,\n                inProgress: false\n            };\n            // If in progress then do nothing\n            if (ctrl.csrGen.inProgress) {\n                return null;\n            }\n            // Start loader and raise inprogress flag\n            ctrl.csrGen = {\n                loader: true,\n                inProgress: true\n            };\n            // initiate get request to start generation\n            return this.$http.get(this.BASE_URL + '/pxgrid/generate_csr')\n                .then(function () {\n                // Load remote config\n                return ctrl.remoteAppConfig.initRemoteAppConfig();\n            })\n                .then(function () {\n                // digest remote config\n                return ctrl.appConfig.digestRemoteConfig(ctrl.remoteAppConfig.getRemoteConfigList());\n            })\n                .then(function () {\n                // Turn of loader and inprogress flag\n                ctrl.csrGen = {\n                    loader: false,\n                    inProgress: false\n                };\n                ctrl._reloadSelf();\n            })\n                .catch(function (err) {\n                // On error turn off loader and inprogress and raise error message\n                ctrl.csrGen = {\n                    loader: true,\n                    inProgress: true\n                };\n                switch (err.status) {\n                    default:\n                        ctrl.csrGen =\n                            {\n                                error: {\n                                    message: 'There was an unknown server error. Please try again later.'\n                                }\n                            };\n                        break;\n                }\n            });\n        },\n        saveFile: function (selectorId, url) {\n            // Check if element (or its parent in this case) is disabled. Try-catch to protect against misuse.\n            var inputEl = document.getElementById(selectorId);\n            try {\n                var disabled = inputEl.parentElement.attributes.getNamedItem('disabled');\n                if (disabled && disabled.value === 'disabled') {\n                    return;\n                }\n            }\n            catch (err) {\n                return;\n            }\n            // Open new Iframe to download\n            var iframe = document.createElement('iframe');\n            iframe.style.display = \"none\";\n            var html = document.getElementsByTagName('html')[0];\n            html.appendChild(iframe);\n            iframe.src = url;\n        },\n        // Open a new iframe that saves the certificate file\n        saveCertificate: function (selectorId) {\n            this.saveFile(selectorId, this.BASE_URL + '/pxgrid/export?fileType=cer');\n        },\n        // Open a new iframe that saves the csr file\n        saveCsr: function (selectorId) {\n            this.saveFile(selectorId, this.BASE_URL + '/pxgrid/export?fileType=csr');\n        },\n        /**\n         * Collect the keys data, pushes it on POST, then if ok, config items are\n         * loaded and parsed.\n         *\n         * @returns {Promise.<T>|*}\n         */\n        submitKeys: function () {\n            var ctrl = this;\n            ctrl.loader = true;\n            ctrl.error = {};\n            var base64PemFile = ctrl.pxgridKeys.pemFile;\n            var base64CaFile = ctrl.pxgridKeys.caFile;\n            var password = ctrl.pxgridKeys.password;\n            // Fire update\n            var destinationPath;\n            var body = {};\n            switch (ctrl.generation_form_type) {\n                case 'self-signed':\n                    destinationPath = ctrl.BASE_URL + '/pxgrid/generate_keys';\n                    body = {\n                        base64PemFile: base64PemFile,\n                        password: password\n                    };\n                    break;\n                case 'ca-keys':\n                    destinationPath = ctrl.BASE_URL + '/pxgrid/generate_ca_keys';\n                    body = {\n                        base64PemFile: base64PemFile,\n                        base64CaFile: base64CaFile,\n                        password: password\n                    };\n                    break;\n            }\n            return this.$http.post(destinationPath, body)\n                .then(function () {\n                // Load remote config\n                return ctrl.remoteAppConfig.initRemoteAppConfig();\n            })\n                .then(function () {\n                // digest remote config\n                return ctrl.appConfig.digestRemoteConfig(ctrl.remoteAppConfig.getRemoteConfigList());\n            })\n                .then(function () {\n                ctrl.loader = false;\n                ctrl._reloadSelf();\n            })\n                .catch(function () {\n                ctrl.loader = false;\n                ctrl.error = {\n                    display: true,\n                    title: 'Server Error',\n                    description: 'An unknown server error has prevented pxGrid keys generation. ' +\n                        'Please try again later.'\n                };\n            });\n        },\n        /**\n         * Uploads a cer file to server\n         *\n         * @param {HTMLElement} inputElement\n         */\n        uploadCertFile: function (inputElement) {\n            var ctrl = this;\n            ctrl.loader = true;\n            ctrl.error = {};\n            // Make sure a file was chosen\n            if (inputElement.files.length !== 0) {\n                // Start a promise chain\n                ctrl.$q(function (resolve, reject) {\n                    // Create a reader to read the file. Resolve on data. Reject on error.\n                    var reader = new FileReader();\n                    reader.onload = function () {\n                        resolve(btoa(reader.result));\n                    };\n                    reader.onerror = function (err) {\n                        console.log(err);\n                        reject(err);\n                    };\n                    reader.readAsBinaryString(inputElement.files[0]);\n                })\n                    .then(function (data) {\n                    // Create a POST request with the data\n                    return ctrl.$http.post(ctrl.BASE_URL + '/pxgrid/update_cer', {\n                        base64CerFile: data\n                    });\n                })\n                    .then(function () {\n                    // Load remote config\n                    return ctrl.remoteAppConfig.initRemoteAppConfig();\n                })\n                    .then(function () {\n                    // digest remote config\n                    return ctrl.appConfig.digestRemoteConfig(ctrl.remoteAppConfig.getRemoteConfigList());\n                })\n                    .then(function () {\n                    // Turn off loader and reload state\n                    ctrl.loader = false;\n                    ctrl._reloadSelf();\n                })\n                    .catch(function (err) {\n                    // Turn on error message\n                    ctrl.loader = false;\n                    ctrl.error = {\n                        display: true,\n                        title: 'Server Error',\n                        description: 'An unknown server error has prevented file upload. ' +\n                            'Please try again later.'\n                    };\n                });\n            }\n        },\n        /**\n         * Control's init function\n         *\n         * @private\n         */\n        _init: function () {\n            //this._setFileInputsInvalid();\n            this._getPXGridConfigItems();\n            this._addStateWatchers();\n        }\n    });\n    PxgridConfigurationController.$inject = ['$scope', 'dependencyMounter', '$stateParams'];\n    angular.module('Fortscale.layouts.pxgridConfiguration')\n        .controller('PxgridConfigurationController', PxgridConfigurationController);\n}());\n","(function () {\n    'use strict';\n    angular.module(\"Fortscale.layouts.pxgridConfiguration\")\n        .config([\n        '$stateProvider',\n        function ($stateProvider) {\n            $stateProvider\n                .state('pxgridConfiguration', {\n                url: '/pxgrid-configuration/:certificateFlow/:generationFlow',\n                templateUrl: 'app/layouts/pxgrid-configuration/pxgrid-configuration.html',\n                controller: 'PxgridConfigurationController',\n                controllerAs: 'pxgridCtrl'\n            });\n        }\n    ]);\n}());\n","(function () {\n    'use strict';\n    angular.module('Fortscale.analytics', [])\n        .run(['fsAnalytics', function (fsAnalytics) {\n            fsAnalytics.init();\n        }]);\n}());\n","(function () {\n    'use strict';\n    function FsUUID() {\n        this._s4 = function () {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        };\n        this.generateUUID = function () {\n            return this._s4() + this._s4() + this._s4() + this._s4();\n        };\n    }\n    angular.module('Fortscale.analytics')\n        .service('fsUUID', FsUUID);\n}());\n","(function () {\n    'use strict';\n    /**\n     *\n     * @param {string} computerId UUID\n     * @param {string} tabId UUID\n     * @param {string} eventType\n     * @param {string} stateName\n     * @param {number} timeStamp\n     * @constructor\n     */\n    function AbstractEventDetails(computerId, tabId, eventType, stateName, timeStamp) {\n        this.computerId = computerId;\n        this.tabId = tabId;\n        this.eventType = eventType;\n        this.stateName = stateName;\n        this.timeStamp = timeStamp;\n    }\n    /**\n     *\n     * @param {string} computerId UUID\n     * @param {string} tabId UUID\n     * @param {string} eventType\n     * @param {string} stateName\n     * @param {number} timeStamp\n     * @param {string} elementSelector\n     * @constructor\n     */\n    function EventDetails(computerId, tabId, eventType, stateName, timeStamp, elementSelector) {\n        AbstractEventDetails.call(this, computerId, tabId, eventType, stateName, timeStamp);\n        this.elementSelector = elementSelector;\n    }\n    /**\n     *\n     * @param {string} computerId UUID\n     * @param {string} tabId UUID\n     * @param {string} stateName\n     * @param {number} timeStamp\n     * @param {string} toState\n     * @constructor\n     */\n    function StateChangeDetails(computerId, tabId, stateName, timeStamp, toState) {\n        AbstractEventDetails.call(this, computerId, tabId, 'stateChange', stateName, timeStamp);\n        this.toState = toState;\n    }\n    /**\n     *\n     * @param {string} computerId UUID\n     * @param {string} tabId UUID\n     * @param {string} stateName\n     * @param {number} timeStamp\n     * @param {string} fileName\n     * @param {number} lineNumber\n     * @param {number} columnNumber\n     * @param {string} message\n     * @param {string} stack\n     * @constructor\n     */\n    function ErrorDetails(computerId, tabId, stateName, timeStamp, fileName, lineNumber, columnNumber, message, stack) {\n        AbstractEventDetails.call(this, computerId, tabId, 'error', stateName, timeStamp);\n        this.fileName = fileName;\n        this.lineNumber = lineNumber;\n        this.columnNumber = columnNumber;\n        this.message = message;\n        this.stack = stack;\n    }\n    function FsAnalytics($q, $window, $state, fsUUID, $rootScope, fsIndexedDBService, BASE_URL, $http, appConfig) {\n        var service = this;\n        // Predetermined immutable values\n        service._CONFIG_CONTAINER_NAME = 'system.analytics';\n        service._CONFIG_ALLOW_NAME = 'allowAnalytics';\n        service._CONFIG_UPDATE_EVENTS_NUM_NAME = 'updateEventsNum';\n        service._DB_NAME = 'Fortscale';\n        service._ANALYTICS_STORE_NAME = 'analytics';\n        service._ANALYTICS_STORE_INDEX_NAME = 'timestamp';\n        service._ANALYTICS_STORE_DB_CONFIG = { keyPath: 'id', autoIncrement: true };\n        service._ANALYTICS_INDICES = [\n            { indexName: 'timestamp', keyPath: 'timeStamp', options: { unique: true } }\n        ];\n        service._ANALYTICS_DB_REV = 251;\n        service._ANALYTICS_REST_PATH = BASE_URL + '/analytics';\n        service._MAX_ITEMS_BEFORE_UPLOAD_DEFAULT = 10;\n        // Predetermined values\n        service._isBlocked = true;\n        service._actionsQue = [];\n        service._isCatastrophicFailure = false;\n        service._setServiceBlock = function (state) {\n            service._isBlocked = state;\n        };\n        service._getServiceBlock = function () {\n            return service._isBlocked;\n        };\n        /**\n         * Returns the selector of an element. It recursively climbs up until it can find an id on the element,\n         * or a two class and up class list.\n         *\n         * @param {HTMLElement} element\n         * @param {string=} selector\n         * @returns {string}\n         * @private\n         */\n        service._getElementSelector = function (element, selector) {\n            // Initiates selector if required\n            selector = selector || '';\n            // extract tag\n            var tag = element.tagName;\n            // extract id\n            var id = element.id ? '#' + element.id : '';\n            // extract class list\n            var classList = Array.from(element.classList);\n            // remove all ng class names\n            classList = classList.filter(function (classItem) {\n                return !/^ng-/.test(classItem);\n            });\n            // Extract class names\n            var className = classList.length ? '.' + classList.join('.') : '';\n            // Remove any ids and classes from html\n            if (tag.toLowerCase() === 'html') {\n                className = '';\n                id = '';\n            }\n            // Predicate for end (or continuation) of recursion\n            if (id !== '' || classList.length >= 2 || !element.parentElement) {\n                return tag + id + className + selector;\n            }\n            else {\n                return service._getElementSelector(element.parentElement) + '>' + tag + id + className + selector;\n            }\n        };\n        /**\n         * Factory. Creates a new EventDetails instance.\n         *\n         * @param {Event} evt\n         * @returns {EventDetails}\n         * @private\n         */\n        service._createEventDetails = function (evt) {\n            var element = evt.target;\n            var eventType = evt.type;\n            var stateName = $state.current.name;\n            var timeStamp = moment.utc().valueOf();\n            return new EventDetails(service._computerId, service._tabId, eventType, stateName, timeStamp, service._getElementSelector(element));\n        };\n        /**\n         * Factory. Create an ErrorDetails instance.\n         *\n         * @param {Event|ErrorEvent} evt\n         * @returns {ErrorDetails}\n         * @private\n         */\n        service._createErrorDetails = function (evt) {\n            return new ErrorDetails(service._computerId, service._tabId, $state.current.name, moment.utc().valueOf(), evt.filename, evt.lineno, evt.colno, evt.message, evt.error.stack);\n        };\n        /**\n         * Factory. Creates a StateChangeDetails instance\n         *\n         * @param toState\n         * @param fromState\n         * @returns {StateChangeDetails}\n         * @private\n         */\n        service._createStateChangeDetails = function (toState, fromState) {\n            return new StateChangeDetails(service._computerId, service._tabId, fromState.name, moment.utc().valueOf(), toState.name);\n        };\n        /**\n         * Used (usually after each update to db) to count number of elements in table. If number exceeds\n         * MAX_ITEMS_BEFORE_UPLOAD, the service is temporarily blocked, and all items in table are uploaded to server.\n         * The items are then deleted from table.\n         *\n         * @returns {Promise.<T>|*}\n         * @private\n         */\n        service._tentativeUpload = function () {\n            // Count number of items\n            return fsIndexedDBService.count(service._db, service._ANALYTICS_STORE_NAME, service._ANALYTICS_STORE_INDEX_NAME)\n                .then(function (count) {\n                // find max items\n                var maxItems = appConfig.getConfigValue(service._CONFIG_CONTAINER_NAME, service._CONFIG_UPDATE_EVENTS_NUM_NAME) || service._MAX_ITEMS_BEFORE_UPLOAD_DEFAULT;\n                // If number of items exceed _MAX_ITEMS_BEFORE_UPLOAD the begin upload flow\n                if (maxItems < count) {\n                    service._setServiceBlock(true);\n                    // Get all items\n                    return fsIndexedDBService.findAll(service._db, service._ANALYTICS_STORE_NAME)\n                        .then(function (events) {\n                        // Upload all items\n                        return $http.post(service._ANALYTICS_REST_PATH, { analyticEvents: events });\n                    })\n                        .then(function (res) {\n                        // delete all items from table\n                        return fsIndexedDBService.deleteAll(service._db, service._ANALYTICS_STORE_NAME);\n                    })\n                        .then(function (res) {\n                        // Release service and fire _activateActionsQue\n                        service._setServiceBlock(false);\n                        return service._activateActionsQue();\n                    });\n                }\n                // return null if count is less then _MAX_ITEMS_BEFORE_UPLOAD\n                return null;\n            })\n                .catch(function (err) {\n                console.error(err);\n                service._setServiceBlock(false);\n                return service._activateActionsQue();\n            });\n        };\n        /**\n         * Handler for new event details\n         * @param evt\n         * @returns {boolean}\n         * @private\n         */\n        service._standardHandler = function (evt) {\n            if (!appConfig.getConfigValue(service._CONFIG_CONTAINER_NAME, service._CONFIG_ALLOW_NAME)) {\n                return false;\n            }\n            var eventDetails = service._createEventDetails(evt);\n            service._writeEventToStore(eventDetails);\n            return true;\n        };\n        /**\n         * Handler for new error event details\n         * @param evt\n         * @returns {boolean}\n         * @private\n         */\n        service._errorHandler = function (evt) {\n            if (!appConfig.getConfigValue(service._CONFIG_CONTAINER_NAME, service._CONFIG_ALLOW_NAME)) {\n                return false;\n            }\n            var errorDetails = service._createErrorDetails(evt);\n            service._writeEventToStore(errorDetails);\n            return true;\n        };\n        /**\n         * Handler for new state change event details\n         * @param {angular.Event} evt\n         * @param {string} toState\n         * @param {Array<*>} toParams\n         * @param {string} fromState\n         * @returns {boolean}\n         * @private\n         */\n        service._stateChangeHandler = function (evt, toState, toParams, fromState) {\n            if (!appConfig.getConfigValue(service._CONFIG_CONTAINER_NAME, service._CONFIG_ALLOW_NAME)) {\n                return false;\n            }\n            var stateChangeDetails = service._createStateChangeDetails(toState, fromState);\n            service._writeEventToStore(stateChangeDetails);\n            return true;\n        };\n        /**\n         * Adds a click handler\n         *\n         * @private\n         */\n        service._addClickListener = function () {\n            $window.addEventListener('click', service._standardHandler, true);\n        };\n        /**\n         * Adds a right click handler\n         *\n         * @private\n         */\n        service._addContextMenuListener = function () {\n            $window.addEventListener('contextmenu', service._standardHandler, true);\n        };\n        /**\n         * Adds an error handler\n         *\n         * @private\n         */\n        service._addErrorListener = function () {\n            $window.addEventListener('error', service._errorHandler, true);\n        };\n        /**\n         * Adds a state change handler\n         *\n         * @private\n         */\n        service._addStateChangeListener = function () {\n            $rootScope.$on('$stateChangeSuccess', service._stateChangeHandler);\n        };\n        /**\n         * Opens or creates a database and store.\n         *\n         * @private\n         */\n        service._openDB = function () {\n            service._setServiceBlock(true);\n            fsIndexedDBService.openDb(service._DB_NAME, service._ANALYTICS_STORE_NAME, service._ANALYTICS_STORE_DB_CONFIG, service._ANALYTICS_INDICES, service._ANALYTICS_DB_REV)\n                .then(function (db) {\n                service._db = db;\n            })\n                .then(function () {\n                service._setServiceBlock(false);\n                service._activateActionsQue();\n            })\n                .catch(function (err) {\n                // what you gonna do when they come for you\n                service._setServiceBlock(true);\n                service._isCatastrophicFailure = true;\n                console.warn('Analytics catastrophic failure. DB could not be created. Service dropped.', err);\n            });\n        };\n        /**\n         * Takes a function and arguments array and adds to actions que.\n         *\n         * @param {function} fn\n         * @param {array<*>} args\n         * @private\n         */\n        service._addToActionsQue = function (fn, args) {\n            service._actionsQue.unshift({ fn: fn, args: args });\n        };\n        /**\n         * Activates the actions que. ACtion is removed from the top (last item) and is invoked with correlating\n         * arguments. After promise is resolved, the method is called recursively until the que is empty.\n         *\n         * @returns {Promise.<T>|*}\n         * @private\n         */\n        service._activateActionsQue = function () {\n            // Create and return a promise\n            return $q(function (resolve, reject) {\n                // Check if que has length ot if service is blocked. If so reject on 'blocked'\n                if (!service._actionsQue.length || service._getServiceBlock()) {\n                    return reject('blocked');\n                }\n                // Get the top action\n                var actionQue = service._actionsQue.pop();\n                // Block service\n                service._setServiceBlock(true);\n                // Resolve on result of invoked action.\n                resolve(actionQue.fn.apply(service, actionQue.args));\n            })\n                .then(function () {\n                // Free service\n                service._setServiceBlock(false);\n                // Fire the method recursively if there are more actions\n                if (service._actionsQue.length) {\n                    return service._activateActionsQue();\n                }\n            })\n                .catch(function (err) {\n                // If err is 'blocked' then its not a 'real' error, but a way to defer until service will be freed\n                if (err !== 'blocked') {\n                    // When error is not 'blocked' then free service, log error to console, and fire the method\n                    // recursively if there are more actions\n                    service._setServiceBlock(false);\n                    console.log('fs-analytics: _activateActionsQue: ', err);\n                    if (service._actionsQue.length) {\n                        return service._activateActionsQue();\n                    }\n                }\n            });\n        };\n        /**\n         * Adds object to database\n         *\n         * @param evt\n         * @returns {Promise}\n         * @private\n         */\n        service._addObjectToDB = function (evt) {\n            return fsIndexedDBService.addObject(service._db, service._ANALYTICS_STORE_NAME, evt);\n        };\n        /**\n         * Writes an event to local store\n         *\n         * @param evt\n         * @private\n         */\n        service._writeEventToStore = function (evt) {\n            // When catastrophic failure has occurred (such as no db) then the service is disabled.\n            if (service._isCatastrophicFailure) {\n                return;\n            }\n            // Add _addObjectToDB to que\n            service._addToActionsQue(service._addObjectToDB, [evt]);\n            // Add _tentativeUpload to que\n            service._addToActionsQue(service._tentativeUpload, []);\n            // If service is not blocked, then fire _activateActionsQue\n            if (!service._getServiceBlock()) {\n                return service._activateActionsQue();\n            }\n        };\n        /**\n         * Creates or returns existing computer id. (Computer id is generated randomly once and stored on localStorage)\n         * @private\n         */\n        service._getComputerId = function () {\n            // Create computer id key (to be used in local storage)\n            var computerIdKey = [service._DB_NAME, service._ANALYTICS_STORE_NAME, 'computerId'].join('.');\n            // Get the computer id\n            var computerId = localStorage.getItem(computerIdKey);\n            // If no computer id is found, generate one, and store it.\n            if (!computerId) {\n                computerId = fsUUID.generateUUID();\n                localStorage.setItem(computerIdKey, computerId);\n            }\n            return computerId;\n        };\n        /**\n         * Controller's initiation flow.\n         */\n        service.init = function () {\n            service._computerId = service._getComputerId();\n            service._tabId = fsUUID.generateUUID();\n            service._addClickListener();\n            service._addContextMenuListener();\n            service._addErrorListener();\n            service._addStateChangeListener();\n            service._openDB();\n        };\n    }\n    FsAnalytics.$inject =\n        ['$q', '$window', '$state', 'fsUUID', '$rootScope', 'fsIndexedDBService', 'BASE_URL', '$http', 'appConfig'];\n    angular.module('Fortscale.analytics')\n        .service('fsAnalytics', FsAnalytics);\n}());\n"],"sourceRoot":"/source/"}