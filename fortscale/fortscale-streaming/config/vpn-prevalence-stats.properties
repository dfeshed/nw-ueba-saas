# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=vpn-prevalence-stats

# Task
task.class=fortscale.streaming.task.EventsPrevalenceModelStreamTask
task.inputs=kafka.fortscale-vpn-event-filtered
# export the state to mongodb every 15 minutes (15*60*1000=900000ms)
task.window.ms=900000
#task.opts=-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-context.xml
fortscale.username.field=normalized_username
fortscale.timestamp.field=date_time_unix
fortscale.discriminator.fields=local_ip
fortscale.store.name=vpn-prevalence-stats
fortscale.model.name=vpn
fortscale.fields.country_to_score.model=fortscale.ml.model.prevalance.field.StringCaseInsensitiveValuesCalibrationModel
fortscale.fields.country_to_score.output=countryScore
fortscale.fields.hostname.model=fortscale.ml.model.prevalance.field.StringCaseInsensitiveValuesCalibrationModel
fortscale.fields.hostname.output=hostnameScore
fortscale.fields.date_time_unix.model=fortscale.ml.model.prevalance.field.DailyTimeModel
fortscale.fields.date_time_unix.output=date_timeScore
fortscale.event.score.field=eventScore
fortscale.output.topic=fortscale-vpn-event-score
#fortscale.skip.score=false
#fortscale.skip.model=false

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.PrevalanceModelSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=async
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=100

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.vpn-prevalence-stats.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.vpn-prevalence-stats.changelog=kafka.vpn-prevalence-stats-changelog
stores.vpn-prevalence-stats.key.serde=string
stores.vpn-prevalence-stats.msg.serde=jsonmodel
# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.vpn-prevalence-stats.write.batch.size=50
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.vpn-prevalence-stats.object.cache.size=500
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.vpn-prevalence-stats.container.cache.size.bytes=500000
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk,
stores.vpn-prevalence-stats.container.write.buffer.size.bytes=1000
