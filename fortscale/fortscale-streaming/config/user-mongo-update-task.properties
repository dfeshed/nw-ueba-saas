# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=user-mongo-update-task

# Task
task.class=fortscale.streaming.task.enrichment.UserMongoUpdateTask
task.inputs=kafka.fortscale-vpn-geolocated-session-updated,kafka.fortscale-ssh-normalized-tagged-event,kafka.fortscale-4769-normalized-tagged-event,kafka.fortscale-4768-normalized-tagged-event,kafka.fortscale-amt-geolocated,kafka.fortscale-generic-data-source-normalized-tagged-event


# export the last-activity to mongodb every 15 minutes (15*60*1000=900000ms)
task.window.ms=900000

### Fortscale specific task config parameters
# Spring Context
fortscale.context=classpath*:META-INF/spring/streaming-TaggingTask-context.xml
# Event fields
fortscale.timestamp.field=date_time_unix



## Mapping between topic and data source
#VPN
fortscale.events.data.source.vpn=vpn
fortscale.events.input.topic.vpn=fortscale-vpn-geolocated-session-updated
fortscale.events.classifier.vpn=vpn
fortscale.events.success.field.vpn=status
fortscale.events.success.value.vpn=SUCCESS
fortscale.events.updateOnly.vpn=false
fortscale.events.logusername.field.vpn=username
fortscale.events.username.field.vpn=normalized_username
#SSH
fortscale.events.data.source.ssh=ssh
fortscale.events.input.topic.ssh=fortscale-ssh-normalized-tagged-event
fortscale.events.classifier.ssh=ssh
fortscale.events.success.field.ssh=status
fortscale.events.success.value.ssh=Accepted
fortscale.events.updateOnly.ssh=false
fortscale.events.logusername.field.ssh=username
fortscale.events.username.field.ssh=normalized_username
#4769
fortscale.events.data.source.4769=4769
fortscale.events.input.topic.4769=fortscale-4769-normalized-tagged-event
fortscale.events.classifier.4769=login
fortscale.events.success.field.4769=failure_code
fortscale.events.success.value.4769=0x0
fortscale.events.updateOnly.4769=true
fortscale.events.logusername.field.4769=account_name
fortscale.events.username.field.4769=normalized_username
#4768
fortscale.events.data.source.4768=4768
fortscale.events.input.topic.4768=fortscale-4768-normalized-tagged-event
fortscale.events.classifier.4768=login
fortscale.events.success.field.4768=status
fortscale.events.success.value.4768=SUCCESS
fortscale.events.updateOnly.4768=true
fortscale.events.logusername.field.4768=account_name
fortscale.events.username.field.4768=normalized_username
#AMT
fortscale.events.data.source.amt=amt
fortscale.events.input.topic.amt=fortscale-amt-geolocated
fortscale.events.classifier.amt=amt
fortscale.events.success.field.amt=#AnyRow#
fortscale.events.success.value.amt=#NotRelevant#
fortscale.events.updateOnly.amt=false
fortscale.events.logusername.field.amt=username
fortscale.events.username.field.amt=username

#Generic data sources
#---------------------

fortscale.events.data.source.gen1=gen1
fortscale.events.input.topic.gen1=fortscale-generic-data-source-normalized-tagged-event
fortscale.events.classifier.gen1=gen1
fortscale.events.success.field.gen1=#AnyRow#
fortscale.events.success.value.gen1=#NotRelevant#
fortscale.events.updateOnly.gen1=false
fortscale.events.logusername.field.gen1=username
fortscale.events.username.field.gen1=username

fortscale.events.data.source.gen2=gen2
fortscale.events.input.topic.gen2=fortscale-generic-data-source-normalized-tagged-event
fortscale.events.classifier.gen2=gen2
fortscale.events.success.field.gen2=#AnyRow#
fortscale.events.success.value.gen2=#NotRelevant#
fortscale.events.updateOnly.gen2=false
fortscale.events.logusername.field.gen2=username
fortscale.events.username.field.gen2=username


# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.UserInfoUpdateSerdFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot


# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000

# Batch side for writing to output topic: Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.kafka.producer.batch.num.messages=1

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage user-last-activity (we're coping it to Mongo from time to time)
stores.user-mongo-update.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.user-mongo-update.changelog=kafka.user-mongo-update-changelog
stores.user-mongo-update.key.serde=string
stores.user-mongo-update.msg.serde=jsonmodel
stores.user-mongo-update.write.batch.size=25
stores.user-mongo-update.object.cache.size=100000
stores.user-mongo-update.container.cache.size.bytes=419430400
stores.user-mongo-update.container.write.buffer.size.bytes=102400
