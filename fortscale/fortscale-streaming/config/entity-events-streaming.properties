# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.shutdown.timeout.ms=300000
job.name=entity-events-streaming

# Task
task.class=fortscale.streaming.task.EntityEventsStreamTask

task.inputs=kafka.fortscale-aggr-feature-events-score,kafka.fortscale-aggregated-feature-p-event
# Every 5 minutes (5 * 60 * 1000 = 300,000 ms)
task.window.ms=300000

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-aggr-context.xml
fortscale.output.topic=fortscale-entity-event

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
serializers.registry.entityeventdata.class=fortscale.streaming.serialization.EntityEventDataSerdeFactory

# Metric report every 60 seconds to a kafka topic called metrics
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.bootstrap.servers=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms=10000
systems.kafka.producer.acks=1
#systems.kafka.producer.reconnect.backoff.ms=10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=1000

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

fortscale.entity.events.store.name=entity_events_store
stores.entity_events_store.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.entity_events_store.changelog=kafka.entity_events_store-changelog
stores.entity_events_store.changelog.replication.factor=1
stores.entity_events_store.key.serde=string
stores.entity_events_store.msg.serde=entityeventdata
# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.entity_events_store.write.batch.size=1000
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.entity_events_store.object.cache.size=5000
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.entity_events_store.container.cache.size.bytes=104857600
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk.
stores.entity_events_store.container.write.buffer.size.bytes=33554432

