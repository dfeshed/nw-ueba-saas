# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=user-last-activity-task

# Task
task.class=fortscale.streaming.task.enrichment.UserLastActivityTask
task.inputs=kafka.fortscale-normalized-tagged-event-vpn,kafka.fortscale-normalized-tagged-event-ssh,kafka.fortscale-normalized-tagged-event-login

# export the last-activity to mongodb every 15 minutes (15*60*1000=900000ms)
task.window.ms=900000

### Fortscale specific task config parameters
# Spring Context
fortscale.context=classpath*:META-INF/spring/streaming-context.xml
# Event fields
fortscale.timestamp.field=date_time_unix
fortscale.username.field=normalized_username
# Mapping between topic and data source
fortscale.data-source.input.topic.vpn=fortscale-normalized-tagged-event-vpn
fortscale.data-source.input.topic.ssh=fortscale-normalized-tagged-event-ssh
fortscale.data-source.input.topic.login=fortscale-normalized-tagged-event-login


# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor


# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000

# Batch side for writing to output topic: Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.kafka.producer.batch.num.messages=1

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage user-last-activity (we're coping it to Mongo from time to time)
stores.user-last-activity.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.user-last-activity.key.serde=string
stores.user-last-activity.msg.serde=json
stores.user-last-activity.write.batch.size=25
stores.user-last-activity.object.cache.size=300000
stores.user-last-activity.container.cache.size.bytes=419430400
stores.user-last-activity.container.write.buffer.size.bytes=102400