# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=vpn-geolocation-session-update-task

# Task
task.class=fortscale.streaming.task.enrichment.VpnEnrichTask
task.inputs=kafka.fortscale-vpn-ip-resolved,kafka.fortscale-amt-computer-tagged-clustered,kafka.fortscale-amt-source-ip-geolocated-source-ip

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-VpnEnrichTask-context.xml


#geolocation AMT for sourve_ip
fortscale.events.entry.name.amt__source_VpnEnrichTask=amt__source_VpnEnrichTask
fortscale.events.entry.amt__source_VpnEnrichTask.data.source=amt
fortscale.events.entry.amt__source_VpnEnrichTask.last.state=ComputerTaggingClusteringTask
fortscale.events.entry.amt__source_VpnEnrichTask.amtSourceIp.ip.field=impala.data.amt.table.field.source_ip
fortscale.events.entry.amt__source_VpnEnrichTask.country.field=impala.data.amt.table.field.src_country
fortscale.events.entry.amt__source_VpnEnrichTask.output.topic=fortscale-amt-source-ip-geolocated-source-ip
fortscale.events.entry.amt__source_VpnEnrichTask.partition.field=impala.data.amt.table.field.username
fortscale.events.entry.amt__source_VpnEnrichTask.username.field=impala.score.amt.table.field.username
fortscale.events.entry.amt__source_VpnEnrichTask.longtitude.field=longtitude
fortscale.events.entry.amt__source_VpnEnrichTask.latitude.field=latitude
fortscale.events.entry.amt__source_VpnEnrichTask.countryIsoCode.field=countryIsoCode
fortscale.events.entry.amt__source_VpnEnrichTask.region.field=region
fortscale.events.entry.amt__source_VpnEnrichTask.city.field=city
fortscale.events.entry.amt__source_VpnEnrichTask.isp.field=isp
fortscale.events.entry.amt__source_VpnEnrichTask.usageType.field=usageType


#geolocation AMT for target_ip
fortscale.events.entry.name.amt_dest_VpnEnrichTask=amt_dest_VpnEnrichTask
fortscale.events.entry.amt_dest_VpnEnrichTask.data.source=amt
fortscale.events.entry.amt_dest_VpnEnrichTask.last.state=ComputerTaggingClusteringTask
fortscale.events.entry.amt_dest_VpnEnrichTask.ip.field=impala.data.amt.table.field.target_ip
fortscale.events.entry.amt_dest_VpnEnrichTask.country.field=impala.data.amt.table.field.dst_country
fortscale.events.entry.amt_dest_VpnEnrichTask.output.topic=fortscale-amt-geolocated
fortscale.events.entry.amt_dest_VpnEnrichTask.partition.field=impala.data.amt.table.field.username
fortscale.events.entry.amt_dest_VpnEnrichTask.username.field=impala.score.amt.table.field.username
fortscale.events.entry.amt_dest_VpnEnrichTask.longtitude.field=longtitude
fortscale.events.entry.amt_dest_VpnEnrichTask.latitude.field=latitude
fortscale.events.entry.amt_dest_VpnEnrichTask.countryIsoCode.field=countryIsoCode
fortscale.events.entry.amt_dest_VpnEnrichTask.region.field=region
fortscale.events.entry.amt_dest_VpnEnrichTask.city.field=city
fortscale.events.entry.amt_dest_VpnEnrichTask.isp.field=isp
fortscale.events.entry.amt_dest_VpnEnrichTask.usageType.field=usageType





fortscale.events.amtSourceIp.doGeoLocation=true
fortscale.events.amtSourceIp.doDataBuckets=false
fortscale.events.amtSourceIp.doSessionUpdate=false

fortscale.events.amtTargetIp.doGeoLocation=true
fortscale.events.amtTargetIp.doDataBuckets=false
fortscale.events.amtTargetIp.doSessionUpdate=false




# VPN
fortscale.events.entry.name.vpn_VpnEnrichTask=vpn_VpnEnrichTask
fortscale.events.entry.vpn_VpnEnrichTask.data.source=vpn
fortscale.events.entry.vpn_VpnEnrichTask.last.state=IpResolvingStreamTask
fortscale.events.entry.vpn_VpnEnrichTask.output.topic=fortscale-vpn-geolocated-session-updated
fortscale.events.entry.vpn_VpnEnrichTask.partition.field=impala.data.vpn.table.field.username
fortscale.events.entry.vpn_VpnEnrichTask.doGeoLocation=true
fortscale.events.entry.vpn_VpnEnrichTask.doDataBuckets=true
fortscale.events.entry.vpn_VpnEnrichTask.doSessionUpdate=true


#geolocation fields:
fortscale.events.vpn.ip.field=impala.data.vpn.table.field.source_ip
fortscale.events.vpn.country.field=impala.data.vpn.table.field.country
fortscale.events.vpn.countryIsoCode.field=impala.data.vpn.table.field.countrycode
fortscale.events.vpn.region.field=impala.data.vpn.table.field.region
fortscale.events.vpn.city.field=impala.data.vpn.table.field.city
fortscale.events.vpn.isp.field=impala.data.vpn.table.field.isp
fortscale.events.vpn.usageType.field=impala.data.vpn.table.field.ipusage
fortscale.events.vpn.longtitude.field=longtitude
fortscale.events.vpn.latitude.field=latitude



#data buckets fields:
fortscale.events.vpn.totalbytes.field=impala.score.vpn.session.table.field.totalbytes
fortscale.events.vpn.readbytes.field=impala.score.vpn.session.table.field.readbytes
fortscale.events.vpn.duration.field=impala.score.vpn.session.table.field.duration
fortscale.events.vpn.databucket.field=impala.score.vpn.session.table.field.databucket

#session update fields:
fortscale.events.vpn.geoHoppingOpenSessionThresholdInHours=vpn.geohopping.open.session.threshold.in.hours
fortscale.events.vpn.geoHoppingCloseSessionThresholdInHours=vpn.geohopping.close.session.threshold.in.hours
fortscale.events.vpn.sessionid.field=sessionid
fortscale.events.vpn.runGeoHopping.field=run_geo_hopping_field
fortscale.events.vpn.addSessionData.field=vpn.sessionupdate.isAddSessionData
fortscale.events.vpn.resolveIp.field=true
fortscale.events.vpn.dropCloseEventWhenOpenMissing.field=true
fortscale.events.vpn.timeGapForResolveIpFrom=vpn.sessionupdate.resolveIPForCiscoASAFromInSec
fortscale.events.vpn.timeGapForResolveIpTo=vpn.sessionupdate.resolveIPForCiscoASAToInSec
fortscale.events.vpn.username.field=impala.score.vpn.table.field.username

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.key.serde=string
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=1000
systems.kafka.producer.partitioner.class=fortscale.utils.kafka.partitions.StringHashPartitioner

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka
