# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=vpn-enrich

# Task
task.class=fortscale.streaming.task.enrichment.VpnEnrichTask
task.inputs=kafka.fortscale-vpn-normalized-tagged-event

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-VpnEnrichTask-context.xml
fortscale.output.topic=fortscale-vpn-geolocated-session-updated
fortscale.events.vpn.partition.field=impala.data.vpn.table.field.username
fortscale.events.vpn.ip.field=ip_field
fortscale.events.vpn.country.field=country_field
fortscale.events.vpn.countryIsoCode.field=country_code_field
fortscale.events.vpn.region.field=region_field
fortscale.events.vpn.city.field=city_field
fortscale.events.vpn.isp.field=isp_field
fortscale.events.vpn.usageType.field=usage_type_field
fortscale.events.vpn.longtitude.field=longtitude_field
fortscale.events.vpn.latitude.field=latitude_field

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.PrevalanceModelSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=async
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=100
systems.kafka.producer.partitioner.class=fortscale.utils.kafka.partitions.StringHashPartitioner

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka
