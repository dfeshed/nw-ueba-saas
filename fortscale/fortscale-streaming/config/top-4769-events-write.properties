# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=top-4769-events-hdfs-write

# Task
task.class=fortscale.streaming.task.HDFSWriterStreamTask
task.inputs=kafka.fortscale-4769-tagging
# flush the hdfs writers every 30 minutes (30*60*1000=300000ms)
task.window.ms=1800000
#task.opts=-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-context.xml
fortscale.timestamp.field=date_time_unix
fortscale.username.field=normalized_username
fortscale.discriminator.fields=recordNumber
fortscale.fields=impala.score.ldapauth.table.fields
fortscale.separator=,
fortscale.hdfs.root=/user/cloudera/processeddata/authentication_top
fortscale.table.name=authenticationscores_top
fortscale.file.name=secData.csv
fortscale.partition.strategy=impala.score.ldapauth_top.table.partition.type
fortscale.split.strategy=fortscale.utils.hdfs.split.DailyFileSplitStrategy
# buffer no more than 1000 events before flushing to hdfs
fortscale.events.flush.threshold=1000
fortscale.filters=score
fortscale.filter.score.class=fortscale.streaming.filters.EventScoreFilter
fortscale.filter.score.field=eventscore
fortscale.filter.score.threshold=50


# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.PrevalanceModelSerdeFactory
serializers.registry.long.class=fortscale.streaming.serialization.LongSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
serializers.registry.timebarrier.class=fortscale.streaming.serialization.UserTimeBarrierModelSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor


# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=async
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=100

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.hdfs-write-authenticationscores_top.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.hdfs-write-authenticationscores_top.changelog=kafka.hdfs-write-authenticationscores_top-changelog
stores.hdfs-write-authenticationscores_top.key.serde=string
stores.hdfs-write-authenticationscores_top.msg.serde=timebarrier
# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.hdfs-write-authenticationscores_top.write.batch.size=25
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.hdfs-write-authenticationscores_top.object.cache.size=100
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.hdfs-write-authenticationscores_top.container.cache.size.bytes=2000
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk,
stores.hdfs-write-authenticationscores_top.container.write.buffer.size.bytes=1000

