#Esper beans and statements

# create variable for holding the current system timestamp
fortscale.esper.rule.name._0_1_createCurrentTimestampVariable=Create current timestamp variable
fortscale.esper.rule.statement._0_1_createCurrentTimestampVariable=create variable Long currentTimestamp = current_timestamp()
fortscale.esper.rule.auto-create._0_1_createCurrentTimestampVariable=true
fortscale.esper.rule.subscriberBean._0_1_createCurrentTimestampVariable=none

# update currentTimestamp variable with current system timestamp
fortscale.esper.rule.name._0_2_updateVariableWithCurrentTimestamp=Update variable with current timestamp every minute
fortscale.esper.rule.statement._0_2_updateVariableWithCurrentTimestamp=on pattern[every timer:interval(1 min)] set currentTimestamp = current_timestamp()
fortscale.esper.rule.auto-create._0_2_updateVariableWithCurrentTimestamp=true
fortscale.esper.rule.subscriberBean._0_2_updateVariableWithCurrentTimestamp=none

# create last event timestamp variable for holding the last event timestamp
fortscale.esper.rule.name._0_3_createLastEventTimestamp=Create lastEventTimestamp timestamp variable
fortscale.esper.rule.statement._0_3_createLastEventTimestamp=create variable Long lastEventTimestamp = 0
fortscale.esper.rule.auto-create._0_3_createLastEventTimestamp=true
fortscale.esper.rule.subscriberBean._0_3_createLastEventTimestamp=none

# update current_timestamp variable with current system timestamp
fortscale.esper.rule.name._0_4_updateVariableWithLastEventTimestamp=Update variable with last event timestamp when evidence arrives
fortscale.esper.rule.statement._0_4_updateVariableWithLastEventTimestamp=on Evidence as e set lastEventTimestamp = e.startDate
fortscale.esper.rule.auto-create._0_4_updateVariableWithLastEventTimestamp=true
fortscale.esper.rule.subscriberBean._0_4_updateVariableWithLastEventTimestamp=none

# update current_timestamp variable with current system timestamp
fortscale.esper.rule.name._0_5_updateVariableWithLastEventTimestamp=Update variable with last event timestamp when smart event arrives
fortscale.esper.rule.statement._0_5_updateVariableWithLastEventTimestamp=on EntityEvent as e set lastEventTimestamp = e.start_time_unix * 1000
fortscale.esper.rule.auto-create._0_5_updateVariableWithLastEventTimestamp=true
fortscale.esper.rule.subscriberBean._0_5_updateVariableWithLastEventTimestamp=none

# create variable for session
fortscale.esper.rule.name._0_6_createSessionVariable=Create session variable
fortscale.esper.rule.statement._0_6_createSessionVariable=create variable SessionTimeUpdate sessionTimeUpdate##sessionId##
fortscale.esper.rule.auto-create._0_6_createSessionVariable=false
fortscale.esper.rule.subscriberBean._0_6_createSessionVariable=destroyVariableCreateStatementSubscriber

# update session variable for each new session
fortscale.esper.rule.name._0_7_updateSessionVariable=Update session variable
fortscale.esper.rule.statement._0_7_updateSessionVariable=on SessionTimeUpdate(sessionId = '##sessionId##') as su set sessionTimeUpdate##sessionId## = su
fortscale.esper.rule.auto-create._0_7_updateSessionVariable=false
fortscale.esper.rule.subscriberBean._0_7_updateSessionVariable=destroyVariableUpdateStatementSubscriber

## create hourly timestamp interval constant variable
## create daily timestamp interval constant variable ( {hour - 1 second} in millis = 60*60*1000-1000)
fortscale.esper.rule.name._0_8_createHourlyTimeframeInterval=Create hourlyTimeframeInterval constant variable
fortscale.esper.rule.statement._0_8_createHourlyTimeframeInterval=create variable Long hourlyTimeframeInterval = 3599000
fortscale.esper.rule.auto-create._0_8_createHourlyTimeframeInterval=true
fortscale.esper.rule.subscriberBean._0_8_createHourlyTimeframeInterval=none

## create daily timestamp interval constant variable ( {day - 1 second} in millis  = 24*60*60*1000-1000)
fortscale.esper.rule.name._0_9_createDailyTimeframeInterval=Create dailyTimeframeInterval constant variable
fortscale.esper.rule.statement._0_9_createDailyTimeframeInterval=create variable Long dailyTimeframeInterval = 86399000
fortscale.esper.rule.auto-create._0_9_createDailyTimeframeInterval=true
fortscale.esper.rule.subscriberBean._0_9_createDailyTimeframeInterval=none


#######------------Create Enriched elements (Evidence, SMART)--------------######

#Insert notification events into EnrichedFortscaleEvent stream
fortscale.esper.rule.name._1_0_enrichedEvidence=Enriched evidence with time frames
fortscale.esper.rule.statement._1_0_enrichedEvidence=insert into EnrichedFortscaleEvent select id, entityType, entityName, score, evidenceType, hourStartTimestamp(startDate) as hourlyStartDate, dayStartTimestamp(startDate) as dailyStartDate, startDate , endDate , aggEvent() as aggregatedFeatureEvents, anomalyTypeFieldName, supportingInformation from Evidence where cast(Evidence.evidenceType, string) = 'Notification'
fortscale.esper.rule.auto-create._1_0_enrichedEvidence=true
fortscale.esper.rule.subscriberBean._1_0_enrichedEvidence=none

#Join SMART events into the EnrichedFortscaleEvent stream
fortscale.esper.rule.name._1_1_SmartToEvidencesStream=Smart Events to Join Evidences Stream
fortscale.esper.rule.statement._1_1_SmartToEvidencesStream=insert into EnrichedFortscaleEvent select '' as id, EntityType.User as entityType, extractNormalizedUsernameFromContextId(contextId) as entityName, cast(score, int) as score, EvidenceType.Smart as evidenceType, hourStartTimestamp(start_time_unix * 1000) as hourlyStartDate, dayStartTimestamp(start_time_unix * 1000) as dailyStartDate, (start_time_unix * 1000) as startDate, (end_time_unix * 1000) as endDate, aggregated_feature_events as aggregatedFeatureEvents, entity_event_name as anomalyTypeFieldName, null as supportingInformation from EntityEvent where cast(score, int) >= 50
fortscale.esper.rule.auto-create._1_1_SmartToEvidencesStream=true
fortscale.esper.rule.subscriberBean._1_1_SmartToEvidencesStream=none


#######---------------Contexts--------------------------#####

# create context for hourly activity for entity - will used for all hourly rules
fortscale.esper.rule.name._1_2_createHourlyContext=Create hourly context for entity
fortscale.esper.rule.statement._1_2_createHourlyContext=create context HourlyTimeFrame partition by entityType,entityName,hourlyStartDate from EnrichedFortscaleEvent
fortscale.esper.rule.auto-create._1_2_createHourlyContext=true
fortscale.esper.rule.subscriberBean._1_2_createHourlyContext=none

# create context for daily activity for entity - will used for all daily rules
fortscale.esper.rule.name._1_3_createDailyContext=Create daily context for entity
fortscale.esper.rule.statement._1_3_createDailyContext=create context DailyTimeFrame partition by entityType,entityName,dailyStartDate from EnrichedFortscaleEvent
fortscale.esper.rule.auto-create._1_3_createDailyContext=true
fortscale.esper.rule.subscriberBean._1_3_createDailyContext=none


# Definition o hourly/daily context queries
#====================================================
#Hourly/Daily expiry expressions for batch-based windows:
# 1. No events arrived in the last 90 minutes
# OR
# 2. The last event timestamp exceeds 90 minutes from the start hour of the window. For example, 10 events arrived between 7:00-8:00. The window will be expired
# when we receive event with timestamp > 8:30.
#
# The distinction between hourly entity events and daily entity events is based on a timeframe calculation (timeframe = end time - start time). This way we guarantee that the daily/hourly context
# will contain only the corresponding entity events in the stream, in addition to the notifications.
#
fortscale.esper.rule.name._1_4_suspiciousHourByCount=Suspicious Hourly Window
fortscale.esper.rule.statement._1_4_suspiciousHourByCount=context HourlyTimeFrame select AlertTimeframe.Hourly as timeframe, entityType,entityName, hourlyStartDate as startDate,hourEndTimestamp(hourlyStartDate) as endDate, window(*) as eventList, avg(score) as score  from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))) where ((endDate - startDate = hourlyTimeframeInterval) OR cast(evidenceType, string) = 'Notification') having count(*) > 0
#---Workaround for automation--
# On Automation tests the order of entity events is not sorted between different types, hence as a workaround the expiry is based only on the actual time elapsed after the last event. I.e. 45 minutes after the last processed entity event
# all windows will be expired and the alert subscriber will be triggered for all users.
#fortscale.esper.rule.statement._1_4_suspiciousHourByCount=context HourlyTimeFrame select AlertTimeframe.Hourly as timeframe, entityType,entityName, hourlyStartDate as startDate,hourEndTimestamp(hourlyStartDate) as endDate, window(*) as eventList, avg(score) as score  from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(45*60*1000) < currentTimestamp) where ((endDate - startDate = hourlyTimeframeInterval) OR cast(evidenceType, string) = 'Notification') having count(*) > 0
fortscale.esper.rule.auto-create._1_4_suspiciousHourByCount=true
fortscale.esper.rule.subscriberBean._1_4_suspiciousHourByCount=alertCreationSubscriber

fortscale.esper.rule.name._1_5_suspiciousDayByCount=Suspicious Daily Window
fortscale.esper.rule.statement._1_5_suspiciousDayByCount=context DailyTimeFrame select AlertTimeframe.Daily as timeframe, entityType,entityName, dailyStartDate as startDate,dayEndTimestamp(dailyStartDate) as endDate, window(*) as eventList, avg(score) as score from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.dailyStartDate is not null and lastEventTimestamp > 30*60*1000+dayEndTimestamp(oldest_event.dailyStartDate))) where ((endDate - startDate = dailyTimeframeInterval) OR cast(evidenceType, string) = 'Notification') having count(*) > 0
#---Workaround for automation--
# On Automation tests the order of entity events is not sorted between different types, hence as a workaround the expiry is based only on the actual time elapsed after the last event. I.e. 45 minutes after the last processed entity event
# all windows will be expired and the alert subscriber will be triggered for all users.
#fortscale.esper.rule.statement._1_5_suspiciousDayByCount=context DailyTimeFrame select AlertTimeframe.Daily as timeframe, entityType,entityName, dailyStartDate as startDate,dayEndTimestamp(dailyStartDate) as endDate, window(*) as eventList, avg(score) as score from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(45*60*1000) < currentTimestamp) where ((endDate - startDate = dailyTimeframeInterval) OR cast(evidenceType, string) = 'Notification') having count(*) > 0
fortscale.esper.rule.auto-create._1_5_suspiciousDayByCount=true
fortscale.esper.rule.subscriberBean._1_5_suspiciousDayByCount=alertCreationSubscriber
