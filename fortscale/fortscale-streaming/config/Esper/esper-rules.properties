#Esper beans and statements

# create variable for holding the current system timestamp
fortscale.esper.rule.name._0_1_createCurrentTimestampVariable=Create current timestamp variable
fortscale.esper.rule.statement._0_1_createCurrentTimestampVariable=create variable Long currentTimestamp = current_timestamp()
fortscale.esper.rule.auto-create._0_1_createCurrentTimestampVariable=true
fortscale.esper.rule.subscriberBean._0_1_createCurrentTimestampVariable=none

# update currentTimestamp variable with current system timestamp
fortscale.esper.rule.name._0_2_updateVariableWithCurrentTimestamp=Update variable with current timestamp every minute
fortscale.esper.rule.statement._0_2_updateVariableWithCurrentTimestamp=on pattern[every timer:interval(1 min)] set currentTimestamp = current_timestamp()
fortscale.esper.rule.auto-create._0_2_updateVariableWithCurrentTimestamp=true
fortscale.esper.rule.subscriberBean._0_2_updateVariableWithCurrentTimestamp=none

# create variable for holding the last event timestamp
fortscale.esper.rule.name._0_3_createCurrentTimestampVariable=Create lastEventTimestamp timestamp variable
fortscale.esper.rule.statement._0_3_createCurrentTimestampVariable=create variable Long lastEventTimestamp = 0
fortscale.esper.rule.auto-create._0_3_createCurrentTimestampVariable=true
fortscale.esper.rule.subscriberBean._0_3_createCurrentTimestampVariable=none

# update current_timestamp variable with current system timestamp
fortscale.esper.rule.name._0_4_updateVariableWithLastEventTimestamp=Update variable with last event timestamp
fortscale.esper.rule.statement._0_4_updateVariableWithLastEventTimestamp=on Evidence as e set lastEventTimestamp = e.startDate
fortscale.esper.rule.auto-create._0_4_updateVariableWithLastEventTimestamp=true
fortscale.esper.rule.subscriberBean._0_4_updateVariableWithLastEventTimestamp=none

# create variable for session
fortscale.esper.rule.name._0_5_createSessionVariable=Create session variable
fortscale.esper.rule.statement._0_5_createSessionVariable=create variable SessionTimeUpdate sessionTimeUpdate##sessionId##
fortscale.esper.rule.auto-create._0_5_createSessionVariable=false
fortscale.esper.rule.subscriberBean._0_5_createSessionVariable=destroyVariableCreateStatementSubscriber

# update session variable for each new session
fortscale.esper.rule.name._0_6_updateSessionVariable=Update session variable
fortscale.esper.rule.statement._0_6_updateSessionVariable=on SessionTimeUpdate(sessionId = '##sessionId##') as su set sessionTimeUpdate##sessionId## = su
fortscale.esper.rule.auto-create._0_6_updateSessionVariable=false
fortscale.esper.rule.subscriberBean._0_6_updateSessionVariable=destroyVariableUpdateStatementSubscriber


#######------------Create Enriched elements (Evidence, SMART)--------------######

# compute for each Evidence the related hourly,daily frame
# when new time period will be needed in the future, need to add them first in here
fortscale.esper.rule.name._1_0_enrichedEvidence=Enriched evidence with time frames
fortscale.esper.rule.statement._1_0_enrichedEvidence=insert into EnrichedFortscaleEvent select id, entityType, entityName, score, evidenceType, hourStartTimestamp(startDate) as hourlyStartDate, dayStartTimestamp(startDate) as dailyStartDate, startDate , endDate , aggEvent() as aggregatedFeatureEvents, anomalyTypeFieldName, supportingInformation from Evidence
fortscale.esper.rule.auto-create._1_0_enrichedEvidence=true
fortscale.esper.rule.subscriberBean._1_0_enrichedEvidence=none


# create enriched entity event, to include hourlystartdate and entity type
fortscale.esper.rule.name._1_1_enrichedEntityEvent=Enriched smart event with time frames
fortscale.esper.rule.statement._1_1_enrichedEntityEvent=insert into EnrichedEntityEvent select EntityType.User as entityType, extractNormalizedUsernameFromContextId(contextId) as entityName, score, hourStartTimestamp(start_time_unix * 1000) as hourlyStartDate, dayStartTimestamp(start_time_unix * 1000) as dailyStartDate, aggregated_feature_events, start_time_unix, end_time_unix, entity_event_name, entity_event_type, contextId, 'smart' as anomalyTypeFieldName from EntityEvent
fortscale.esper.rule.auto-create._1_1_enrichedEntityEvent=true
fortscale.esper.rule.subscriberBean._1_1_enrichedEntityEvent=none

#Join SMART events into the EnrichedFortscaleEvent stream
fortscale.esper.rule.name._3_1_SmartToEvidencesStream=Smart Events to Join Evidences Stream
fortscale.esper.rule.statement._3_1_SmartToEvidencesStream=insert into EnrichedFortscaleEvent select '' as id, SmartEvent.hourlyStartDate as hourlyStartDate, SmartEvent.dailyStartDate as dailyStartDate, start_time_unix as eventTime, SmartEvent.entityType as entityType, SmartEvent.entityName as entityName, cast(SmartEvent.score, int) as score, EvidenceType.Smart as evidenceType, SmartEvent.aggregated_feature_events as aggregatedFeatureEvents, anomalyTypeFieldName from EnrichedEntityEvent(score >= 50) as SmartEvent
fortscale.esper.rule.auto-create._3_1_SmartToEvidencesStream=true
fortscale.esper.rule.subscriberBean._3_1_SmartToEvidencesStream=none


#######---------------Contexts--------------------------#####

# create context for hourly activity for entity - will used for all hourly rules
fortscale.esper.rule.name._1_2_createHourlyContext=Create hourly context for entity
fortscale.esper.rule.statement._1_2_createHourlyContext=create context HourlyTimeFrame partition by entityType,entityName,hourlyStartDate from EnrichedFortscaleEvent
fortscale.esper.rule.auto-create._1_2_createHourlyContext=true
fortscale.esper.rule.subscriberBean._1_2_createHourlyContext=none

# create context for daily activity for entity - will used for all daily rules
fortscale.esper.rule.name._1_3_createDailyContext=Create daily context for entity
fortscale.esper.rule.statement._1_3_createDailyContext=create context DailyTimeFrame partition by entityType,entityName,dailyStartDate from EnrichedFortscaleEvent
fortscale.esper.rule.auto-create._1_3_createDailyContext=true
fortscale.esper.rule.subscriberBean._1_3_createDailyContext=none

# create context for hourly activity for entity, with smart (joker) events and notification

#######-------------Rules that create alerts------------#######

#windowed alerts
#basic Suspicious hourly activity Alert EPL (evidence count > 1 per hour)
fortscale.esper.rule.name._1_4_suspiciousHourByCount=Suspicious Hourly Window
fortscale.esper.rule.statement._1_4_suspiciousHourByCount=context HourlyTimeFrame select 'Suspicious hourly activity' as title, entityType,entityName, hourlyStartDate as startDate,hourEndTimestamp(hourlyStartDate) as endDate, window(*) as idList, avg(score) as score  from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(10*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))) having count(*) > 0
fortscale.esper.rule.auto-create._1_4_suspiciousHourByCount=true
fortscale.esper.rule.subscriberBean._1_4_suspiciousHourByCount=alertCreationSubscriber

#basic Suspicious daily activity Alert EPL (evidence count > 1 per day)
fortscale.esper.rule.name._1_5_suspiciousDayByCount=Suspicious Daily Window
fortscale.esper.rule.statement._1_5_suspiciousDayByCount=context DailyTimeFrame select 'Suspicious daily activity' as title, entityType,entityName, dailyStartDate as startDate,dayEndTimestamp(dailyStartDate) as endDate, window(*) as idList, avg(score) as score from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(10*60*1000) < currentTimestamp or (oldest_event.dailyStartDate is not null and lastEventTimestamp > 30*60*1000+dayEndTimestamp(oldest_event.dailyStartDate))) having count(*) > 0
fortscale.esper.rule.auto-create._1_5_suspiciousDayByCount=true
fortscale.esper.rule.subscriberBean._1_5_suspiciousDayByCount=alertCreationSubscriber



############### Old rules

#basic Suspicious hourly activity Alert EPL (evidence count > 3 per hour)
#fortscale.esper.rule.name._2_1_suspiciousHourByCount=Suspicious Hourly Window
#fortscale.esper.rule.statement._2_1_suspiciousHourByCount=context HourlyTimeFrame select 'Suspicious hourly activity' as title, entityType,entityName, hourlyStartDate as startDate,hourEndTimestamp(hourlyStartDate) as endDate, window(id) as idList, avg(score) as score  from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(10*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))) having count(*) > 3
#fortscale.esper.rule.auto-create._2_1_suspiciousHourByCount=true
#fortscale.esper.rule.subscriberBean._2_1_suspiciousHourByCount=alertCreationSubscriber

#basic Suspicious hourly activity Alert EPL (evidence count > 3 per hour and max score > 80.0)
#fortscale.esper.rule.name._2_1_2_suspiciousHourByCount=Suspicious Hourly Window
#fortscale.esper.rule.statement._2_1_2_suspiciousHourByCount=context HourlyTimeFrame select 'Suspicious hourly high score activity' as title, entityType,entityName, hourlyStartDate as startDate,hourEndTimestamp(hourlyStartDate) as endDate, window(id) as idList, cast(max(score),double) as score from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(10*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))) having count(*) > 3 and max(score) > 80.0
#fortscale.esper.rule.auto-create._2_1_2_suspiciousHourByCount=true
#fortscale.esper.rule.subscriberBean._2_1_2_suspiciousHourByCount=alertCreationSubscriber

#basic Suspicious daily activity Alert EPL (evidence count > 3 per day)
#fortscale.esper.rule.name._2_1_1_suspiciousDayByCount=Suspicious Daily Window
#fortscale.esper.rule.statement._2_1_1_suspiciousDayByCount=context DailyTimeFrame select 'Suspicious daily activity' as title, entityType,entityName, dailyStartDate as startDate,dayEndTimestamp(dailyStartDate) as endDate, window(id) as idList, avg(score) as score from EnrichedFortscaleEvent.win:expr_batch(oldest_timestamp+(10*60*1000) < currentTimestamp or (oldest_event.dailyStartDate is not null and lastEventTimestamp > 30*60*1000+dayEndTimestamp(oldest_event.dailyStartDate))) having count(*) > 3
#fortscale.esper.rule.auto-create._2_1_1_suspiciousDayByCount=true
#fortscale.esper.rule.subscriberBean._2_1_1_suspiciousDayByCount=alertCreationSubscriber


#basic Suspicious session activity Alert EPL (evidence count > 3)
#fortscale.esper.rule.name._2_2_suspiciousSessionByCount=Suspicious Session Window
#fortscale.esper.rule.statement._2_2_suspiciousSessionByCount=select distinct 'Suspicious session activity' as title, entityType, entityName, sessionTimeUpdate##sessionId##.startTimestamp as startDate, sessionTimeUpdate##sessionId##.endTimestamp as endDate, window(id) as idList, avg(score) as score from Evidence(entityType = sessionTimeUpdate##sessionId##.entityType and entityName = sessionTimeUpdate##sessionId##.entityName and startDate >= sessionTimeUpdate##sessionId##.startTimestamp and startDate <= sessionTimeUpdate##sessionId##.endTimestamp).win:expr_batch(oldest_timestamp+(sessionTimeUpdate##sessionId##.endTimestamp-sessionTimeUpdate##sessionId##.startTimestamp) < currentTimestamp or lastEventTimestamp > sessionTimeUpdate##sessionId##.endTimestamp) where entityType = sessionTimeUpdate##sessionId##.entityType and entityName = sessionTimeUpdate##sessionId##.entityName and startDate >= sessionTimeUpdate##sessionId##.startTimestamp and startDate <= sessionTimeUpdate##sessionId##.endTimestamp group by entityType, entityName having count(*) > 3
#fortscale.esper.rule.auto-create._2_2_suspiciousSessionByCount=false
#fortscale.esper.rule.subscriberBean._2_2_suspiciousSessionByCount=singleTriggerAlertCreationSubscriber

#################################################################################################################

#Suspicious activity Alert EPL (according to Joker Evidence and the existent of tagging without Notification)
#group Joker evidence according to contextId.
#Join it with the tags for which also group according to entity.
#filter based on missing notification
#set the severity according to score: 50/65/75/90 - Low/ Medium/ High/ Critical respectively
#fortscale.esper.rule.name._2_3_SmartEventWithSensitiveAccountWithoutNotification=Suspicious Activity For Sensitive Account Without Notification
#fortscale.esper.rule.statement._2_3_SmartEventWithSensitiveAccountWithoutNotification=select case when SmartEvent.entity_event_name = 'normalized_username_hourly' and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) ) then 'Suspicious Hourly Privileged Account Activity' when SmartEvent.entity_event_name = 'normalized_username_daily' and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) ) then 'Suspicious Daily Privileged Account Activity' when SmartEvent.entity_event_name = 'normalized_username_hourly' then 'Suspicious Hourly User Activity' when SmartEvent.entity_event_name = 'normalized_username_daily' then 'Suspicious Daily User Activity' end as title, case when (SmartEvent.score in [50:65) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Low' when (SmartEvent.score in [50:70) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Low' when (SmartEvent.score in [65:75) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Medium' when (SmartEvent.score in [70:80) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Medium' when (SmartEvent.score in [75:90) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'High' when (SmartEvent.score in [80:95) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'High' when (SmartEvent.score >= 90 and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Critical' when (SmartEvent.score >= 95 and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Critical' end as severity, Tags.entityType as entityType, Tags.entityName as entityName, aggregated_feature_events, start_time_unix, end_time_unix, SmartEvent.score * 1.0 as score, Tags.tags as tags from EnrichedEntityEvent(score >= 50).std:groupwin(entityName,entityType).std:lastevent() as SmartEvent inner join EntityTags.std:groupwin(entityType,entityName).std:lastevent() as Tags  on SmartEvent.entityName = Tags.entityName and SmartEvent.entityType = Tags.entityType  where SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName not in (select entityType.toString() || '-' ||entityName from EnrichedFortscaleEvent(evidenceType = EvidenceType.Notification).win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))).std:lastevent())
#fortscale.esper.rule.auto-create._2_3_SmartEventWithSensitiveAccountWithoutNotification=true
#fortscale.esper.rule.subscriberBean._2_3_SmartEventWithSensitiveAccountWithoutNotification=smartAlertCreationSubscriber


#Suspicious activity Alert EPL (according to Joker Evidence and the existent of tagging and Notification)
#group Joker evidence according to contextId.
#Join it with the tags for which also group according to entity.
#filter based on missing notification
#set the severity according to score: 50/65/75/90 - Low/ Medium/ High/ Critical respectively
#fortscale.esper.rule.name._2_4_SmartEventWithSensitiveAccountWithNotification=Suspicious Activity For Sensitive Account With Notification
#fortscale.esper.rule.statement._2_4_SmartEventWithSensitiveAccountWithNotification=select case when SmartEvent.entity_event_name = 'normalized_username_hourly' and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) ) then 'Suspicious Hourly Privileged Account Activity' when SmartEvent.entity_event_name = 'normalized_username_daily' and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) ) then 'Suspicious Daily Privileged Account Activity' when SmartEvent.entity_event_name = 'normalized_username_hourly' then 'Suspicious Hourly User Activity' when SmartEvent.entity_event_name = 'normalized_username_daily' then 'Suspicious Daily User Activity' end as title, case when (SmartEvent.score in [50:60) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Low' when (SmartEvent.score in [50:60) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Low' when (SmartEvent.score in [60:70) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Medium' when (SmartEvent.score in [60:70) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Medium' when (SmartEvent.score in [70:85) and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'High' when (SmartEvent.score in [70:85) and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'High' when (SmartEvent.score >= 85 and ('admin' = any(tags) or 'executive' = any(tags) or 'service' = any(tags) )) then 'Critical' when (SmartEvent.score >= 85 and ('admin' <> any(tags) and 'executive' <> any(tags) and 'service' <> any(tags) )) then 'Critical' end as severity, Tags.entityType as entityType, Tags.entityName as entityName, aggregated_feature_events, start_time_unix, end_time_unix, SmartEvent.score * 1.0 as score, Tags.tags as tags from EnrichedEntityEvent(score >= 50).std:groupwin(entityName,entityType).std:lastevent() as SmartEvent inner join EntityTags.std:groupwin(entityType,entityName).std:lastevent() as Tags  on SmartEvent.entityName = Tags.entityName and SmartEvent.entityType = Tags.entityType  where SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName  in (select entityType.toString() || '-' ||entityName from EnrichedFortscaleEvent(evidenceType = EvidenceType.Notification).win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))).std:lastevent())
#fortscale.esper.rule.auto-create._2_4_SmartEventWithSensitiveAccountWithNotification=true
#fortscale.esper.rule.subscriberBean._2_4_SmartEventWithSensitiveAccountWithNotification=smartAlertCreationSubscriber




#Suspicious activity Alert EPL (according to Joker Evidence and the non existent of tagging and notification)
#set the severity according to score: 50/70/85/95 - Low/ Medium/ High/ Critical respectively
#fortscale.esper.rule.name._2_5_SmartEventWithNormalAccountWithoutNotification=Suspicious Activity For User Account Without Notification
#fortscale.esper.rule.statement._2_5_SmartEventWithNormalAccountWithoutNotification=select case when SmartEvent.entity_event_name = 'normalized_username_hourly' then 'Suspicious Hourly User Activity' when  SmartEvent.entity_event_name = 'normalized_username_daily' then 'Suspicious Daily User Activity' end as title,case when (SmartEvent.score in [50:70)) then 'Low' when (SmartEvent.score in [70:80)) then 'Medium' when (SmartEvent.score in [80:95)) then 'High' when (SmartEvent.score >= 95 ) then 'Critical' end as severity , SmartEvent.entityType as entityType, SmartEvent.entityName as entityName, aggregated_feature_events, start_time_unix, end_time_unix, SmartEvent.score * 1.0 as score from EnrichedEntityEvent(score >= 50).std:groupwin(entityName,entityType).std:lastevent() as SmartEvent where SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName not in (select entityType.toString() || '-' ||entityName from EntityTags.std:groupwin(entityType,entityName).std:lastevent()) and SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName  not in (select entityType.toString() || '-' ||entityName from EnrichedFortscaleEvent(evidenceType = EvidenceType.Notification).win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))).std:lastevent())
#fortscale.esper.rule.auto-create._2_5_SmartEventWithNormalAccountWithoutNotification=true
#fortscale.esper.rule.subscriberBean._2_5_SmartEventWithNormalAccountWithoutNotification=smartAlertCreationSubscriber



#Suspicious activity Alert EPL (according to Joker Evidences and notification and the non existent of tagging )
#set the severity according to score: 50/70/85/95 - Low/ Medium/ High/ Critical respectively
#fortscale.esper.rule.name._2_6_SmartEventWithNormalAccountWithNotification=Suspicious Activity For User Account With Notification
#fortscale.esper.rule.statement._2_6_SmartEventWithNormalAccountWithNotification=select case when SmartEvent.entity_event_name = 'normalized_username_hourly' then 'Suspicious Hourly User Activity' when  SmartEvent.entity_event_name = 'normalized_username_daily' then 'Suspicious Daily User Activity' end as title,case when (SmartEvent.score in [50:60)) then 'Low' when (SmartEvent.score in [60:70)) then 'Medium' when (SmartEvent.score in [70:85)) then 'High' when (SmartEvent.score >= 85 ) then 'Critical' end as severity , SmartEvent.entityType as entityType, SmartEvent.entityName as entityName, aggregated_feature_events, start_time_unix, end_time_unix, SmartEvent.score * 1.0 as score from EnrichedEntityEvent(score >= 50).std:groupwin(entityName,entityType).std:lastevent() as SmartEvent where SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName not in (select entityType.toString() || '-' ||entityName from EntityTags.std:groupwin(entityType,entityName).std:lastevent()) and SmartEvent.entityType.toString() || '-' ||SmartEvent.entityName   in (select entityType.toString() || '-' ||entityName from EnrichedFortscaleEvent(evidenceType = EvidenceType.Notification).win:expr_batch(oldest_timestamp+(60*60*1000+30*60*1000) < currentTimestamp or (oldest_event.hourlyStartDate is not null and lastEventTimestamp > 30*60*1000+hourEndTimestamp(oldest_event.hourlyStartDate))).std:lastevent())
#fortscale.esper.rule.auto-create._2_6_SmartEventWithNormalAccountWithNotification=true
#fortscale.esper.rule.subscriberBean._2_6_SmartEventWithNormalAccountWithNotification=smartAlertCreationSubscriber


