# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.shutdown.timeout.ms=300000
job.name=amtsessions-prevalence-stats

# Task
task.class=fortscale.streaming.task.AMTSessionsModelStreamTask
task.inputs=kafka.fortscale-amt-sessionized
# Export the state to mongodb every 4 hours (4 * 60 * 60 * 1000 = 14,400,000 ms)
task.window.ms=14400000
#task.opts=-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-context.xml
fortscale.username.field=username
fortscale.timestamp.field=date_time_unix
fortscale.discriminator.fields=
fortscale.store.name=amtsessions-prevalence-stats
fortscale.model.name=amtsessions

fortscale.source.type=amt
fortscale.entity.type=session
fortscale.timestamp.field=date_time_unix
fortscale.discriminator.fields=
fortscale.store.name=amtsessions-prevalence-stats
fortscale.models.names.order=amtsessionsuser
fortscale.model.amtsessionsuser.context.fieldname=username

# regex pattern and replacement used for normalizing amt_host values
# replacement is empty since we want to clear the numbers from the end of server names
fortscale.host.normalization.pattern=[0-9]+(?=(.|$))
fortscale.host.normalization.replacement=
fortscale.sourceIp.inCase.EmptyHost=true

#comment calculating the normalized failed action cause we currently don't need calculating the score for this field
#fortscale.fields.normalize.list={"normalizeFields":[{"minimalValue":10,"originalFieldName":"distinct_yid_count","normalizedFieldName":"normalized_distinct_yid_count"},{"minimalValue":10,"originalFieldName":"sensitive_action_count","normalizedFieldName":"sensitive_action_count"},{"minimalValue":10,"originalFieldName":"failed_action_count","normalizedFieldName":"failed_action_count"}]}
fortscale.fields.normalize.list={"normalizeFields":[{"durationAdditionInMin":240,"originalFieldName":"distinct_yid_count","normalizedFieldName":"normalized_distinct_yid_count"},{"durationAdditionInMin":240,"originalFieldName":"sensitive_action_count","normalizedFieldName":"normalized_sensitive_action_count"}]}
fortscale.fields.duration.model=fortscale.streaming.model.prevalance.field.ContinuousValuesFieldModel
fortscale.fields.duration.output=duration_score
fortscale.fields.duration.continuous.model.round.number=0.01
fortscale.fields.duration.continuous.model.a1=1500
fortscale.fields.duration.continuous.model.a2=499999
fortscale.fields.duration.continuous.model.largest.p.value=0.001
fortscale.fields.duration.continuous.model.toward.zero.a1=1500
fortscale.fields.duration.continuous.model.toward.zero.a2=499999
fortscale.fields.duration.continuous.model.toward.zero.largest.p.value=0.001
fortscale.fields.inv_avg_time_in_yid.model=fortscale.streaming.model.prevalance.field.ContinuousValuesFieldModel
fortscale.fields.inv_avg_time_in_yid.output=avg_time_in_yid_score
fortscale.fields.inv_avg_time_in_yid.continuous.model.small.value=false
fortscale.fields.inv_avg_time_in_yid.continuous.model.round.number=0.01
fortscale.fields.inv_avg_time_in_yid.continuous.model.a1=1500
fortscale.fields.inv_avg_time_in_yid.continuous.model.a2=499999
fortscale.fields.inv_avg_time_in_yid.continuous.model.largest.p.value=0.001
fortscale.fields.inv_avg_time_in_yid.booster=fortscale.streaming.model.prevalance.amt.SmallValuesScoreReducer
fortscale.fields.inv_avg_time_in_yid.small.values.score.reducer.config={"smallValuesScoreReducerConfigList":[{"reducingFieldName":"normalized_distinct_yid_count","reducingFactor":0.1,"maxValueForFullyReduce":0.5,"minValueForNotReduce":1.5}]}
fortscale.fields.normalized_distinct_yid_count.model=fortscale.streaming.model.prevalance.field.ContinuousValuesFieldModel
fortscale.fields.normalized_distinct_yid_count.output=distinct_yid_count_score
fortscale.fields.normalized_distinct_yid_count.continuous.model.small.value=false
fortscale.fields.normalized_distinct_yid_count.continuous.model.round.number=0.01
fortscale.fields.normalized_distinct_yid_count.continuous.model.a1=1500
fortscale.fields.normalized_distinct_yid_count.continuous.model.a2=499999
fortscale.fields.normalized_distinct_yid_count.continuous.model.largest.p.value=0.001
fortscale.fields.normalized_distinct_yid_count.booster=fortscale.streaming.model.prevalance.amt.SmallValuesScoreReducer
fortscale.fields.normalized_distinct_yid_count.small.values.score.reducer.config={"smallValuesScoreReducerConfigList":[{"reducingFieldName":"duration","reducingFactor":0.9,"maxValueForFullyReduce":0.5,"minValueForNotReduce":1.5}]}
fortscale.fields.normalized_sensitive_action_count.model=fortscale.streaming.model.prevalance.field.ContinuousValuesFieldModel
fortscale.fields.normalized_sensitive_action_count.output=sensitive_action_count_score
fortscale.fields.normalized_sensitive_action_count.continuous.model.small.value=false
fortscale.fields.normalized_sensitive_action_count.continuous.model.round.number=0.01
fortscale.fields.normalized_sensitive_action_count.continuous.model.a1=1500
fortscale.fields.normalized_sensitive_action_count.continuous.model.a2=499999
fortscale.fields.normalized_sensitive_action_count.continuous.model.largest.p.value=0.001
fortscale.fields.normalized_sensitive_action_count.booster=fortscale.streaming.model.prevalance.amt.SmallValuesScoreReducer
fortscale.fields.normalized_sensitive_action_count.small.values.score.reducer.config={"smallValuesScoreReducerConfigList":[{"reducingFieldName":"duration","reducingFactor":0.9,"maxValueForFullyReduce":0.5,"minValueForNotReduce":1.5},{"reducingFieldName":"sensitive_action_count","reducingFactor":0.25,"maxValueForFullyReduce":1,"minValueForNotReduce":4}]}

#comment calculating the score for failed action
#fortscale.fields.normalized_failed_action_count.model=fortscale.streaming.model.prevalance.field.ContinuousValuesFieldModel
#fortscale.fields.normalized_failed_action_count.output=failed_action_count_score
#fortscale.fields.normalized_failed_action_count.continuous.model.small.value=false
#fortscale.fields.normalized_failed_action_count.continuous.model.round.number=1

# normalized_amt_host is the hostname with the regular expression replacement defined above (without number)
fortscale.fields.normalized_amt_host.model=fortscale.streaming.model.prevalance.field.StringCaseInsensitiveValuesCalibrationModel
fortscale.fields.normalized_amt_host.output=amt_host_score

fortscale.fields.start_time_epoch.model=fortscale.streaming.model.prevalance.field.DailyTimeModel
fortscale.fields.start_time_epoch.output=start_time_score
fortscale.fields.start_time_epoch.should.affect.event.score=false

fortscale.total.scorer.class.name=fortscale.streaming.scorer.CorrelationCombinedScoresScorer
fortscale.total.scorer.json={"highestScoreWeight":0.8}
fortscale.event.score.field=EventScore
fortscale.output.topic=fortscale-amtsessions-event-score
#fortscale.skip.score=false
#fortscale.skip.model=false

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.PrevalanceModelSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.kafka.producer.batch.num.messages=1

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.amtsessions-prevalence-stats.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.amtsessions-prevalence-stats.changelog=kafka.amtsessions-prevalence-stats-changelog
stores.amtsessions-prevalence-stats.key.serde=string
stores.amtsessions-prevalence-stats.msg.serde=jsonmodel
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
stores.amtsessions-prevalence-stats.write.batch.size=0
stores.amtsessions-prevalence-stats.object.cache.size=0

# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.amtsessions-prevalence-stats.write.batch.size=50
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.amtsessions-prevalence-stats.object.cache.size=500
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.amtsessions-prevalence-stats.container.cache.size.bytes=500000
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk,
stores.amtsessions-prevalence-stats.container.write.buffer.size.bytes=1000
