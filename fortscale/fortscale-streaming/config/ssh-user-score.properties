# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.shutdown.timeout.ms=300000
job.name=ssh-user-score

# Task
task.class=fortscale.streaming.task.UserScoreStreamTask
task.inputs=kafka.fortscale-ssh-event-score-after-write
# export the state to mongodb every 24 hours
task.window.ms=86400000

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-user-score-context.xml
fortscale.store.name=ssh-user-score
fortscale.use.latest.event.time.as.current.time=true
fortscale.data.source.ssh.classifier=ssh
fortscale.data.source.ssh.username.field=normalized_username
fortscale.data.source.ssh.timestamp.field=date_time_unix
fortscale.data.source.ssh.event.score.field=eventscore
fortscale.data.source.ssh.input.topic=fortscale-ssh-event-score-after-write

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsontopevents.class=fortscale.streaming.serialization.GenericJacksonSerdeFactory
serializers.jsontopevents.underlying.class=fortscale.streaming.model.UserTopEvents
serializers.registry.storekeyserde.class=fortscale.streaming.serialization.GenericJacksonSerdeFactory
serializers.storekeyserde.underlying.class=fortscale.streaming.model.UserEventTypePair
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
systems.kafka.producer.retry.backoff.ms = 10000
systems.kafka.producer.acks = 1
systems.kafka.producer.reconnect.backoff.ms = 10000
systems.kafka.producer.queue.buffering.max.ms=2000
systems.kafka.producer.batch.num.messages=1000

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.ssh-user-score.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.ssh-user-score.changelog=kafka.ssh-user-score-changelog
stores.ssh-user-score.key.serde=storekeyserde
stores.ssh-user-score.msg.serde=jsontopevents
# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.ssh-user-score.write.batch.size=25
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.ssh-user-score.object.cache.size=100
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.ssh-user-score.container.cache.size.bytes=2000
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk,
stores.ssh-user-score.container.write.buffer.size.bytes=1000
