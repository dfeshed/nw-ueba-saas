# Job
job.factory.class=fortscale.streaming.GracefulShutdownLocalJobFactory
job.name=4769-enriched-events-hdfs-write

# Task
task.class=fortscale.streaming.task.HDFSWriterStreamTask
task.inputs=kafka.fortscale-4769-event-filtered
# flush the HDFS writers every 30 minutes (30*60*1000 = 1800000 ms)
task.window.ms=1800000
# task.opts=-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y

# Fortscale specific task config parameters
fortscale.context=classpath*:META-INF/spring/streaming-context.xml
fortscale.timestamp.field=impala.enricheddata.security.events.table.field.date_time_unix
fortscale.username.field=impala.enricheddata.security.events.table.field.normalized_username
fortscale.discriminator.fields=impala.enricheddata.security.events.table.field.record_number
fortscale.fields=impala.enricheddata.security.events.table.fields
fortscale.separator=impala.enricheddata.security.events.table.delimiter
fortscale.hdfs.root=hdfs.user.enricheddata.security.events.path
fortscale.table.name=impala.enricheddata.security.events.table.name
fortscale.file.name=hdfs.enricheddata.security.events.file.name
fortscale.partition.strategy=impala.enricheddata.security.events.table.partition.type
fortscale.split.strategy=fortscale.utils.hdfs.split.DailyFileSplitStrategy
# buffer no more than 1000 events before flushing to HDFS
fortscale.events.flush.threshold=1000

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.long.class=fortscale.streaming.serialization.LongSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
serializers.registry.timebarrier.class=fortscale.streaming.serialization.UserTimeBarrierModelSerdeFactory

# Metric report every 60 seconds to a kafka topic called metrics and as a monitor report
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
metrics.reporter.monitor.class=fortscale.streaming.metrics.MongoMetricsSnapshotReporterFactory
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,monitor

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.hdfs-write-seceventsendata.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.hdfs-write-seceventsendata.changelog=kafka.hdfs-write-seceventsendata-changelog
stores.hdfs-write-seceventsendata.key.serde=string
stores.hdfs-write-seceventsendata.msg.serde=timebarrier
# This property is set to the number of key/value pairs that should be kept in this in-memory buffer, per task instance. The number cannot be greater than stores.*.object.cache.size.
stores.hdfs-write-seceventsendata.write.batch.size=25
# This property determines the number of objects to keep in Samza's cache, per task instance. This same cache is also used for write buffering (see stores.*.write.batch.size). A value of 0 disables all caching and batching.
stores.hdfs-write-seceventsendata.object.cache.size=100
# The size of LevelDB's block cache in bytes, per container. Note that this is an off-heap memory allocation, so the container's total memory use is the maximum JVM heap size plus the size of this cache.
stores.hdfs-write-seceventsendata.container.cache.size.bytes=2000
# The amount of memory (in bytes) that LevelDB uses for buffering writes before they are written to disk.
stores.hdfs-write-seceventsendata.container.write.buffer.size.bytes=1000