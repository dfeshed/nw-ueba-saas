# Job
job.factory.class=org.apache.samza.job.local.LocalJobFactory
job.name=ssh-user-score

# Task
task.class=fortscale.streaming.task.UserScoreStreamTask
task.inputs=kafka.fortscale-ssh-event-score
task.window.ms=1800000

# Fortscale specific task config parameters
fortscale.username.field=normalized_username
fortscale.timestamp.field=date_time_unix
fortscale.classifier.id=ssh
fortscale.event.score.field=eventscore
fortscale.store.name=ssh-user-score
fortscale.use.latest.event.time.as.current.time=true


# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsontopevents.class=fortscale.streaming.serialization.UserTopEventsSerdeFactory


# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.kafka.producer.batch.num.messages=1

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.ssh-user-score.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.ssh-user-score.changelog=kafka.ssh-user-score-changelog
stores.ssh-user-score.key.serde=string
stores.ssh-user-score.msg.serde=jsontopevents
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
stores.ssh-user-score.write.batch.size=0
stores.ssh-user-score.object.cache.size=0