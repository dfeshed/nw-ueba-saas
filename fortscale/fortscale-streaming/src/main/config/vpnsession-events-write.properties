# Job
job.factory.class=org.apache.samza.job.local.LocalJobFactory
job.name=vpnsession-events-hdfs-write

# Task
task.class=fortscale.streaming.task.HDFSWriterStreamTask
task.inputs=kafka.fortscale-vpnsession-event-score
# flush the hdfs writers every 5 minutes (5*60*1000=1065ms)
task.window.ms=1065
#task.opts=-agentlib:jdwp=transport=dt_socket,address=localhost:9009,server=y,suspend=y

# Fortscale specific task config parameters
fortscale.timestamp.field=date_time_unix
fortscale.fields=date_time,date_time_unix,normalized_username,username,hostname,hostnameScore,country,countryScore,countrycode,region,city,databucket,databucketScore,isp,ipusage,source_ip,status,local_ip,totalbytes,readbytes,writebytes,duration,bytesavg,eventscore
fortscale.separator=,
fortscale.hdfs.root=/user/cloudera/processeddata/vpnsession
fortscale.table.name=vpnsessiondatares
fortscale.file.name=vpnETL.csv
fortscale.partition.strategy=fortscale.utils.hdfs.partition.MonthlyPartitionStrategy
fortscale.split.strategy=fortscale.utils.hdfs.split.DailyFileSplitStrategy
fortscale.events.flush.threshold=25


# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.jsonmodel.class=fortscale.streaming.serialization.PrevalanceModelSerdeFactory
serializers.registry.long.class=fortscale.streaming.serialization.LongSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory


# Metric report every 60 seconds to a kafka topic called metrics and as a jmx bean
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics
systems.kafka.streams.metrics.samza.msg.serde=metrics
metrics.reporters=snapshot,jmx

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.consumer.zookeeper.connect=localhost:2181
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.metadata.broker.list=localhost:9092
systems.kafka.producer.producer.type=sync
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.kafka.producer.batch.num.messages=1

# Declare that we want our job's checkpoints to be enabled and written to Kafka
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.replication.factor=1
task.checkpoint.system=kafka

# Key-value storage
stores.hdfs-write-vpnsessiondatares.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.hdfs-write-vpnsessiondatares.changelog=kafka.hdfs-write-vpnsessiondatares-changelog
stores.hdfs-write-vpnsessiondatares.key.serde=string
stores.hdfs-write-vpnsessiondatares.msg.serde=long
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
stores.hdfs-write-vpnsessiondatares.write.batch.size=0
stores.hdfs-write-vpnsessiondatares.object.cache.size=0