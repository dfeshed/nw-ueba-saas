<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd

						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">




    

    <import resource="classpath*:META-INF/spring/fortscale-common-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-logging-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-global-config-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-domain-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-services-context.xml"/>
    <import resource="classpath*:META-INF/spring/monitor-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-ml-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-streaming-context.xml" />


    <bean id="impalaWriterFactory" class="fortscale.services.impl.ImpalaWriterFactoryImpl"/>



    <context:spring-configured />
    <context:annotation-config />
    <context:component-scan base-package="fortscale" />
    
    <!--List of Tagging service implementation -->
    <bean id = "sweeperImpl" class="fortscale.streaming.service.tagging.SweeperTagImpl"></bean>
    <bean id = "serverUsageImpl" class="fortscale.streaming.service.tagging.UseServerDesktopTagImpl"></bean>
    <bean id = "sensitiveImpl" class="fortscale.streaming.service.tagging.IsSensetiveTagImpl"></bean>
    <bean id = "IsFixedImpl" class="fortscale.streaming.service.tagging.IsFixSourceTagImpl"></bean>
    <!--****************************************-->


    <!-- ip resolving caches that uses memory based implementation are injected here -->
    <bean id="dnsResolverCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${dns.resolver.cache.size:100000}" />
        <constructor-arg name="timeToExpire" value="${dns.resolver.cache.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>
    <bean id="dnsBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${dns.resolver.blacklist.size:100000}" />
        <constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="java.lang.Boolean" />
    </bean>
    <bean id="dhcpResolverCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
        <constructor-arg name="clazz" value="fortscale.domain.events.DhcpEvent" />
    </bean>
    <bean id="dhcpBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
        <constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="fortscale.utils.TimeRange" />
    </bean>
    <bean id="loginResolverCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${computer.login.resolver.cache.max.items:30000}" />
        <constructor-arg name="clazz" value="fortscale.domain.events.ComputerLoginEvent" />
    </bean>
    <bean id="loginBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
        <constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="fortscale.utils.TimeRange" />
    </bean>

    <!-- ip to hostname non-singleton service bean for use in fortscale collection -->
    <bean id="dnsResolver" class="fortscale.services.ipresolving.DnsResolver" scope="singleton" />
    <bean id="dhcpResolver" class="fortscale.services.ipresolving.DhcpResolver" scope="singleton" />
    <bean id="computerLoginResolver" class="fortscale.services.ipresolving.ComputerLoginResolver" scope="singleton" />
    <bean id="ipToHostnameResolver" class="fortscale.services.ipresolving.IpToHostnameResolver" scope="singleton" />

    <!-- computer service cache that uses memory based implementation are injected here -->
    <bean id="computerServiceCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${computer.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
    </bean>

    <!-- sensitiveMachine service cache that uses memory based implementation are injected here -->
    <bean id="sensitiveMachineCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${sensitive.machine.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${sensitive.machine.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

    <!-- username service cache that uses memory based implementation are injected here -->
    <bean id="usernameToUserIdCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

    <!-- user service cache (only tags) that uses memory based implementation and send updates to kafka topics are injected here -->
    <bean id="userTagsCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>


    <!-- Username normalization -->
    <bean id="vpnUsernameNormalizer" class="fortscale.services.impl.UsernameNormalizer" scope="prototype">
        <property name="matchersString" value="${collection.vpn.etl.username.normalize.matchers}"/>
        <property name="usernameService" ref="usernameService"/>
    </bean>
    <bean id="secUsernameNormalizer" class="fortscale.services.impl.UsernameNormalizer" scope="prototype">
        <property name="matchersString" value="${collection.sec.etl.username.normalize.matchers}"/>
        <property name="usernameService" ref="usernameService"/>
    </bean>
    <bean id="sshUsernameNormalizer" class="fortscale.services.impl.UsernameNormalizer" scope="prototype">
        <property name="matchersString" value="${collection.ssh.etl.username.normalize.matchers}"/>
        <property name="usernameService" ref="usernameService"/>
    </bean>

    <bean id="SecurityUsernameNormalizationService" class="fortscale.streaming.service.usernameNormalization.UsernameNormalizationService" scope="prototype">
        <property name="dropOnFail" value="${normalizedUser.fail.filter:false}"/>
        <property name="usernameNormalizer" ref="secUsernameNormalizer"/>
    </bean>
    <bean id="VpnUsernameNormalizationService" class="fortscale.streaming.service.usernameNormalization.UsernameNormalizationService" scope="prototype">
        <property name="dropOnFail" value="${normalizedUser.fail.filter:false}"/>
        <property name="usernameNormalizer" ref="vpnUsernameNormalizer"/>
    </bean>
    <bean id="SshUsernameNormalizationService" class="fortscale.streaming.service.usernameNormalization.SshUsernameNormalizationService" scope="prototype">
        <property name="dropOnFail" value="${normalizedUser.fail.filter:false}"/>
        <property name="usernameNormalizer" ref="sshUsernameNormalizer"/>
    </bean>

    <bean id="computerService" class="fortscale.services.impl.ComputerServiceImpl" scope="singleton" />

    <bean id="sensitiveMachineService" class="fortscale.services.computer.SensitiveMachineServiceImpl" scope="singleton" />

    <bean id="usernameService" class="fortscale.services.impl.UsernameService" scope="prototype"/>

    <bean id="userService" class="fortscale.services.impl.UserServiceImpl" scope="prototype"/>

</beans>
