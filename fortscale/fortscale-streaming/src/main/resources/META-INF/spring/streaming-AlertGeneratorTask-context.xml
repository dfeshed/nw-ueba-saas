<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd

						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="classpath*:META-INF/spring/fortscale-common-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-logging-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-global-config-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-domain-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-services-context.xml"/>
    <import resource="classpath*:META-INF/spring/monitor-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-ml-context.xml"/>
    <import resource="classpath*:META-INF/spring/fortscale-streaming-context.xml" />


    <context:spring-configured />
    <context:annotation-config />
    <context:component-scan base-package="fortscale.domain,fortscale.global,fortscale.utils,fortscale.streaming,fortscale.services" />

    <bean id="alertService" class="fortscale.services.impl.AlertsServiceImpl"/>

    <bean id="evidencesService" class="fortscale.services.impl.EvidencesServiceImpl"/>

    <bean id="userSupportingInformationService" class="fortscale.services.impl.UserSupportingInformationServiceImpl"/>

    <!-- User service and user service dependencies -->

    <bean id="userService" class="fortscale.services.impl.UserServiceImpl"/>

    <bean id="usernameService" class="fortscale.services.impl.UsernameService"/>

    <bean id="ActiveDirectoryGroupsHelper" class="fortscale.services.impl.ActiveDirectoryGroupsHelper" scope="singleton" />

    <bean id="retentionStrategiesConfService" class="fortscale.aggregation.feature.event.RetentionStrategiesConfService"/>
    <bean id="aggregatedFeatureEventsConfService" class="fortscale.aggregation.feature.event.AggregatedFeatureEventsConfService"/>
    <bean id="bucketConfigurationService" class="fortscale.aggregation.feature.bucket.BucketConfigurationService"/>
    <bean id="aggregatedFeatureEventsConfUtilService" class="fortscale.aggregation.feature.event.AggregatedFeatureEventsConfUtilService"/>
    <bean id="aggrFeatureEventBuilderService" class="fortscale.aggregation.feature.event.AggrFeatureEventBuilderService"/>

    <!-- group by tags service cache that uses memory based implementation -->
    <bean id="groupByTagsCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${computer.service.cache.max.items:0}" />
        <constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
    </bean>

    <bean id="adGroupsCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${adgroups.resolver.cache.max.items:30000}" />
        <constructor-arg name="timeToExpire" value="${adgroups.resolver.blacklist.timeToExpireSec:3600}" />
        <constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
    </bean>

    <!-- computer service cache that uses memory based implementation and send updates to kafka topics are injected here -->
    <bean id="computerServiceCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
        <constructor-arg name="innerCache">
            <bean class="fortscale.services.cache.MemoryBasedCache">
                <constructor-arg name="maxSize" value="${computer.service.cache.max.items:10000}" />
                <constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:0}" />
                <constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
            </bean>
        </constructor-arg>
        <constructor-arg name="topicWriter">
            <bean class="fortscale.utils.kafka.KafkaEventsWriter">
                <constructor-arg name="topic" value="${computer.service.cache.updates.topic}" />
            </bean>
        </constructor-arg>
        <constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
    </bean>

    <!-- username service cache that uses memory based implementation are injected here -->
    <bean id="usernameToUserIdCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

    <!-- username service cache that uses memory based implementation are injected here -->
    <bean id="sAMAccountNameToUsernameCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.util.ArrayList"/>
    </bean>

    <bean id="sAMAccountNamethatBlackList" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${samaccountname.service.blacklist.cache.max.items:30000}" />
        <constructor-arg name="timeToExpire" value="${samaccountname.service.blacklist.timeToExpireSec:21600}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

    <!-- user service cache (only tags) that uses memory based implementation and send updates to kafka topics are injected here -->
    <bean id="userTagsCache" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

    <bean id="samAccountNameService" class="fortscale.services.impl.SamAccountNameService" scope="singleton"/>

    <bean id="impalaWriterFactory" class="fortscale.services.impl.ImpalaWriterFactoryImpl" />

    <bean id="computerService" class="fortscale.services.impl.ComputerServiceImpl"/>

    <!--Event wrapper -->
    <bean id="entityTagsWrapper" class="fortscale.streaming.alert.event.wrappers.EntityTagsWrapper" scope="singleton" />

    <bean id="sessionTimeUpdateWrapper" class="fortscale.streaming.alert.event.wrappers.SessionTimeUpdateWrapper" scope="singleton" />



    <!-- statement subscribers -->
    <bean id="alertCreationSubscriber" class="fortscale.streaming.alert.subscribers.AlertCreationSubscriber" scope="singleton" />

    <bean id="destroyVariableCreateStatementSubscriber" class="fortscale.streaming.alert.subscribers.DestroyVariableCreateStatementSubscriber" scope="prototype" />

    <bean id="destroyVariableUpdateStatementSubscriber" class="fortscale.streaming.alert.subscribers.DestroyVariableUpdateStatementSubscriber" scope="prototype" />

    <bean id="smartAlertCreationSubscriber" class="fortscale.streaming.alert.subscribers.SmartAlertCreationSubscriber" scope="prototype" />

    <bean id="singleTriggerAlertCreationSubscriber" class="fortscale.streaming.alert.subscribers.SingleTriggerAlertCreationSubscriber" scope="prototype" />

</beans>
