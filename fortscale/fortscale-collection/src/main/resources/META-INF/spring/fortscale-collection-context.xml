<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:hdp="http://www.springframework.org/schema/hadoop"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:mongo="http://www.springframework.org/schema/data/mongo"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/hadoop http://www.springframework.org/schema/hadoop/spring-hadoop.xsd
						http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

	<mongo:repositories base-package="fortscale.domain.core.dao" />
	<mongo:repositories base-package="fortscale.ml.service.dao" />



	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="location" value="file:resources/fortscale-collection-overriding.properties"/>
		<property name="order" value="#{T(org.springframework.core.Ordered).HIGHEST_PRECEDENCE}"/>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="localOverride" value="true"/>
	</bean>


	<!-- Include process common service  -->
	<bean class="fortscale.utils.monitoring.stats.config.StandardStatsServiceConfig"    id="StandardStatsServiceConfig" />
	<bean class="fortscale.utils.process.metrics.jvm.config.JVMMetricsServiceConfig"    id="JVMMetricsServiceConfig" />
	<bean class="fortscale.utils.process.hostnameService.config.HostnameServiceConfig"  id="HostnameServiceConfig" />

	<bean id="hadoopConfiguration" class="fortscale.collection.hadoop.HadoopConfigurationFactory">
		<property name="resourcesString" value="${hdfs.configuration.resources}"/>
	</bean>

	<hdp:pig-factory id="pigFactory" configuration-ref="hadoopConfiguration"/>
	<hdp:file-system/>

	<hdp:pig-template pig-factory-ref="pigFactory"/>
	<bean id="autowiringSpringBeanJobFactory" class="fortscale.collection.AutowiringSpringBeanJobFactory"/>
	<bean id="stdSchedulerFactory" class="org.quartz.impl.StdSchedulerFactory"/>
	<bean id="jobScheduler" factory-bean="stdSchedulerFactory" factory-method="getScheduler">
		<property name="jobFactory" ref="autowiringSpringBeanJobFactory"/>
	</bean>

	<!-- id to username cache that uses memory based implementation are injected here -->
	<bean id="idToUsernameCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${username.service.cache.max.items:1000}" />
		<constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

	<!-- ip resolving caches that uses memory based implementation are injected here -->
	<bean id="dnsResolverCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${dns.resolver.cache.size:100000}" />
		<constructor-arg name="timeToExpire" value="${dns.resolver.cache.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>
	<bean id="dnsBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${dns.resolver.blacklist.size:100000}" />
		<constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="java.lang.Boolean" />
	</bean>
	<bean id="dhcpResolverCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
				<constructor-arg name="clazz" value="fortscale.domain.events.DhcpEvent" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${dhcp.resolver.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="fortscale.domain.events.DhcpEvent" />
	</bean>
	<bean id="dhcpBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>
	<bean id="iseResolverCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${ise.resolver.cache.max.items:30000}" />
				<constructor-arg name="clazz" value="fortscale.domain.events.IseEvent" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${ise.resolver.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="fortscale.domain.events.IseEvent" />
	</bean>
	<bean id="iseBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${ise.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${ise.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>
	<bean id="pxGridResolverCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${pxgrid.resolver.cache.max.items:30000}" />
				<constructor-arg name="clazz" value="fortscale.domain.events.PxGridIPEvent" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${pxgrid.resolver.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="fortscale.domain.events.PxGridIPEvent" />
	</bean>
	<bean id="pxGridBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${pxgrid.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${pxgrid.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>
	<bean id="loginResolverCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${computer.login.resolver.cache.max.items:30000}" />
				<constructor-arg name="clazz" value="fortscale.domain.events.ComputerLoginEvent" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${computer.login.resolver.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="fortscale.domain.events.ComputerLoginEvent" />
	</bean>
	<bean id="loginBlacklistCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${dhcp.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${dns.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>
	<bean id="adGroupsCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${adgroups.resolver.cache.max.items:30000}" />
		<constructor-arg name="timeToExpire" value="${adgroups.resolver.blacklist.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="org.apache.commons.lang3.Range" />
	</bean>


	<!-- ip to hostname singleton service bean for use in fortscale collection -->
	<bean id="dnsResolver" class="fortscale.services.ipresolving.DnsResolver" scope="singleton" />
	<bean id="dhcpResolver" class="fortscale.services.ipresolving.DhcpResolver" scope="singleton" >
		<constructor-arg name="shouldUseBlackList" value="${dhcp.resolver.shouldUseBlackList:true}" />
		<constructor-arg name="ipBlackListCache" ref="loginBlacklistCache" />
	</bean>
	<bean id="iseResolver" class="fortscale.services.ipresolving.IseResolver" scope="singleton" >
		<constructor-arg name="shouldUseBlackList" value="${ise.resolver.shouldUseBlackList:true}" />
		<constructor-arg name="ipBlackListCache" ref="loginBlacklistCache" />
	</bean>
	<bean id="pxGridResolver" class="fortscale.services.ipresolving.PxGridResolver" scope="singleton" >
		<constructor-arg name="shouldUseBlackList" value="${pxgrid.resolver.shouldUseBlackList:true}" />
		<constructor-arg name="ipBlackListCache" ref="pxGridBlacklistCache" />
	</bean>
	<bean id="computerLoginResolver" class="fortscale.services.ipresolving.ComputerLoginResolver" scope="singleton" >
		<constructor-arg name="shouldUseBlackList" value="${computer.login.resolver.shouldUseBlackList:true}" />
		<constructor-arg name="ipBlackListCache" ref="dhcpBlacklistCache" />
	</bean>
	<bean id="ipToHostnameResolver" class="fortscale.services.ipresolving.IpToHostnameResolver" scope="singleton" />
	<bean id="ActiveDirectoryGroupsHelper" class="fortscale.services.impl.ActiveDirectoryGroupsHelper" scope="singleton" />

	<!-- group by tags service cache that uses memory based implementation -->
	<bean id="groupByTagsCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${computer.service.cache.max.items:0}" />
		<constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
	</bean>

	<!-- computer service cache that uses memory based implementation and send updates to kafka topics are injected here -->
	<bean id="computerServiceCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${computer.service.cache.max.items:10000}" />
				<constructor-arg name="timeToExpire" value="${computer.service.cache.timeToExpireSec:0}" />
				<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${computer.service.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
	</bean>

	<!-- sensitiveMachine service cache that uses memory based implementation and send updates to kafka topics are injected here -->
	<bean id="sensitiveMachineCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${sensitive.machine.service.cache.max.items:10000}" />
				<constructor-arg name="timeToExpire" value="${sensitive.machine.service.cache.timeToExpireSec:0}" />
				<constructor-arg name="clazz" value="java.lang.String" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${sensitive-machine.service.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

	<!-- username service cache that uses memory based implementation and send updates to kafka topics are injected here -->
	<bean id="usernameToUserIdCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
				<constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
				<constructor-arg name="clazz" value="java.lang.String" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${username.service.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

    <!-- DN to username cache for avvoiding of going to mongo each time  -->
    <bean id="dNToUserName" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
        <constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>




    <!-- SamAccountService cache that uses memory based implementation and send updates to kafka topics are injected here -->
	<bean id="sAMAccountNameToUsernameCache" class="fortscale.services.cache.KafkaPropogateUpdatesCache">
		<constructor-arg name="innerCache">
			<bean class="fortscale.services.cache.MemoryBasedCache">
				<constructor-arg name="maxSize" value="${username.service.cache.max.items:10000}" />
				<constructor-arg name="timeToExpire" value="${username.service.cache.timeToExpireSec:0}" />
				<constructor-arg name="clazz" value="java.util.ArrayList" />
			</bean>
		</constructor-arg>
		<constructor-arg name="topicWriter">
			<bean class="fortscale.utils.kafka.KafkaEventsWriter">
				<constructor-arg name="topic" value="${samaccountname.service.samaccountname.cache.updates.topic}" />
			</bean>
		</constructor-arg>
		<constructor-arg name="clazz" value="java.lang.String" />
	</bean>

    <bean id="sAMAccountNamethatBlackList" class="fortscale.services.cache.MemoryBasedCache">
        <constructor-arg name="maxSize" value="${samaccountname.service.blacklist.cache.max.items:30000}" />
        <constructor-arg name="timeToExpire" value="${samaccountname.service.blacklist.timeToExpireSec:21600}" />
        <constructor-arg name="clazz" value="java.lang.String" />
    </bean>

	<bean id="filterToUsersCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${users.with.alerts.service.cache.max.items:10}" />
		<constructor-arg name="timeToExpire" value="${users.with.alerts.service.cache.timeToExpireSec:600}" />
		<constructor-arg name="clazz" value="java.util.ArrayList" />
	</bean>

    <bean id="fortscaleDateFormatService" class="fortscale.collection.services.time.FortscaleDateFormatServiceImpl" scope="prototype"/>

	<bean id="retentionStrategiesConfService" class="fortscale.aggregation.feature.event.RetentionStrategiesConfService"/>

	<bean id="featureBucketsReaderService" class="fortscale.aggregation.feature.bucket.FeatureBucketsReaderService" />

	<bean id="featureBucketsMongoStore" class="fortscale.aggregation.feature.bucket.FeatureBucketsMongoStore"/>

	<bean id="bucketConfigurationService" class="fortscale.aggregation.feature.bucket.BucketConfigurationService"/>

	<bean id="aggrFeatureFuncService" class="fortscale.aggregation.feature.functions.AggrFeatureFuncService"/>

	<bean id="aggregatedFeatureEventsConfService" class="fortscale.aggregation.feature.event.AggregatedFeatureEventsConfService"/>

	<bean id="modelConfService" class="fortscale.ml.model.ModelConfService"/>

	<bean id="modelConfServiceUtils" class="fortscale.ml.model.ModelConfServiceUtils"/>

	<bean id="modelStore" class="fortscale.ml.model.store.ModelStore"/>

	<bean id="aggrFeatureEventBatchService" class="fortscale.aggregation.feature.event.batch.AggrFeatureEventBatchService" scope="singleton"/>

	<bean id="forwardingService" class="fortscale.services.impl.ForwadingServiceImpl" scope="singleton"/>

	<bean id="alertPrettifier" class="fortscale.services.impl.AlertEmailPrettifier" scope="singleton"/>

	<bean id="computerService" class="fortscale.services.impl.ComputerServiceImpl" scope="singleton" />

	<bean id="sensitiveMachineService" class="fortscale.services.computer.SensitiveMachineServiceImpl" scope="singleton" />

	<bean id="usernameService" class="fortscale.services.impl.UsernameService" scope="singleton">
		<property name="lazyUsernameCachesUpdate" value="true"/>
	</bean>

	<bean id="samAccountNameService" class="fortscale.services.impl.SamAccountNameService" scope="singleton"/>

	<bean id="alertSyslogForwardingService" class="fortscale.services.impl.AlertSyslogForwardingServiceImpl" scope="singleton"/>

	<bean id="userService" class="fortscale.services.impl.UserServiceImpl" scope="singleton"/>

	<bean id="tagService" class="fortscale.services.impl.TagServiceImpl" scope="singleton"/>

	<bean id="splunkFetch" class="fortscale.collection.jobs.fetch.siem.Splunk" scope="prototype"/>

	<bean id="qradarFetch" class="fortscale.collection.jobs.fetch.siem.QRadar" scope="prototype"/>

	<bean id="cleanupManagement" class="fortscale.collection.jobs.cleanup.CleanupManagement" scope="singleton"/>

	<bean id="userActivitySourceMachineHandler" class="fortscale.collection.jobs.activity.UserActivitySourceMachineHandler" scope="singleton" />

	<bean class="fortscale.streaming.task.monitor.TaskMonitoringHelper" scope="prototype">
		<property name="isMonitoredTask" value="true"/>
	</bean>
	<bean id="collectionMessage" class="fortscale.utils.spring.SpringPropertiesUtil">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="locations">
			<list>
				<value>classpath:META-INF/messages.en.collection.properties</value>
				<value>classpath:META-INF/messages.en.properties</value>
				<value>classpath:META-INF/fortscale-config.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="localOverride" value="true" />
	</bean>
	<bean class="fortscale.collection.monitoring.MorphlineCommandMonitoringHelper"/>

	<!-- Entity events related beans -->
	<bean id="mongoDbUtilService" class="fortscale.aggregation.util.MongoDbUtilService" scope="singleton"/>
	<bean id="entityEventDataStore" class="fortscale.entity.event.EntityEventDataMongoStore" scope="singleton"/>
	<bean id="entityEventGlobalParamsConfService" class="fortscale.entity.event.EntityEventGlobalParamsConfService" scope="singleton"/>
	<bean id="entityEventConfService" class="fortscale.entity.event.EntityEventConfService" scope="singleton"/>
	<bean id="aggrFeatureEventBuilderService" class="fortscale.aggregation.feature.event.AggrFeatureEventBuilderService" scope="singleton"/>
	<bean id="aggregatedFeatureEventsConfUtilService" class="fortscale.aggregation.feature.event.AggregatedFeatureEventsConfUtilService" scope="singleton"/>
	<bean id="scoredAggrEventsCounterReader" class="fortscale.aggregation.feature.event.store.AggregatedFeatureEventsMongoStore"/>
	<bean class="fortscale.entity.event.translator.EntityEventTranslationServiceConfig"/>
	<bean id="scoredEntityEventsCounterReader" class="fortscale.entity.event.EntityEventMongoStore"/>
	<bean id="entityEventMetaDataCountReader" class="fortscale.entity.event.EntityEventMetaDataMongoStore"/>

	<!-- Notification beans -->
	<bean id="dropDomainManipulator" class="fortscale.collection.jobs.notifications.DropDomainManipulator" scope="singleton"/>

	<bean id="vpnCredShareNotificationService" class="fortscale.collection.jobs.notifications.VpnCredsShareNotificationService">
		<property name="hostnameField" value="hostname"/>
		<property name="dataEntity" value="vpn_session"/>
		<property name="hostnameDomainMarkersString" value="${collection.evidence.notification.credshare.hostnameDomainMarkers}"/>
		<property name="numberOfConcurrentSessions" value="4"/>
		<!-- The name of the reference (bean ID of any instance which implement hostnameManipulator)
			taken from properties file - ${collection.evidence.notification.credshare.hostnameManipulator.beanid} -->
		<property name="fieldManipulatorBeanName" value="${collection.evidence.notification.credshare.hostnameManipulator.beanid}"/>
	</bean>

    <bean id="vpnLateralMovementNotificationService" class="fortscale.collection.jobs.notifications.VpnLateralMovementNotificationService">
        <property name="dataEntity" value="vpn_session"/>
    </bean>

	<!-- Cache for the users severities percentile mapo -->
	<bean id="userScoreSeveritiesCache" class="fortscale.services.cache.MemoryBasedCache">
		<constructor-arg name="maxSize" value="${user.score.service.cache.max.items:0}" />
		<constructor-arg name="timeToExpire" value="${user.score.service.cache.timeToExpireSec:3600}" />
		<constructor-arg name="clazz" value="fortscale.domain.core.Computer" />
	</bean>

</beans>