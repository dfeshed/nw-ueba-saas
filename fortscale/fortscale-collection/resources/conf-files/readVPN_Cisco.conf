morphlines :[
    {
		id : VPN_CISCO
		importCommands : ["org.kitesdk.morphline.**","org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [

		    {

		        tryRules {
                    catchExceptions : true
                    throwExceptionIfAllRulesFailed : false
                    rules : [
                        {
                            commands : [
                                {
                                    # filter only message containing "Authentication successful", "ACCT-START"  or "Authentication rejected" or "Authorization failed"
                                    # or "Authorization rejected" or "Authentication failed" or  "disconnected"  in message,
                                    # all other will be discarded in the dropRecord command bellow
                                    grok {
                                        findSubstrings : true
                                        addEmptyStrings : true
                                        numRequiredMatches : all
                                        expressions : {message : """(?<type>(ACCT-START|Authentication rejected|Authorization failed|Authorization rejected|Authentication failed|disconnected))"""}
                                    }
                                }
                            ]
                        }
						{
							commands : [
								{	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }
								{
									dropRecord {}
								}
							]
						}


                    ]
                }
            }

            #print the tag value at debug
            { logInfo { format : "tag value is -  {}",args: ["@{type}"] } }

            {
                 #Case that the record is Session Start
                 if {
                    conditions : [{ equals { type : [ACCT-START] }}]
                    then : [
                             # handle Start Session event
                             # extract source IP field,datetime,user name,session_id,local_ip
                             # set values- geoip, date_time_unix , status

                             {
                                  grok {
                                      dictionaryFiles : [resources/grok-dictionaries/vpn.Cisco.conf]
                                     findSubstrings : true
                                     addEmptyStrings : true
                                     numRequiredMatches : all
                                      expressions : {
                                         message : "%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{USERNAME:username}|%{LOCALIP:local_ip}"
                                         }
                                  }


                             }


                             {
                                   if {
                                       conditions : [
                                                     { equals { username :  []   }}
                                       ]
                                       then :[
                                                  {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                                  {
                                                      dropRecord {}
                                                  }
                                        ]
                                   }
                             }
                             {
                                if {
                                    conditions : [
                                               { equals { source_ip : []   }}
                                    ]
                                    then :[
                                               {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                               {
                                                   dropRecord {}
                                               }
                                     ]
                                }
                             }
                             {
                                 if {
                                     conditions : [
                                            { equals { date_time : []   }}
                                     ]
                                     then :[
                                                {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                                {
                                                    dropRecord {}
                                                }
                                      ]
                                 }
                             }
                             {
                                 if {
                                     conditions : [
                                               { equals { local_ip :  []   }}
                                     ]
                                     then :[
                                                {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                                {
                                                    dropRecord {}
                                                }
                                      ]
                                 }
                             }



                            {
                               setValues {
                                          status : ["SUCCESS"]
                                         }
                            }

                            {
                                   VPNNormalizeUsername {
                                       usernameField : username
                                       normalizedUsernameField : normalized_username
                                   }
                            }

                            {

                               setValues {
                                           date_time_unix: "@{date_time}"
                                         }


                            }

                            {

                                   GetTimezone {
                                       sourceType : "vpn"
                                       hostnameField : reporting_server
                                       timezoneOutputField : timezone_output
                                   }
                            }


                            {
                                   convertTimestampFortscale {
                                                           field : date_time_unix
                                                           inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                                                           inputTimezoneField : timezone_output
                                                           outputFormat : "unixTimeInSeconds"
                                                           # default outputTimezone : UTC
                                                         }
                            }

                            {
                                   UserLastActivityUpdate {
                                                           logEventsType : vpn
                                                           normalizedUsernameField : normalized_username
                                                           epochtimestampField : date_time_unix
                                                       }

                            }


                    ]
                 }
            }

            #for debug
             {	logInfo	{	format : "current record is :  {}", args : ["@{}"] } }


            {
                 ##Case that the record is Session disconnect
                 if {
                     conditions : [{ equals { type : [disconnected] }}]
                     then: [
                             # handle Disconnected Session event
                             # extract source IP field,datetime,user name,session_id
                             # set values- geoip, date_time_unix , status

                             {
                                 grok{
                                     dictionaryFiles : [resources/grok-dictionaries/vpn.Cisco.conf]
                                     findSubstrings : true
                                     addEmptyStrings : true
                                     numRequiredMatches : all
                                     expressions : {
                                         message : "%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{USERNAME:username}|%{WRITEBYTES:writebytes}|%{READBYTES:readbytes}|%{DURATION:duration}"
                                     }
                                 }

                             }

                             {
                                if {
                                    conditions : [{equals { source_ip:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }
                             {
                                if {
                                    conditions : [{equals { date_time:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }
                             {
                                if {
                                    conditions : [{equals { username:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }
                             {
                                if {
                                    conditions : [{equals { writebytes:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }
                             {
                                if {
                                    conditions : [{equals { readbytes:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }
                             {
                                if {
                                    conditions : [{equals { duration:[]}}]
                                    then: [
                                              {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                              {
                                                  dropRecord {}
                                              }
                                    ]
                                }
                             }


                             {
                                  setValues {
                                             status : ["CLOSED"]
                                            }
                             }

                             # Adding total bytes.
                             {
                             java {
                                     imports : "import java.util.*;"
                                     code:
                                         """
                                         String readbytes = (String)record.getFirstValue("readbytes");
                                         String writebytes = (String)record.getFirstValue("writebytes");
                                         Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                                         record.replaceValues("totalbytes", totalbytes);
                                         return child.process(record);
                                         """
                                 }
                             }
                             #Adding data bucket
                             {
                                     VpnDataBucket {
                                         totalbytesFieldName : totalbytes
                                         readbytesFieldName : readbytes
                                         durationFieldName : duration
                                         databucketFieldName : databucket
                                         bucketDefinition : ["50","100","200","400"]
                                     }
                             }


                     ]
                 }
             }

             #for debug
             {	logInfo	{	format : "current record is :  {}", args : ["@{}"] } }


             {

              ##Case that the record is Session Auth failure
                 if {
                     conditions : [{ contains { type : [Authentication rejected,Authorization failed,Authorization rejected,Authentication failed] }}]
                     then: [

                             # handle Failure Session event
                             # extract source IP field,datetime,user name,session_id
                             # set values- geoip, date_time_unix , status

                             {
                                 grok{
                                     dictionaryFiles : [resources/grok-dictionaries/vpn.Cisco.conf]
                                     findSubstrings : true
                                     addEmptyStrings : true
                                     numRequiredMatches : all
                                     expressions : {
                                         message : "%{AUTH_FAIL_SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{AUTH_FAIL_USERNAME:username}"
                                     }
                                 }


                             }

                             {
                                if{
                                    conditions : [
                                        {equals { source_ip : [] }}
                                    ]
                                    then: [
                                            {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                            {
                                              dropRecord {}
                                            }
                                    ]
                                }
                             }
                             {
                                if{
                                    conditions : [
                                        {equals { date_time : [] }}
                                    ]
                                    then: [
                                            {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                            {
                                              dropRecord {}
                                            }
                                    ]
                                }
                             }
                             {
                                if{
                                    conditions : [
                                        {equals { username : [] }}
                                    ]
                                    then: [
                                            {	logInfo	{	format : "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args : ["@{}"] } }

                                            {
                                              dropRecord {}
                                            }
                                    ]
                                }
                             }

                             {
                                  setValues {
                                             status: ["FAIL"]
                                            }
                             }



                     ]
                 }
             }

            {
                GetTimezone {
                    sourceType : "vpn"
                    timezoneOutputField : timezone_output
                }
            }

            {
                # in case that this is not SUCCESS record insert the normalized_username and the date_time_unix
                if {
                    conditions : [
                                    { not { equals {status: ["SUCCESS"]}}}
                                 ]
                    then : [
                            {
                                VPNNormalizeUsername {
                                    usernameField : username
                                    normalizedUsernameField : normalized_username
                                }
                            }

                            {

                             setValues {
                                         date_time_unix: "@{date_time}"
                                       }


                            }

                            {
                                GetTimezone {
                                    sourceType : "vpn"
                                    hostnameField : reporting_server
                                    timezoneOutputField : timezone_output
                                }
                            }

                            {
                                 convertTimestampFortscale {
                                                             field : date_time_unix
                                                             inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                                                             inputTimezoneField : timezone_output
                                                             outputFormat : "unixTimeInSeconds"
                                                             # default outputTimezone : UTC
                                                           }
                            }

                    ]
                }
            }

            {
                convertTimestampFortscale {
                    field : date_time
                    inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                    inputTimezoneField : timezone_output
                    outputFormat : "yyyy-MM-dd HH:mm:ss"
                    outputTimezoneField : timezone_output
                }
            }


             {
                 IsUserAdministrator {
                     usernameField : normalized_username
                     isUserAdministratorField : isUserAdministrator
                 }
             }

             {
                 IsUserExecutive {
                     usernameField : normalized_username
                     isUserExecutiveField : isUserExecutive
                 }
             }


             {
                 Geolocation {
                     ip_field : source_ip
                     country_field : country
                     region_field : region
                     city_field : city
                     isp_field : isp
                     usage_type_field : ipusage
                     country_code_field : countrycode
                     longtitude_field : longtitude
                     latitude_field : latitude
                 }
             }

             {	logInfo	{	format : "current record is :  {}", args : ["@{}"] } }




		]

    }
]