morphlines: [
  {
    id: verdasysEnrich
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
        setValues {
          data_source: ["verdasys"]
          last_state: ["etl"]
          date_time_unix: "@{date_time}"
          was_rdp:["false"]
          admin_activity:["false"]
          registry_changed:["false"]
          is_attachment_mail_event:["false"]
          is_logoff:["false"]
          is_logon:["false"]

        }
      }

      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}

      {
        convertTimestampFortscale {
          field: date_time_unix
          inputFormats : ["MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss","yyyy-MM-dd HH:mm:ss.SSS","yyyy-MM-dd HH:mm:ss"]
          outputFormat: "unixTimeInSeconds"
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      {
        convertTimestampFortscale {
          field: date_time
          inputFormats : ["MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss","yyyy-MM-dd HH:mm:ss.SSS","yyyy-MM-dd HH:mm:ss"]
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }
      {logDebug 	 {format: "Debug -8 : {}", args: ["@{}"]}}

      #In case of mail event filter all the events that the recipent is empty
     #{
     #  if {
     #    conditions: [{contains {event_description: ["Send Mail"]}}]
     #    then: [
     #      {
     #        EmptyObjectFilter {
     #          filterFields: [email_recipient]
     #        }
     #      }
     #    ]
     #  }
     #}

      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

      #In case of destination file access event
      #     1.filter all the events that the destination_file is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Archive","File Copy","File Create","File Move","File Recycle","File Rename","File Restore","File Save As","File Write","CD Burn","Network Transfer Download"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [destination_file]
              }
            }

          ]
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}

      #In case of SOURCE  file access event
      #     1.filter all the events that the source_file is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Archive","File Close","File Copy","File Delete","File Edit","File Move","File Open","File Read","File Recycle","File Rename","File Restore","File Save As","File Write","ADE Cut","Application Data Exchange","CD Burn","Network Transfer Upload","DLL Load","Attach Mail"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [source_file]
              }
            }

          ]
        }
      }

      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}




      {
        if {
          conditions: [{contains  {account_user_id: ["NT AUTHORITY\\LOCAL SERVICE","NT AUTHORITY\\SYSTEM","NT AUTHORITY\\LOCAL SERVICE","NT AUTHORITY\\NETWORK SERVICE","NT AUTHORITY\\SYSTEM"]}}]
          then: [

            {
              EmptyObjectFilter {
                filterFields: [normalized_src_machine]
              }
            }

            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                     String machineName = (String)record.getFirstValue("normalized_src_machine");
                     String accountName = (String)record.getFirstValue("account_name");


                      record.replaceValues("account_name","Device\\"+machineName);




                     return child.process(record);

                  """
              }
            }




            {
              setValues {
                normalized_src_machine : [""]
              }
            }


          ]
        }
      }

      #In case of Print event filter all the events that the printer field is empty
      {
        if {
          conditions: [{equals {event_description: "Print"}}]
          then: [
            {logInfo {format: "Print event was filtered: {}", args: ["@{}"]}}
            {LogFilterEvent {errorMessage: "Print event was filtered"}}
            {
              dropRecord {}
            }
          ]
        }
      }


      #RDP Event mark
      {
        if {
          conditions: [{equals {application: "mstsc.exe"}}]
          then: [

            {
              setValues {
                was_rdp:["true"]
              }
            }

          ]

          else : [
            {
              #Admin Event mark
              if {
                conditions: [{contains {application: ["powershell.exe","powercfg.exe","eventvwr.exe","compmgmt.exe","taskschd.exe","secpol.exe"]}}]
                then: [

                  {
                    setValues {
                      admin_activity:["true"]
                    }
                  }

                ]
                else :[
                  {
                    #Registry changed Event mark
                    if {
                      conditions: [{contains {application: ["regedit.exe"]}}]
                      then: [

                        {
                          setValues {
                            registry_changed:["true"]
                          }
                        }

                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }

      #Add Boolean field for sign if this event contain mail attachment
      {
        if {
          conditions:[{contains {event_description: ["Send Mail","Attach Mail"]}}]
          then: [
            {
              if{
                conditions:[{not{contains {destination_file:["message body",""]}}}]
                then:[
                  {
                    setValues {
                      is_attachment_mail_event:["true"]
                    }
                  }

                ]
              }
            }
          ]
        }
      }

      #Mark log off event
      {
        if{
          conditions:[{equals {event_description: ["User Logoff"]}}]
          then:[
            {
              setValues {
                is_logoff:["true"]
              }
            }
          ]
        }
      }

      #Mark log on event
      {
        if{
          conditions:[{equals {event_description: ["User Logon"]}}]
          then:[
            {
              setValues {
                is_logon:["true"]
              }
            }
          ]
        }
      }

      #{
      #  java{
      #    imports:"import java.util.*;"
      #    code:
      #      """
      #              String account_name = (String)record.getFirstValue("account_name");
      #              String norm = account_name+"@bankleumi.com";
      #              record.replaceValues("normalized_username",norm);
      #              return child.process(record);
      #      """
      #  }
      #}





    ]
  }

]
