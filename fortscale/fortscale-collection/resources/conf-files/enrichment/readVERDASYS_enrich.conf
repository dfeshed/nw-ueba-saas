morphlines: [
  {
    id: verdasysEnrich
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
        setValues {
          data_source: ["verd"]
          last_state: ["etl"]
          date_time_unix: "@{date_time}"
          action_key:[""]
          dest_drive_description:[""]
          DWH_insert_date:[""]
          DWH_source:[""]
          DWH_update_date:[""]
          equipment_key:[""]
          event_detail_row_insert_date:[""]
          event_type:[""]
          has_alert_event_detail:[""]
          is_removable:["false"]
          operator_key:[""]
          original_event_date_time:[""]
          row_insert_date:[""]
          source_drive_description:[""]
          time_key:[""]
          destination_file_type:[""]
          source_file_type:[""]
          was_rdp:["0"]
          admin_activity:["0"]
          registry_changed:["0"]

        }
      }

      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}

      {
        convertTimestampFortscale {
          field: date_time_unix
          inputFormats : ["MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss"]
          outputFormat: "unixTimeInSeconds"
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      {
        convertTimestampFortscale {
          field: date_time
          inputFormats : ["MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss"]
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}

      #In case of mail event filter all the events that the recipent is empty
      {
        if {
          conditions: [{contains {event_description: ["Send Mail","Attach Mail"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [email_recipient]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

      #In case of destination file access event
      #     1.filter all the events that the destination_file is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Archive","File Copy","File Create","File Move","File Recycle","File Rename","File Restore","File Save As","File Write","ADE Cut","Application Data Exchange","CD Burn","Network Transfer Download"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [destination_file]
              }
            }

          ]
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}

      #In case of destination file access event
      #     1.filter all the events that the destination_file is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Archive","File Close","File Copy","File Delete","File Edit","File Move","File Open","File Read","File Recycle","File Rename","File Restore","File Save As","File Write","ADE Cut","Application Data Exchange","CD Burn","Network Transfer Upload","DLL Load"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [source_file]
              }
            }

          ]
        }
      }

      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}


      #Get the dest filet type
      {
        java {
          imports: "import java.util.*;"
          code:
            """
               String fileName = (String)record.getFirstValue("destination_file");

               String [] splitedByDot = fileName.split("\\.");

               if (splitedByDot.length > 1 && splitedByDot[splitedByDot.length-1].length()<=5)
               {

                     record.replaceValues("destination_file_type", "."+splitedByDot[splitedByDot.length-1]);
               }


               return child.process(record);

            """
        }
      }

      {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}

      #Get the source filet type
      {
        java {
          imports: "import java.util.*;"
          code:
            """
               String fileName = (String)record.getFirstValue("source_file");

               String [] splitedByDot = fileName.split("\\.");

               if (splitedByDot.length > 1 && splitedByDot[splitedByDot.length-1].length()<=5)
               {
                      record.replaceValues("source_file_type", "."+splitedByDot[splitedByDot.length-1]);
               }



               return child.process(record);

            """
        }
      }


      {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}

      #In case of Print event filter all the events that the printer field is empty
      {
        if {
          conditions: [{contains  {account_name: ["NT AUTHORITY\\NETWORK SERVICE","NT AUTHORITY\\SYSTEM","NT AUTHORITY\\LOCAL SERVICE","AUTORITE NT\\Système","AUTORITE NT\\SERVICE RÉSEAU"]}}]
          then: [

            {
              EmptyObjectFilter {
                filterFields: [normalized_src_machine]
              }
            }

            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                     String machineName = (String)record.getFirstValue("normalized_src_machine");
                     String accountName = (String)record.getFirstValue("account_name");


                      record.replaceValues("account_name",machineName+"_Machine@"+accountName);




                     return child.process(record);

                  """
              }
            }




            {
              setValues {
                normalized_src_machine : [""]
              }
            }


          ]
        }
      }

      #In case of Device plugin/out change the username to be the src_machine (we want to model this events on context of machine)
      {
        if {
          conditions: [{equals {event_description: "Print"}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [printer]
              }
            }
          ]
        }
      }


      #RDP Event mark
      {
        if {
          conditions: [{equals {application: "mstsc.exe"}}]
          then: [

            {
              setValues {
                was_rdp:["1"]
              }
            }

          ]

          else : [
            {
              #Admin Event mark
              if {
                conditions: [{contains {application: ["powershell.exe","powercfg.exe","eventvwr.exe","compmgmt.exe","taskschd.exe","secpol.exe"]}}]
                then: [

                  {
                    setValues {
                      admin_activity:["1"]
                    }
                  }

                ]
                else :[
                  {
                    #Registry changed Event mark
                    if {
                      conditions: [{contains {application: ["regedit.exe"]}}]
                      then: [

                        {
                          setValues {
                            registry_changed:["1"]
                          }
                        }

                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }





    ]
  }

]
