morphlines : [
	{
		id : morphlineEnrich
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [



  # # Normalized username
 #{
 #  SSHNormalizeUsername {
 #    usernameField : username
 #    normalizedUsernameField : normalized_username
 #  }
 #}


   # resolve IP into hostname - Deeprecated - Moved to the streaming
   #{
   #  IpToHostname {
   #    ipAddress : source_ip
   #    timeStamp: date_time_unix
   #    outputFieldName : hostname
   #    restrictToADName : false
   #  }
   #}


      # classify host for both the source machine and the destination machine

   # {
   #   ClassifyHost {
   #     hostnameField : hostname
   #     classificationField = src_class
   #   }
   # }
   # {
   #   ClassifyHost {
   #     hostnameField : target_machine
   #     classificationField : dst_class
   #   }
   # }



      # Computer clustering for both the source machine and the destination machine

   #
   # GetComputerClusterName {
   #   hostnameField : hostname
   #   clusterField : normalized_src_machine
   # }
   #


   # {
   #   GetComputerClusterName {
   #     hostnameField : target_machine
   #     clusterField : normalized_dst_machine
   #   }
   # }



      # if status is "Accepted", we upadte the user's last-activity in Mongo
     #{
     #  if {
     #    conditions : [
     #      { equals { status : ["Accepted"]  } }
     #    ]
     #    then : [
     #      {
     #        UserLastActivityUpdate {
     #          logEventsType : ssh
     #          normalizedUsernameField : normalized_username
     #          epochtimestampField : date_time_unix
     #        }
     #      }
     #    ]
     #  }
     #}



      ### Machine Tags

    # # Update Sensitive tag if needed
    # {
    #   IsSensitiveMachine {
    #     machineNameField : target_machine
    #     isSensitiveMachineField : is_sensitive_machine
    #   }
    # }


      ### User Tags


      # Update Service tag if needed
    # {
    #   IsUserServiceAccount {
    #     usernameField : normalized_username
    #     isUserServiceAccountField : isUserServiceAccount
    #   }
    # }

    # # Update Administrator tag if needed
    # {
    #   IsUserAdministrator {
    #     usernameField : normalized_username
    #     isUserAdministratorField : isUserAdministrator
    #   }
    # }

    # # Update Executive tag if needed
    # {
    #   IsUserExecutive {
    #     usernameField : normalized_username
    #     isUserExecutiveField : isUserExecutive
    #   }
    # }

		]
	}
]
