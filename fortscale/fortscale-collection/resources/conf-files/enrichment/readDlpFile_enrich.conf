morphlines: [
  {
    id: dlpfileEnrich
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      #In case of destination file access event
      #     1.filter all the events that the destination_file_name is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Copy","File Move","File Recycle"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [destination_file_name]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}

      #In case of SOURCE  file access event
      #     1.filter all the events that the source_file_name is empty
      {
        if {
          conditions: [{contains  {event_description: ["File Copy","File Delete","File Move","File Recycle"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [source_file_name]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      # set metadata
      {
        setValues {
          data_source: ["dlpfile"]
          last_state: ["etl"]
          date_time_unix: "@{date_time}"
          is_rdp:["false"]
          is_admin_activity:["false"]
          is_registry_changed:["false"]
        }
      }

      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}

      #RDP Event mark
      {
        if {
          conditions: [{equals {application: "mstsc.exe"}}]
          then: [
            {
              setValues {
                is_rdp:["true"]
              }
            }
          ]

          else : [
            {
              #Admin Event mark
              if {
                conditions: [{contains {application: ["powershell.exe","powercfg.exe","eventvwr.exe","compmgmt.exe","taskschd.exe","secpol.exe"]}}]
                then: [
                  {
                    setValues {
                      is_admin_activity:["true"]
                    }
                  }
                ]
                else :[
                  {
                    #Registry changed Event mark
                    if {
                      conditions: [{contains {application: ["regedit.exe"]}}]
                      then: [
                        {
                          setValues {
                            is_registry_changed:["true"]
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}

      # normalized_src_machine should be like username
      {
        setValues {
          normalized_src_machine:"@{hostname}"
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}

      # normalize date_time_unix format
      {
        convertTimestampFortscale {
          field: date_time_unix
          inputFormats : ["MM/dd/yyyy HH:mm","MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss","yyyy-MM-dd HH:mm:ss.SSS","yyyy-MM-dd HH:mm:ss","MM/dd/yyyy hh:mm:ss aaa"]
          outputFormat: "unixTimeInSeconds"
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      # normalize date_time format
      {
        convertTimestampFortscale {
          field: date_time
          inputFormats : ["MM/dd/yyyy HH:mm","MM/dd/yyyy h:mm:ss a","M/dd/yyyy h:mm:ss a","MM/dd/yyyy HH:mm:ss","yyyy-MM-dd HH:mm:ss.SSS","yyyy-MM-dd HH:mm:ss","MM/dd/yyyy hh:mm:ss aaa"]
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }

      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
    ]
  }
]
