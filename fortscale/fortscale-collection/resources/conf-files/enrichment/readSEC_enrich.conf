morphlines : [
  {
    id: SecurityEvents_Enrich
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands : [

      #Retrive the kerberos options
      {
        ParseKerberosTicketOptions {
          ticketOptionsField : ticket_options
          forwardableField : forwardable
          forwardedField : forwarded
          proxiedField : proxied
          postdatedField : postdated
          renewRequestField : renew_request
          constraintDelegationField : constraint_delegation
        }
      }

      #User enrich logics - Ip resolving , machine filter , Host classify and clustering
      {
        if {
          conditions : [
            { equals { isComputer : [false] } }
          ]
          then : [
            {
              IpToHostname {
                ipAddress : client_address
                timeStamp: date_time_unix
                outputFieldName : machine_name
                restrictToADName : true
              }
            }

            {
              FilterUnresolvedMachine{
                machineNameField : machine_name
              }
            }

            {
              ClassifyHost {
                hostnameField : machine_name
                classificationField : src_class
              }
            }

            {
              ClassifyHost {
                hostnameField : service_name
                classificationField : dst_class
              }
            }


            {
              GetComputerClusterName {
                hostnameField : machine_name
                clusterField : normalized_src_machine
              }
            }



            {
              GetComputerClusterName {
                hostnameField : service_name
                clusterField : normalized_dst_machine
              }
            }

            #Compute the Sec normalize user name (depend on account_name)
            {
              SECNormalizeUsername {
                usernameField : account_name
                normalizedUsernameField : normalized_username
              }
            }

            #Tag the user based on his normalized user nmae
            {
              IsUserServiceAccount {
                usernameField : normalized_username
                isUserServiceAccountField : isUserServiceAccount
              }
            }
            {
              IsUserAdministrator {
                usernameField : normalized_username
                isUserAdministratorField : isUserAdministrator
              }
            }
            {
              IsUserExecutive {
                usernameField : normalized_username
                isUserExecutiveField : isUserExecutive
              }
            }

          #{
          #  if {
          #    conditions : [
          #      { equals { failure_code : [0x0] } }
          #    ]
          #    then : [
          #      {
          #        UserLastActivityUpdate {
          #          logEventsType : login
          #          normalizedUsernameField : normalized_username
          #          epochtimestampField : date_time_unix
          #        }
          #      }
          #    ]
          #  }
          #}


            # in case of 4768 for user make the is sensetive tagging based on the machine_name else based on the service_name
            {
              if {
                conditions : [{ equals { eventCode : ["4768"] } } ]
                then:[
                  #Taag the machine
                  {
                    IsSensitiveMachine {
                      machineNameField : machine_name
                      isSensitiveMachineField : is_sensitive_machine
                    }
                  }

                ]

                else:[
                  #Taag the machine
                  {
                    IsSensitiveMachine {
                      machineNameField : service_name
                      isSensitiveMachineField : is_sensitive_machine
                    }
                  }

                ]
              }
            }





          ]

          #Case that the event represent computer
         # else:[
#
#
         #   {
         #     #In cast that its not 4624 event and the status is SUCCESS then update the user last activity
         #     if {
         #       conditions : [ { not { equals { eventCode : ["4624"] } } }]
         #       then:[
         #         {
         #           if {
         #             conditions : [
         #               { equals { status : ["SUCCESS"]  } }
         #             ]
         #             then : [
         #               {
         #                 UserLastActivityUpdate {
         #                   logEventsType : login
         #                   normalizedUsernameField : normalized_username
         #                   epochtimestampField : date_time_unix
         #                 }
         #               }
         #             ]
         #           }
         #         }
#
         #       ]
         #     }
         #   }
#
         # ]
         #
        }
      }





    ]



  }
]
