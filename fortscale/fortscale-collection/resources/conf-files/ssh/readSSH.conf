morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
    commands : [
      {
        if {
          conditions: [
            {equals {isComputer: [true]}}
          ]
          then: [
            {LogFilterEvent { errorMessage: "service_name is computer"}}
            {
              dropRecord {}
            }
          ]
        }
      }
      {
        split {
          inputField: message
          outputFields: [date_time, "", target_machine, status, auth_method, username, source_ip]
          separator: ","
        }
      }
      {toString {field: date_time, trim: true}}
      {toString {field: target_machine, trim: true}}
      {toString {field: status, trim: true}}
      {toString {field: auth_method, trim: true}}
      {toString {field: username, trim: true}}
      {toString {field: source_ip, trim: true}}
      {
        EmptyObjectFilter {
          filterFields : [username,source_ip,target_machine]
        }
      }
      {
        OverFlowFilter {
          eventsType : ssh
          criteria : [username]
          threshold : 100000
        }
      }
      {
        OverFlowFilter {
          eventsType : ssh
          criteria : []
          threshold : 1000000
        }
      }
      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {
                  findReplace {
                    field : source_ip
                    pattern : "::ffff:"
                    isRegex : false
                    replacement : ""
                    replaceFirst : false
                  }
                }
                {
                  findReplace {
                    field : source_ip
                    pattern : "::1"
                    isRegex : false
                    replacement :  "target_machine"
                    replaceFirst : false
                  }
                }
                {
                  findReplace {
                    field : source_ip
                    pattern : "127.0.0.1"
                    isRegex : false
                    replacement : "target_machine"
                    replaceFirst : false
                  }
                }
              ]
            }
          ]
        }
      }
      {
        if {
          conditions : [{equals{source_ip :"target_machine"} }]
          then:[
            {
              setValues {
                source_ip : "@{target_machine}"
              }
            }
          ]
        }
      }
      {
        setValues {
          date_time_unix : "@{date_time}"
        }
      }
      {
        convertTimestampFortscale {
          field : date_time_unix
          inputFormats : ["yyyy-MM-dd'T'HH:mm:ss.000+00:00"]
          outputFormat : "unixTimeInSeconds"
        }
      }
      {
        convertTimestampFortscale {
          field : date_time
          inputFormats : ["yyyy-MM-dd'T'HH:mm:ss.000+00:00"]
          outputFormat : "yyyy-MM-dd HH:mm:ss"
        }
      }
      {
        addValues {
          is_nat : "false"
        }
      }
    ]
  }
]