morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
           setValues {
              data_source : ["kerberos_logins"]
              last_state : ["etl"]
           }
      }

      {
        if {
          conditions : [
            { equals { isComputer : [true] } }
          ]
          then : [
            { logDebug { format : "Record is 4769 event for machine account, Drop the record. Original message was: {}", args : ["@{message}"] } }
            { LogFilterEvent { errorMessage: "Record is 4769 event for machine account"}}
            {
              dropRecord{}
            }
          ]
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                {
                  grok {
                    dictionaryString: """
								TEXT [\S]+
								COMPUTER_NAME (?<= \d\d:\d\d:\d\d )\S+(?= )
								 """
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      message: """%{COMPUTER_NAME:computer_name}\s.+Account Domain:%{TEXT:account_domain}\s.+Service Name:%{TEXT:service_name}\s+Service ID:(\s*)%{TEXT:service_id}\s.+Failure Code:%{TEXT:failure_code}"""
                    }
                  }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
                {
                  addValues {
                    sourceName : "Microsoft Windows security auditing."
                    logfile : "Security"
                    categoryString : "Kerberos Service Ticket Operations"
                    #MISSING
                    recordNumber: 1
                  }
                }
                { toString { field : recordNumber, trim : true } }
                { toString { field : account_name, trim : true } }
                { toString { field : account_domain, trim : true } }
                { toString { field : service_name, trim : true } }
                { toString { field : service_id, trim : true } }
                { toString { field : failure_code, trim : true } }
              ]
            }
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
            {
              # fallback rule when grok failed to match properties
              commands : [
                { logWarn { format : "Record does not contain proper 4769 grok fields, Drop the record. Original message was: {}", args : ["@{message}"] } }
                { LogFilterEvent { errorMessage: "Record does not contain proper 4769 grok fields"}}
                { dropRecord {} }
              ]
            }
            {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
          ]
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        if {
          conditions : [
            { equals { service_name : [] } }
          ]
          then : [
            { logWarn { format : "Record does not contain service_name field, Drop the record. Original message was: {}", args : ["@{message}"] } }
            { LogFilterEvent { errorMessage: "Record does not contain service_name field"}}
            { dropRecord {} }
          ]
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      {
        if {
          conditions : [
            { containsText { service_name : [krbtgt] } }
          ]
          then : [
            { LogFilterEvent { errorMessage: "Service Name contains krbtgt"}}
            { dropRecord {} }
          ]
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
      {
        FilterWhenServiceNameIsNotComputer{
          serviceName : service_name
          regex : "(.+)\\$.*# #$1"
        }
      }
      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
      {
        java {
          imports : ""
          code: """
				Object fieldVal = record.getFirstValue("service_name");
				if (fieldVal!=null && fieldVal instanceof String) {
					String serviceName = (String)fieldVal;
					int dollar_idx = serviceName.indexOf('$');
					if ( -1 == dollar_idx ) {
						return child.process(record);
					}
					record.replaceValues("service_name", serviceName.substring(0, dollar_idx));
				}
				return child.process(record);
				"""
        }
      }
      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
      # if the ip address is 127.0.0.1, the event originates from the domain controller, use the computer name
      # as the hostname
      {
        if {
          conditions : [
            { equals { client_address : ["127.0.0.1"] } }
          ]
          then : [
            { logDebug { format : "setting hostname to domain controller name on message: {}", args:  ["@{message}"] } }
            {
              setValues {
                machine_name : "@{computer_name}"
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
    ]
  }
]
