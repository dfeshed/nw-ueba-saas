morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
           setValues {
              data_source : ["kerberos_tgt"]
              last_state : ["etl"]
           }
      }

      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                  grok {
                    dictionaryString : """
							  	ACCOUNT_DOMAIN (?<=Supplied Realm Name:).+?(?=User ID:)
							  	USER_ID (?<=User ID:).+?(?=Service Information:)
							  	PRE_AUTHENTICATION_TYPE (?<=Pre-Authentication Type:).+?(?=Certificate Information:)
							  	RESULT_CODE (?<=Result Code:).+?(?=Ticket Encryption Type:)
								 """
                    findSubstrings : true
                    addEmptyStrings : true
                    numRequiredMatches : all
                    expressions : {
                      messageData : "%{ACCOUNT_DOMAIN:account_domain}|%{USER_ID:security_id}|%{PRE_AUTHENTICATION_TYPE:authentication_type}|%{RESULT_CODE:failure_code}"
                    }
                  }
                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                { toString { field : account_domain, trim : true } }
                { toString { field : security_id, trim : true } }
                { toString { field : authentication_type, trim : true } }
                { toString { field : failure_code, trim : true } }
              ]
            }
            {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
            {
              # fallback rule when grok failed to match properties
              commands : [
                { logWarn { format : "Record does not contain proper 4768 grok fields, Drop the record. Original message was: {}", args : ["@{message}"] } }
                { LogFilterEvent { errorMessage: "Record does not contain proper 4768 grok fields"}}
                { dropRecord {} }
              ]
            }
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
          ]
        }
      }

      {
        findReplace {
          field : security_id
          isRegex : false
          pattern : "'"
          replacement : ""
        }
      }
      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      {
        EmptyObjectFilter {
          filterFields : [account_domain,failure_code]
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        if {
          conditions : [
            { equals { isComputer : [true] } }
          ]
          then : [
            {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
            {

              FilterOUMachine {
                hostnameField : account_name
                regex : "(.+)\\$$# #$1"
              }

            }
            {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
            {
              ComputerLoginUpdate {
                timestampepoch_field : date_time_unix
                ipaddress_field: client_address
                hostname_field : account_name
                domain_field : account_domain
              }
            }
            {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
          ]
          else : [
            {
              if {
                conditions : [
                  { equals { failure_code : [0x0] } }
                ]
                then : [
                  {
                    setValues {
                      status : ["SUCCESS"]
                    }
                  }
                ]
                else : [
                  {
                    setValues {
                      status : ["FAILURE"]
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
          ]
        }
      }
      {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
    ]
  }
]
