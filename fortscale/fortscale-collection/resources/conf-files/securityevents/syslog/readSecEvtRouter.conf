morphlines: [
  {
    id: morphline1
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        grok {
          dictionaryString: """
								DATE .+(?<= \d\d:\d\d:\d\d)
								TEXT .+
								 """
          findSubstrings: true
          addEmptyStrings: true
          numRequiredMatches: all
          expressions: {
            message: """%{DATE:date_time}\s%{TEXT:messageData}"""
          }
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                {
                  grok {
                    dictionaryString: """
		  						EVENT_CODE (?<=\[success\]\040)[0-9]+|(?<=\[failure\]\040)[0-9]+
		  						ACCOUNT_NAME (?<=Account Name:).+?(?=Supplied Realm Name)|(?<=Account Name:).+?(?=Account Domain)|(?<=Account Name:).+?(?=Service Information)
								 """
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      messageData: "%{ACCOUNT_NAME:account_name}|%{EVENT_CODE:eventCode}"
                    }
                  }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
                {toString {field: account_name, trim: true}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
      {
        EmptyObjectFilter {
          filterFields: [account_name, eventCode]
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      # Adding isComputer.
      {
        java {
          imports: "import java.util.*;"
          code:
            """
            Boolean isComputer = false;
            List<String> fieldValues = record.get("account_name");
            for(String account_name: fieldValues){
              if(account_name.contains("$")){
                isComputer = true;
                break;
              }
            }
            record.replaceValues("isComputer", isComputer);
            return child.process(record);
            """
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        AddYearToDatetime {
          dateFormat: "yyyy MMM dd HH:mm:ss"
          timezone: timezone_input
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      {
        addValues {
          date_time_unix: "@{date_time}"
        }
      }
      {
        convertTimestampFortscale {

          field: date_time_unix
          inputTimezoneField: timezone_input
          outputFormat: "unixTimeInSeconds"
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
    ]
  }
]
