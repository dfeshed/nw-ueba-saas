morphlines: [
  {
    id: Parsing_SecurityEvents
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        split {
          inputField: message
          outputFields: [eventCode, date_time]
          separator: ","
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {not {equals {eventCode: ["4624"]}}}
          ]
          then: [
            {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
            {
              split {
                inputField: message
                outputFields: ["", "", account_name, ticket_options, client_address]
                separator: ","
              }
            }
            {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
            {toString {field: client_address, trim: true}}
            {toString {field: ticket_options, trim: true}}
            {toString {field: account_name, trim: true}}
            {
              EmptyObjectFilter {
                filterFields: [eventCode, date_time, account_name, client_address, ticket_options]
              }
            }
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
            {
              addValues {
                timezone: "UTC"
                timezone_input: "@{timezone}"
              }
            }
            {
              OverFlowFilter {
                eventsType: securityEvents
                criteria: [eventCode, account_name]
                threshold: 100000
              }
            }
            {
              OverFlowFilter {
                eventsType: securityEvents
                criteria: [eventCode]
                threshold: 2000000
              }
            }
            {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
            {
              findReplace {
                field: account_name
                isRegex: false
                pattern: "'"
                replacement: ""
              }
            }
            {
              addValues {
                timeGeneratedRaw: "@{date_time}"
                date_time_unix: "@{date_time}"
              }
            }
            {
              java {
                imports: "import java.util.*;"
                code:
                  """
							String account_name = (String)record.getFirstValue("account_name");
							Boolean isComputer = account_name.contains("$") ? true : false;
							record.replaceValues("isComputer", isComputer);
							return child.process(record);
							"""
              }
            }
            {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
            {
              tryRules {
                catchExceptions: true
                throwExceptionIfAllRulesFailed: false
                rules: [
                  {
                    commands: [
                      {
                        convertTimestampFortscale {
                          field: date_time_unix
                          inputTimezoneField: timezone_input
                          outputFormat: "unixTimeInSeconds"
                        }
                      }
                    ]
                  }
                ]
              }
            }
            {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
            {
              tryRules {
                catchExceptions: true
                throwExceptionIfAllRulesFailed: false
                rules: [
                  {
                    commands: [
                      {
                        findReplace {
                          field: client_address
                          pattern: "::1"
                          isRegex: false
                          replacement: "127.0.0.1"
                          replaceFirst: false
                        }
                      }
                      {
                        findReplace {
                          field: client_address
                          pattern: "::ffff:"
                          isRegex: false
                          replacement: ""
                          replaceFirst: false
                        }
                      }
                      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
                    ]
                  }
                ]
              }
            }
            {
              addValues {
                is_nat: false
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
    ]
  }
]