
morphlines: [
  {
    id: morphline1
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        setValues {
          data_source: ["kerberos_logins"]
          last_state: ["etl"]
        }
      }

      {
        if {
          conditions: [
            {equals {isComputer: [true]}}
          ]
          then: [
            {logDebug {format: "Record is 4769 event for machine account, Drop the record. Original message was: {}", args: ["@{message}"]}}
            {LogFilterEvent {errorMessage: "Record is 4769 event for machine account"}}
            {
              dropRecord {}
            }
          ]
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                {
                  # parse message in the format:
                  # 2014-03-21T23:24:58.000+02:00|03/21/2014 11:24:58 PM LogName=Security SourceName=Microsoft Windows security auditing. EventCode=4769 EventType=0 Type=Information ComputerName=Fs-DC-01.Fortscale.dom TaskCategory=Kerberos Service Ticket Operations OpCode=Info RecordNumber=249579343 Keywords=Audit Success Message=A Kerberos service ticket was requested. Account Information: Account Name:	 roees@FORTSCALE.DOM Account Domain:	 FORTSCALE.DOM Logon GUID:	 {99448FA4-399E-D675-CD76-9212248B50D8} Service Information: Service Name:	 FS-DC-01$ Service ID:	 FORTSCALE\\FS-DC-01$ Network Information: Client Address:	 ::ffff:192.168.100.141 Client Port:	 58076 Additional Information: Ticket Options:	 0x40810000 Ticket Encryption Type:	0x12 Failure Code:	 0x0 Transited Services:	- This event is generated every time access is requested to a resource such as a computer or a Windows service. The service name indicates the resource to which access was requested. This event can be correlated with Windows logon events by comparing the Logon GUID fields in each event. The logon event occurs on the machine that was accessed, which is often a different machine than the domain controller which issued the service ticket. Ticket options, encryption types, and failure codes are defined in RFC 4120.
                  grok {
                    dictionaryString: """
								RECORD_NUMBER (?<=RecordNumber=)[0-9]+
								TEXT [\S]+
								 """
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      messageData: """ComputerName=%{TEXT:computer_name}.+%{RECORD_NUMBER:recordNumber}.+Account Domain:\s+%{TEXT:account_domain}\s.+Service Name:\s+%{TEXT:service_name}\s+Service ID:\s+%{TEXT:service_id}\s.+Failure Code:\s+%{TEXT:failure_code}"""
                    }
                  }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
                {
                  addValues {
                    sourceName: "Microsoft Windows security auditing."
                    logfile: "Security"
                    categoryString: "Kerberos Service Ticket Operations"
                  }
                }
                {toString {field: recordNumber, trim: true}}
                {toString {field: account_name, trim: true}}
                {toString {field: account_domain, trim: true}}
                {toString {field: service_name, trim: true}}
                {toString {field: service_id, trim: true}}
                {toString {field: failure_code, trim: true}}
                {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
              ]
            }
            {
              # fallback rule when grok failed to match properties
              commands: [
                {logWarn {format: "Record does not contain proper 4769 grok fields, Drop the record. Original message was: {}", args: ["@{message}"]}}
                {LogFilterEvent {errorMessage: "Record does not contain proper 4769 grok fields"}}
                {dropRecord {}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {service_name: []}}
          ]
          then: [
            {logWarn {format: "Record does not contain service_name field, Drop the record. Original message was: {}", args: ["@{message}"]}}
            {LogFilterEvent {errorMessage: "Record does not contain service_name field"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {containsText {service_name: [krbtgt]}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Service name contains krbtgt"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      {
        FilterWhenServiceNameIsNotComputer {
          serviceName: service_name
          regex: "(.+)\\$.*# #$1"
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
      {
        java {
          imports: ""
          code: """
				Object fieldVal = record.getFirstValue("service_name");
				if (fieldVal!=null && fieldVal instanceof String) {
					String serviceName = (String)fieldVal;
					int dollar_idx = serviceName.indexOf('$');
					if ( -1 == dollar_idx ) {
						return child.process(record);
					}
					record.replaceValues("service_name", serviceName.substring(0, dollar_idx));
				}
				return child.process(record);
				"""
        }
      }
      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
      # if the ip address is 127.0.0.1, the event originates from the domain controller, use the computer name
      # as the hostname
      {
        if {
          conditions: [
            {equals {client_address: ["127.0.0.1"]}}
          ]
          then: [
            {logDebug {format: "setting hostname to domain controller name on message: {}", args: ["@{message}"]}}
            {
              setValues {
                machine_name: "@{computer_name}"
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
      {
        DcServiceFilter {
          fieldName: service_name
        }
      }
    ]
  }
]
