morphlines: [
  {
    id: process4771
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {isComputer: [true]}}
          ]
          then: [
            {logWarn {format: "Record is 4771 for machine_account, Drop the record. Original message was: {}", args: ["@{message}"]}}
            {LogFilterEvent {errorMessage: "Record is 4771 for machine_account"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                {
                  grok {
                    dictionaryString: """
					SECURITY_ID (?<=Security ID:).+?(?=Account Name:)
					ACCOUNT_DOMAIN (?<=Service Name:).+?(?=Network Information:)
					FAILURE_CODE (?<=Failure Code:).+?(?=Pre-Authentication Type:)
					PRE_AUTHENTICATION_TYPE (?<=Pre-Authentication Type:).+?(?=Certificate Information:)
					 """
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      messageData: "%{SECURITY_ID:security_id}|%{ACCOUNT_DOMAIN:account_domain}|%{FAILURE_CODE:failure_code}|%{PRE_AUTHENTICATION_TYPE:authentication_type}"
                    }
                  }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
                {toString {field: account_domain, trim: true}}
                {toString {field: security_id, trim: true}}
                {toString {field: account_name, trim: true}}
                {toString {field: authentication_type, trim: true}}
                {toString {field: failure_code, trim: true}}
                {
                  FortscaleExtractDomainName {
                    field: account_domain
                  }
                }
                {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
              ]
            }
            {
              # fallback rule when grok failed to match properties
              commands: [
                {logWarn {format: "Record does not contain proper grok fields, Drop the record. Original message was: {}", args: ["@{message}"]}}
                {LogFilterEvent {errorMessage: "Record does not contain proper grok fields"}}
                {dropRecord {}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {security_id: []}}
          ]
          then: [
            {logWarn {format: "Record does not contain security_id field, Drop the record. Original message was: {}", args: ["@{message}"]}}
            {LogFilterEvent {errorMessage: "Record does not contain security_id"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {failure_code: []}}
          ]
          then: [
            {logWarn {format: "Record does not contain failure_code field, Drop the record. Original message was: {}", args: ["@{message}"]}}
            {LogFilterEvent {errorMessage: "Record does not contain failure_code field"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      {
        setValues {
          status: ["FAILURE"]
          data_source: ["kerberos_tgt"]
          last_state: ["etl"]
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
      # Is written to the same kafka topic as 4768 and will be enriched by the samza tasks.
      #		{
      #			IsSensitiveMachine {
      #				machineNameField : machine_name
      #				isSensitiveMachineField : is_sensitive_machine
      #			}
      #		}
      {
        DcServiceFilter {
          fieldName: machine_name
        }
      }
    ]
  }
]
