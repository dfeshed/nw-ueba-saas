morphlines: [
  {
    id: sec4624
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        grok {
          dictionaryString: """
			  	ACCOUNT_NAME (?<=Account Name:).+?(?=Account Domain:)
			  	ACCOUNT_DOMAIN (?<=Account Domain:).+?(?=Logon ID:)
			  	SOURCE_IP (?<=Source Network Address:).+?(?=Source Port:)
			  	LOGON_PROCESS (?<=Logon Process:).+?(?=Authentication Package:)
			  	REPORTING_SERVER (?<=ComputerName=).+?(?=TaskCategory=)
			  	TIMEZONE (?<=timezone )\S+
				 """
          findSubstrings: true
          addEmptyStrings: true
          numRequiredMatches: all
          expressions: {
            messageData: "%{REPORTING_SERVER:reporting_server}|%{ACCOUNT_DOMAIN:account_domain}|%{ACCOUNT_NAME:account_name}|%{SOURCE_IP:source_ip}|%{LOGON_PROCESS:logon_process}|%{TIMEZONE:timezone}"
          }
        }
      }
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {toString {field: account_name, trim: true}}
      {toString {field: source_ip, trim: true}}
      {toString {field: logon_process, trim: true}}
      {toString {field: account_domain, trim: true}}
      {toString {field: reporting_server, trim: true}}
      {toString {field: timezone, trim: true}}
      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
      {
        EmptyObjectFilter {
          filterFields: [account_name, source_ip, logon_process, reporting_server]
        }
      }
      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
      # filter non kerberos events
      {
        if {
          conditions: [
            {not {equals {logon_process: [Kerberos]}}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Non Kerberos Event"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
      # filter local ip6v ip address
      {
        if {
          conditions: [
            {equals {source_ip: ["::1"]}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Local IPv6 Event"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      # filter local ipv4 address
      {
        if {
          conditions: [
            {equals {source_ip: ["127.0.0.1"]}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Local IPv4 Event"}}
            {dropRecord {}}
          ]
        }
      }
      # filter non computer accounts
      {FilterAccountNameIsNotComputer {indexOfAccountName: 1}}
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      # filter domain servers


      # filter machines not in the desired ou
      {
        FilterOUMachine {
          hostnameField: account_name
          regex: "(.+)\\$$# #$1"
        }
      }

      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      # setup timestamp according to timezone of the reporting server
      {
        if {
          conditions: [
            {equals {timezone: []}}
          ]
          then: [
            {
              GetTimezone {
                sourceType: "sec"
                hostnameField: reporting_server
                timezoneOutputField: timezone_input
              }
            }
          ]
          else: [
            {
              addValues {
                timezone_input: "@{timezone}"
              }
            }
          ]
        }
      }

      {
        addValues {
          date_time_unix: "@{date_time}"
        }
      }
      {
        java {
          imports: "import java.util.*;"
          code: """
				Object rec = record.getFirstValue("date_time_unix");
				String tmp = String.valueOf(rec).substring(0,19);
				record.replaceValues("date_time_unix",tmp);
				return child.process(record);
				"""
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
      {
        convertTimestampFortscale {
          field: date_time_unix
          inputTimezoneField: timezone_input
          outputFormat: "unixTimeInSeconds"
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
      # add the computer ip resolve to the cache and drop the record
      {
        ComputerLoginUpdate {
          timestampepoch_field: date_time_unix
          ipaddress_field: source_ip
          hostname_field: account_name
          domain_field: account_domain
        }
      }
      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
    ]
  }]
