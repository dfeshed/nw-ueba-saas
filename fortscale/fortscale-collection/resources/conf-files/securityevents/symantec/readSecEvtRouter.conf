morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
      {
        grok {
          dictionaryString: """
								DATE (?<=TimeCreated SystemTime=").+?(?="\/>)
								 """
          findSubstrings: true
          addEmptyStrings: true
          numRequiredMatches: all
          expressions: {
            message: """%{DATE:date_time}"""
          }
        }
      }
      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {
                  grok {
                    dictionaryString : """
		  						EVENT_CODE (?<=<EventID>).+?(?=<\/EventID>)
		  						ACCOUNT_NAME (?<=Account Name:).+?(?=Supplied Realm Name)|(?<=Account Name:).+?(?=Account Domain)|(?<=Account Name:).+?(?=Service Information)
								 """
                    findSubstrings : true
                    addEmptyStrings : true
                    numRequiredMatches : all
                    expressions : {
                      message : "%{ACCOUNT_NAME:account_name}|%{EVENT_CODE:eventCode}"
                    }
                  }
                }
                { toString { field : account_name, trim : true } }
              ]
            }
          ]
        }
      }
      {
        EmptyObjectFilter {
          filterFields : [account_name,eventCode]
        }
      }


      # Adding isComputer.
      {
        java {
          imports : "import java.util.*;"
          code:
            """
            Boolean isComputer = false;
            List<String> fieldValues = record.get("account_name");
            for(String account_name: fieldValues){
              if(account_name.contains("$")){
                isComputer = true;
                break;
              }
            }
            record.replaceValues("isComputer", isComputer);
            return child.process(record);
            """
        }
      }
      {
          addValues {
            date_time_unix: "@{date_time}"
          }
      }

      {
        convertTimestampFortscale {
                    field: date_time_unix
                    inputTimezoneField: timezone_input
                    outputFormat: "unixTimeInSeconds"
        }
      }
    ]
  }
]
