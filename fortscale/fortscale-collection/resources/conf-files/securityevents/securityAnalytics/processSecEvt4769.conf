morphlines : [
	{
	    id : morphline1
	    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    	commands : [
    	{ 
			if { 
				conditions : [ 
					{ equals { isComputer : [true] } } 
				] 
				then : [
				{ logDebug { format : "Record is 4769 event for machine account, Drop the record. Original message was: {}", args : ["@{message}"] } }
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
    	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
							dictionaryFiles : [resources/grok-dictionaries/secevents.sa.conf]
							 dictionaryString : """
							 	SERVICE_NAME (?<=Service Name:).+(?=#177Service ID)|(?<=Service Name:).+(?=\s{1,2}Service ID)
							 	"""
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								message : "%{SOURCE_NAME:sourceName}|%{RECORD_NUMBER:recordNumber}|%{LOG_NAME:logfile}|%{ACCOUNT_DOMAIN:account_domain}|%{SERVICE_NAME:service_name}|%{SERVICE_ID:service_id}|%{FAILURE_CODE:failure_code}"
						  	}
						}
      				}
      				{ toString { field : sourceName, trim : true } }
      				{ toString { field : recordNumber, trim : true } }
      				{ toString { field : logfile, trim : true } }
      				{ toString { field : categoryString, trim : true } }
      				{ toString { field : account_name, trim : true } }
      				{ toString { field : account_domain, trim : true } }
      				{ toString { field : service_name, trim : true } }
      				{ toString { field : service_id, trim : true } }
      				{ toString { field : failure_code, trim : true } }
			  		]
				}
				{
					# fallback rule when grok failed to match properties
					commands : [
						{ logWarn { format : "Record does not contain proper 4769 grok fields, Drop the record. Original message was: {}", args : ["@{}"] } }
						{ dropRecord {} }    
					]
				}
		  	]
			}
		}
		{ 
			if { 
				conditions : [ 
					{ equals { service_name : [] } } 
				] 
				then : [
					{ logWarn { format : "Record does not contain service_name field, Drop the record. Original message was: {}", args : ["@{}"] } }
					{ dropRecord {} } 
				] 
			} 
		}
		{
			if {
				conditions : [
					{ containsText { service_name : [krbtgt] } }
				]
				then : [
					{ dropRecord {} }
				]
			}
		}
		{
                        FilterWhenServiceNameIsNotComputer{
                                serviceName : service_name
                                regex : "(.+)\\$.*# #$1"
                        }
                }
                {
                        java {
                                imports : ""
                                code: """
                                if (record.get("account_name").size() > 1) {
                                	String accountName = (String)record.get("account_name").get(0);
                                	String accountName2 = (String)record.get("account_name").get(1);
                                	if (accountName.isEmpty() && accountName2.isEmpty()) {
                                		return true;
                                	}
                                	if (!accountName.isEmpty()) {
                                		record.replaceValues("account_name", accountName);
                                	} else {
                                		record.replaceValues("account_name", accountName2);
                                	}
                                }
                                Object fieldVal = record.getFirstValue("service_name");
                                if (fieldVal!=null && fieldVal instanceof String) {
                                        String serviceName = (String)fieldVal;
                                        int dollar_idx = serviceName.indexOf('$');
                                        if ( -1 == dollar_idx ) {
                                                return child.process(record);
                                        }
                                        record.replaceValues("service_name", serviceName.substring(0, dollar_idx));
                                }
                                return child.process(record);
                                """
                        }
                }
##################################################################
##################################################################
#
#
#	 comment enrichement commands after moving them into streaming
#	 transition haven't been verified for this morphline.
#									please test before using.
#
#
##################################################################
##################################################################
#		{
#			ClassifyHost {
#				hostnameField : service_name
#				classificationField : dst_class
#			}
#		}
#		{
#			GetComputerClusterName {
#				hostnameField : service_name
#				clusterField : normalized_dst_machine
#			}
#		}
#
#		{
#			if {
#				conditions : [
#					{ equals { failure_code : [0x0] } }
#				]
#				then : [
#					{
#						UserLastActivityUpdate {
#							logEventsType : login
#							normalizedUsernameField : normalized_username
#							epochtimestampField : date_time_unix
#						}
#					}
#				]
#			}
#		}
#
#		{
#			IsSensitiveMachine {
#				machineNameField : service_name
#				isSensitiveMachineField : is_sensitive_machine
#			}
#		}
    	]
  	}
]
