morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [
			{logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
			{
				split {
					inputField: messageData
					#144117387552096256,142469366,ELM,1446336136,,,10.8.48.101||Security||<BookmarkList>%0D   <Bookmark Channel='Security' RecordId='225175943' IsCurrent='true'/>%0D </BookmarkList>||Microsoft-Windows-Security-Auditing||4768||262||1446335487||0||SNCH2DCS01.bla-net.ads||||||14||SAPServiceLVM||bla-net||S-1-5-21-1324571244-530250876-991709287-45630||krbtgt||S-1-5-21-1324571244-530250876-991709287-502||0x40810010||0x0||0x12||2||::ffff:10.8.48.74||50087||||||||A Kerberos authentication ticket (TGT) was requested.%0D %0D Account Information:%0D %09Account Name:%09%09%251%0D %09Supplied Realm Name:%09%252%0D %09User ID:%09%09%09%253%0D %0D Service Information:%0D %09Service Name:%09%09%254%0D %09Service ID:%09%09%255%0D %0D Network Information:%0D %09Client Address:%09%09%2510%0D %09Client Port:%09%09%2511%0D %0D Additional Information:%0D %09Ticket Options:%09%09%256%0D %09Result Code:%09%09%257%0D %09Ticket Encryption Type:%09%258%0D %09Pre-Authentication Type:%09%259%0D %0D Certificate Information:%0D %09Certificate Issuer Name:%09%09%2512%0D %09Certificate Serial Number:%09%2513%0D %09Certificate Thumbprint:%09%09%2514%0D %0D Certificate information is only provided if a certificate was used for pre-authentication.%0D %0D Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.
					outputFields: ["", "", "", "", "", "", "", "", reporting_server, "", "", "", account_name, account_domain, "", "", "", "", "", "", "", client_address]
					separator: "||"
				}
			}
			{logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
			{
				addValues {
					#MISSING
					timezone: "UTC"
				}
			}
			{ toString { field : client_address, trim : true } }
			{ toString { field : account_name, trim : true } }
			{ toString { field : account_domain, trim : true } }
			{ toString { field : reporting_server, trim : true } }
			{ toString { field : timezone, trim : true } }
			{logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
			{
				if {
					conditions : [
						{ equals { timezone : [] }}
					]
					then : [
						{
							GetTimezone {
								sourceType : "sec"
								hostnameField : reporting_server
								timezoneOutputField : timezone_input
							}
						}
					]
					else : [
						{
							addValues {
								timezone_input : "@{timezone}"
							}
						}
					]
				}
			}
			{logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
			{
				if {
					conditions : [
						{ equals { account_name : [] } }
					]
					then : [
						{ logWarn { format : "Record does not contain account_name field, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ LogFilterEvent { errorMessage: "Record does not contain account_name field"}}
						{ dropRecord {} }
					]
				}
			}
			{logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
			{
				if {
					conditions : [
						{ equals { client_address : [] } }
					]
					then : [
						{ logError { format : "Record does not contain client_address field, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ LogFilterEvent { errorMessage: "Record does not contain client_address field"}}
						{
							dropRecord{}
						}
					]
				}
			}
			{logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
			{
				convertTimestampFortscale {
					field : date_time
					inputTimezoneField : timezone_input
					outputFormat : "yyyy-MM-dd HH:mm:ss"
				}
			}
			{logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
			{
				addValues {
					date_time_unix : "@{date_time}"
				}
			}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
								{
									convertTimestampFortscale {
										field : date_time_unix
										inputTimezoneField : timezone_input
										outputFormat : "unixTimeInSeconds"
									}
								}
								{logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
							]
						}
					]
				}
			}
			{logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									findReplace {
										field : client_address
										pattern : "::1"
										isRegex : false
										replacement : "127.0.0.1"
										replaceFirst : false
									}
								}
								{
									findReplace {
										field : client_address
										pattern : "::ffff:"
										isRegex : false
										replacement : ""
										replaceFirst : false
									}
								}
							]
						}
					]
				}
			}
			{logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
			{
				FilterOUMachine {
					hostnameField : account_name
					regex : "(.+)\\$$# #$1"
				}
			}
			{logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
			{
				ComputerLoginUpdate {
					timestampepoch_field : date_time_unix
					ipaddress_field: client_address
					hostname_field : account_name
					domain_field : account_domain
					max_batch_size : 10000
				}
			}
			{logDebug {format: "Debug -13 : {}", args: ["@{}"]}}
			{
				addValues {
					isADHostName : true
				}
			}
			{logDebug {format: "Debug -14 : {}", args: ["@{}"]}}
		]
	}
]