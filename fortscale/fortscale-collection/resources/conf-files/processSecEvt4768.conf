morphlines : [
	{
	    id : morphline1
	    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    	commands : [
    	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
		  					dictionaryString : """
								ACCOUNT_NAME (?<=Account Name:).+(?=Supplied Realm Name:)
							  	ACCOUNT_DOMAIN (?<=Supplied Realm Name:).+(?=User ID:)
							  	TICKET_OPTIONS (?<=Ticket Options:).+(?=Result Code:)
							  	PRE_AUTHENTICATION_TYPE (?<=Pre-Authentication Type:).+(?=Certificate Information:)
							  	RESULT_CODE (?<=Result Code:).+(?=Ticket Encryption Type:)
								 """
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								messageData : "%{ACCOUNT_NAME:account_name}|%{ACCOUNT_DOMAIN:account_domain}|%{TICKET_OPTIONS:ticket_options}|%{PRE_AUTHENTICATION_TYPE:authentication_type}|%{RESULT_CODE:failure_code}"
						  	}
						}
      				}
      				{ toString { field : account_name, trim : true } }
      				{ toString { field : account_domain, trim : true } }
      				{ toString { field : ticket_options, trim : true } }
      				{ toString { field : authentication_type, trim : true } }
      				{ toString { field : failure_code, trim : true } }
			  		]
				}
				{
					# fallback rule when grok failed to match properties
					commands : [
						{ dropRecord {} }    
					]
				}
		  	]
			}
		}
		{ 
			if { 
				conditions : [ 
					{ equals { account_name : [] } } 
				] 
				then : [
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
		{ 
			if { 
				conditions : [ 
					{ equals { account_domain : [] } } 
				] 
				then : [
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
		{ 
			if { 
				conditions : [ 
					{ equals { ticket_options : [] } } 
				] 
				then : [
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
		{
			ParseKerberosTicketOptions {
				ticketOptionsField : ticket_options
				forwardableField : forwardable
				forwardedField : forwarded
				proxiedField : proxied
				postdatedField : postdated
				renewRequestField : renew_request
				constraintDelegationField : constraint_delegation
			}
		}
		{
			setValues {
				status : ["SUCCESS"]
			}
		}
      	{
			GetHostnameFromDHCP {
		    	ipAddress : client_address
		        timeStamp: timeGeneratedUnixTime
		        outputRecordName : machine_name
		        host : "127.0.0.1"
		        port : 27017
		        db: "fortscale"
		        collection : "dhcp_log"
		        leaseTimeInMins : 2880
		        graceTimeInMins : 1
			}
      	}
	  	{
			if {
		  		conditions : [
		  			# if machine_name emtpy then
					{ equals  { machine_name : [""] } }
		  		]
		  		then : [
				{
					GetHostnameFromDNS {
						ip_address : client_address
						output_record_name : machine_name
			            short_name : true
						max_queries : 1000
					}
				}
				]
			}
	  	}
    	]
  	}
]
