morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [ 
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									grok {
										findSubstrings : true
										addEmptyStrings : true
										numRequiredMatches : all
										expressions : {
											message : """(?<status>(Accepted|Failed(?= \w+ for \w+ from )))"""
										}
									}
								}
							]
						}
						{
							commands : [
								{	logDebug	{	format : "Record doesn't meet legitimate ssh format. Dropping record: {}", args : ["@{}"] } }
								{	dropRecord {} }
							]
						}
					]
				}
			}	
		
			{
				grok {
					dictionaryFiles : [resources/grok-dictionaries/ssh.sshd.conf]
					expressions : {
						message : "%{DHCP_IP:source_ip}|%{TARGET_MACHINE_AS_IP:target_machine_ip}|%{TARGET_MACHINE:target_machine}|%{DHCP_DATE:date_time}|%{USERNAME:username}|%{AUTH_METHOD:auth_method} "
					}
					findSubstrings : true
					numRequiredMatches : all				
				}
			}




			# handle case that the target machine contain ip
            {
                if {
                    conditions : [
                            {not {equals : {target_machine_ip : [] }}}
                    ]
                    then : [

                            {
                                setValues {
                                    target_machine : []
                                }
                            }


                    ]
                }
             }


			{
				EmptyObjectFilter {
					filterFields : [username,source_ip,target_machine,date_time]
				}
			}

			#the first overflow filter command insures that the overflow is not caused by a single user in the system
			{
				OverFlowFilter {
					eventsType : ssh
					criteria : [username]
					threshold : 100000
				}

			}
			{
				OverFlowFilter {
					eventsType : ssh
					criteria : []
					threshold : 1000000
				}
			}
			{
				SSHNormalizeUsername {
					usernameField : username
					normalizedUsernameField : normalized_username
				}
			}
			
			{
                tryRules {
                    catchExceptions : true
                    throwExceptionIfAllRulesFailed : false
                    rules : [
                    {
                        commands : [
                        {
                            findReplace {
                                field : source_ip
                                pattern : "::ffff:"
                                isRegex : false
                                replacement : ""
                                replaceFirst : false
                            }
                        }
                        {
                            findReplace {
                                field : source_ip
                                pattern : "::1"
                                isRegex : false
                                replacement : "@{target_machine}"
                                replaceFirst : false
                            }
                        }
                        {
                            findReplace {
                                field : source_ip
                                pattern : "127.0.0.1"
                                isRegex : false
                                replacement : "@{target_machine}"
                                replaceFirst : false
                            }
                        }
                        ]
                    }
                    ]
                }
            }
			
			{
				GetTimezone {
					sourceType : "ssh"
					hostnameField : target_machine
					timezoneOutputField : timezone_output
				}
			}

		
			{
				tryRules {
					catchExceptions : false
					throwExceptionIfAllRulesFailed : false
					rules : [
            {
              commands: [

								# Adding year from the system current date to the date_time.
								{
									AddYearToDatetime {
										dateFormat :  "yyyy MMM d HH:mm:ss"
										timezone : Asia/Jerusalem
									}
								}


                {
                  convertTimestampFortscale {
                    field: date_time
                    inputFormats: ["yyyy MMM dd HH:mm:ss"]
                    inputTimezoneField: timezone_output
                    outputFormat: "yyyy-MM-dd HH:mm:ss"
                    #outputTimezoneField : timezone_output
                  }
                }


                {
                  setValues {
                    date_time_unix: "@{date_time}"
                  }
                }

                {
                  convertTimestampFortscale {
                    field: date_time_unix
                    inputFormats: ["yyyy-MM-dd HH:mm:ss"]
                    inputTimezoneField: timezone_output
                    outputFormat: "unixTimeInSeconds"
                    # default outputTimezone : UTC
                  }
                }

              ]
            }
					]
				}
			}

			{
				IpToHostname {
			    	ipAddress : source_ip
					timeStamp: date_time_unix
					outputFieldName : hostname
					restrictToADName : false
				}
	      	}
			
			{
				ClassifyHost {
					hostnameField : hostname
					classificationField = src_class
				}
			}
			{
				ClassifyHost {
					hostnameField : target_machine
					classificationField : dst_class
				}
			}
			{
				GetComputerClusterName {
					hostnameField : hostname
					clusterField : normalized_src_machine
				}
			}
			{
				GetComputerClusterName {
					hostnameField : target_machine
					clusterField : normalized_dst_machine
				}
			}
			
			{
		  		# test if the ip address used is a vpn or any other nat address
		  		MatchIP {
		  			ipAddress : "source_ip"
		  			cidr : "192.168.0.22"
		  			output : "is_nat"
		  		}
		  	}
		  	
		  	{
				if {
					conditions : [
						{ equals { status : ["Accepted"]  } }
					]
					then : [
					  	{
							UserLastActivityUpdate {
								logEventsType : ssh
								normalizedUsernameField : normalized_username
								epochtimestampField : date_time_unix
							}
						}
					]
				}
			}
			
			{
				IsSensitiveMachine {
					machineNameField : target_machine
					isSensitiveMachineField : is_sensitive_machine
				}		
			}
			
			{
				IsUserServiceAccount {
					usernameField : normalized_username
					isUserServiceAccountField : isUserServiceAccount
				}
			}
			
			{
				IsUserAdministrator {
					usernameField : normalized_username
					isUserAdministratorField : isUserAdministrator
				}
			}
			
			{
				IsUserExecutive {
					usernameField : normalized_username
					isUserExecutiveField : isUserExecutive
				}
			} 
		]
	}
]
