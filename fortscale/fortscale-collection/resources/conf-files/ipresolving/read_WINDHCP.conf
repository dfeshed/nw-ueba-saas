# ID,Date,Time,Description,IP Address,Host Name,MAC Address,User Name, TransactionID, QResult,Probationtime, CorrelationID,Dhcid
# 11,11/21/13,14:37:41,Renew,192.168.0.145,iPhone.Fortscale.dom,40A6D9774E8C,,1716278437,0,,,

morphlines: [
  {
    id: morphline1
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {
                  grok {
                    dictionaryString: """
                          	    ORIGINAL_MESSAGE .+(?= Flume enrichment)
                          	    TIMEZONE (?<=timezone )\S+
                                """
                    findSubstrings: true
                    addEmptyStrings: true
                    expressions: {
                      message: "%{ORIGINAL_MESSAGE:original_message}|%{TIMEZONE:timezone}"
                    }
                  }
                }
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                  split {
                    inputField: message
                    outputFields: [ID, Date, Time, Description, ipaddress, hostname, macAddress, User Name, TransactionID, QResult, Probationtime, CorrelationID, Dhcpid]
                    separator: ","
                  }
                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
              ]
            }
            {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
            {
              commands: [
                {
                  split {
                    inputField: message
                    outputFields: [ID, Date, Time, Description, ipaddress, hostname, macAddress, User Name, TransactionID, QResult, Probationtime, CorrelationID, Dhcpid]
                    separator: ","
                  }
                }
              ]
            }
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
          ]
        }
      }
      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {hostname: []}}
          ]
          then: [
            {logDebug {format: "record does not contain hostname field: {}", args: ["@{}"]}}
            { LogFilterEvent { errorMessage: "Record does not contain hostname field"}}
            {dropRecord {}}
          ]
        }
      }
      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: false
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {
                  addValues {
                    timestampepoch: "@{Date} @{Time}" # 11/21/13 15:36:57
                  }
                }

                {
                  GetTimezone {
                    sourceType: "dhcp"
                    timezoneOutputField: timezone_output
                  }
                }
                {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
                {
                  convertTimestampFortscale {
                    field: timestampepoch
                    inputTimezoneField: timezone_output
                    outputFormat: "unixTimeInSeconds"
                  }
                }

                {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
              ]
            }

            {
              commands: [
                {logInfo {format: "Timestamp epoch cannot be converted for recrod: {}", args: ["@{}"]}}
                {LogFilterEvent { errorMessage: "Timestamp epoch cannot be converted"}}
                {dropRecord {}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
    ]
  }
]