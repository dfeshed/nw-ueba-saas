morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
      {
		split {
		  inputField : message
		  separator : "|"
		  outputFields : [distinguishedName,operatingSystem,operatingSystemHotfix,operatingSystemServicePack,operatingSystemVersion,lastLogoff,lastLogon,lastLogonTimestamp,logonCount,whenChanged,whenCreated,cn,description,pwdLastSet,memberOf,objectSid,objectGUID]
		  }
      }
	  {
		if {
		  conditions : [
			{ not {equals { distinguishedName : [""] } } }
		  ]
		  then : [
				  {
					java {
					  imports : "import java.util.*;import java.text.SimpleDateFormat;"
					  code: """

						Calendar calendar = Calendar.getInstance();
						calendar.set(Calendar.SECOND, 0);
						calendar.set(Calendar.MILLISECOND, 0);
						int unroundedMinutes = calendar.get(Calendar.MINUTE);
						int mod = unroundedMinutes % 15;
						calendar.add(Calendar.MINUTE, mod < 8 ? -mod : (15-mod));
						SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd'T'HH:mm");
						record.put("timestamp",sdf.format(calendar.getTime()));
                        // add epoch time
                        record.put("timestampepoch",calendar.getTimeInMillis()/1000);
						return child.process(record);
							"""
					}
				}
		  ]
		  else : [
                { logInfo { format : "No distinguishedName, Drop the record to omit balnk fields." } }
                { dropRecord {} }
          ]
		}
	  }
	  {
		java {
		  imports : "import java.util.*;import java.text.SimpleDateFormat;"
		  code: """
			  String[] fields = {"lastLogoff","lastLogon","lastLogonTimestamp","pwdLastSet"};
			  for (String field : fields) {
				Object fieldVal = record.getFirstValue(field);
				if ((fieldVal != null) && !(String.valueOf(fieldVal).equals(""))) {
					long fieldValLong =0;
					try{
						 fieldValLong = Long.parseLong(String.valueOf(fieldVal).replace('"', ' ').trim());
					}
					catch(Exception x)
					{
						  System.out.println("Exception: " + x.getMessage());
					}

					if (fieldValLong > 0) {
						long FILETIME_EPOCH_DIFF = 11644473600000L;
						long FILETIME_ONE_MILLISECOND = 10 * 1000;
						long dateInMillis = (fieldValLong / FILETIME_ONE_MILLISECOND) - FILETIME_EPOCH_DIFF;
						TimeZone UTCTimeZone = TimeZone.getTimeZone("UTC");
						Calendar cal =Calendar.getInstance(UTCTimeZone);
						cal.setTimeInMillis(dateInMillis);
						SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd'T'HH:mm:ss");
						sdf.setTimeZone(UTCTimeZone);
						record.replaceValues(field,sdf.format(cal.getTime()));
					}
				}
			}
			return child.process(record);
				"""
		}
	  }
	  {
		tryRules {
		  catchExceptions : true
		  throwExceptionIfAllRulesFailed : false
		  rules : [
			{
			  commands : [
				  {
						convertTimestampFortscale {
					  field : whenChanged
					  #20130613123848.0Z
					  outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
					}
				  }
			  ]
			}
			{
			  commands : [
				{ logWarn { format : "Problem whenChanged: {}", args : ["@{whenChanged}"] } }
			  ]
			}
		  ]
		}
	  }
	  {
		tryRules {
		  catchExceptions : true
		  throwExceptionIfAllRulesFailed : false
		  rules : [
			{
			  commands : [
				  {
						convertTimestampFortscale {
					  field : whenCreated
					  #20130613123848.0Z
					  outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
					}
				  }
			  ]
			}
			{
			  commands : [
				{ logWarn { format : "Problem whenCreated: {}", args : ["@{whenCreated}"] } }
			  ]
			}
		  ]
		}
	  }
	  {
	  	toUpper { field : "cn" }
	  }
	  {
	  	findReplace {
	  		field : cn
	  		isRegex : false
	  		pattern : "'"
	  		replacement : ""
	  	}
	  }
	  {
	  	findReplace {
	  		field : distinguishedName
	  		isRegex : false
	  		pattern : "'"
	  		replacement : ""
	  	}
	  }
	  {
	  	java {
		  imports : ""
		  code: """
			Object fieldVal = record.getFirstValue("distinguishedName");
			if (fieldVal!=null && fieldVal instanceof String) {
				String dn = (String)fieldVal;
				record.put("ou", dn.substring(dn.indexOf(',')+1));
			}
			return child.process(record);
			"""
		}
	}
    ]
  }
]
