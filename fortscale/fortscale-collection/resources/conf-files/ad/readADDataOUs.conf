morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
      {
		split {
			inputField : message
			separator : "|"
			outputFields : [distinguishedName,isCriticalSystemObject,isDeleted,defaultGroup,memberOf,managedBy,managedObjects,masteredBy,nonSecurityMemberBL,directReports,whenChanged,whenCreated,cn,c,description,displayName,l,ou,objectSid,objectGUID]
		  }
      }
	  {
		if {
		  conditions : [
			{ not {equals { distinguishedName : [""] } } }
		  ]
		  then : [
				  {
					java {
					  imports : "import java.util.*;import java.text.SimpleDateFormat;"
					  code: """

            TimeZone UTCTimeZone = TimeZone.getTimeZone("UTC");
						Calendar calendar = Calendar.getInstance(UTCTimeZone);
						calendar.set(Calendar.SECOND, 0);
						calendar.set(Calendar.MILLISECOND, 0);
						int unroundedMinutes = calendar.get(Calendar.MINUTE);
						int mod = unroundedMinutes % 15;
						calendar.add(Calendar.MINUTE, mod < 8 ? -mod : (15-mod));
						SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd'T'HH:mm");
						sdf.setTimeZone(UTCTimeZone);
						record.put("timestamp",sdf.format(calendar.getTime()));
                        // add epoch time
                        record.put("timestampepoch",calendar.getTimeInMillis()/1000);
						return child.process(record);
							"""
					}
				}
		  ]
		  else : [
			{ logInfo { format : "No distinguishedName, Drop the record to omit balnk fields." } }
            {dropRecord {} }
		  ]
		}
	  }
	  {
		tryRules {
		  catchExceptions : true
		  throwExceptionIfAllRulesFailed : false
		  rules : [
			{
			  commands : [
				  {
					convertTimestamp {
					  field : whenChanged
					  #20130613123848.0Z
					  inputFormats : ["yyyyMMddHHmmss'.0Z'"]
					  inputTimezone : GMT
					  outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
					  #outputTimezone : IST
					}
				  }
			  ]
			}
			{
			  commands : [
				{ logWarn { format : "Problem whenChanged: {}", args : ["@{whenChanged}"] } }
			  ]
			}
		  ]
		}
	  }
	  {
		tryRules {
		  catchExceptions : true
		  throwExceptionIfAllRulesFailed : false
		  rules : [
			{
			  commands : [
				  {
					convertTimestamp {
					  field : whenCreated
					  #20130613123848.0Z
					  inputFormats : ["yyyyMMddHHmmss'.0Z'"]
					  inputTimezone : GMT
					  outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
					  #outputTimezone : IST
					}
				  }
			  ]
			}
			{
			  commands : [
				{ logWarn { format : "Problem whenCreated: {}", args : ["@{whenCreated}"] } }
			  ]
			}
		  ]
		}
	  }
    ]
  }
]
