morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [
			{logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
			{
				split {
					inputField : message
					outputFields: [distinguishedName,isCriticalSystemObject,isDeleted,badPwdCount,logonCount,primaryGroupID,sAMAccountType,userAccountControl,accountExpires,badPasswordTime,lastLogoff,lockoutTime,assistant,memberOf,managedObjects,manager,masteredBy,directReports,secretary,logonHours,whenChanged,streetAddress,cn,company,c,department,description,displayName,division,mail,employeeID,employeeNumber,employeeType,givenName,l,o,personalTitle,otherFacsimileTelephoneNumber,otherHomePhone,homePhone,otherMobile,mobile,otherTelephone,roomNumber,userPrincipalName,telephoneNumber,title,userParameters,userWorkstations,lastLogon,pwdLastSet,whenCreated,sn,sAMAccountName,objectSid,objectGUID]
					separator : "|"
				}
			}
			{logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
			{
				EmptyObjectFilter {
					filterFields: [sAMAccountName, userPrincipalName]
				}
			}
			{logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
			{
				java {
					imports : "import java.util.*;import java.text.SimpleDateFormat;"
					code: """
						String[] fields = {"accountExpires","lastLogon","pwdLastSet","lockoutTime","badPasswordTime"};
						for (String field : fields) {
						Object fieldVal = record.getFirstValue(field);
						if ((fieldVal != null) && !(String.valueOf(fieldVal).equals(""))) {
							long fieldValLong =0;
							try{
								fieldValLong = Long.parseLong(String.valueOf(fieldVal).replace('"', ' ').trim());
							}
							catch(Exception x)
							{
								System.out.println("Exception: " + x.getMessage());
							}

							if (fieldValLong > 0) {
								long FILETIME_EPOCH_DIFF = 11644473600000L;
								long FILETIME_ONE_MILLISECOND = 10 * 1000;
								long dateInMillis = (fieldValLong / FILETIME_ONE_MILLISECOND) - FILETIME_EPOCH_DIFF;
								TimeZone UTCTimeZone = TimeZone.getTimeZone("UTC");
								Calendar cal =Calendar.getInstance(UTCTimeZone);
								cal.setTimeInMillis(dateInMillis);
								SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd'T'HH:mm:ss");
								sdf.setTimeZone(UTCTimeZone);
								record.replaceValues(field,sdf.format(cal.getTime()));
							}
						}
						}
						return child.process(record);
						"""
				}
			}
			{logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
			{
				if {
					conditions : [
						# if accountExpires = 0 then put the date 30828/09/13T19:48:05
						{ equals  { accountExpires : ["0"] } }
					]
					then : [
						{
							setValues {
								accountExpires : ["30828/09/13T19:48:05"]
							}
						}
					]
				}
			}
			{logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
						commands : [
							{
								convertTimestampFortscale {
									field : whenChanged
									#20130613123848.0Z
									outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
								}
							}
						]
						}
						{
							commands : [
								{ logWarn { format : "Problem whenChanged: {}", args : ["@{whenChanged}"] } }
							]
						}
					]
				}
			}
			{logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
						commands : [
							{
								convertTimestampFortscale {
									field : whenCreated
									#20130613123848.0Z
									outputFormat : "yyyy/MM/dd'T'HH:mm:ss"
								}
							}
						]
					}
					
					{
						commands : [
							{ logWarn { format : "Problem whenCreated: {}", args : ["@{whenCreated}"] } }
						]
					}
					]
				}
			}
			{logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
		]
	}
]
