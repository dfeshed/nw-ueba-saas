morphlines: [
  {
    id: prnLogParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      # parse the raw message, extract all fields from the message, assuming the following format:
      # "2016-01-19T16:07:54.000+0200",set,PrintJob,"HP LaserJet Pro MFP M127-M128 PCLmS","TOMERD-LAP",tomerd,"C:\Users\tomerd\Desktop\processSecEvt4624_symantec.conf",tomerd,15,RAW,"MS_XPS_PROC",,"HP LaserJet Pro MFP M127-M128 PCLmS",spooling,1,1,925,"01/19/2016 14:07:53.995",0
      #{
      #  split {
      #    inputField: message
      #    outputFields: [date_time, "", "", target_machine, source_ip, username, file_name, "", "", "", "", "", "", status, "", total_pages, file_size, "", ""]
      #    separator: ","
      #    isRegex: false
      #    addEmptyStrings: true
      #    trim: true
      #  }
      #}


      #printer = target_machine
      #account_name = uusername
      #source_file = file_name
      #status = ?
      #source_ip = computer_name
      #total_pages = ?
      #file_size = detail_file_size_kb
      {
        split {
          inputField: message
          outputFields: ["","",date_time,application,computer_name,"","","","","","",first_name,last_name,account_user_id,username,"","","","","","","","","","","","","",DNS_hostname,email_sender,email_subject,"",event_id,network_address,local_port,"","","",event_description,"",remote_port,"","","","","","","","","","","","","","","","","","","","","","","","","","",bytes_read,bytes_written,destination_directory,destination_file,"","","",file_size,"","",email_recipient,"",target_machine,printer_job_name,"",source_directory,file_name,"","","","","","","","","","",is_removable,source_drive_type,"",dest_drive_type,"","","","","","","",total_pages]
          #outputFields: [date_time,account_name,time_key,operator_key,equipment_key,action_key,event_id,event_detail_id,application,display_name,account_user_id,event_type,event_description,computer_name,domain_computer_name,source_drive_type,source_drive_description,source_directory,source_file,has_src_classification,dest_drive_type,dest_drive_description,destination_directory,destination_file,printer,printer_job_name,network_address,local_port,remote_port,DNS_hostname,email_sender,email_subject,email_recipient,email_recipient_domain,email_recipient_type,bytes_read,bytes_written,is_outbound,is_removable,was_blocked_event,was_blocked_event_detail,has_alert_event,has_alert_event_detail,detail_file_size_kb,row_insert_date,event_detail_row_insert_date,DWH_source,DWH_insert_date,DWH_update_date,original_event_date_time,source_file_type,destination_file_type,"","",""]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}


      {
        findReplace {
          field: computer_name
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {
        findReplace {
          field: target_machine
          pattern: "\\\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }



      {
        setValues {
          source_ip: "@{computer_name}"
          normalized_src_machine: "@{computer_name}"
          normalized_dst_machine: "@{target_machine}"
          is_from_vpn: "false"
          status:"success"
        }
      }



      {
        EmptyObjectFilter {
          filterFields: [date_time, username, source_ip, target_machine, file_name, total_pages, file_size]
        }
      }



      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      #
      #java {
      #  imports: "import java.util.*;import java.lang.*;import fortscale.collection.monitoring.MorphlineCommandMonitoringHelper;"
      #  code: """
      #                //conver totalPages to integer. Log if cannot
      #                Object totalPages = record.getFirstValue("total_pages");
      #                if (totalPages instanceof String){
      #                  int totalPagesInteger = Integer.parseInt((String)totalPages);
      #                  record.replaceValues("total_pages",totalPagesInteger);
      #                } else {
      #                    MorphlineCommandMonitoringHelper commandMonitoringHelper = new MorphlineCommandMonitoringHelper();
      #                    commandMonitoringHelper.addFilteredEventToMonitoring(record, "total_pages is not a number");
      #                    return false;
      #                }

      #                //conver totalPages to integer. Log if cannot
      #                Object fileSize = record.getFirstValue("file_size");
      #                if (fileSize instanceof String){
      #                  int fileSizeInteger = Integer.parseInt((String)fileSize);
      #                  record.replaceValues("file_size",fileSizeInteger);
      #                } else {
      #                    MorphlineCommandMonitoringHelper commandMonitoringHelper = new MorphlineCommandMonitoringHelper();
      #                    commandMonitoringHelper.addFilteredEventToMonitoring(record, "file_size is not a number");
      #                    return false;
      #                }
      #		return child.process(record);
      #			"""
      #}

      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
      {
        findReplace {
          field: date_time
          pattern: "000000"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {
        findReplace {
          field: username
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }


      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
    ]
  }
]
