morphlines : [
  {
    id : oracleEventsParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands : [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {
                  grok {
                    dictionaryFiles: [resources/grok-dictionaries/oracle.audit.conf]
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      message: "%{USERNAME:username}|%{TARGET_MACHINE:target_machine}|%{SOURCE_IP:source_ip}|%{DATE_TIME:date_time}|%{DB_USERNAME:db_username}|%{SOURCE_MACHINE:hostname}|%{DB_ID:db_id}|%{ACTION_TYPE:action_type}|%{RETURN_CODE:return_code}|%{DB_OBJECT:db_object}|%{PRIV_USED:priv_used}"
                    }
                  }
                }
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                 EmptyObjectFilter {
                              filterFields: [username, date_time, return_code]
                            }

                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                # drop events that are not Logon or Select
                {
                    if {
                        conditions : [
                            { not { equals {action_type : "100"} }}  # i.e. Logon event
                        ]
                        then : [
                            {
                                if { # it seems there is a problem with multiple conditions so they are nested
                                    conditions : [
                                        { not { equals {action_type : "3"} }}  # i.e. Select event
                                    ]
                                    then : [
                                        { LogFilterEvent { errorMessage: "Action type must be Login (100) or Select (3)"} }
                                        { dropRecord {} }
                                    ]
                                }
                            }
                        ]
                    }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
                # Adding year from the system current date to the date_time.
                {
                    AddYearToDatetime {
                        dateFormat :  "yyyy MMM d HH:mm:ss"
                        timezone : timezone_input
                    }
                }
              ]
            }

          ]
        }
      }

      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}     ]
  }
]