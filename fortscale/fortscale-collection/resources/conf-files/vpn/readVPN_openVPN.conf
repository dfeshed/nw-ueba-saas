morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [		
			
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									grok {
										findSubstrings : true
										addEmptyStrings : true
										numRequiredMatches : all
										expressions : {
											message : """(?<status>(SIGTERM\[soft,remote-exit\]|TLS: soft reset|primary virtual IP for|'AUTH_FAILED'))"""
										}
									}
								}
							]
						}
						
						{
							commands : [
								{	logDebug	{	format : "Record is not one of the expected openvpn event types. Dropping record: {}", args : ["@{}"] } }
								{	dropRecord {} }
							]
						}
					]
				}
			}
			
			{
				if {
					conditions : [
						# if session closed
						{ contains  { status : ["TLS: soft reset","SIGTERM[soft,remote-exit]"] } }
					]
					then : [
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.openvpn.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{REPORTING_SERVER:reporting_server}|%{USERNAME_CLOSE:username}|%{SOURCEIPORIPV6:source_ip}|%{DATE_TIME:date_time}|%{TOTALBYTES:totalbytes}"
								}
							}
						}
						
						{
							setValues {
								status : ["CLOSED"]
								date_time_unix: "@{date_time}"
								readbytes:"@{totalbytes}"
								writebytes:""
								duration:""
							}
						}
						
					]
				}
			}
			
			{
				if {
					conditions : [
						# if auth failed then
						{ equals  { status : ['"AUTH_FAILED'"] } }
					]
					then : [
						{ logDebug { format : "AUTH_FAILED: {}", args : ["@{}"] } }
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.openvpn.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{REPORTING_SERVER:reporting_server}|%{USERNAME_FAIL:username}|%{IPORIPV6:source_ip}|%{DATE_TIME:date_time}"
								}
							}
						}
						
						{
							setValues {
								status : ["FAIL"]
								date_time_unix: "@{date_time}"
							}
						}
					]
				}
			}

			{
				if {
					conditions : [
						# if auth success then
						{ equals  { status : [primary virtual IP for] } }
					]
					then : [
						{ logDebug { format : "AUTH SUCCESS: {}", args : ["@{}"] } }
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.openvpn.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{REPORTING_SERVER:reporting_server}|%{USERNAME_SUCCESS:username}|%{SOURCEIPORIPV6:source_ip}|%{DATE_TIME:date_time}|%{LOCALIPORIPV6:local_ip}|%{TIMEZONE:timezone}"
								}
							}
						}
						
						{
							setValues {
								status : ["SUCCESS"]
								date_time_unix: "@{date_time}"
							}
						}
					]
				}
			}
			
			{
				EmptyObjectFilter {
					filterFields : [username]
				}
			}
			
			#the first overflow filter command insures that the overflow is not caused by a single user in the system
			{
				OverFlowFilter {
					eventsType : vpn
					criteria : [username]
					threshold : 100000
				}
			}
			{
				OverFlowFilter {
					eventsType : vpn
					criteria : []
					threshold : 1000000
				}
			}
			{
				if {
				  conditions : [
					{ equals { timezone : [] }}
				  ]
				  then : [
					{
						GetTimezone {
							sourceType : "sec"
							hostnameField : reporting_server
							timezoneOutputField : timezone_input
						}
					}
				  ]
				  else : [
					{
						addValues {
							timezone_input : "@{timezone}"
						}
					}
				  ]
				}
			}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestampFortscale {
										field : date_time
										inputFormats : ["EEE MMM dd HH:mm:ss yyyy"]
										inputTimezoneField : timezone_input
										outputFormat : "yyyy-MM-dd HH:mm:ss"
									}
								}
								
								{
									convertTimestampFortscale {
										field : date_time_unix
										inputFormats : ["EEE MMM dd HH:mm:ss yyyy"]
										inputTimezoneField : timezone_input
										outputFormat : "unixTimeInSeconds"
                                    }
								}
							]
                        }
                        
						{
							commands : [
								{ logWarn { format : "Problem timeGenerated: {}", args : ["@{timeGenerated}"] } }
							]
                        }
					]
                }
			}


			{
				setValues {
					addsessiondata: true
				}
			}
		]
	}
]
