morphlines: [
  {
    id: VPN_ASA_CISCO
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {
                  # filter  message by specific groups "Group <AnyConnect_policy>", "Group = Everyone" or "Group=ciscovpn4cluster" or "Group=ciscovpncluster" or "Group=crdc_webex_employee" or "Group=CRDC_users"  or "Group <apple_short>"
                  # all other will be discarded in the dropRecord command bellow
                  grok {
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {message: """(?<group>(<AnyConnect_policy>|AnyConnect_profile|Everyone|ciscovpn4cluster|ciscovpncluster|crdc_webex_employee|CRDC_users|<apple_short>|<apple_long>|apple_short|apple_long|%ASA-6-11))"""}
                  }
                }
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}

              ]
            }
            {
              commands: [
                {logDebug {format: "Record doesn't meet the specific groups we parse. Dropping record: {}", args: ["@{}"]}}
                {LogFilterEvent {errorMessage: "Record doesn't meet the specific groups we parse"}}
                {
                  dropRecord {}
                }
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      {
        grok {
          dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
          findSubstrings: true
          addEmptyStrings: true
          numRequiredMatches: all
          expressions: {
            message: "%{DATESTAMP:date_time}|%{REPORTERSERVER:reporting_server}|%{EVENTTYPE:EventType}|%{TIMEZONE:timezone}"
          }
        }
      }
      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}

      {
        EmptyObjectFilter {
          filterFields: [date_time, EventType]
        }
      }
      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
      {
        setValues {
          date_time_unix: "@{date_time}"
        }

      }

      {
        if {
          conditions: [
            {equals {timezone: []}}
          ]
          then: [
            {
              GetTimezone {
                sourceType: "vpn"
                hostnameField: reporting_server
                timezoneOutputField: timezone_input
              }
            }
          ]
          else: [
            {
              addValues {
                timezone_input: "@{timezone}"
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
      {
        convertTimestampFortscale {
          field: date_time_unix
          inputTimezoneField: timezone_input
          outputFormat: "unixTimeInSeconds"

        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}


      #Handle session replace/resumed (help us to ignore the seesion start that related to that type)
      {
        if {
          conditions: [{contains {EventType: ["ASA-6-716059", "ASA-5-722032"]}}]
          then: [

            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{USERNAMEAnyConnect:username}"
                }
              }
            }
            {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
            {
              findReplace {
                field: username
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                pattern: """%{REGEX_TO_REMOVE}"""
                isRegex: true
                replacement: ""
                replaceFirst: false
              }
            }


            {
              setValues {
                fake_session: "@{EventType}"
              }
            }
            {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

            #keep in the cahce
            {
              EventsJoiner {
                keys: ["username", "date_time"]
                mergeFields: []
                cacheName: "vpn"
                timeThreshold: -1
                currentRecordDateField: date_time_unix
                cachedRecordDateField: date_time_unix
                dropFromCache: true
              }
            }

            {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
          ]
        }
      }


      {
        if {
          conditions: [{contains {EventType: ["ASA-4-113019"]}}]
          then: [
            {
              if {
                conditions: [{contains {group: ["apple_short", "apple_long"]}}]
                then: [
                  {
                    grok {
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{USERNAMECloseApple:username}|%{SOURCEIPOther:source_ip}|%{DURATION:durationStr}|%{READBYTESOther:readbytes}|%{WRITEBYTESOther:writebytes}"
                      }
                    }
                  }
                  {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
                  {
                    EmptyObjectFilter {
                      filterFields: [username]
                    }
                  }
                  {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}

                  {
                    findReplace {
                      field: username
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      pattern: """%{REGEX_TO_REMOVE}"""
                      isRegex: true
                      replacement: ""
                      replaceFirst: false
                    }
                  }
                  {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}

                ]
                else: [
                  {
                    grok {
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{USERNAMEOther:username}|%{SOURCEIPOther:source_ip}|%{DURATION:durationStr}|%{READBYTESOther:readbytes}|%{WRITEBYTESOther:writebytes}"
                      }
                    }
                  }
                  {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}
                  {
                    findReplace {
                      field: username
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      pattern: """%{REGEX_TO_REMOVE}"""
                      isRegex: true
                      replacement: ""
                      replaceFirst: false
                    }
                  }
                  {logDebug {format: "Debug -15 : {}", args: ["@{}"]}}
                ]
              }
            }
            {
              EmptyObjectFilter {
                filterFields: [source_ip, username]
              }
            }
            {logDebug {format: "Debug -16 : {}", args: ["@{}"]}}
            {
              setValues {
                status: ["CLOSED"]
              }
            }
          ]
          else: [
            {
              #Fail without group sign
              if {
                conditions: [{contains {EventType: ["ASA-6-113013", "ASA-6-113005"]}}]
                then: [
                  {logDebug {format: "Debug -17 : {}", args: ["@{}"]}}

                  {
                    grok {
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{USERNAMEFailsWIthoutGroups:username}|%{SOURCEIP_GLOBALFAIL:source_ip}"
                      }
                    }
                  }
                  {logDebug {format: "Debug -18 : {}", args: ["@{}"]}}
                  {
                    findReplace {
                      field: username
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      pattern: """%{REGEX_TO_REMOVE}"""
                      isRegex: true
                      replacement: ""
                      replaceFirst: false
                    }
                  }
                  {logDebug {format: "Debug -19 : {}", args: ["@{}"]}}
                  {
                    setValues {
                      status: ["FAIL"]
                    }
                  }


                ]

                #handle the groups type + mark session type
                else: [


                  #handle the groups type
                  {


                    #case of group is AnyConnect:
                    if {
                      #case that its session start or fail - type = Group <AnyConnect_policy> (status = success or fail)
                      conditions: [{equals {group: ["<AnyConnect_policy>"]}}]
                      then: [


                        # handle Start Session event
                        # extract source IP field,datetime,user name,local_ip
                        # set values- geoip, date_time_unix , status

                        {
                          grok {
                            dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                            findSubstrings: true
                            addEmptyStrings: true
                            numRequiredMatches: all
                            expressions: {
                              message: "%{USERNAMEAnyConnect:username}|%{SOURCEIPAnyConnect:source_ip}|%{LOCALIPAnyConnect:local_ip}"
                            }
                          }
                        }
                        {logDebug {format: "Debug -20 : {}", args: ["@{}"]}}
                        {
                          findReplace {
                            field: username
                            dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                            pattern: """%{REGEX_TO_REMOVE}"""
                            isRegex: true
                            replacement: ""
                            replaceFirst: false
                          }
                        }

                        {logDebug {format: "Debug -21 : {}", args: ["@{}"]}}
                      ]

                      #other groups (status = success/fail)
                      else: [
                        {
                          #case the session is Everyone
                          if {
                            conditions: [{equals {group: ["Everyone"]}}]
                            then: [
                              # handle Start Session events
                              # extract datetime,user,source IP ,local_ip(optional in case of dtart)
                              # set values- geoip, date_time_unix ,
                              {
                                grok {
                                  dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                  findSubstrings: true
                                  addEmptyStrings: true
                                  numRequiredMatches: all
                                  expressions: {
                                    message: "%{USERNAMEEveryone:username}|%{SOURCEIPEveryone:source_ip}|%{LOCALIPEveryone:local_ip}"
                                  }
                                }


                              }
                              {logDebug {format: "Debug -21 : {}", args: ["@{}"]}}

                              {
                                findReplace {
                                  field: username
                                  dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                  pattern: """%{REGEX_TO_REMOVE}"""
                                  isRegex: true
                                  replacement: ""
                                  replaceFirst: false
                                }
                              }

                              {logDebug {format: "Debug -22 : {}", args: ["@{}"]}}
                            ]
                            else: [
                              #Other group
                              {
                                if {
                                  conditions: [{contains {group: ["ciscovpn4cluster", "ciscovpncluster", "crdc_webex_employee", "CRDC_users",]}}]
                                  then: [
                                    # handle Start Session events
                                    # extract datetime,user,source IP ,local_ip(optional in case of dtart)
                                    # set values- geoip, date_time_unix , status
                                    {logDebug {format: "Debug -23 : {}", args: ["@{}"]}}
                                    {
                                      grok {
                                        dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                        findSubstrings: true
                                        addEmptyStrings: true
                                        numRequiredMatches: all
                                        expressions: {
                                          message: "%{USERNAMEOther:username}|%{SOURCEIPOther:source_ip}|%{LOCALIPOther:local_ip}"
                                        }
                                      }


                                    }
                                    {logDebug {format: "Debug -24 : {}", args: ["@{}"]}}
                                    {
                                      findReplace {
                                        field: username
                                        dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                        pattern: """%{REGEX_TO_REMOVE}"""
                                        isRegex: true
                                        replacement: ""
                                        replaceFirst: false
                                      }
                                    }
                                    {logDebug {format: "Debug -25 : {}", args: ["@{}"]}}
                                  ]

                                  #case of Apple
                                  else: [
                                    {
                                      if {
                                        conditions: [{contains {group: ["<apple_short>", "<apple_long>"]}}]
                                        then: [


                                          # handle Start Session events
                                          # extract datetime,user,source IP ,local_ip(optional in case of dtart)
                                          # set values- geoip, date_time_unix , status
                                          {logDebug {format: "Debug -26 : {}", args: ["@{}"]}}
                                          {
                                            grok {
                                              dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                              findSubstrings: true
                                              addEmptyStrings: true
                                              numRequiredMatches: all
                                              expressions: {
                                                message: "%{USERNAMETEMPApple:username}|%{SOURCEIPApple:source_ip}|%{LOCALIPApple:local_ip}"
                                              }
                                            }

                                          }
                                          {logDebug {format: "Debug -27 : {}", args: ["@{}"]}}

                                          {
                                            EmptyObjectFilter {
                                              filterFields: [username]
                                            }
                                          }

                                          {logDebug {format: "Debug -28 : {}", args: ["@{}"]}}
                                          {
                                            findReplace {
                                              field: username
                                              dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                              pattern: """%{REGEX_TO_REMOVE}"""
                                              isRegex: true
                                              replacement: ""
                                              replaceFirst: false
                                            }
                                          }

                                          {logDebug {format: "Debug -29 : {}", args: ["@{}"]}}
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                  {logDebug {format: "After parsing current record is : {}", args: ["@{}"]}}

                  {
                    EmptyObjectFilter {
                      filterFields: [username]
                    }
                  }

                  {logDebug {format: "After validation current record is : {}", args: ["@{}"]}}


                  #resolving status

                  {
                    #ssesion fail ?
                    if {
                      conditions: [{contains {EventType: ["ASA-6-716002", "ASA-6-713905", "ASA-5-713068", "ASA-4-717037", "ASA-4-713903", "ASA-4-713251", "ASA-3-713218", "ASA-3-713167", "ASA-6-716039"]}}]
                      then: [


                        {
                          setValues {
                            status: ["FAIL"]
                          }
                        }

                        {logDebug {format: "Debug -30 : {}", args: ["@{}"]}}
                        {
                          EmptyObjectFilter {
                            filterFields: [source_ip]
                          }
                        }
                        {logDebug {format: "Debug -31 : {}", args: ["@{}"]}}
                      ]
                      else: [
                        {
                          #Session start
                          if {
                            conditions: [{contains {EventType: ["ASA-4-713228", "ASA-4-722051", "ASA-7-722051"]}}]
                            then: [

                              {logDebug {format: "Debug -32 : {}", args: ["@{}"]}}
                              {
                                EmptyObjectFilter {
                                  filterFields: [source_ip, local_ip]
                                }
                              }
                              {logDebug {format: "Debug -33 : {}", args: ["@{}"]}}

                              #Retrive from cahce
                              {
                                EventsJoinerMerge {
                                  keys: ["username", "date_time"]
                                  mergeFields: ["fake_session"]
                                  dropWhenNoMatch: false
                                  dropFromCache: true
                                  cacheName: "vpn"
                                }
                              }
                              {logDebug {format: "Debug -34 : {}", args: ["@{}"]}}
                              #In case that the current start session is related to prev resume\replace events drop it (fake session)
                              {
                                if {
                                  conditions: [{not {equals {fake_session: []}}}]
                                  then: [
                                    {LogFilterEvent {errorMessage: "Session is related to prev events"}}
                                    {
                                      dropRecord {}
                                    }

                                  ]
                                }
                              }
                              {logDebug {format: "Debug -35 : {}", args: ["@{}"]}}

                              {
                                setValues {
                                  status: ["SUCCESS"]
                                }
                              }

                            ]
                            else: [
                              {LogFilterEvent {errorMessage: "Event type is not match to list of types"}}
                              {
                                dropRecord {}
                              }
                              {logDebug {format: "Debug -36 : {}", args: ["@{}"]}}
                            ]
                          }
                        }

                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -37 : {}", args: ["@{}"]}}


      {
        OverFlowFilter {
          eventsType: vpn
          criteria: [username]
          threshold: 100000
        }
      }
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: []
          threshold: 1000000
        }
      }

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}

      #case of status = CLOSE
      {

        if {
          conditions: [{equals {status: ["CLOSED"]}}]
          then: [

            {
              EmptyObjectFilter {
                filterFields: [source_ip, readbytes, writebytes]
              }
            }

            {logDebug {format: "Debug -38 : {}", args: ["@{}"]}}
            {
              java {
                imports: ""
                code: """
					String durationStr = (String)record.getFirstValue("durationStr");
					try{
					if (durationStr != null) {
						long duration = 0;
						int startInd = 0;
						int endInd = durationStr.indexOf("d", startInd);
						if(endInd > -1){
							duration += 24*3600*Long.parseLong(durationStr.substring(startInd, endInd).trim());
							startInd = endInd+1;
						}
						endInd = durationStr.indexOf("h:", startInd);
						if(endInd > -1){
							duration += 3600*Long.parseLong(durationStr.substring(startInd, endInd).trim());
							startInd = endInd+2;
						}
						endInd = durationStr.indexOf("m:", startInd);
						if(endInd > -1){
							duration += 60*Long.parseLong(durationStr.substring(startInd, endInd).trim());
							startInd = endInd+2;
						}
						endInd = durationStr.indexOf("s", startInd);
						if(endInd > -1){
							duration += Long.parseLong(durationStr.substring(startInd, endInd).trim());
						}
						if(duration > 0){
							record.replaceValues("duration", duration);
						}
					}
					} catch(Exception e){}
					return child.process(record);
					"""
              }
            }

            # Adding total bytes.
            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                                   String readbytes = (String)record.getFirstValue("readbytes");
                                   String writebytes = (String)record.getFirstValue("writebytes");
                                   Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                                   record.replaceValues("totalbytes", totalbytes);
                                   return child.process(record);
                                   """
              }
            }

            #TODO- add the calculation of the duration here

          ]
        }
      }


      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}

      #case of status = SUCCESS

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}

      {
        convertTimestampFortscale {
          field: date_time
          inputTimezoneField: timezone_input
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }


      {logDebug {format: "Debug -39 : {}", args: ["@{}"]}}


      {
        setValues {
          addsessiondata: false
        }

      }
      {logDebug {format: "Debug -40 : {}", args: ["@{}"]}}

    ]

  }
]
