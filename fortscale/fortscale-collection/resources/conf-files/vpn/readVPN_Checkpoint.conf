#11/30/2015:17:40:17 GMT VBLRB6XICONNECT01 0-PPE-1 : SSLVPN TCPCONNSTAT 2583604 0 : Context sankesh_kv@71.231.181.17 - SessionId: 7558- User sankesh_kv - Client_ip 71.231.181.17 - Nat_ip 10.68.248.8 - Vserver 125.16.230.70:443 - Source 71.231.181.17:50659 - Destination 10.67.252.6:443 - Start_time "11/30/2015:17:40:17 GMT" - End_time "11/30/2015:17:40:17 GMT" - Duration 00:00:00  - Total_bytes_send 0 - Total_bytes_recv 1658 - Total_compressedbytes_send 0 - Total_compressedbytes_recv 0 - Compression_ratio_send 0.00% - Compression_ratio_recv 0.00% - Access Allowed - Group(s) "N/A"
morphlines: [
  {
    id: morphline1
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        split {
          inputField: message
          outputFields: [date_time, timezone, reporting_server, "", "", "", eventCode]
          separator: " "
        }
      }
      {toString {field: reporting_server, trim: true}}
      {toString {field: eventCode, trim: true}}
      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
      {
        EmptyObjectFilter {
          filterFields: [eventCode, date_time, timezone]
        }
      }
      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {eventCode: ["ICASTART"]}}
          ]
          then: [
            {
              setValues {
                eventCode: "TCPCONNSTAT"
              }
            }
            {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
            {
              tryRules {
                catchExceptions: true
                throwExceptionIfAllRulesFailed: false
                rules: [
                  {
                    commands: [
                      {
                        grok {
                          findSubstrings: true
                          addEmptyStrings: true
                          numRequiredMatches: all
                          dictionaryString: """
											SESSION_ID (?<=connectionId\s)\S+
											SOURCE_IP (?<=Source\s)\d+.\d+.\d+.\d+
											LOCAL_IP (?<=Destination\s)\d+.\d+.\d+.\d+
											USERNAME (?<=username:domainname\s)\w+
										"""
                          expressions: {
                            message: "%{SESSION_ID:sessionId}|%{SOURCE_IP:source_ip}|%{USERNAME:username}|%{LOCAL_IP:local_ip}"
                          }
                        }
                      }
                      {toString {field: sessionId, trim: true}}
                      {toString {field: source_ip, trim: true}}
                      {toString {field: username, trim: true}}
                      {
                        EmptyObjectFilter {
                          filterFields: [sessionId, source_ip, username]
                        }
                      }
                    ]
                  }
                ]
              }
            }
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
          ]
          else: [
            {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
            {
              tryRules {
                catchExceptions: true
                throwExceptionIfAllRulesFailed: false
                rules: [
                  {
                    commands: [
                      {
                        grok {
                          findSubstrings: true
                          addEmptyStrings: true
                          numRequiredMatches: all
                          dictionaryString: """
											SESSION_ID (?<=SessionId:\s)\d+
											SOURCE_IP (?<=Client_ip\s)[0-9\.]+
											LOCAL_IP (?<=Nat_ip\s)[0-9\.]+
											USERNAME (?<=User\s)\w+
										"""
                          expressions: {
                            message: "%{SESSION_ID:sessionId}|%{SOURCE_IP:source_ip}|%{USERNAME:username}|%{LOCAL_IP:local_ip}"
                          }
                        }
                      }
                      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}
                      {toString {field: sessionId, trim: true}}
                      {toString {field: source_ip, trim: true}}
                      {toString {field: username, trim: true}}
                      {
                        EmptyObjectFilter {
                          filterFields: [sessionId, source_ip, username]
                        }
                      }
                      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
      {
        setValues {
          status: ["SUCCESS"]
          date_time_unix: "@{date_time}"
        }
      }
      {
        if {
          conditions: [
            {equals {timezone: []}}
          ]
          then: [
            {
              GetTimezone {
                sourceType: "sec"
                hostnameField: reporting_server
                timezoneOutputField: timezone_input
              }
            }
          ]
          else: [
            {
              addValues {
                timezone_input: "@{timezone}"
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
                {
                  convertTimestampFortscale {
                    field: date_time
                    inputTimezoneField: timezone_input
                    outputFormat: "yyyy-MM-dd HH:mm:ss"
                    inputFormats: ["MM/dd/yyyy:HH:mm:ss"]
                  }
                }
                {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
                {
                  convertTimestampFortscale {
                    field: date_time_unix
                    inputTimezoneField: timezone_input
                    outputFormat: "unixTimeInSeconds"
                    inputFormats: ["MM/dd/yyyy:HH:mm:ss"]
                  }
                }
                {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {eventCode: ["TCPCONNSTAT"]}}
          ]
          then: [
            {logDebug {format: "Debug -15 : {}", args: ["@{}"]}}
            {
              #fetch from cache
              EventsJoinerMerge {
                keys: ["sessionId", "eventCode", "username"]
                mergeFields: ["fake_session"]
                dropWhenNoMatch: false
                cacheName: "vpn"
              }
            }
            {logDebug {format: "Debug -16 : {}", args: ["@{}"]}}
            #if this is not the first start event for the session - drop it
            {
              if {
                conditions: [{not {equals {fake_session: []}}}]
                then: [{
                  dropRecord {}
                }]
                # this is the first start event for the session - put it in the cache
                else: [
                  {
                    setValues {
                      fake_session: ["TCPCONNSTAT"]
                    }
                  }
                  {logDebug {format: "Debug -17 : {}", args: ["@{}"]}}
                  {
                    EventsJoiner {
                      keys: ["sessionId", "eventCode", "username"]
                      mergeFields: []
                      cacheName: "vpn"
                      timeThreshold: -1
                      currentRecordDateField: date_time_unix
                      cachedRecordDateField: date_time_unix
                      dropFromCache: true
                      processRecord: true
                    }
                  }
                  {logDebug {format: "Debug -18 : {}", args: ["@{}"]}}
                ]
              }
            }
          ]
          else: [
            {
              if {
                conditions: [
                  {equals {eventCode: ["LOGOUT"]}}
                ]
                then: [
                  {logDebug {format: "Debug -19 : {}", args: ["@{}"]}}
                  {
                    tryRules {
                      catchExceptions: true
                      throwExceptionIfAllRulesFailed: false
                      rules: [
                        {
                          commands: [
                            {
                              grok {
                                findSubstrings: true
                                addEmptyStrings: true
                                numRequiredMatches: all
                                dictionaryString: """
														DURATION (?<=Duration\s)(\d:)*\d+:\d+:\d+
														BYTES_SENT (?<=Total_bytes_send\s)[0-9\.]+
														BYTES_RECEIVED (?<=Total_bytes_recv\s)[0-9\.]+
													"""
                                expressions: {
                                  message: "%{DURATION:duration}|%{BYTES_SENT:writebytes}|%{BYTES_RECEIVED:readbytes}"
                                }
                              }
                            }
                            {toString {field: duration, trim: true}}
                            {toString {field: writebytes, trim: true}}
                            {toString {field: readbytes, trim: true}}
                          ]
                        }
                        {logDebug {format: "Debug -20 : {}", args: ["@{}"]}}
                        {
                          EmptyObjectFilter {
                            filterFields: [duration, writebytes, readbytes]
                          }
                        }
                        {logDebug {format: "Debug -21 : {}", args: ["@{}"]}}
                      ]
                    }
                  }
                  {
                    setValues {
                      prev_event_code: ["TCPCONNSTAT"]
                    }
                  }
                  {logDebug {format: "Debug -22 : {}", args: ["@{}"]}}
                  {
                    # take out the respected start session from cache
                    EventsJoinerMerge {
                      keys: ["sessionId", "prev_event_code", "username"]
                      mergeFields: ["fake_session", "local_ip"]
                      dropWhenNoMatch: false
                      dropFromCache: true
                      cacheName: "vpn"
                    }
                  }
                  {logDebug {format: "Debug -23 : {}", args: ["@{}"]}}
                ]
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -24 : {}", args: ["@{}"]}}
    ]
  }
]