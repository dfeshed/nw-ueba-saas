morphlines : [
  {
    id : VPN_F5
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
    commands : [
      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {
                  # filter only message containing "New session from client", "authenticate with" or "bytes in" in message,
                  # all other will be discarded in the dropRecord command bellow
                  grok {
                    findSubstrings : true
                    addEmptyStrings : true
                    numRequiredMatches : all
                    expressions : {
                      message : """(?<type>(New session from client|\): authenticate with|bytes in))"""
                    }
                  }
                }
              ]
            }

            {
              commands : [
                {	logDebug	{	format : "Record doesn't meet legitimate f5 vpn event. Dropping record: {}", args : ["@{}"] } }
                {   LogFilterEvent { errorMessage: "Record doesn't meet legitimate f5 vpn event"}}
                {
                  dropRecord {}
                }
              ]
            }
          ]
        }
      }


      {
        if {
          conditions : [
            { equals { type : [New session from client] }}
          ]
          then : [
            # handle new session events (first event of new sessions)
            # extract source IP field
            # Store the data in mongo to be later correlated with following event
            {
              grok {
                dictionaryFiles : [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings : true
                addEmptyStrings : true
                numRequiredMatches : all
                expressions : {
                  message : "%{SESSION_ID_1:sessionid}|%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{TIMEZONE:timezone}"
                }
              }
            }
            {
              if {
                conditions : [
                  { equals { timezone : [] }}
                ]
                then : [
                  {
                      GetTimezone {
                          sourceType : "vpn"
                          hostnameField : reporting_server
                          timezoneOutputField : timezone_input
                      }
                  }
                ]
                else : [
                  {
                      addValues {
                          timezone_input : "@{timezone}"
                      }
                  }
                ]
              }
            }
            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat :  "yyyy MMM d HH:mm:ss"
                timezone : timezone_input
              }
            }





            {
              setValues {
                date_time_unix: "@{date_time}"
              }
            }

            {
              convertTimestampFortscale {
                field : date_time_unix
                inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                inputTimezoneField : timezone_input
                outputFormat : "unixTimeInSeconds"
              }
            }

            {
              EventsJoiner {
                keys : [ "sessionid" ]
                mergeFields : [ "username", "date_time", "date_time_unix", "status", "normalized_username"  ]
                cacheName : "vpn"
                timeThreshold : 86400
                currentRecordDateField : date_time_unix
                cachedRecordDateField : date_time_unix
                dropFromCache : false
              }
            }

            {
              if {
                conditions : [
                  { equals { status : [] } }
                ]
                then : [
                  {   LogFilterEvent { errorMessage: "Status is empty"}}
                  { dropRecord {} }
                ]
              }
            }

            {
              if {
                conditions : [
                  { equals { status : [SUCCESS] }}
                ]
                then : [
                  # drop session start record from the cache in case of successful authentication
                  # keep it in the cache in case of failure as there might be more authentication
                  # events that will follow
                  {
                    EventsJoinerCacheDrop {
                      keys : [ "sessionid" ]
                      cacheName : "vpn"
                    }
                  }
                ]
              }
            }

          ]
        }
      }


      {
        if {
          conditions : [
            { equals  { type : [)":" authenticate with] } }
          ]
          then : [
            # handle authentication events (second event of sessions)
            # extract the time, username, status fields from the event
            # correlate this event to stored event based on the sessionid
            # adds geolocation and normalize the username
            {
              grok {
                dictionaryFiles : [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings : true
                addEmptyStrings : true
                numRequiredMatches : all
                expressions : {
                  message : "%{REPORTING_SERVER:reporting_server}|%{SESSION_ID_2:sessionid}|%{USERNAME:username}|%{DATESTAMP:date_time}|%{STATUS:status}|%{TIMEZONE:timezone}"
                }
              }
            }
            {
              EmptyObjectFilter {
                filterFields : [username]
              }
            }
            {
              if {
                conditions : [
                  { equals { timezone : [] }}
                ]
                then : [
                  {
                      GetTimezone {
                          sourceType : "vpn"
                          hostnameField : reporting_server
                          timezoneOutputField : timezone_input
                      }
                  }
                ]
                else : [
                  {
                      addValues {
                          timezone_input : "@{timezone}"
                      }
                  }
                ]
              }
            }

            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat :  "yyyy MMM d HH:mm:ss"
                timezone : timezone_input
              }
            }



            {
              setValues {
                date_time_unix: "@{date_time}"
              }
            }



            {
              convertTimestampFortscale {
                field : date_time_unix
                inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                inputTimezoneField : timezone_input
                outputFormat : "unixTimeInSeconds"
              }
            }





            {
              translate {
                field : status
                dictionary : {
                  successful : SUCCESS
                  failed : FAIL
                }
              }
            }


            {
              EventsJoiner {
                keys : [ "sessionid" ]
                mergeFields : [ "source_ip", "country", "region", "city", "isp", "ipusage", "countrycode", "longtitude", "latitude" ]
                cacheName : "vpn"
                timeThreshold : 86400
                currentRecordDateField : date_time_unix
                cachedRecordDateField : date_time_unix
                dropFromCache : false
              }
            }



            {
              if {
                conditions : [
                  { equals { source_ip : [] } }
                ]
                then : [
                  {   LogFilterEvent { errorMessage: "source_ip is empty"}}
                  { dropRecord {} }
                ]
              }
            }


            {
              if {
                conditions : [
                  { equals { status : [SUCCESS] }}
                ]
                then : [
                  # drop session start record from the cache in case of successful authentication
                  # keep it in the cache in case of failure as there might be more authentication
                  # events that will follow
                  {
                    EventsJoinerCacheDrop {
                      keys : [ "sessionid" ]
                      cacheName : "vpn"
                    }
                  }
                ]
              }
            }
          ]
        }
      }


      {
        if {
          conditions : [
            { equals { type : [bytes in] }}
          ]
          then : [
            # handle session statistics events (appear in closing sessions)
            # extract time, session id, bytes in, bytes out fields
            {
              grok {
                dictionaryFiles : [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings : true
                addEmptyStrings : true
                numRequiredMatches : all
                expressions : {
                  message : "%{REPORTING_SERVER:reporting_server}|%{DATESTAMP:date_time}|%{SESSION_ID_3:sessionid}|%{WRITEBYTES:writebytes}|%{READBYTES:readbytes}|%{TIMEZONE:timezone}"
                }
              }
            }
            {
              if {
                conditions : [
                  { equals { timezone : [] }}
                ]
                then : [
                  {
                      GetTimezone {
                          sourceType : "vpn"
                          hostnameField : reporting_server
                          timezoneOutputField : timezone_input
                      }
                  }
                ]
                else : [
                  {
                      addValues {
                          timezone_input : "@{timezone}"
                      }
                  }
                ]
              }
            }
            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat :  "yyyy MMM d HH:mm:ss"
                timezone : timezone_input
              }
            }

            {
              setValues {
                status : ["CLOSED"]
                date_time_unix: "@{date_time}"
              }
            }

            {
              convertTimestampFortscale {
                field : date_time_unix
                inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                inputTimezoneField : timezone_input
                outputFormat : "unixTimeInSeconds"
              }
            }

            # Adding total bytes.
            {
              java {
                imports : "import java.util.*;"
                code:
                  """
                  String readbytes = (String)record.getFirstValue("readbytes");
                  String writebytes = (String)record.getFirstValue("writebytes");
                  Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                  record.replaceValues("totalbytes", totalbytes);
                  return child.process(record);
                  """
              }
            }

            {
              EventsJoinerCacheDrop {
                keys : [ "sessionid" ]
                cacheName : "vpn"
              }
            }
          ]
        }
      }

      #the first overflow filter command insures that the overflow is not caused by a single user in the system
      {
        OverFlowFilter {
          eventsType : vpn
          criteria : [username]
          threshold : 100000
        }
      }

      {
        OverFlowFilter {
          eventsType : vpn
          criteria : []
          threshold : 1000000
        }
      }

      {
        tryRules {
          catchExceptions : true
          throwExceptionIfAllRulesFailed : false
          rules : [
            {
              commands : [
                {
                  convertTimestampFortscale {
                    field : date_time
                    inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
                    inputTimezoneField : timezone_input
                    outputFormat : "yyyy-MM-dd HH:mm:ss"
                  }
                }
              ]
            }

            {
              commands : [
                { logWarn { format : "Problem with covertTimestamp: {}", args : ["@{date_time}"] } }
              ]
            }
          ]
        }
      }


      {
        setValues {
          addsessiondata: true
        }

      }
    ]
  }
]
