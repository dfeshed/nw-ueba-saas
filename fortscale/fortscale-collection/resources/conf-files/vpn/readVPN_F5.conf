morphlines: [
  {
    id: VPN_F5
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                  # filter only message containing "New session from client", "authenticate with" or "bytes in" in message,
                  # all other will be discarded in the dropRecord command bellow
                  grok {
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {
                      message: """(?<type>(New session from client|\): authenticate with|bytes in))"""
                    }
                  }
                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
              ]
            }

            {
              commands: [
                {logDebug {format: "Record doesn't meet legitimate f5 vpn event. Dropping record: {}", args: ["@{}"]}}
                {LogFilterEvent {errorMessage: "Record doesn't meet legitimate f5 vpn event"}}
                {
                  dropRecord {}
                }
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}

      {
        if {
          conditions: [
            {equals {type: [New session from client]}}
          ]
          then: [
            # handle new session events (first event of new sessions)
            # extract source IP field
            # Store the data in mongo to be later correlated with following event
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{SESSION_ID_1:sessionid}|%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{TIMEZONE:timezone}"
                }
              }
            }
            {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
            {
              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat: "yyyy MMM d HH:mm:ss"
                timezone: timezone_input
              }
            }
            {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}


            {
              setValues {
                date_time_unix: "@{date_time}"
              }
            }
            {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
            {
              EventsJoiner {
                keys: ["sessionid"]
                mergeFields: ["username", "date_time", "date_time_unix", "status", "normalized_username"]
                cacheName: "vpn"
                timeThreshold: 86400
                currentRecordDateField: date_time_unix
                cachedRecordDateField: date_time_unix
                dropFromCache: false
              }
            }
            {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
            {
              if {
                conditions: [
                  {equals {status: []}}
                ]
                then: [
                  {LogFilterEvent {errorMessage: "Status is empty"}}
                  {dropRecord {}}
                ]
              }
            }
            {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
            {
              if {
                conditions: [
                  {equals {status: [SUCCESS]}}
                ]
                then: [
                  # drop session start record from the cache in case of successful authentication
                  # keep it in the cache in case of failure as there might be more authentication
                  # events that will follow
                  {
                    EventsJoinerCacheDrop {
                      keys: ["sessionid"]
                      cacheName: "vpn"
                    }
                  }
                ]
              }
            }

          ]
        }
      }

      {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
      {
        if {
          conditions: [
            {equals {type: [)":" authenticate with]}}
          ]
          then: [
            # handle authentication events (second event of sessions)
            # extract the time, username, status fields from the event
            # correlate this event to stored event based on the sessionid
            # adds geolocation and normalize the username
            {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{REPORTING_SERVER:reporting_server}|%{SESSION_ID_2:sessionid}|%{USERNAME:username}|%{DATESTAMP:date_time}|%{STATUS:status}|%{TIMEZONE:timezone}"
                }
              }
            }
            {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}
            {
              EmptyObjectFilter {
                filterFields: [username]
              }
            }
            {logDebug {format: "Debug -15 : {}", args: ["@{}"]}}
            {
              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -16 : {}", args: ["@{}"]}}
            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat: "yyyy MMM d HH:mm:ss"
                timezone: timezone_input
              }
            }

            {logDebug {format: "Debug -17 : {}", args: ["@{}"]}}

            {
              setValues {
                date_time_unix: "@{date_time}"
              }
            }

            {logDebug {format: "Debug -18 : {}", args: ["@{}"]}}

            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }

            {logDebug {format: "Debug -19 : {}", args: ["@{}"]}}


            {
              translate {
                field: status
                dictionary: {
                  successful: SUCCESS
                  failed: FAIL
                }
              }
            }
            {logDebug {format: "Debug -20 : {}", args: ["@{}"]}}

            {
              EventsJoiner {
                keys: ["sessionid"]
                mergeFields: ["source_ip", "country", "region", "city", "isp", "ipusage", "countrycode", "longtitude", "latitude"]
                cacheName: "vpn"
                timeThreshold: 86400
                currentRecordDateField: date_time_unix
                cachedRecordDateField: date_time_unix
                dropFromCache: false
              }
            }

            {logDebug {format: "Debug -21 : {}", args: ["@{}"]}}

            {
              if {
                conditions: [
                  {equals {source_ip: []}}
                ]
                then: [
                  {LogFilterEvent {errorMessage: "source_ip is empty"}}
                  {dropRecord {}}
                ]
              }
            }
            {logDebug {format: "Debug -22 : {}", args: ["@{}"]}}

            {
              if {
                conditions: [
                  {equals {status: [SUCCESS]}}
                ]
                then: [
                  # drop session start record from the cache in case of successful authentication
                  # keep it in the cache in case of failure as there might be more authentication
                  # events that will follow
                  {
                    EventsJoinerCacheDrop {
                      keys: ["sessionid"]
                      cacheName: "vpn"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -23 : {}", args: ["@{}"]}}

      {
        if {
          conditions: [
            {equals {type: [bytes in]}}
          ]
          then: [
            # handle session statistics events (appear in closing sessions)
            # extract time, session id, bytes in, bytes out fields
            {logDebug {format: "Debug -24 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.F5.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{REPORTING_SERVER:reporting_server}|%{DATESTAMP:date_time}|%{SESSION_ID_3:sessionid}|%{WRITEBYTES:writebytes}|%{READBYTES:readbytes}|%{TIMEZONE:timezone}"
                }
              }
            }
            {logDebug {format: "Debug -25 : {}", args: ["@{}"]}}
            {
              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -26 : {}", args: ["@{}"]}}
            # Adding year from the system current date to the date_time.
            {
              AddYearToDatetime {
                dateFormat: "yyyy MMM d HH:mm:ss"
                timezone: timezone_input
              }
            }
            {logDebug {format: "Debug -27 : {}", args: ["@{}"]}}
            {
              setValues {
                status: ["CLOSED"]
                date_time_unix: "@{date_time}"
              }
            }
            {logDebug {format: "Debug -28 : {}", args: ["@{}"]}}
            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -29 : {}", args: ["@{}"]}}
            # Adding total bytes.
            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                  String readbytes = (String)record.getFirstValue("readbytes");
                  String writebytes = (String)record.getFirstValue("writebytes");
                  Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                  record.replaceValues("totalbytes", totalbytes);
                  return child.process(record);
                  """
              }
            }
            {logDebug {format: "Debug -30 : {}", args: ["@{}"]}}
            {
              EventsJoinerCacheDrop {
                keys: ["sessionid"]
                cacheName: "vpn"
              }
            }
          ]
        }
      }
      {logDebug {format: "Debug -31 : {}", args: ["@{}"]}}
      #the first overflow filter command insures that the overflow is not caused by a single user in the system
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: [username]
          threshold: 100000
        }
      }

      {
        OverFlowFilter {
          eventsType: vpn
          criteria: []
          threshold: 1000000
        }
      }
      {logDebug {format: "Debug -32 : {}", args: ["@{}"]}}
      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -33 : {}", args: ["@{}"]}}
                {
                  convertTimestampFortscale {
                    field: date_time
                    inputTimezoneField: timezone_input
                    outputFormat: "yyyy-MM-dd HH:mm:ss"
                  }
                }
                {logDebug {format: "Debug -34 : {}", args: ["@{}"]}}
              ]
            }

            {
              commands: [
                {logWarn {format: "Problem with covertTimestamp: {}", args: ["@{date_time}"]}}
              ]
            }
          ]
        }
      }
      {logDebug {format: "Debug -35 : {}", args: ["@{}"]}}

      {
        setValues {
          addsessiondata: true
        }

      }
      {logDebug {format: "Debug -36 : {}", args: ["@{}"]}}
    ]
  }
]
