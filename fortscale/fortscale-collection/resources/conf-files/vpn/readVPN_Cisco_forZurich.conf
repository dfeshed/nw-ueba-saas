morphlines: [
  {
    id: VPN_CISCO_ZURICH
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      # parse the raw message, extract all fields from the message, assuming the following format:
      # Date,Time,User-Name,Group-Name,Calling-Station-Id,Acct-Status-Type,Acct-Session-Id,Acct-Session-Time,Service-Type,Framed-Protocol,Acct-Input-Octets,Acct-Output-Octets,Acct-Input-Packets,Acct-Output-Packets,Framed-IP-Address,NAS-Port,NAS-IP-Address
      # 10/11/2014,9:19:00,uswh90d,Default Group,82.166.88.97,Stop,C835EF40,86411,Framed,PPP,1695516365,57523813,2185880,1275031,10.128.61.42,195923968,10.148.1.72

      {
        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                  grok {
                    dictionaryString: """
                          	    ORIGINAL_MESSAGE .+(?= Flume enrichment)
                          	    TIMEZONE (?<=timezone )\S+
                                """
                    findSubstrings: true
                    addEmptyStrings: true
                    expressions: {
                      message: "%{ORIGINAL_MESSAGE:original_message}|%{TIMEZONE:timezone}"
                    }
                  }
                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
                {
                  split {
                    inputField: original_message
                    outputFields: [date, time, username, groupName, source_ip, type, sessionId, duration, serviceType, protocol, readbytes, writebytes, inputPackets, outputPackets, local_ip, NASPort, reporting_server]
                    separator: ","
                  }
                }
                {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
              ]
            }

            {
              commands: [
                {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
                {
                  split {
                    inputField: message
                    outputFields: [date, time, username, groupName, source_ip, type, sessionId, duration, serviceType, protocol, readbytes, writebytes, inputPackets, outputPackets, local_ip, NASPort, reporting_server]
                    separator: ","
                  }
                }
                {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}
              ]
            }
          ]
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      # Drop record if the following fields are empty
      {
        EmptyObjectFilter {
          filterFields: [date, time, username, source_ip, type]
        }
      }
      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}
      # Create dateTime field
      {
        java {
          imports: "import java.util.*;"
          code:
            """

            record.put("date_time", record.getFirstValue("date") + " " + record.getFirstValue("time"));

            return child.process(record);
            """
        }
      }


      #print the tag value at debug
      {logDebug {format: "tag value is -  {}", args: ["@{type}"]}}

      {
        #Case that the record is Session Start
        if {
          conditions: [{equals {type: ["Start"]}}]
          then: [


            {
              setValues {
                status: ["SUCCESS"]
              }
            }

            {

              setValues {
                date_time_unix: "@{date_time}"
              }
            }

            {

              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }

            {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}
            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}

          ]
        }
      }

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}


      {
        ##Case that the record is Session disconnect
        if {
          conditions: [{equals {type: ["Stop"]}}]
          then: [
            {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
            {
              EmptyObjectFilter {
                filterFields: [writebytes, readbytes]
              }
            }
            {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}
            {
              setValues {
                status: ["CLOSED"]
              }
            }

            # Adding total bytes.
            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                  String readbytes = (String)record.getFirstValue("readbytes");
                  String writebytes = (String)record.getFirstValue("writebytes");
                  Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                  record.replaceValues("totalbytes", totalbytes);
                  return child.process(record);
                  """
              }
            }

          ]
        }
      }

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}


      #the first overflow filter command insures that the overflow is not caused by a single user in the system
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: [username]
          threshold: 100000
        }
      }
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: []
          threshold: 1000000
        }
      }
      {
        if {
          conditions: [
            {equals {timezone: []}}
          ]
          then: [
            {
              GetTimezone {
                sourceType: "vpn"
                hostnameField: reporting_server
                timezoneOutputField: timezone_input
              }
            }
          ]
          else: [
            {
              addValues {
                timezone_input: "@{timezone}"
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}
      {
        # in case that this is not SUCCESS record insert the normalized_username and the date_time_unix
        if {
          conditions: [
            {not {equals {status: ["SUCCESS"]}}}
          ]
          then: [

            {

              setValues {
                date_time_unix: "@{date_time}"
              }


            }

            {
              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}
            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -15 : {}", args: ["@{}"]}}
          ]
        }
      }
      {logDebug {format: "Debug -16 : {}", args: ["@{}"]}}
      {
        convertTimestampFortscale {
          field: date_time
          inputTimezoneField: timezone_input
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }

      {logDebug {format: "Debug -17 : {}", args: ["@{}"]}}

      {
        setValues {
          addsessiondata: false
        }
      }
      {logDebug {format: "Debug -18 : {}", args: ["@{}"]}}
    ]

  }
]
