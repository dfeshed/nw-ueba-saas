morphlines: [
  {
    id: VPN_CISCO
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}
      {

        tryRules {
          catchExceptions: true
          throwExceptionIfAllRulesFailed: false
          rules: [
            {
              commands: [
                {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}
                {
                  # filter only message containing "Authentication successful", "ACCT-START"  or "Authentication rejected" or "Authorization failed"
                  # or "Authorization rejected" or "Authentication failed" or  "disconnected"  in message,
                  # all other will be discarded in the dropRecord command bellow
                  grok {
                    findSubstrings: true
                    addEmptyStrings: true
                    numRequiredMatches: all
                    expressions: {message: """(?<type>(ACCT-START|Authentication rejected|Authorization failed|Authorization rejected|Authentication failed|disconnected))"""}
                  }
                }
                {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}
              ]
            }
            {
              commands: [
                {logDebug {format: "Record doesn't meet legitimate cisco vpn event. Dropping record: {}", args: ["@{}"]}}
                {LogFilterEvent {errorMessage: "Record doesn't meet legitimate cisco vpn event"}}
                {
                  dropRecord {}
                }
              ]
            }

            {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
          ]
        }
      }

      #print the tag value at debug
      {logDebug {format: "tag value is -  {}", args: ["@{type}"]}}

      {
        #Case that the record is Session Start
        if {
          conditions: [{equals {type: [ACCT-START]}}]
          then: [
            # handle Start Session event
            # extract source IP field,datetime,user name,session_id,local_ip
            # set values- geoip, date_time_unix , status
            {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{USERNAME:username}|%{LOCALIP:local_ip}|%{TIMEZONE:timezone}"
                }
              }


            }
            {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}

            {
              EmptyObjectFilter {
                filterFields: [username, source_ip, date_time, local_ip]
              }
            }
            {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}


            {
              setValues {
                status: ["SUCCESS"]
              }
            }

            {

              setValues {
                date_time_unix: "@{date_time}"
              }


            }

            {

              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}

            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

          ]
        }
      }

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}


      {
        ##Case that the record is Session disconnect
        if {
          conditions: [{equals {type: [disconnected]}}]
          then: [
            # handle Disconnected Session event
            # extract source IP field,datetime,user name,session_id
            # set values- geoip, date_time_unix , status
            {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{USERNAME:username}|%{WRITEBYTES:writebytes}|%{READBYTES:readbytes}"
                }
              }

            }
            {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}
            {
              EmptyObjectFilter {
                filterFields: [username, source_ip, date_time, writebytes, readbytes]
              }
            }
            {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}

            {
              setValues {
                status: ["CLOSED"]
                duration: ""
              }
            }

            # Adding total bytes.
            {
              java {
                imports: "import java.util.*;"
                code:
                  """
                  String readbytes = (String)record.getFirstValue("readbytes");
                  String writebytes = (String)record.getFirstValue("writebytes");
                  Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                  record.replaceValues("totalbytes", totalbytes);
                  return child.process(record);
                  """
              }
            }
          ]
        }
      }

      #for debug
      {logDebug {format: "current record is :  {}", args: ["@{}"]}}


      {

        ##Case that the record is Session Auth failure
        if {
          conditions: [{contains {type: [Authentication rejected, Authorization failed, Authorization rejected, Authentication failed]}}]
          then: [

            # handle Failure Session event
            # extract source IP field,datetime,user name,session_id
            # set values- geoip, date_time_unix , status
            {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{AUTH_FAIL_SOURCEIPORIPV6:source_ip}|%{DATESTAMP:date_time}|%{AUTH_FAIL_USERNAME:username}|%{TIMEZONE:timezone}"
                }
              }


            }
            {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}

            {
              EmptyObjectFilter {
                filterFields: [username, source_ip, date_time]
              }
            }
            {logDebug {format: "Debug -15 : {}", args: ["@{}"]}}

            {
              setValues {
                status: ["FAIL"]
              }
            }


          ]
        }
      }

      {logDebug {format: "Debug -16 : {}", args: ["@{}"]}}
      #the first overflow filter command insures that the overflow is not caused by a single user in the system
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: [username]
          threshold: 100000
        }
      }
      {
        OverFlowFilter {
          eventsType: vpn
          criteria: []
          threshold: 1000000
        }
      }
      {
        if {
          conditions: [
            {equals {timezone: []}}
          ]
          then: [
            {
              GetTimezone {
                sourceType: "vpn"
                hostnameField: reporting_server
                timezoneOutputField: timezone_input
              }
            }
          ]
          else: [
            {
              addValues {
                timezone_input: "@{timezone}"
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -17 : {}", args: ["@{}"]}}
      {
        # in case that this is not SUCCESS record insert the normalized_username and the date_time_unix
        if {
          conditions: [
            {not {equals {status: ["SUCCESS"]}}}
          ]
          then: [

            {

              setValues {
                date_time_unix: "@{date_time}"
              }


            }

            {
              if {
                conditions: [
                  {equals {timezone: []}}
                ]
                then: [
                  {
                    GetTimezone {
                      sourceType: "vpn"
                      hostnameField: reporting_server
                      timezoneOutputField: timezone_input
                    }
                  }
                ]
                else: [
                  {
                    addValues {
                      timezone_input: "@{timezone}"
                    }
                  }
                ]
              }
            }
            {logDebug {format: "Debug -18 : {}", args: ["@{}"]}}
            {
              convertTimestampFortscale {
                field: date_time_unix
                inputTimezoneField: timezone_input
                outputFormat: "unixTimeInSeconds"
              }
            }
            {logDebug {format: "Debug -19 : {}", args: ["@{}"]}}

          ]
        }
      }
      {logDebug {format: "Debug -20 : {}", args: ["@{}"]}}
      {
        convertTimestampFortscale {
          field: date_time
          inputTimezoneField: timezone_input
          outputFormat: "yyyy-MM-dd HH:mm:ss"
        }
      }

      {logDebug {format: "Debug -21 : {}", args: ["@{}"]}}

      {
        setValues {
          addsessiondata: false
        }

      }
      {logDebug {format: "Debug -22 : {}", args: ["@{}"]}}

    ]

  }
]
