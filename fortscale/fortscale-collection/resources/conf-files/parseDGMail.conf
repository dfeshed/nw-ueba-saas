morphlines: [ //TODO: PS - don't forget to edit the "is_external" command to match the relevant domain
  {
    id: digitalGuardianParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
        split {
          inputField: message
          outputFields: ["","",date_time,email_application,hostname,"","","","","","",first_name,last_name,"",username,"","","","","","","","",malware_scan_result,"","","","","",email_sender,email_subject,"",event_id,source_ip,"","","","",event_description,"","","",was_blocked,was_classified,"","","","","","","","","","","","","","","","",policy_name,"","","","","","","","",attachment_file_directory,attachment_file_name,"",attachment_file_extension,"",attachment_file_size,"","",email_recipient,"","","","","","","","","","","","","","","","","","","","","","","","","","",""]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logDebug {format: "Debug -2: {}", args: ["@{}"]}}


      //Filter events that don't have ALL the following fields
      {
        EmptyObjectFilter {
          filterFields: [date_time, username, event_description, event_id]
        }
      }

      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      //Filter Non Mail types
      {
        if {
          conditions: [
            {not {equals {event_description: ["Send Mail"]}}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Not an Email event"}}
            {
              dropRecord {}
            }
          ]

        }
      }

      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}


      # remove the 'verdasys\' prefix from the hostname field
      {
        findReplace {
          field: hostname
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}

      # remove the 'verdasys\' prefix from the username field
      {
        findReplace {
          field: username
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}

      # remove the starting-ending quotes (example: 'sometext' => sometext) from the email_sender field
      {
        findReplace {
          field: email_sender
          pattern: "'([^']*)'"
          isRegex: true
          replacement: "$1"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      # remove the starting-ending quotes (example: 'sometext' => sometext) from the email_recipient field
      {
        findReplace {
          field: email_recipient
          pattern: "'([^']*)'"
          isRegex: true
          replacement: "$1"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}

      # initialize additional fields
      {
        setValues {
          is_external: "false"
          full_name: ""
          normalized_username: ""
          email_recipient_domain: "@{email_recipient}"
          is_attachment_extension_blacklisted: ""
          num_of_recipients: ""
          normalized_src_machine: ""
          event_type: ""
        }
      }

      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}


      # extract email domain from the field 'email_recipient' (which we copied to 'email_recipient_domain' before this command)
      {
        findReplace {
          field: email_recipient_domain
          pattern: "(\\S+)@(\\S+)"
          isRegex: true
          replacement: "$2"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}


      # extract full_name field from first_name+last_name fields
      {
        java {
          imports:"import java.util.*;"
          code:"""

                // calcualte display name
                String firstName = (String)record.getFirstValue("first_name");
                String lastName =  (String)record.getFirstValue("last_name");

                String fullName = firstName + " " + lastName;
                record.replaceValues("full_name", fullName);

                return child.process(record);
                """
        }
      }

      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}

      # replace empty values in 'attachment_file_size' field with '0'
      {
        java {
          imports:"import java.util.*;"
          code:"""

                //validate numbers fields
                String fileSize = (String)record.getFirstValue("attachment_file_size");
                fileSize = fileSize.isEmpty() ? "0" : fileSize;

                record.replaceValues("attachment_file_size", fileSize);

                return child.process(record);
                """
        }
      }

      {logDebug {format: "Debug -12 : {}", args: ["@{}"]}}


      //Is_external logic on the mail recipent domain - for external domains the event will be marked as external
      {
        if {
          conditions:[
            {not {equals {email_recipient_domain: [""]}}}
          ]
          then:[
            {
              if {
                conditions: [
                  {not { equals {email_recipient_domain:["digitalguardian.com"]}}} #TODO: ps needs to edit this ad-hoc per client
                ]
                then:
                  [
                    {
                      setValues {
                        is_external: "true"
                      }
                    }
                  ]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -13 : {}", args: ["@{}"]}}

      //if attachment_file_name==message body then clear attachment_file_name and mark as recipient
      {
        if {
          conditions: [
            {equals {attachment_file_name: ["message body"]}}
          ]
          then: [
            {
              setValues {
                attachment_file_name: ""
                event_type: "recipient"
              }
            }
          ]
          //if attachment_file_name!="" mark as attachment
          else: [
            {
              if {
                conditions: [
                  {not {equals {attachment_file_name: [""]}}}
                ]

                then: [
                  {
                    setValues {
                      event_type: "attachment"
                    }
                  }
                ]
                else: [
                  # if the attachment_file_name=="": Keep the first instance in the cache and continue processing otherwise filter the event
                  {
                    EventsReducer {
                      keys: ["event_id"]
                      cacheName: "dlpmail"
                      dropFromCache: false
                      processRecord: true
                    }
                  }

                  # after we use 'cache&process or filter' (EventsReducer) command, the 'process' part is do add "message body" as the 'attachment_file_name' field and set 'event_type' to be "message body"
                  {
                    setValues {
                      attachment_file_name: "message body"
                      event_type: "message body"
                    }
                  }
                ]
              }
            }
          ]
        }
      }


      {logDebug {format: "Debug -14 : {}", args: ["@{}"]}}

    ]
  }
]

