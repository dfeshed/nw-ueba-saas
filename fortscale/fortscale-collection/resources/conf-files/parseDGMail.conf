morphlines: [ //TODO: PS - don't forget to edit the "is_external" command to match the relevant domain
  {
    id: digitalGuardianParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
        split {
          inputField: message
          outputFields: ["","",date_time,email_application,hostname,"","","","","","",first_name,last_name,"",username,"","","","","","","","",malware_scan_result,"","","","","",email_sender,email_subject,"",event_id,source_ip,"","","","",event_description,"","","",was_blocked,was_classified,"","","","","","","","","","","","","","","","","","","","","","","","","",attachment_file_directory,attachment_file_name,"","","",attachment_file_size,"","",email_recipient,"","","","","","","","","","","","","","","","","","","","","","","","","","",""]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logDebug {format: "Debug -2: {}", args: ["@{}"]}}


      //Filter events that don't have ALL the following fields
      {
        EmptyObjectFilter {
          filterFields: [date_time, username, event_description, event_id]
        }
      }

      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      //Filter Non Mail types
      {
        if {
          conditions: [
            {not {equals {event_description: ["Send Mail"]}}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Not an Email event"}}
            {
              dropRecord {}
            }
          ]

        }
      }

      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: hostname
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: username
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: email_sender
          pattern: "(?<=')(\\S+)(?=')"
          isRegex: true
          replacement: "$1"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: email_recipient
          pattern: "(?<=')(\\S+)(?=')"
          isRegex: true
          replacement: "$1"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}

      {
        setValues {
          is_external: ""
          full_name: ""
          normalized_username: ""
          email_recipient_domain: "@{email_recipient}"
          is_attachment_extension_blacklisted: ""
          num_of_recipients: ""
          policy_name: ""
          normalized_src_machine: ""
          event_type: ""
        }
      }

      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: email_recipient_domain
          pattern: "(\\S+)@(\\S+)"
          isRegex: true
          replacement: "$2"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}

      {
        java {
          imports:"import java.util.*;"
          code:"""

                // calcualte display name
                String firstName = (String)record.getFirstValue("first_name");
                String lastName =  (String)record.getFirstValue("last_name");

                String fullName = firstNam e+ " " + lastName;
                record.replaceValues("full_name", fullName);

                //validate numbers fields
                String fileSize = (String)record.getFirstValue("attachment_file_size");
                fileSize = fileSize.isEmpty() ? "0" : fileSize;

                record.replaceValues("attachment_file_size", fileSize);

                return child.process(record);
                """

        }
      }

      {logDebug {format: "Debug -11 : {}", args: ["@{}"]}}


      //Is out bound logic on the mail recipent domain - for external domain the event will mark as outbound
      {
        if {
          conditions:[
            {not { equals {email_recipient_domain:["digitalguardian.com"]}}} #ps needs to edit this
          ]
          then:[
            {
              if {
                conditions: [
                  {not {equals {email_recipient_domain: [""]}}}
                ]
                then:
                  [
                    {
                      setValues {
                        is_external: "true"
                      }
                    }
                  ]
              }
            }
          ]
        }
      }

      //if attachment_file_name==message body then clear attachment_file_name and mark as recipient
      {
        if {
          conditions: [
            {equals {attachment_file_name: ["message body"]}}
          ]
          then: [
            {
              setValues {
                attachment_file_name: ""
                event_type: "recipient"
              }
            }
          ]
          //if attachment_file_name!=message body then clear attachment_file_name and mark as recipient
          else: [
            {
              if {
                conditions: [
                  {not {equals {attachment_file_name: [""]}}}
                ]

                then: [
                  {
                    setValues {
                      event_type: "attachment"
                    }
                  }
                ]
                else: [



                  #Keep the first instance in the cach for filteriing to coreseponding
                  {
                    EventsJoiner {
                      keys: ["event_id"]
                      mergeFields: ["filter_this_event"]
                      cacheName: "dlpmail"
                      timeThreshold: 100000000
                      currentRecordDateField: date_time_unix
                      cachedRecordDateField: date_time_unix
                      dropFromCache: false
                      processRecord:true
                    }
                  }

                  {
                    if {
                      conditions: [
                        {not {equals {filter_this_event: [""]}}}
                      ]
                      then:
                        [
                          {LogFilterEvent {errorMessage: "useless dlpmail line."}}
                          {dropRecord {}}
                        ]
                    }
                  }

                  {
                    setValues {
                      attachment_file_name: "message body"
                      event_type: "message body"
                    }
                  }
                ]
              }
            }
          ]
        }
      }










    ]
  }
]

