morphlines: [
  {
    id: Parsing_SecurityEvents
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [
      {
        split {
          inputField: message
          outputFields: ["", "", "", "", win2003EventCode, ""]
          separator: "||"
          isRegex: false
          addEmptyStrings: false
          trim: true
        }
      }
      {
        if {
          conditions: [
            {equals {win2003EventCode: ["528"]}}
          ]
          then: [
            {
              addValues {
                eventCode: "4624"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {equals {win2003EventCode: ["540"]}}
          ]
          then: [
            {
              addValues {
                eventCode: "4624"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {equals {win2003EventCode: ["672"]}}
          ]
          then: [
            {
              addValues {
                eventCode: "4768"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {equals {win2003EventCode: ["673"]}}
          ]
          then: [
            {
              addValues {
                eventCode: "4769"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {equals {win2003EventCode: ["675"]}}
          ]
          then: [
            {
              addValues {
                eventCode: "4771"
              }
            }
          ]
        }
      }
      {
        tryRules
          {
            catchExceptions: true
            throwExceptionIfAllRulesFailed: false
            rules: [
              {
                commands: [
                  {
                    grok {
                      dictionaryString: """
          ACCOUNT_NAME (?<=User Name:%09%09).+?(?=%0D)
				 """
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{ACCOUNT_NAME:account_name}"
                      }
                    }
                  }
                ]
              }
              {
                commands: [
                  {
                    grok {
                      dictionaryString: """
          ACCOUNT_NAME (?<=User Name:%09).+?(?=%0D)
				 """
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{ACCOUNT_NAME:account_name}"
                      }
                    }
                  }

                ]
              }
            ]
          }
      }
      {
        EmptyObjectFilter {
          filterFields: [eventCode, account_name]
        }
      }
      # Adding isComputer.
      {
        java {
          imports: "import java.util.*;"
          code:
            """
            Boolean isComputer = false;
            List<String> fieldValues = record.get("account_name");
            for(String account_name: fieldValues){
              if(account_name.contains("$")){
                isComputer = true;
                break;
              }
            }
            record.replaceValues("isComputer", isComputer);
            return child.process(record);
            """
        }
      }
    ]
  }
]