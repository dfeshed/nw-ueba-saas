morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [
			{
				split {
					inputField: messageData
					outputFields: ["", "", "", "", "", "", "", "", reporting_server, "", "", "", account_name, account_domain, "", "", "", "", "", "", "", client_address]
					separator: "||"
				}
			}
			{
				addValues {
					#MISSING
					timezone: "UTC"
				}
			}
			{ toString { field : client_address, trim : true } }
			{ toString { field : account_name, trim : true } }
			{ toString { field : account_domain, trim : true } }
			{ toString { field : reporting_server, trim : true } }
			{ toString { field : timezone, trim : true } }
			{
				if {
					conditions : [
						{ equals { timezone : [] }}
					]
					then : [
						{
							GetTimezone {
								sourceType : "sec"
								hostnameField : reporting_server
								timezoneOutputField : timezone_input
							}
						}
					]
					else : [
						{
							addValues {
								timezone_input : "@{timezone}"
							}
						}
					]
				}
			}
			{
				if {
					conditions : [
						{ equals { account_name : [] } }
					]
					then : [
						{ logWarn { format : "Record does not contain account_name field, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ dropRecord {} }
					]
				}
			}
			{
				if {
					conditions : [
						{ equals { client_address : [] } }
					]
					then : [
						{ logError { format : "Record does not contain client_address field, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{
							dropRecord{}
						}
					]
				}
			}
			{
				convertTimestampFortscale {
					field : date_time
					inputFormats : ["unixTimeInSeconds"]
					inputTimezoneField : timezone_input
					outputFormat : "yyyy-MM-dd HH:mm:ss"
				}
			}
			{
				addValues {
					date_time_unix : "@{date_time}"
				}
			}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestampFortscale {
										field : date_time_unix
										inputFormats : ["yyyy-MM-dd HH:mm:ss"]
										inputTimezoneField : timezone_input
										outputFormat : "unixTimeInSeconds"
									}
								}
							]
						}
					]
				}
			}
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									findReplace {
										field : client_address
										pattern : "::1"
										isRegex : false
										replacement : "127.0.0.1"
										replaceFirst : false
									}
								}
								{
									findReplace {
										field : client_address
										pattern : "::ffff:"
										isRegex : false
										replacement : ""
										replaceFirst : false
									}
								}
							]
						}
					]
				}
			}
			{
				FilterOUMachine {
					hostnameField : account_name
					regex : "(.+)\\$$# #$1"
				}
			}
			{
				ComputerLoginUpdate {
					timestampepoch_field : date_time_unix
					ipaddress_field: client_address
					hostname_field : account_name
					domain_field : account_domain
					max_batch_size : 10000
				}
			}
			{
				addValues {
					isADHostName : true
				}
			}
		]
	}
]