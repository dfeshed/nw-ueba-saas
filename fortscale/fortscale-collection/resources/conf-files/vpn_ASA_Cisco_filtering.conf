morphlines :[
  {
    id: VPN_ASA_CISCO_filtering
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [
	      #Handle session replace/resumed (help us to ignore the seesion start that related to that type)
	      {
	        if {
	          conditions : [{contains  {EventType : ["ASA-6-716059","ASA-5-722032"]}}]
	          then : [
	
	            {
	              grok {
	                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
	                findSubstrings: true
	                addEmptyStrings: true
	                numRequiredMatches: all
	                expressions: {
	                  message: "%{USERNAMEAnyConnect:username}"
	                }
	              }
	            }
	
	            {
	              if {
	                conditions : [{contains {group : ["<apple_short>","<apple_long>"]}}]
	                then : [
	
	                  #parse the username
	                  {
	                    java {
	                      imports:"import java.util.*;import org.apache.commons.lang.StringUtils;"
	                      code:
	                        """
	
	                              String userNameToParse = (String)record.getFirstValue("username");
	                              String result = userNameToParse.substring(0,userNameToParse.indexOf('-'));
	                              record.replaceValues("username",result);
	                              return child.process(record);
	
	
	                        """
	                    }
	                  }
	
	                ]
	              }
	            }
	        ]
        }
      }
      {
        #Fail without group sign
        if {
          conditions : [{contains  {EventType:["ASA-6-113013","ASA-6-113005"]}}]
          then : [
            {
              grok {
                dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                findSubstrings: true
                addEmptyStrings: true
                numRequiredMatches: all
                expressions: {
                  message: "%{USERNAMEFailsWIthoutGroups:username}"
                }
              }
            }
		  ]
		  #handle the groups type + mark session type
          else : [
            #handle the groups type
            {
              #case of group is AnyConnect:
              if {
                #case that its session start or fail - type = Group <AnyConnect_policy> (status = success or fail)
                conditions: [{equals {group: ["<AnyConnect_policy>"]}}]
                then: [


                  # handle Start Session event
                  # extract source IP field,datetime,user name,local_ip
                  # set values- geoip, date_time_unix , status

                  {
                    grok {
                      dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                      findSubstrings: true
                      addEmptyStrings: true
                      numRequiredMatches: all
                      expressions: {
                        message: "%{USERNAMEAnyConnect:username}"
                      }
                    }
                  }
		        ]

                else: [
                  {
                    #case that its session AnyConnect end - type = Group = AnyConnect_profile (status = close)
                    if {
                      conditions: [{equals {group: ["AnyConnect_profile"]}}]
                      then: [
                        # handle End Session event
                        # extract source IP field,datetime,user name,read /write bytes
                        # set values- geoip, date_time_unix , status

                        {
                          grok {
                            dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                            findSubstrings: true
                            addEmptyStrings: true
                            numRequiredMatches: all
                            expressions: {
                              message: "%{USERNAMEENDAnyConnect:username}"
                            }
                          }
                        }

                      ]

                      #other groups (status = success/close/fail)
                      else: [
                        {
                          #case the session is Everyone
                          if {
                            conditions: [{equals {group: ["Everyone"]}}]
                            then: [
                              # handle Start and End Session events
                              # extract datetime,user,source IP ,local_ip(optional in case of dtart),writebutes(optional in case of end),readbytes(optional in case of end)
                              # set values- geoip, date_time_unix ,
                              {
                                grok {
                                  dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                  findSubstrings: true
                                  addEmptyStrings: true
                                  numRequiredMatches: all
                                  expressions: {
                                    message: "%{USERNAMEEveryone:username}"
                                  }
                                }
                              }
                            ]
                            else: [
                              #Other group
                              {
                                if {
                                  conditions: [{contains {group: ["ciscovpn4cluster", "ciscovpncluster", "crdc_webex_employee", "CRDC_users",]}}]
                                  then: [
                                    # handle Start and End Session events
                                    # extract datetime,user,source IP ,local_ip(optional in case of dtart),writebutes(optional in case of end),readbytes(optional in case of end)
                                    # set values- geoip, date_time_unix , status

                                    {
                                      grok {
                                        dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                        findSubstrings: true
                                        addEmptyStrings: true
                                        numRequiredMatches: all
                                        expressions: {
                                          message: "%{USERNAMEOther:username}"
                                        }
                                      }
                                    }
                                  ]

                                  #case of Apple
                                  else :[
                                    {
                                      if {
                                        conditions: [{contains {group: ["<apple_short>","<apple_long>"]}}]
                                        then: [
                                          # handle Start and End Session events
                                          # extract datetime,user,source IP ,local_ip(optional in case of dtart),writebutes(optional in case of end),readbytes(optional in case of end)
                                          # set values- geoip, date_time_unix , status

                                          {
                                            grok {
                                              dictionaryFiles: [resources/grok-dictionaries/vpn.Cisco.ASA.conf]
                                              findSubstrings: true
                                              addEmptyStrings: true
                                              numRequiredMatches: all
                                              expressions: {
                                                message: "%{USERNAMETEMPApple:username}"
                                              }
                                            }
                                          }
                                          {
                                            EmptyObjectFilter {
                                              filterFields: [username]
                                            }
                                          }

                                          #parse the username
                                          {
                                            java {
                                              imports:"import java.util.*;import org.apache.commons.lang.StringUtils;"
                                              code:
                                                """

                                                      String userNameToParse = (String)record.getFirstValue("username");
                                                      String result = userNameToParse.substring(0,userNameToParse.indexOf('-'));
                                                      record.replaceValues("username",result);
                                                      return child.process(record);


                                                """
                                            }
                                          }
                                         ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }




                      ]
                    }
                  }
                ]
              }
            }
            {
              EmptyObjectFilter {
                filterFields: [username]
              }
            }
            {
        	  OverFlowFilter {
                eventsType : vpn
                criteria : [username]
                threshold : 100000
              }
            }
            {
              OverFlowFilter {
                eventsType : vpn
                criteria : []
                threshold : 1000000
              }
           }
           {
        	  VPNNormalizeUsername {
                usernameField: username
                normalizedUsernameField: normalized_username
             }
           }
                       
                                          