morphlines :[
  {
    id : VPN_CISCO_ZURICH
    importCommands : ["org.kitesdk.morphline.**","org.apache.solr.**","fortscale.collection.morphlines.**"]
    commands : [



      # parse the raw message, extract all fields from the message, assuming the following format:
      # Date,Time,User-Name,Group-Name,Calling-Station-Id,Acct-Status-Type,Acct-Session-Id,Acct-Session-Time,Service-Type,Framed-Protocol,Acct-Input-Octets,Acct-Output-Octets,Acct-Input-Packets,Acct-Output-Packets,Framed-IP-Address,NAS-Port,NAS-IP-Address
      # 10/11/2014,9:19:00,uswh90d,Default Group,82.166.88.97,Stop,C835EF40,86411,Framed,PPP,1695516365,57523813,2185880,1275031,10.128.61.42,195923968,10.148.1.72
      {
        split {
          inputField : message
          outputFields : [date,time,username,groupName,source_ip,type,sessionId,duration,serviceType,protocol,readbytes,writebytes,inputPackets,outputPackets,local_ip,NASPort,reporting_server]
          separator : ","
        }
      }

      # Drop record if the following fields are empty
      {
        EmptyObjectFilter {
          filterFields : [date,time,username,source_ip,type,local_ip]
        }
      }


      # Create dateTime field
      {
        java {
          imports : "import java.util.*;"
          code:
            """

            record.put("date_time", record.getFirstValue("date") + " " + record.getFirstValue("time"));

            return child.process(record);
            """
        }
      }


      #print the tag value at debug
      { logDebug { format : "tag value is -  {}",args: ["@{type}"] } }

      {
        #Case that the record is Session Start
        if {
          conditions : [{ equals { type : ["Start"] }}]
          then : [


            {
              setValues {
                status : ["SUCCESS"]
              }
            }

            {
              VPNNormalizeUsername {
                usernameField : username
                normalizedUsernameField : normalized_username
              }
            }

            {

              setValues {
                date_time_unix: "@{date_time}"
              }
            }

            {

              GetTimezone {
                sourceType : "vpn"
                hostnameField : reporting_server
                timezoneOutputField : timezone_output
              }
            }


            {
              convertTimestampFortscale {
                field : date_time_unix
                inputFormats : ["MM/dd/yyyy HH:mm:ss"] // 10/21/2014 9:19:00
                inputTimezoneField : timezone_output
                outputFormat : "unixTimeInSeconds"
                # default outputTimezone : UTC
              }
            }

            {
              UserLastActivityUpdate {
                logEventsType : vpn
                normalizedUsernameField : normalized_username
                epochtimestampField : date_time_unix
              }

            }


          ]
        }
      }

      #for debug
      {	logDebug	{	format : "current record is :  {}", args : ["@{}"] } }


      {
        ##Case that the record is Session disconnect
        if {
          conditions : [{ equals { type : ["Stop"] }}]
          then: [

            {
              EmptyObjectFilter {
                filterFields : [writebytes,readbytes]
              }
            }

            {
              setValues {
                status : ["CLOSED"]
              }
            }

            # Adding total bytes.
            {
              java {
                imports : "import java.util.*;"
                code:
                  """
                  String readbytes = (String)record.getFirstValue("readbytes");
                  String writebytes = (String)record.getFirstValue("writebytes");
                  Long totalbytes = Long.valueOf(readbytes) + Long.valueOf(writebytes);
                  record.replaceValues("totalbytes", totalbytes);
                  return child.process(record);
                  """
              }
            }
            #Adding data bucket
            {
              VpnDataBucket {
                totalbytesFieldName : totalbytes
                readbytesFieldName : readbytes
                durationFieldName : duration
                databucketFieldName : databucket
                bucketDefinition : ["50","100","200","400"]
              }
            }


          ]
        }
      }

      #for debug
      {	logDebug	{	format : "current record is :  {}", args : ["@{}"] } }



      #the first overflow filter command insures that the overflow is not caused by a single user in the system
      {
        OverFlowFilter {
          eventsType : vpn
          criteria : [username]
          threshold : 100000
        }
      }
      {
        OverFlowFilter {
          eventsType : vpn
          criteria : []
          threshold : 1000000
        }
      }
      {
        GetTimezone {
          sourceType : "vpn"
          timezoneOutputField : timezone_output
        }
      }


      {
        # in case that this is not SUCCESS record insert the normalized_username and the date_time_unix
        if {
          conditions : [
            { not { equals {status: ["SUCCESS"]}}}
          ]
          then : [
            {
              VPNNormalizeUsername {
                usernameField : username
                normalizedUsernameField : normalized_username
              }
            }

            {

              setValues {
                date_time_unix: "@{date_time}"
              }


            }

            {
              GetTimezone {
                sourceType : "vpn"
                hostnameField : reporting_server
                timezoneOutputField : timezone_output
              }
            }

            {
              convertTimestampFortscale {
                field : date_time_unix
                inputFormats : ["MM/dd/yyyy HH:mm:ss"] // 10/21/2014 9:19:00
                inputTimezoneField : timezone_output
                outputFormat : "unixTimeInSeconds"
                # default outputTimezone : UTC
              }
            }

          ]
        }
      }

      {
        convertTimestampFortscale {
          field : date_time
          inputFormats : ["MM/dd/yyyy HH:mm:ss"] // 10/21/2014 9:19:00
          inputTimezoneField : timezone_output
          outputFormat : "yyyy-MM-dd HH:mm:ss"
          outputTimezoneField : timezone_output
        }
      }


      {
        IsUserAdministrator {
          usernameField : normalized_username
          isUserAdministratorField : isUserAdministrator
        }
      }

      {
        IsUserExecutive {
          usernameField : normalized_username
          isUserExecutiveField : isUserExecutive
        }
      }


      {
        Geolocation {
          ip_field : source_ip
          country_field : country
          region_field : region
          city_field : city
          isp_field : isp
          usage_type_field : ipusage
          country_code_field : countrycode
          longtitude_field : longtitude
          latitude_field : latitude
        }
      }



      {	logDebug	{	format : "Before VpnSessionUpdate - current record is :  {}", args : ["@{}"] } }



      {
        VpnSessionUpdate {
          country_code_field : countrycode
          longtitude_field : longtitude
          latitude_field : latitude
          geo_hopping_open_session_threshold : 6
          geo_hopping_close_session_threshold : 1
          session_id_field : sessionId
          add_session_data: false
        }
      }




      {	logDebug	{	format : "After VpnSessionUpdate -  current record is :  {}", args : ["@{}"] } }




    ]

  }
]
