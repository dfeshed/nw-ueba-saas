morphlines : [
	{
		id : VPN_F5
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									# filter only message containing "New session from client" or "authenticate with" in message,
									# all other will be discarded in the dropRecord command bellow
									grok {
										findSubstrings : true
										addEmptyStrings : true
										numRequiredMatches : all
										expressions : {
											message : """(?<type>(New session from client|authenticate with))"""
										}
									}
								}
							]
						}
						
						{
							commands : [
								{
									dropRecord {}
								}
							]
						}
					]
				}
			}


			{
				if {
					conditions : [
						{ equals { type : [New session from client] }}
					]
					then : [
						# handle new session events (first event of new sessions)
						# extract time, source IP, local IP, Geolocation fields
						# Store the data in mongo to be later correlated with following event
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.F5.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{SESSION_ID_1:session_id}|%{SOURCEIPORIPV6:source_ip}|%{LOCALIPORIPV6:local_ip}"
								}
							}
						}
						
						{
							EventsJoinerStore {
								keys : [ "session_id"]
								cacheName : "vpn"
							}
						}
					]
				}
			}			
			
			
			{
				if {
					conditions : [
						{ equals  { type : [authenticate with] } }
					]
					then : [
						# handle authentication events (second event of sessions)
						# extract the username from the event
						# correlate this event to stored event based on the session_id
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.F5.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{SESSION_ID_2:session_id}|%{USERNAME:username}|%{DATESTAMP:date_time}|%{STATUS:status}"
								}
							}
						}
						
						# Adding year from the system current date to the date_time.
						{
							java {
								imports : "import java.util.*;import java.text.SimpleDateFormat;"
								code:
									"""
									Object date_time = record.getFirstValue("date_time");
									if (date_time==null)
										return false;
										
									int year = Calendar.getInstance().get(Calendar.YEAR);
									record.replaceValues("date_time", Integer.toString(year) + " " + date_time.toString());
									return child.process(record);
									"""
							}
						}
						
						{
							setValues {
								date_time_unix: "@{date_time}"
							}
						}
						
						{						
							translate {
								field : status
								dictionary : {
									successful : SUCCESS
									failed : FAIL
								}
							}
						}
						
						{
							EventsJoinerMerge {
								keys : [ "session_id" ]
								mergeFields : [ "source_ip", "local_ip", "country", "city" ]
								dropWhenNoMatch : true
								cacheName : "vpn"
							}
						}
					]
				}
			}


			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestamp {
										field : date_time
										inputFormats : ["yyyy MMM  dd HH:mm:ss"]
										inputTimezone : EST
										outputFormat : "yyyy-MM-dd HH:mm:ss"
										outputTimezone : EST
									}
								}
								
								{
									convertTimestamp {
										field : date_time_unix
										inputFormats : ["yyyy MMM  dd HH:mm:ss"]
										inputTimezone : EST
										outputFormat : "unixTimeInSeconds"
										outputTimezone : UTC
									}
								}
							]
						}
						
						{
							commands : [
								{ logWarn { format : "Problem timeGenerated: {}", args : ["@{timeGenerated}"] } }
							]
						}
					]
				}
			}
	
			{
				Geolocation {
					ip_field : source_ip
					country_field : country
					region_field : region
					city_field : city
					isp_field : isp
					usage_type_field : ipusage
				}
			}
			
			{
				if {
					conditions : [
						{ equals { username : []  } }
					]
					then : [
						{ logWarn { format : "No username, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ dropRecord {} }
					]
				}
			}
		]
	}
]