morphlines : [
	{
	    id : morphline1
	    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    	commands : [
    	{
			{
				 setValues {
					data_source : ["login4768"]
					last_state : ["etl"]
				 }
			}

			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
							dictionaryFiles : [resources/grok-dictionaries/secevents.sa.conf]
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								message : "%{ACCOUNT_DOMAIN:account_domain}|%{USER_ID:security_id}|%{PRE_AUTHENTICATION_TYPE:authentication_type}|%{RESULT_CODE:failure_code}"
						  	}
						}
      				}
      				{ toString { field : account_domain, trim : true } }
      				{ toString { field : security_id, trim : true } }
      				{ toString { field : authentication_type, trim : true } }
      				{ toString { field : failure_code, trim : true } }
			  		]
				}
				{
					# fallback rule when grok failed to match properties
					commands : [
						{ logWarn { format : "Record does not contain proper 4768 grok fields, Drop the record. Original record was: {}", args : ["@{}"] } }
						{ dropRecord {} }    
					]
				}
		  	]
			}
		}

		{
			findReplace {
				field : security_id
				isRegex : false
				pattern : "'"
				replacement : ""
			}
		}

		{
			EmptyObjectFilter {
				filterFields : [account_domain,failure_code]
			}
		}
		
		{ 
			if { 
				conditions : [ 
					{ equals { isComputer : [true] } } 
				] 
				then : [
				{
					FilterOUMachine {
						hostnameField : account_name
						regex : "(.+)\\$$# #$1"
					}
				      
				}
				{
					ComputerLoginUpdate {
				    	timestampepoch_field : date_time_unix
				        ipaddress_field: client_address
				        hostname_field : account_name
				        domain_field : account_domain
					}
				}
				]
				else : [
					{ 
						if { 
							conditions : [ 
								{ equals { failure_code : [0x0] } } 
							] 
							then : [
								{
									setValues {
										status : ["SUCCESS"]
									}
								}
							]
							else : [
								{
									setValues {
										status : ["FAILURE"]
									}
								}
							]
						} 
					}
##################################################################
##################################################################
#
#
#	 comment enrichement commands after moving them into streaming
#	 transition haven't been verified for this morphline.
#									please test before using.
#
#
##################################################################
##################################################################
#					{
#						if {
#							conditions : [
#								{ equals { status : ["SUCCESS"]  } }
#							]
#							then : [
#								{
#									UserLastActivityUpdate {
#										logEventsType : login
#										normalizedUsernameField : normalized_username
#										epochtimestampField : date_time_unix
#									}
#								}
#							]
#						}
#					}
#
#					{
#						IsSensitiveMachine {
#							machineNameField : machine_name
#							isSensitiveMachineField : is_sensitive_machine
#						}
#					}
				]
			} 
		}
		
    	]
  	}
]
