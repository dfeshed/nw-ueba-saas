morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [			
			{
				split {
					inputField : message
					outputFields : [syslogPrefix,deviceVendor,deviceProduct,deviceVersion,signatureId,name,severity,extension]
					separator : "|"
				}
			}
			
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [	    
								{
									equals { 
										deviceVendor : ["Avenda"]
										deviceProduct : ["eTipsDB"]
										name : ["Start"] 
									}
								}
							]
						}
						
						{
							commands : [
								{	logDebug	{	format : "Record does not have expected values for device vendor, product and name. Dropping record: {}", args : ["@{}"] } }
								{
									dropRecord {}
								}				
							]
						}						
					]
				}
			}
			
			{
				grok {
					dictionaryString :
						"""
							DATETIMESTAMP (?<=end=)[0-9]+(?= )
							USERNAME (?<=duser=)[\S]+(?= )
							SOURCEIP (?<=src=)[0-9.]+(?= )
							LOCALIP (?<=dst=)[0-9.]+(?= )
							REPORTING_SERVER (?<=^.{20})\S+
						"""
					findSubstrings : true
					addEmptyStrings : true
					numRequiredMatches : all
					expressions : {
						message : "%{DATETIMESTAMP:date_time_unix}|%{REPORTING_SERVER:reporting_server}|%{USERNAME:username}|%{SOURCEIP:source_ip}|%{LOCALIP:local_ip}"
					}
				}		  
			}
			{
				EmptyObjectFilter {
					filterFields : [username,source_ip]
				}
			}
			{
				if {
					conditions : [
						{ equals { username : ["unknown"]  } }
					]
					then : [
						{ logDebug { format : "Username was listed as unknown, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ dropRecord {} }
					]
				}
			}
			#the first overflow filter command insures that the overflow is not caused by a single user in the system
			{
				OverFlowFilter {
					eventsType : vpn
					criteria : [username]
					threshold : 100000
				}
			}
			{
				OverFlowFilter {
					eventsType : vpn
					criteria : []
					threshold : 1000000
				}
			}
			{
				GetTimezone {
					sourceType : "vpn"
					hostnameField : reporting_server
					timezoneOutputField : timezone_output
				}
			}
			
			
			
			{
				setValues {
					status : ["SUCCESS"]
					hostname : [""]
					date_time: "@{date_time_unix}"
				}
			}
			
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestampFortscale {
										field : date_time
										inputFormats : ["unixTimeInMillis"]
										# default inputTimezone : UTC
										outputFormat : "yyyy-MM-dd HH:mm:ss"
										#outputTimezoneField : timezone_output
									}
								}
							]
						}
						
						{
							commands : [
								{ logWarn { format : "Problem timeGenerated: {}", args : ["@{timeGenerated}"] } }
							]
						}
					]
				}
			}
	
			{
				Geolocation {
					ip_field : source_ip
					country_field : country
					region_field : region
					city_field : city
					isp_field : isp
					usage_type_field : ipusage
					country_code_field : countrycode
					longtitude_field : longtitude
					latitude_field : latitude
				}
			}
			
			{
				VPNNormalizeUsername {
					usernameField : username
					normalizedUsernameField : normalized_username
				}
			}
					

			{
				if {
					conditions : [
						{ equals { status : ["SUCCESS"]  } }
					]
					then : [
						{
							UserLastActivityUpdate {
								logEventsType : vpn
								normalizedUsernameField : normalized_username
								epochtimestampField : date_time_unix
							}
						}
					]
				}
			}
			{
				IsUserAdministrator {
					usernameField : normalized_username
					isUserAdministratorField : isUserAdministrator
				}
			}
			{
				IsUserExecutive {
					usernameField : normalized_username
					isUserExecutiveField : isUserExecutive
				}
			}

			{
				setValues {
					addsessiondata: "true"
				}

			}

		]
	}
]
