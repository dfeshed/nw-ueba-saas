morphlines : [
{
	id : morphline1
	importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
		{
	  		split {
	  			inputField : message
				outputFields : [categoryString,eventCode,logfile,messageData,recordNumber,sourceName,timeGenerated,computerName]
				separator : "|"
	  		}
	  	}
	  	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
		  					dictionaryString : """
								ACCOUNT_NAME (?<=Account Name:[\s]{1,2})[\S ]+
							  	ACCOUNT_DOMAIN (?<=Account Domain:[\s]{1,2})[\S ]+
								SERVICE_NAME (?<=Service Name:[\s]{1,2})[\S ]+
								SERVICE_ID (?<=Service ID:[\s]{1,2})[\S ]+
								CLIENT_ADDRESS (?<=Client Address:[\s]{1,2})[\S ]+
								TICKET_OPTIONS (?<=Ticket Options:[\s]{1,2})[\S ]+
								FAILURE_CODE (?<=Failure Code:[\s]{1,2})[\S ]+
								SOURCE_NETWORK_ADDRESS (?<=Source Network Address:[\s]{1,2})[\S ]+
								 """
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								messageData : "%{ACCOUNT_NAME:account_name}|%{ACCOUNT_DOMAIN:account_domain}|%{SERVICE_NAME:service_name}|%{SERVICE_ID:service_id}|%{CLIENT_ADDRESS:client_address}|%{TICKET_OPTIONS:ticket_options}|%{FAILURE_CODE:failure_code}|%{SOURCE_NETWORK_ADDRESS:source_network_address}"
						  	}
						}
      				}
			  		]
				}
		  	]
			}
		}
		
		{
			if {
				conditions : [
					{ equals { account_name : [] } }
				]
				then : [
					{ logDebug { format : "Record does not contain AccountName field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }
				]
			}
		}
		{
			if {
				conditions : [
					{ equals { service_name : [] } }
				]
				then : [
					{ logDebug { format : "Record does not contain ServiceName field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }
				]
			}
		}
		{
			if {
				conditions : [
					{ equals { client_address : [] } }
				]
				then : [
					{ logDebug { format : "Record does not contain CliendAddress field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }
				]
			}
		}
		
		{
			addValues {
				timeGeneratedRaw : "@{timeGenerated}"
				timeGeneratedUnixTime : "@{timeGenerated}"
			}
	  }
	  {
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
      					{
        					java {
          						imports : "import java.util.*;"
          						code: """
                					Object rec = record.getFirstValue("timeGenerated");
                					String tmp = String.valueOf(rec).substring(0,19);
                					record.replaceValues("timeGenerated",tmp);
                					return child.process(record);
                					"""
        					}
      					}
      					{
        					java {
          						imports : "import java.util.*;"
          						code: """
                					Object rec = record.getFirstValue("timeGeneratedUnixTime");
                					String tmp = String.valueOf(rec).substring(0,19);
                					record.replaceValues("timeGeneratedUnixTime",tmp);
                					return child.process(record);
                					"""
        					}
      					}              
                  		{
			    			convertTimestamp {
			    	  			field : timeGenerated
                      			#2013-11-05T17:59:57.000+02:00
			    	  			inputFormats : ["yyyy-MM-dd'T'HH:mm:ss"]
			    	  			inputTimezone : Asia/Jerusalem
			    	  			outputFormat : "yyyy-MM-dd HH:mm:ss"
		    	  				outputTimezone : Asia/Jerusalem
			    			}
				  		}
				  		{
							convertTimestamp {
					  			field : timeGeneratedUnixTime 
			    	  			inputFormats : ["yyyy-MM-dd'T'HH:mm:ss"]
					  			inputTimezone : Asia/Jerusalem
					  			outputFormat : "unixTimeInSeconds"
					  			outputTimezone : UTC
							}
				  		}
			  		]
				}
		  		]
			}
	  	}
	  	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
				  		{
							findReplace {
					  			field : client_address
					  			pattern : "::1"
					  			isRegex : false
					  			replacement : "127.0.0.1"
					  			replaceFirst : false
							}
				  		}
				  		{
							findReplace {
					  			field : client_address
					  			pattern : "::ffff:"
					  			isRegex : false
					  			replacement : ""
				  				replaceFirst : false
							}
				  		}
					]
				}
		  		]
			}
	  	}
	]
  }
]
