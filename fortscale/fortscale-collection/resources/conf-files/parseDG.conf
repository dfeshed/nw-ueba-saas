morphlines: [
  {
    id: verdasysParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      # parse the raw message, extract all fields from the message, assuming the following format:
      # "2016.04.04","4/4/2016 9:31:15 AM","4/4/2016 1:31:15 PM","trustevaluationagent","(none)\Verdasys’s Mac","Mac","","","","","","","","1BBB8272-F253-467A-8141-9F35910FDD9D","Verdasys’s Mac\_trustevaluationagent","","","","","","","Scanned","2/13/2015 6:26:34 PM","Virus Total: 0 / 55 scans positive.","","","","","UNKNOWN_HOST","","","","F19FC0CC-47C4-6545-8151-8BE641A93428","","","2c11f21a29e2f7f7346b2d62afa299af","1af2112c-e229-f7f7-346b-2d62afa299af","Inbound","File Copy","","0","","False","False","False","False","False","True","0","False","0","False","False","False","","","","","","","","","","","","","Not Blocked","0","50744","\private\var\folders\zz\zyxvpxvq6csfxvn_n00000t000006h\C\mds\","mdsDirectory.db_","","db_","F19FC0CD-47C4-6545-8151-8BE641A93428","50744","False","","","","","mdsDirectory.db","","\private\var\db\mds\system\","mdsDirectory.db","","db","","False","False","False","0","0","False","False","False","Fixed","","Fixed","","","","","","",""
      {
        split {
          inputField: message
          outputFields: ["","",date_time,application,computer_name,"","","","","","",first_name,last_name,account_user_id,account_name,"","","","","","","","","","","","","",DNS_hostname,email_sender,email_subject,"",event_id,network_address,local_port,"","","",event_description,"",remote_port,"","","","","","","","","","","","","","","","","","","","","","","","","","",bytes_read,bytes_written,destination_directory,destination_file,"","","",detail_file_size_kb,"","",email_recipient,"",printer,printer_job_name,"",source_directory,source_file,"","","","","","","","","","",is_removable,source_drive_type,"",dest_drive_type,"","","","","","",""]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logInfo {format: "Debug -11 : {}", args: ["@{}"]}}

      {
        EmptyObjectFilter {
          filterFields: [date_time, account_name, event_description]
        }
      }

      //Filter Non Mail types
      {
        if {
          conditions: [
            {not { equals {event_description:["Send Mail"]}}}
          ]
          then:[
            {LogFilterEvent {errorMessage: "Not Email event"}}
            {dropRecord {}}
          ]

        }
      }

      {
        setValues {
          time_key:""
          operator_key:""
          equipment_key:""
          action_key:""
          event_detail_id:""
          event_type:""
          domain_computer_name:""
          source_drive_description:""
          dest_drive_description:""
          email_recipient_domain:"@{email_recipient}"
          email_recipient_type:""
          was_blocked_event_detail:""
          has_alert_event:""
          has_alert_event_detail:""
          row_insert_date:""
          event_detail_row_insert_date:""
          DWH_source:""
          DWH_insert_date:""
          DWH_update_date:""
          original_event_date_time:""
          source_file_type:""
          destination_file_type:""
          is_outbound:""
        }
      }

      {
        java:{
          imports:"import java.util.*;"
          code:"""
          String firstName = (String)record.getFirstValue("first_name");
          String lastName =  (String)record.getFirstValue("last_name");

          String displayName = firstName+" "+lastName;
          record.replaceValues("display_name", displayName);

          return child.process(record);
          """

        }
      }


      {
        findReplace {
          field: computer_name
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {
        findReplace {
          field: account_name
          pattern: "verdasys\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {
        findReplace {
          field: email_recipient_domain
          pattern: "(\\S+)@(\\S+)"
          isRegex: true
          replacement: "$2"
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      //Is out bound logic on the mail recipent domain - for external domain the event will mark as outbound
      {
        if {
          conditions:[
            {not { equals {email_recipient_domain:["digitalguardian.com"]}}}
          ]
          then:[
            {
              setValues {
                is_outbound:"true"
              }
            }

          ]
          else:[
            {
              setValues {
                is_outbound:"false"
              }
            }

          ]

        }
      }

      {logInfo {format: "Debug -1 : {}", args: ["@{}"]}}

    ]

  }
]
