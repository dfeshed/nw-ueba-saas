morphlines : [
{
	id : morphline1
	importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

    commands : [
	  	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
							dictionaryFiles : [resources/grok-dictionaries/secevents.sa.conf]
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								message : "%{TIME_GENERATED_TYPE_B:timeGeneratedTypeB}|%{TIME_GENERATED:timeGenerated}|%{REPORTING_SERVER:reporting_server}|%{ACCOUNT_NAME:account_name}|%{EVENT_CODE:eventCode}|%{CLIENT_ADDRESS:client_address}|%{TICKET_OPTIONS:ticket_options}"
						  	}
						}
      				}
      				{ toString { field : client_address, trim : true } }
      				{ toString { field : ticket_options, trim : true } }
      				{ toString { field : account_name, trim : true } }
			  		]
				}
		  	]
			}
		}
		{
			OverFlowFilter {
				eventsType : securityEvents
				criteria : [eventCode]
				threshold : 2000000
			}
		}
		{
			OverFlowFilter {
				eventsType : securityEvents
				criteria : [eventCode, account_name]
				threshold : 100000
			}
		}
		{
			GetTimezone {
				sourceType : "sec"
				hostnameField : reporting_server
				timezoneOutputField : timezone_output
			}
		}
		{ 
			if { 
				conditions : [ 
					{ equals { timeGeneratedTypeB : [] } } 
				] 
				then : [
					# Adding year from the system current date to the timeGenerated.
					{
						java {
							imports : "import java.util.*;import java.text.SimpleDateFormat;"
							code:
								"""
								try {
									Object timeGenerated = record.getFirstValue("timeGenerated");
									if (timeGenerated==null)
										return false;
										
									int year = Calendar.getInstance().get(Calendar.YEAR);
									int currentMonth = Calendar.getInstance().get(Calendar.MONTH);
									
									int parsedMonth;
									SimpleDateFormat sdf = new SimpleDateFormat("MMM", Locale.ENGLISH);
									parsedMonth = sdf.parse(timeGenerated.toString().substring(0,3)).getMonth();
									
									// If the month is later than current month, we'll assign the previous year to the event
									if (parsedMonth > currentMonth) {
										year--;
									}

									record.replaceValues("timeGenerated", Integer.toString(year) + " " + timeGenerated.toString());
								}
								catch (Exception e) {
									System.out.println(e);
								}

								return child.process(record);
								"""
						}
					}				
				] 
				else : [
					{
						setValues {
							timeGenerated: "@{timeGeneratedTypeB}"
						}
					}
					{
						convertTimestampFortscale {
							field : timeGenerated
							#Mar 17 15:49:28 2014
							inputFormats : ["MMM dd HH:mm:ss yyyy","MMM  dd HH:mm:ss yyyy"]
							inputTimezoneField : timezone_output
							outputFormat : "yyyy MMM dd HH:mm:ss"
							outputTimezoneField : timezone_output
						}
					}
				]
			} 
		}
		
		


		{ 
			if { 
				conditions : [ 
					{ equals { account_name : [] } } 
				] 
				then : [
					{ logWarn { format : "Record does not contain account_name field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }
				] 
			} 
		}

		{
			if {
				conditions : [
					{ equals { eventCode : [] } }
				]
				then : [
					{ logError { format : "Record does not contain EventCode field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }
				]
			}
		}
		{ 
			if { 
				conditions : [ 
					{ equals { client_address : [] } } 
				] 
				then : [
				{ logError { format : "Record does not contain client_address field, Drop the record. Original message was: {}", args : ["@{message}"] } }
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
		{ 
			if { 
				conditions : [ 
					{ equals { ticket_options : [] } } 
				] 
				then : [
				{ logError { format : "Record does not contain ticket_options field, Drop the record. Original message was: {}", args : ["@{message}"] } }
				{ 
					dropRecord{} 
				}
				] 
			} 
		}
		
		{
			addValues {
				timeGeneratedRaw : "@{timeGenerated}"
				timeGeneratedUnixTime : "@{timeGenerated}"
			}
		}
		
		# Adding isComputer.
		{
			java {
				imports : "import java.util.*;"
				code:
					"""
					String account_name = (String)record.getFirstValue("account_name");
					Boolean isComputer = account_name.contains("$") ? true : false;
					record.replaceValues("isComputer", isComputer);
					return child.process(record);
					"""
			}
		}
		
		{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
                  		{
			    			convertTimestampFortscale {
			    	  			field : timeGeneratedRaw
                      			#2014 Mar 17 15:49:28
			    	  			inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
			    	  			inputTimezoneField : timezone_output
			    	  			outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
		    	  				outputTimezoneField : timezone_output
			    			}
				  		}					
                  		{
			    			convertTimestampFortscale {
			    	  			field : timeGenerated
                      			#2014 Mar 17 15:49:28
			    	  			inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
			    	  			inputTimezoneField : timezone_output
			    	  			outputFormat : "yyyy-MM-dd HH:mm:ss"
		    	  				outputTimezoneField : timezone_output
			    			}
				  		}
				  		{
							convertTimestampFortscale {
					  			field : timeGeneratedUnixTime 
			    	  			inputFormats : ["yyyy MMM dd HH:mm:ss","yyyy MMM  dd HH:mm:ss"]
					  			inputTimezoneField : timezone_output
					  			outputFormat : "unixTimeInSeconds"
					  			# default outputTimezone : UTC
							}
				  		}
			  		]
				}
		  		]
			}
	  	}
	  	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
				  		{
							findReplace {
					  			field : client_address
					  			pattern : "::1"
					  			isRegex : false
					  			replacement : "127.0.0.1"
					  			replaceFirst : false
							}
				  		}
				  		{
							findReplace {
					  			field : client_address
					  			pattern : "::ffff:"
					  			isRegex : false
					  			replacement : ""
				  				replaceFirst : false
							}
				  		}
					]
				}
		  		]
			}
	  	}
	  	{
	  		# test if the ip address used is a vpn or any other nat address
	  		MatchIP {
	  			ipAddress : "client_address"
	  			cidr : "192.168.0.22"
	  			output : "is_nat"
	  		}
	  	}
	  	{
			ParseKerberosTicketOptions {
				ticketOptionsField : ticket_options
				forwardableField : forwardable
				forwardedField : forwarded
				proxiedField : proxied
				postdatedField : postdated
				renewRequestField : renew_request
				constraintDelegationField : constraint_delegation
			}
		}
		{ 
			if { 
				conditions : [ 
					{ equals { isComputer : [false] } } 
				] 
				then : [
					{
						IpToHostname {
					    	ipAddress : client_address
					        timeStamp: timeGeneratedUnixTime
					        outputRecordName : machine_name
					        remove_last_dot : true
					        resolvers = ["logins", "dns"]
						}
			      	}
					{
						ClassifyHost {
							hostnameField : machine_name
							classificationField : src_class
						}
					}
					{
						GetComputerClusterName {
							hostnameField : machine_name
							clusterField : normalized_src_machine
						}
					}
					
					{
						SECNormalizeUsername {
							usernameField : account_name
							normalizedUsernameField : normalized_username
						}
					}
								
					{
						UserLastActivityUpdate {
							logEventsType : login
							normalizedUsernameField : normalized_username
							epochtimestampField : timeGeneratedUnixTime
						}
					}
					{
						IsUserServiceAccount {
							usernameField : normalized_username
							isUserServiceAccountField : isUserServiceAccount
						}
					}
					{
						IsUserAdministrator {
							usernameField : normalized_username
							isUserAdministratorField : isUserAdministrator
						}
					}
				] 
			} 
		}
	]
  }
]
