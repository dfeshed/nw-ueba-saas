morphlines: [
  {
    id: digitalGuardianParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]

    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      {
        split {
          inputField: message
          outputFields: ["", "", date_time, file_application, hostname, "", "", "", "", "", "", first_name, last_name, "", username, "", "", "", "", "", "", "", "", malware_scan_result, "", "", "", "", "", "", "", "", event_id, source_ip, "", "", "", "", event_description, "", "", "", was_blocked, was_classified, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", destination_path, destination_file_name, "", "", "", file_size, "", "", "", "", "", "", "", source_path, source_file_name, "", "", "", "", "", "", "", "", "", "", "", source_drive_type, "", destination_drive_type, "", "", "", "", "", "", ""]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logDebug {format: "Debug -2: {}", args: ["@{}"]}}

      //Filter events that don't have ALL the following fields
      {
        EmptyObjectFilter {
          filterFields: [date_time, event_description, event_id]
        }
      }

      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      //Filter Non File operations
      {
        if {
          conditions: [
            {not {contains {event_description: ["File Move", "File Copy", "File Delete", "File Recycle", "File Open"]}}}
          ]
          then: [
            {LogFilterEvent {errorMessage: "Not a File event"}}
            {
              dropRecord {}
            }
          ]
        }
      }

      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}

      #In case of destination file access event
      #     1.filter all the events that the destination_file_name is empty
      {
        if {
          conditions: [{contains {event_description: ["File Copy", "File Move", "File Recycle"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [destination_file_name, destination_path]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -5 : {}", args: ["@{}"]}}

      #In case of SOURCE  file access event
      #     1.filter all the events that the source_file_name is empty
      {
        if {
          conditions: [{contains {event_description: ["File Copy", "File Delete", "File Move", "File Recycle"]}}]
          then: [
            {
              EmptyObjectFilter {
                filterFields: [source_file_name, source_path]
              }
            }
          ]
        }
      }

      {logDebug {format: "Debug -6 : {}", args: ["@{}"]}}

      # remove the 'verdasys\r' prefix from the hostname field
      {
        findReplace {
          field: hostname
          pattern: "verdasys\r"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -7 : {}", args: ["@{}"]}}

      # remove the 'verdasys\r' prefix from the username field
      {
        findReplace {
          field: username
          pattern: "verdasys\r"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {logDebug {format: "Debug -8 : {}", args: ["@{}"]}}

      # initialize additional fields
      {
        setValues {
          full_name: ""
          normalized_username: ""
          normalized_src_machine: ""
          event_type: ""
          policy_name: ""
        }
      }

      {logDebug {format: "Debug -9 : {}", args: ["@{}"]}}

      # extract full_name field from first_name+last_name fields
      {
        java {
          imports: "import java.util.*;import org.apache.commons.lang.StringUtils;"
          code: """

                // calculate display name
                String firstName = (String)record.getFirstValue("first_name");
                String lastName =  (String)record.getFirstValue("last_name");

                String fullName = "";

                if(StringUtils.isNotEmpty(firstName) || StringUtils.isNotEmpty(lastName)){
                    fullName = firstName + " " + lastName;
                }

                record.replaceValues("full_name", fullName);

                return child.process(record);
                """
        }
      }

      {logDebug {format: "Debug -10 : {}", args: ["@{}"]}}

      // Mapping event_description to event_type
      {
        if{
          conditions: [
            {
              equals{
                event_description: [
                  "File Move"
                ]
              }
            }
          ]
          then: [
            {
              setValues{
                event_type: "move"
              }
            }
          ]
          else: [
            {
              if{
                conditions: [
                  {
                    equals{
                      event_description: [
                        "File Copy"
                      ]
                    }
                  }
                ]
                then: [
                  {
                    setValues{
                      event_type: "copy"
                    }
                  }
                ]
                else: [
                  {
                    if{
                      conditions: [
                        {
                          equals{
                            event_description: [
                              "File Delete"
                            ]
                          }
                        }
                      ]
                      then: [
                        {
                          setValues{
                            event_type: "delete"
                          }
                        }
                      ]
                      else: [
                        {
                          if{
                            conditions: [
                              {
                                equals{
                                  event_description: [
                                    "File Recycle"
                                  ]
                                }
                              }
                            ]
                            then: [
                              {
                                setValues{
                                  event_type: "recycle"
                                }
                              }
                            ]
                            else: [
                              {
                                if{
                                  conditions: [
                                    {
                                      equals{
                                        event_description: [
                                          "File Open"
                                        ]
                                      }
                                    }
                                  ]
                                    then: [
                                    {
                                      setValues{
                                        event_type: "open"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  }
]

