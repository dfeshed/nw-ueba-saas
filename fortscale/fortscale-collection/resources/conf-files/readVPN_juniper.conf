morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [	    
								{
									# filter only message containing "login succeeded" or "session started" in message, 
									# all other will be discarded in the dropRecord command bellow
									grok {
										findSubstrings : true
										addEmptyStrings : true
										numRequiredMatches : all
										expressions : {
											message : """(?<status>(login succeeded|Session started for user with IP))"""
										}
									}		  
								}			 
							]
						}
						
						{
							commands : [
								{
									dropRecord {}
								}				
							]
						}						
					]
				}
			}
	
	
			{
				if {
					conditions : [
						{ equals { status : [login succeeded] }}
					]
					then : [
						# handle agent login succeeded message and extract fields from it
						# get the source ip, time and user name from the login event
						# based on these we can get the hostname later on
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.juniper.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{USERNAME:username}|%{SOURCEIPORIPV6:source_ip}|%{DATESTAMPFULLYEAR:date_time}"
								}
							}
						}
						{
							EventsJoinerStore {
								keys : [ "source_ip", "username" ]
							}
						}
					]
					else : [
						# handle session started events, get the hostname from it
						# and correlated it to previous saved login succeeded event
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.juniper.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{USERNAME:username}|%{SOURCEIPORIPV6:source_ip}|%{LOCALIPORIPV6:local_ip}|%{HOSTNAME:hostname}|%{DATESTAMPFULLYEAR:date_time}"
								}
							}
						}
						{
							EventsJoinerMerge {
								keys : [ "source_ip", "username" ]
								mergeFields : [ "date_time" ]
								dropWhenNoMatch : true
							}
						}
						{
							setValues {
								status : ["SUCCESS"]
								date_time_unix: "@{date_time}"
							}
						}
					]
				}
			}
	
	
	
			
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestamp {
										field : date_time
										inputFormats : ["yyyy-MM-dd HH:mm:ss","yyyy/MM/dd HH:mm:ss"]
										inputTimezone : Asia/Jerusalem
										outputFormat : "yyyy-MM-dd HH:mm:ss"
										outputTimezone : Asia/Jerusalem
									}
								}
								
								{
									convertTimestamp {
										field : date_time_unix
										inputFormats : ["yyyy-MM-dd HH:mm:ss","yyyy/MM/dd HH:mm:ss"]
										inputTimezone : Asia/Jerusalem
										outputFormat : "unixTimeInSeconds"
										outputTimezone : UTC
									}
								}
							]
						}
						
						{
							commands : [
								{ logWarn { format : "Problem timeGenerated: {}", args : ["@{timeGenerated}"] } }
							]
						}
					]
				}
			}
	
			{
				Geolocation {
					ip_field : source_ip
					country_field : country
					region_field : region
					city_field : city
					isp_field : isp
					usage_type_field : ipusage
				}
			}
			
			{
				if {
					conditions : [
						{ equals { username : []  } }
					]
					then : [
						{ logWarn { format : "No username, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ dropRecord {} }
					]
				}
			}
		]
	}
]