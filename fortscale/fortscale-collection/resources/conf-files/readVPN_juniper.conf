morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]
		commands : [

			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [	    
								{
									grok {
										findSubstrings : true
										addEmptyStrings : true
										numRequiredMatches : all
										expressions : {
											message : """(?<status>(Session started for user with IP|Login failed using auth server))"""
										}
									}		  
								}			 
							]
						}
						
						{
							commands : [
								{
									dropRecord {}
								}				
							]
						}						
					]
				}
			}
	
			{
				if {
					conditions : [
						# if auth failed then		  
						{ equals  { status : [Login failed using auth server] } }
					]
					then : [
						{ logDebug { format : "AUTH_FAILED: {}", args : ["@{}"] } }    	  
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.juniper.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{USERNAME:username}|%{SOURCEIPORIPV6:source_ip}|%{DATESTAMPFULLYEAR:date_time}"
								}
							}		  
						}
						
						{
							setValues {
								status : ["FAIL"]
								date_time_unixTime: "@{date_time}"
							}
						}
					]					 
				}
			}	  
			
			{
				if {
					conditions : [
						# if auth success then
						{ equals  { status : [Session started for user with IP] } } 
					]
					then : [
						{ logDebug { format : "AUTH SUCCESS: {}", args : ["@{}"] } }    	  
						{
							grok {
								dictionaryFiles : [resources/grok-dictionaries/vpn.juniper.conf]
								findSubstrings : true
								addEmptyStrings : true
								numRequiredMatches : all
								expressions : {
									message : "%{USERNAME:username}|%{SOURCEIPORIPV6:source_ip}|%{LOCALIPORIPV6:local_ip}|%{HOSTNAME:host_name}|%{DATESTAMPFULLYEAR:date_time}"
								}
							}		  
						}
						
						{
							setValues {
								status : ["SUCCESS"]
								date_time_unixTime: "@{date_time}"
							}
						}
					]					 
				}
			}
			
			{
				tryRules {
					catchExceptions : true
					throwExceptionIfAllRulesFailed : false
					rules : [
						{
							commands : [
								{
									convertTimestamp {
										field : date_time
										inputFormats : ["yyyy-MM-dd HH:mm:ss","yyyy/MM/dd HH:mm:ss"]
										outputFormat : "yyyy-MM-dd HH:mm:ss"
									}
								}
								
								{
									convertTimestamp {
										field : date_time_unixTime
										inputFormats : ["yyyy-MM-dd HH:mm:ss","yyyy/MM/dd HH:mm:ss"]
										outputFormat : "unixTimeInSeconds"
									}
								}
							]
						}
						
						{
							commands : [
								{ logWarn { format : "Problem timeGenerated: {}", args : ["@{timeGenerated}"] } }
							]
						}
					]
				}
			}
	
			{
				Geolocation {
					input_record_name : source_ip
					output_record_name : country_name
				}
			}
			
			{
				if {
					conditions : [
						{ equals { username : []  } }
					]
					then : [
						{ logWarn { format : "No username, Drop the record. Original message was: {}", args : ["@{message}"] } }
						{ dropRecord {} }
					]
				}
			}
	
			{ logDebug { format : "output record: {}", args : ["@{}"] } }
		]
	}
]