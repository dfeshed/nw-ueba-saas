morphlines: [
  {
    id: ntlmParsing
    importCommands: ["org.kitesdk.morphline.**", "org.apache.solr.**", "fortscale.collection.morphlines.**"]
    commands: [

      {logDebug {format: "Debug -1 : {}", args: ["@{}"]}}

      # parse the raw message, extract all fields from the message, assuming the following format:
      # _time ,Logon_Account, Error_Code , Source_Workstation, ComputerName
      # "2015-12-10T05:43:11.000+0200",esm,0x0,MCAFEE,"Fs-DC-01.Fortscale.dom"
      {
        split {
          inputField: message
          outputFields: [date_time, username, failure_code, hostname, computer_name]
          separator: ","
          isRegex: false
          addEmptyStrings: true
          trim: true
        }
      }

      {logDebug {format: "Debug -2 : {}", args: ["@{}"]}}


      {
        EmptyObjectFilter {
          filterFields: [date_time, username, failure_code]
        }
      }

      #filter hostname as ip
      {
          java {
            imports: "import sun.net.util.IPAddressUtil;import java.util.*;"
            code: """
                String hostname = (String) record.getFirstValue("hostname");
                try{
                    if (hostname != null) {
                        boolean isIP = IPAddressUtil.isIPv4LiteralAddress(hostname) || IPAddressUtil.isIPv6LiteralAddress(hostname);
                        if(isIP)
                        {
                            record.put("hostAsIp","1");
                        }
                    }
                }
                catch(Exception e){}
                return child.process(record);
                """
          }
      }


      {
        if {

                conditions: [{equals {hostAsIp: ["1"]}}]
                then: [
                        {logInfo {format: "Record contain hostname as IP - not supported: {}", args: ["@{}"]}}
                        {LogFilterEvent {errorMessage: "Record contain hostname as IP - not supported"}}
                       {
                         dropRecord {}
                       }
               ]
        }
      }


      {
       toLower: {field:"failure_code"}
      }
      {logDebug {format: "Debug -3 : {}", args: ["@{}"]}}

      {
        findReplace {
          field: date_time
          pattern: "\""
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }
      {
        findReplace {
          field: username
          pattern: "\""
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }
      {
        findReplace {
          field: failure_code
          pattern: "\""
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }

      {
        findReplace {
          field: hostname
          pattern: "\""
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }
      {
        findReplace {
          field: hostname
          pattern: "\\"
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }
      {
        findReplace {
          field: computer_name
          pattern: "\""
          isRegex: false
          replacement: ""
          replaceFirst: false
        }
      }
      {logDebug {format: "Debug -4 : {}", args: ["@{}"]}}
      {
        DcServiceFilter {
          fieldName: hostname
        }
      }
    ]
  }
]
