morphlines : [
	{
		id : morphline1
		importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**","fortscale.collection.morphlines.**"]

		commands : [
	  	{
			tryRules {
		  		catchExceptions : true
		  		throwExceptionIfAllRulesFailed : false
		  		rules : [
				{
			  		commands : [
	  				{
						grok {
		  					dictionaryString : """
								ACCOUNT_NAME ((?<=Account Name:\s)|(?<=Account Name:\s\s))[\w\S ]+
							  	ACCOUNT_DOMAIN ((?<=Account Domain:\s)|(?<=Account Domain:\s\s))[\w\S ]+
								SERVICE_NAME ((?<=Service Name:\s)|(?<=Service Name:\s\s))[\w\S ]+
								SERVICE_ID ((?<=Service ID:\s)|(?<=Service ID:\s\s))[\w\S ]+
								CLIENT_ADDRESS ((?<=Client Address:\s)|(?<=Client Address:\s\s))[\w\S ]+
								TICKET_OPTIONS ((?<=Ticket Options:\s)|(?<=Ticket Options:\s\s))[\w\S ]+
								FAILURE_CODE ((?<=Failure Code:\s)|(?<=Failure Code:\s\s))[\w\S ]+
								SOURCE_NETWORK_ADDRESS ((?<=Source Network Address:\s)|(?<=Source Network Address:\s\s))[\w\S ]+
								 """
		  					findSubstrings : true
						  	addEmptyStrings : true
						  	numRequiredMatches : all
						  	expressions : {
								message : "%{ACCOUNT_NAME:account_name}|%{ACCOUNT_DOMAIN:account_domain}|%{SERVICE_NAME:service_name}|%{SERVICE_ID:service_id}|%{CLIENT_ADDRESS:client_address}|%{TICKET_OPTIONS:ticket_options}|%{FAILURE_CODE:failure_code}|%{SOURCE_NETWORK_ADDRESS:source_network_address}"
						  	}
						}
      				}
			  		]
				}
				]
			}
		}
		{
			tryRules {
				catchExceptions : true
				throwExceptionIfAllRulesFailed : false
				rules : [
				{
					commands : [
						{
							findReplace {
					  			field : client_address
					  			pattern : "::1"
					  			isRegex : false
					  			replacement : "127.0.0.1"
					  			replaceFirst : false
							}
				  		}
				  		{
							findReplace {
					  			field : client_address
					  			pattern : "::ffff:"
					  			isRegex : false
					  			replacement : ""
				  				replaceFirst : false
							}
				  		}
					]
				}
		  		]
			}
	  	}
		{
			if {
				conditions : [
					{ not {equals { account_name : [] } } }
					{ not {equals { service_name : [] } } }
					{ not {equals { client_address : [] } } }
				]
				then : []
				else : [
					{ logDebug { format : "Record does not contain either AccountName, CliendAddress or ServiceName field, Drop the record. Original message was: {}", args : ["@{message}"] } }
					{ dropRecord {} }				
				]
			}
		}

      	{
			GetHostnameFromDHCP {
		    	ipAddress : client_address
		        timeStamp: timeGeneratedUnixTime
		        outputRecordName : client_hostname
		        host : "127.0.0.1"
		        port : 27017
		        db: "fortscale"
		        collection : "dhcp_log"
		        leaseTimeInMins : 2880
			}
		}
		{
			if {
				conditions : [
					# if client_hostname empty then
					{ equals  { client_hostname : [""] } }
				]
				then : [
				{
					GetHostnameFromDNS {
						ip_address : client_address
						output_record_name : client_hostname
						remove_last_dot : true
					}
				}
				]
			}
		}
		]
	}
]