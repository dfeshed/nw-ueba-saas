{
  "AggregatedFeatureEvents": [
    {
      "name": "highest_date_time_score_dlpfile_daily",
      "type": "P",
      "bucketConfName": "highest_date_time_score_normalized_username_dlpfile_daily",
      "numberOfBuckets": 1,
      "bucketsLeap": 1,
      "aggregatedFeatureNamesMap": {
        "pick": [
          "highest_date_time_score"
        ]
      },
      "aggregatedFeatureEventFunction": {
        "type": "aggr_feature_map_values_max_sum_func"
      }
    },
    {
      "name": "sum_of_highest_normalized_src_machine_scores_dlpfile_daily",
      "type": "P",
      "bucketConfName": "normalized_src_machine_to_highest_score_map_normalized_username_dlpfile_daily",
      "numberOfBuckets": 1,
      "bucketsLeap": 1,
      "aggregatedFeatureNamesMap": {
        "pick": [
          "normalized_src_machine_to_highest_score_map"
        ]
      },
      "aggregatedFeatureEventFunction": {
        "type": "aggr_feature_map_values_max_sum_func",
        "includeValues": true,
        "minScoreToInclude": 1,
        "pattern": "[0-9]",
        "replacement": "",
        "postCondition": "(.*[a-zA-Z]){5}.*"
      }
    },
    {
      "name": "highest_date_time_score_dlpfile_hourly",
      "type": "P",
      "bucketConfName": "highest_date_time_score_normalized_username_dlpfile_hourly",
      "numberOfBuckets": 1,
      "bucketsLeap": 1,
      "aggregatedFeatureNamesMap": {
        "pick": [
          "highest_date_time_score"
        ]
      },
      "aggregatedFeatureEventFunction": {
        "type": "aggr_feature_map_values_max_sum_func"
      }
    },
    {
      "name": "sum_of_highest_normalized_src_machine_scores_dlpfile_hourly",
      "type": "P",
      "bucketConfName": "normalized_src_machine_to_highest_score_map_normalized_username_dlpfile_hourly",
      "numberOfBuckets": 1,
      "bucketsLeap": 1,
      "aggregatedFeatureNamesMap": {
        "pick": [
          "normalized_src_machine_to_highest_score_map"
        ]
      },
      "aggregatedFeatureEventFunction": {
        "type": "aggr_feature_map_values_max_sum_func",
        "includeValues": true,
        "minScoreToInclude": 1,
        "pattern": "[0-9]",
        "replacement": "",
        "postCondition": "(.*[a-zA-Z]){5}.*"
      }
    }
  ]
}