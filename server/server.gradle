subprojects {
    apply plugin: "checkstyle"
    apply plugin: "findbugs"
    apply plugin: "jacoco"
    apply plugin: "java"
    apply plugin: "spring-boot"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        buildCommit = "git rev-list HEAD --count".execute().text
        buildChangeSet = "git rev-parse --short HEAD".execute().text
        buildDate = new Date().toString()
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("${buildDir}/classes/main/")
        }
    }

    springBoot {
        executable = true
        backupSource = false
    }

    jar {
        archiveName = "sa-ui-${project.name}.jar"
    }

    bootRun {
        systemProperties = System.properties

        // When running locally, skip all findbugs and checkstyle tasks for improved startup time
        gradle.taskGraph.whenReady { graph ->
            graph.getAllTasks().each { task ->
                if (task.name == "run" || task.name == "bootRun") {
                    tasks.matching({ it.name.startsWith("findbugs") ||
                        it.name.startsWith("checkstyle") ||
                        it.name.startsWith("test")}).each {
                        it.enabled = false
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url "https://repo1.rsa.lab.emc.com:8443/artifactory/asoc-build-repo"
        }
        maven {
            url "http://repo.springsource.org/milestone/"
        }
    }

    dependencies {
        // Since Spring Boot's ResolutionStrategy overrides transient dependency versions for any "blessed"
        // module, we have to explicitly define these in our project.  Once CARLOS transport is upgraded,
        // these can be removed.
        compile("org.apache.activemq:activemq-client:5.8.0")
        compile("org.apache.activemq:activemq-broker:5.8.0")
        compile("org.apache.activemq:activemq-openwire-legacy:5.8.0")
        compile("org.apache.activemq:activemq-pool:5.8.0")

        testCompile(libraries.starter_test)
        testCompile(libraries.jsonpath)
        testCompile(libraries.junit)
        testCompile(libraries.mockito)
    }

    processResources {
        from(sourceSets.main.resources) {
            include "**/*.yml"
            expand project.properties
        }
    }

    checkstyle {
        toolVersion = "6.11.2"
        configFile = file("${project(':server').projectDir}/checkstyle.xml")
    }

    findbugs {
        toolVersion = "3.0.1"
    }
    findbugsMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
    findbugsTest {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    jacoco {
        toolVersion = "0.7.4.201502262128"
    }
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/config/**', // Spring @Configuration classes
                        '**/common/data/**', // Data request/response POJOs
                        '**/domain/bean/**', // Domain POJOs
                ])
            })
        }
    }
}
