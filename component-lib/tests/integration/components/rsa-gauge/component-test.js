import { moduleForComponent, test } from 'ember-qunit';
import hbs from 'htmlbars-inline-precompile';

moduleForComponent('/rsa-gauge', 'Integration | Component | rsa-gauge', {
  integration: true
});

test('it renders', function(assert) {
  this.render(hbs `{{rsa-gauge}}`);
  assert.ok(this.$('svg')[0]);
});

test('it does not rotate for a value of 0', function(assert) {
  this.render(hbs `{{rsa-gauge value=0}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(0)');
});

test('it rotates halfway for a value of 0.5', function(assert) {
  this.render(hbs `{{rsa-gauge value=0.5}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(135)');
});

test('it rotates all the way for a value of 1', function(assert) {
  this.render(hbs `{{rsa-gauge value=1}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(270)');
});

test('it animates over time by default', function(assert) {
  const done = assert.async(1);
  this.set('value', 0);
  this.render(hbs `{{rsa-gauge value=value}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(0)');
  this.set('value', 1);
  assert.notEqual(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(270)');
  setTimeout(() => {
    assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(270)');
    done();
  }, 600);
  // The animation is 500ms long, but timers can be inexact, so add 100ms to be safe.
});

test('it rotates instantly when animate is false', function(assert) {
  this.set('value', 0);
  this.render(hbs `{{rsa-gauge value=value animate=false}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(0)');
  this.set('value', 1);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(270)');
});

test('it accepts a percentage string in value', function(assert) {
  this.render(hbs `{{rsa-gauge value="50%" animate=false}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(135)');
});

test('it shows a percentage text by default', function(assert) {
  this.render(hbs `{{rsa-gauge value=1}}`);
  assert.equal(this.$('.gauge-value-text').text().trim(), '100.0%');
});

test('it displays the label passed to it', function(assert) {
  this.render(hbs `{{rsa-gauge value=1 label="Foo"}}`);
  assert.equal(this.$('.gauge-label-text').text().trim(), 'Foo');
});

test('it does not display value text if showValue is false', function(assert) {
  this.render(hbs `{{rsa-gauge value=1 showValue=false}}`);
  assert.notOk(this.$('.gauge-value-text')[0]);
});

test('it uses custom display text if passed', function(assert) {
  this.render(hbs `{{rsa-gauge value=0.5 display="50 MB/s"}}`);
  assert.equal(this.$('.gauge-value-text').text().trim(), '50 MB/s');
});

test('it produces the correct number of ticks', function(assert) {
  this.render(hbs `{{rsa-gauge value=0.5}}`);
  assert.equal(this.$('.gauge-ticks').length, 6);
});

test('the number of ticks can be changed', function(assert) {
  this.render(hbs `{{rsa-gauge value=0.5 numTicks=10}}`);
  assert.equal(this.$('.gauge-ticks').length, 10);
});

test('start/end angles can be changed', function(assert) {
  this.setProperties({
    a: Math.PI * (-1 / 2),
    b: Math.PI * (1 / 2)
  });
  this.render(hbs `{{rsa-gauge value=0.5 arcStartAngle=a arcEndAngle=b}}`);
  assert.equal(this.$('.gauge-needle-body').attr('transform'), 'translate(100,100) rotate(90)');
  // This is the path data for a half arc generated by the component
  assert.equal(this.$('.gauge-arc').attr('d'), 'M-80,-9.797174393178826e-15A80,80,0,1,1,80,0L76,0A76,76,0,1,0,-76,-9.307315673519884e-15Z');
});
