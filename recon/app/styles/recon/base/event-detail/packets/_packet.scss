.rsa-packet {
  border-top: 1px rsa-color(blue) solid;

  &:first-of-type {
    border-top: none;
  }

  &.is-continuation {
    border-top: none;
    .request-response-header {
      display: none;
    }
    .packet-details {
      margin-top: 0;
    }
  }

  &__header,
  &.rsa-text-entry {
    background-color: rsa-color(gray, dark, $rsa-transparent);
    border-color: $dark-border-color-medium;
    color: $dark-fg-color;
    padding: 6px rsa-whitespace();
    position: relative;
    min-height: 2rem;

    h3 {
      color: rsa-color(white);
    }

    &.is-sticky {

      // Have to pick an opaque color that matches
      // rsa-color(gray, dark, $rsa-transparent)
      // No color exists in our palette like this,
      // So have to make it up.
      // TODO for later? Maybe don't depend on
      // transparencies to get the color we want?
      &.request {
        background-color:rgb(34,41,45);
      }
      &.response {
        background-color: rgb(30,34,36);
      }

      border-top: none;

      // avoid overlapping scrollbar
      margin-right: 1rem;
      z-index: 1000;
    }

    &::before {
      border: 1pt solid $dark-border-color-medium;
      background-color: $dark-bg-color;
    }

    &.request-response-header,
    .request-response-header {
      color: rsa-color(blue);

      .rsa-icon {
        padding-right: rsa-whitespace(less);
      }

      .text {
        @include rsa-font(header, small);
        font-size: 0.85rem;
        letter-spacing: 1px;
      }
    }

    .toggle-icon {
      min-width: 20px;
    }

    .response {
      text-align: right;
    }

    .packet-details {
      @include rsa-font(body, small);
      padding: rsa-whitespace(less) 0;
      text-transform: capitalize;
      margin-top: rsa-whitespace();
      .label {
        @include rsa-font(header, small);
        color: rsa-color(gray, light);
        margin-right: rsa-whitespace(least);
      }
      .rsa-icon {
        font-size: 0.85rem;
        padding-left: 0.1rem;
        padding-right: 0.3rem;
        &:hover {
          cursor: pointer;
        }
      }
      .text {
        @include rsa-font(body);
        margin-left: rsa-whitespace(least);
      }
    }
  }

  &__body {
    @include rsa-row(justify,fill);
    background-color: rsa-color(gray, dark, $rsa-transparent);
    color: $dark-fg-hover-color;
    font-size: 0.85rem;
    padding: 0px rsa-whitespace() rsa-whitespace(least) 0px;
  }

  &__offsets {
    width: $packet-offsets-width;
    @include rsa-vendor-prefix(flex-basis, $packet-offsets-width);
    @include rsa-vendor-prefix(flex-shrink, 0);

    &.hex {
      td {
        padding-left: 2.75rem;
      }
    }

    &.ascii {
      margin-left: rsa-whitespace();
      td {
        text-align: left;
      }
    }
  }

  &__hex {
    @include rsa-vendor-prefix(flex-basis, 66%);
    @include rsa-vendor-prefix(flex-shrink, 1);
    @include rsa-vendor-prefix(flex-grow, 1);
    margin-right: rsa-whitespace();
  }

  &__ascii {
    @include rsa-vendor-prefix(flex-basis, 33%);
    @include rsa-vendor-prefix(flex-shrink, 1);
  }

  &.request {
    background-color: rsa-color(gray, darkest, $rsa-transparent);
    .rsa-packet {
      &__header {
        &::before {
          transform: rotate(45deg);
        }
      }
    }
  }

  &.response {
    background-color: rsa-color(gray, darkest, $rsa-translucent);
    .rsa-packet {
      &__header {
        &::before {
          transform: rotate(225deg);
        }
      }
    }
  }
}

.buffered {
  .rsa-packet {
    &__ascii {
      display: none;
    }
  }
}
