/**
 * @file Grid layouts
 * Mixins for laying out UI elements using flexbox.
 */

/*
    Applies a flexbox layout and direction to a container element.
    Determines which axis is the main axis, horizontal ("row") or vertical ("column").
*/
@mixin rsa-flex-direction($direction) {
    display: -ms-flexbox;
    -ms-flex-direction: $direction;
    display: -moz-flex;
    -moz-flex-direction: $direction;
    display: -webkit-flex;
    -webkit-flex-direction: $direction;
    display: flex;
    flex-direction: $direction;
}

/*
    Applies a flexbox justify-content to a container element.
    Determines how children are aligned along the main axis.
*/
@mixin rsa-flex-justify-content($justify) {
    -ms-justify-content: $justify;
    -ms-flex-pack: if($justify == space-between,justify,$justify);
    -moz-justify-content: $justify;
    -webkit-justify-content: $justify;
    justify-content: $justify;
}

/*
    Applies a flexbox align-items to a container element.
    Determines how children are aligned along the cross axis.
*/
@mixin rsa-flex-align-items($align){
    -ms-flex-align: $align;
    @include rsa-vendor-prefix(align-items,$align);
}

@mixin rsa-col($halign, $valign) {
    @include rsa-flex-direction(column);

    @if $halign == "left" {
        @include rsa-flex-align-items(flex-start);
    }
    @if $halign == "right" {
        @include rsa-flex-align-items(flex-end);
    }
    @if $halign == "center" {
        @include rsa-flex-align-items(center);
    }
    @if $halign == "justify" {
        @include rsa-flex-align-items(stretch);
    }

    @if $valign == "top" {
        @include rsa-flex-justify-content(flex-start);
    }
    @if $valign == "bottom" {
        @include rsa-flex-justify-content(flex-end);
    }
    @if $valign == "middle" {
        @include rsa-flex-justify-content(center);
    }
    @if $valign == "fill" {
        @include rsa-flex-justify-content(space-between);
    }
}

@mixin rsa-row($halign, $valign) {
    @include rsa-flex-direction(row);

    @if $halign == "left" {
        @include rsa-flex-justify-content(flex-start);
    }
    @if $halign == "right" {
        @include rsa-flex-justify-content(flex-end);
    }
    @if $halign == "center" {
        @include rsa-flex-justify-content(center);
    }
    @if $halign == "justify" {
        @include rsa-flex-justify-content(space-between);
    }

    @if $valign == "top" {
        @include rsa-flex-align-items(flex-start);
    }
    @if $valign == "bottom" {
        @include rsa-flex-align-items(flex-end);
    }
    @if $valign == "middle" {
        @include rsa-flex-align-items(center);
    }
    @if $valign == "fill" {
        @include rsa-flex-align-items(stretch);
    }
}


/*
    Lays out a header/section/footer column using absolute positioning, for when the header & footer heights
    are fixed and known, and the section has auto scrolling enabled.
    Absolute positioning may be more reliable than flexbox when you have a scrolling area.
*/
@mixin rsa-vertical-triplet($header-height, $footer-height, $overflow: auto) {
    > header,
    > section,
    > footer {
        position: absolute;
        left: 0;
        right: 0;
    }

    /* Positions the header at the top, with a fixed height. */
    > header {
        top: 0;
        height: $header-height;
    }

    /* Positions the main section below the header. */
    > section {
        top: $header-height;
        bottom: $footer-height;
        overflow: $overflow;
    }

    /* Positions the footer at the bottom, with a fixed height. */
    > footer {
        bottom: 0;
        height: $footer-height;
    }
}
